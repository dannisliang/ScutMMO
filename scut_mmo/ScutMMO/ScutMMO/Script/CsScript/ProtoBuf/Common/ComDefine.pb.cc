// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/ComDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Common/ComDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::EnumDescriptor* PROTOCOL_VERSION_UPPER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PROTOCOL_VERSION_LOWER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PingConfig_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECharacterSex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERace_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECharacterProf_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AttributeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SceneType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPackageLabel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EArg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMailTradingSellType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMODULE_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Common_2fComDefine_2eproto() {
  protobuf_AddDesc_Common_2fComDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Common/ComDefine.proto");
  GOOGLE_CHECK(file != NULL);
  PROTOCOL_VERSION_UPPER_descriptor_ = file->enum_type(0);
  PROTOCOL_VERSION_LOWER_descriptor_ = file->enum_type(1);
  PingConfig_descriptor_ = file->enum_type(2);
  ECharacterSex_descriptor_ = file->enum_type(3);
  ERace_descriptor_ = file->enum_type(4);
  ECharacterProf_descriptor_ = file->enum_type(5);
  CurrencyType_descriptor_ = file->enum_type(6);
  AttributeType_descriptor_ = file->enum_type(7);
  SceneType_descriptor_ = file->enum_type(8);
  SamplePolyFlags_descriptor_ = file->enum_type(9);
  MapDefine_descriptor_ = file->enum_type(10);
  REGION_DEFINE_descriptor_ = file->enum_type(11);
  CharacterDefine_descriptor_ = file->enum_type(12);
  EPackageLabel_descriptor_ = file->enum_type(13);
  EQuality_descriptor_ = file->enum_type(14);
  EEquipPos_descriptor_ = file->enum_type(15);
  EArg_descriptor_ = file->enum_type(16);
  EMailType_descriptor_ = file->enum_type(17);
  EMailTradingSellType_descriptor_ = file->enum_type(18);
  ERetCode_descriptor_ = file->enum_type(19);
  EMODULE_ID_descriptor_ = file->enum_type(20);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Common_2fComDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_Common_2fComDefine_2eproto() {
}

void protobuf_AddDesc_Common_2fComDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026Common/ComDefine.proto\022\010ProtoBuf*6\n\026PR"
    "OTOCOL_VERSION_UPPER\022\034\n\030PROTOCOL_VERSION"
    "_CURRENT\020\001*:\n\026PROTOCOL_VERSION_LOWER\022 \n\034"
    "PROTOCOL_VERSION_LOWER_LIMIT\020\001*D\n\nPingCo"
    "nfig\022\030\n\024CLIENT_PING_INTERVAL\020\t\022\030\n\024SERVER"
    "_PING_INTERVAL\020\t\032\002\020\001*A\n\rECharacterSex\022\026\n"
    "\022ECHARACTER_SEX_MAN\020\001\022\030\n\024ECHARACTER_SEX_"
    "FEMAL\020\002*)\n\005ERace\022\017\n\013ERace_Human\020\001\022\017\n\013ERa"
    "ce_Fairy\020\002*\205\001\n\016ECharacterProf\022\033\n\027ECHARAC"
    "TER_PROF_WARRIOR\020\001\022\034\n\030ECHARACTER_PROF_AS"
    "SASSIN\020\002\022\034\n\030ECHARACTER_PROF_MAGICIAN\020\003\022\032"
    "\n\026ECHARACTER_PROF_ARCHER\020\004*\230\001\n\014CurrencyT"
    "ype\022\027\n\023VALUE_CURRENCY_NULL\020\000\022\031\n\025VALUE_CU"
    "RRENCY_SILVER\020\001\022\027\n\023VALUE_CURRENCY_GOLD\020\002"
    "\022\034\n\030VALUE_CURRENCY_BIND_GOLD\020\003\022\035\n\031VALUE_"
    "CURRENCY_REPUTATION\020\005*R\n\rAttributeType\022\022"
    "\n\016BASE_ATTRIBUTE\020\000\022\023\n\017EQUIP_ATTRIBUTE\020\001\022"
    "\030\n\024ATTRIBUTE_TYPE_COUNT\020\002*\266\001\n\tSceneType\022"
    "\023\n\017SCENE_TYPE_NULL\020\000\022\023\n\017SCENE_TYPE_CITY\020"
    "\001\022\024\n\020SCENE_TYPE_FIELD\020\002\022\024\n\020SCENE_TYPE_AR"
    "ENA\020\004\022\036\n\032SCENE_TYPE_SINGLE_INSTANCE\020\010\022\035\n"
    "\031SCENE_TYPE_MULTI_INSTANCE\020\020\022\024\n\020SCENE_TY"
    "PE_LOGIN\020\021*\301\001\n\017SamplePolyFlags\022\031\n\025SAMPLE"
    "_POLYFLAGS_WALK\020\001\022\031\n\025SAMPLE_POLYFLAGS_SW"
    "IM\020\002\022\"\n\036SAMPLE_POLYFLAGS_FORBIT_ACROSS\020\004"
    "\022\031\n\025SAMPLE_POLYFLAGS_DOOR\020\010\022\035\n\031SAMPLE_PO"
    "LYFLAGS_DISABLED\020\020\022\032\n\024SAMPLE_POLYFLAGS_A"
    "LL\020\377\377\003*Z\n\tMapDefine\022\022\n\rMAX_NAV_POLYS\020\200\002\022"
    "\030\n\023MAX_NAV_POINT_VALUE\020\200\006\022\033\n\027INVALID_NAV"
    "MESH_POLYREF\020\000\032\002\020\001*H\n\rREGION_DEFINE\022\030\n\024D"
    "EFAULT_REGION_WIDTH\020\022\022\031\n\025DEFAULT_REGION_"
    "HEIGHT\020\022\032\002\020\001*s\n\017CharacterDefine\022\036\n\032MAX_C"
    "REATE_CHARACTER_COUNT\020\003\022\035\n\031CHARACTER_NAM"
    "E_MIN_LENGTH\020\006\022\035\n\031CHARACTER_NAME_MAX_LEN"
    "GTH\020 \032\002\020\001*\252\001\n\rEPackageLabel\022\026\n\022EPackageL"
    "abel_none\020\000\022\027\n\023EPackageLabel_daily\020\001\022\032\n\026"
    "EPackageLabel_material\020\002\022\026\n\022EPackageLabe"
    "l_task\020\003\022\027\n\023EPackageLabel_equip\020\004\022\027\n\023EPa"
    "ckageLabel_limit\020\005\032\002\020\001*\252\001\n\010EQuality\022\021\n\rE"
    "Quality_none\020\000\022\022\n\016EQuality_white\020\001\022\022\n\016EQ"
    "uality_green\020\002\022\021\n\rEQuality_blue\020\003\022\023\n\017EQu"
    "ality_purple\020\004\022\021\n\rEQuality_gold\020\005\022\020\n\014EQu"
    "ality_red\020\006\022\022\n\016EQuality_limit\020\007\032\002\020\001*\303\002\n\t"
    "EEquipPos\022\022\n\016EEquipPos_none\020\000\022\024\n\020EEquipP"
    "os_weapon\020\001\022\025\n\021EEquipPos_clothes\020\002\022\023\n\017EE"
    "quipPos_cloak\020\003\022\022\n\016EEquipPos_boot\020\004\022\026\n\022E"
    "EquipPos_necklace\020\005\022\022\n\016EEquipPos_ring\020\006\022"
    "\024\n\020EEquipPos_bracer\020\007\022\026\n\022EEquipPos_talis"
    "man\020\010\022\025\n\021EEquipPos_fashion\020\t\022\022\n\016EEquipPo"
    "s_wing\020\n\022\025\n\021EEquipPos_ring_ex\020\013\022\027\n\023EEqui"
    "pPos_bracer_ex\020\014\022\023\n\017EEquipPos_limit\020\r\032\002\020"
    "\001*\331\005\n\004EArg\022\031\n\022EArg_DefSweepCount\020\241\326\204>\022\031\n"
    "\022EArg_SweepOnePrice\020\242\326\204>\022\031\n\022EArg_SweepTe"
    "nPrice\020\243\326\204>\022\031\n\022EArg_SecdFlopPrice\020\244\326\204>\022\032"
    "\n\023EArg_ThirdFlopPrice\020\245\326\204>\022\033\n\024EArg_Fourt"
    "hFlopPrice\020\246\326\204>\022\031\n\022EArg_DeputyCollSec\020\247\326"
    "\204>\022\030\n\021EArg_DigHolePrice\020\250\326\204>\022\"\n\033EArg_Pub"
    "lishCampNoticePrice\020\251\326\204>\022\034\n\025EArg_Charact"
    "erEyeShot\020\252\326\204>\022\036\n\027EArg_CharLvlUpAutoPoin"
    "t\020\253\326\204>\022\035\n\026EArg_DeputySkillMaxLvl\020\254\326\204>\022!\n"
    "\032EArg_DeputyEveryRestEnergy\020\255\326\204>\022\037\n\030EArg"
    "_DeputyCanSpeeupTime\020\256\326\204>\022 \n\031EArg_Deputy"
    "MakeContriCost\020\257\326\204>\022\036\n\027EArg_DeputyMakeGo"
    "ldCost\020\260\326\204>\022\034\n\025EArg_DeputyMakeAddExp\020\261\326\204"
    ">\022\025\n\016EArg_pkRedLine\020\262\326\204>\022\026\n\017EArg_maxPkVa"
    "lue\020\263\326\204>\022 \n\031EArg_subPkValueTenMinutes\020\264\326"
    "\204>\022\033\n\024EArg_stoneSubPkValue\020\265\326\204>\022\031\n\022EArg_"
    "attackRedTime\020\266\326\204>\022\021\n\nEArg_hpRed\020\267\326\204>\022\031\n"
    "\022EArg_levelCannotPk\020\270\326\204>\022\027\n\020EArg_RevertH"
    "P_MA\020\276\326\204>\032\002\020\001*u\n\tEMailType\022\024\n\020MAIL_TYPE_"
    "NORMAL\020\001\022\023\n\017MAIL_TYPE_TRADE\020\002\022\024\n\020MAIL_TY"
    "PE_SYSTEM\020\003\022\021\n\rMAIL_TYPE_PAY\020\004\022\024\n\020MAIL_T"
    "YPE_RETURN\020\005*|\n\024EMailTradingSellType\022\037\n\033"
    "MAIL_TRADING_SELL_TYPE_NONE\020\000\022\037\n\033MAIL_TR"
    "ADING_SELL_TYPE_GOLD\020\001\022\"\n\036MAIL_TRADING_S"
    "ELL_TYPE_DIAMOND\020\002*\262,\n\010ERetCode\022\017\n\013RET_S"
    "UCCESS\020\000\022\014\n\010RET_FAIL\020\001\022\022\n\016RET_LEVEL_LACK"
    "\020\002\022\022\n\016RET_MONEY_LACK\020\003\022\021\n\rRET_GOLD_LACK\020"
    "\004\022\026\n\022RET_BIND_GOLD_LACK\020\005\022\024\n\020RET_DIAMOND"
    "_LACK\020\006\022\031\n\025RET_BIND_DIAMOND_LACK\020\007\022\026\n\022RE"
    "T_VIP_LEVEL_LACK\020\010\022\037\n\033RET_LOGIN_BAD_USER"
    "_NAME_LEN\020d\022!\n\035RET_LOGIN_CHARACTER_NOT_E"
    "XITS\020e\022!\n\035RET_LOGIN_ACCOUNT_OTHER_LOGIN\020"
    "f\022!\n\035RET_LOGIN_CHARACTER_NUM_LIMIT\020g\022#\n\037"
    "RET_LOGIN_CHARACTER_NAME_EXISTS\020h\022!\n\035RET"
    "_LOGIN_CHARACTER_SEX_ERROR\020i\022\"\n\036RET_LOGI"
    "N_CHARACTER_PROF_ERROR\020j\022&\n\"RET_LOGIN_CH"
    "ARACTER_NAME_LEN_ERROR\020k\022%\n!RET_LOGIN_CH"
    "ARACTER_CREATE_FAILED\020l\022\032\n\025RET_SKILL_USE"
    "_MP_LACK\020\310\001\022!\n\034RET_SCENE_ALREADY_IN_DST_"
    "MAP\020\254\002\022\036\n\031RET_SCENE_TIMEOUT_LOADMAP\020\255\002\022\036"
    "\n\031RET_SCENE_SCENCE_NOT_EXIT\020\256\002\022\036\n\031RET_SC"
    "ENE_INSCENE_SUCCESS\020\257\002\022!\n\034RET_PACKAGE_SP"
    "ACE_NOT_ENOUGH\020\220\003\022\037\n\032RET_PACKAGE_ITEM_NO"
    "T_EXITS\020\221\003\022\"\n\035RET_PACKAGE_ITEM_CAN_NOT_S"
    "ELL\020\222\003\022\036\n\031RET_PACKAGE_ITEM_NUM_LACK\020\223\003\022!"
    "\n\034RET_PACKAGE_ITEM_CAN_NOT_USE\020\224\003\022\'\n\"RET"
    "_PACKAGE_ITEM_CAN_NOT_BATCH_USE\020\225\003\022\035\n\030RE"
    "T_PACKAGE_EXPAND_LIMIT\020\226\003\022$\n\037RET_PACKAGE"
    "_ITEM_FUNC_PARAM_ERR\020\227\003\022\035\n\030RET_PACKAGE_S"
    "ORT_IN_COOL\020\230\003\022$\n\037RET_PACKAGE_LACK_STREN"
    "_MATERIAL\020\231\003\022\"\n\035RET_PACKAGE_STREN_LEVEL_"
    "LIMIT\020\232\003\022%\n RET_PACKAGE_LACK_REFINE_MATE"
    "RIAL\020\233\003\022#\n\036RET_PACKAGE_REFINE_LEVEL_LIMI"
    "T\020\234\003\022\"\n\035RET_PACKAGE_HOLE_ALREADY_OPEN\020\235\003"
    "\022\036\n\031RET_PACKAGE_HOLE_NOT_OPEN\020\236\003\022\036\n\031RET_"
    "PACKAGE_ALREADY_INLAY\020\237\003\022(\n#RET_PACKAGE_"
    "ALREADY_INALY_SAME_TYPE\020\240\003\022&\n!RET_PACKAG"
    "E_INLAY_STONE_NOT_EXIST\020\241\003\022\032\n\025RET_PACKAG"
    "E_NOT_INLAY\020\242\003\022%\n RET_PACKAGE_INLAY_HOLY"
    "_NOT_EXIST\020\243\003\022\037\n\032RET_PACKAGE_NOT_INLAY_H"
    "OLY\020\244\003\022$\n\037RET_PACKAGE_NOT_CAN_STREN_EQUI"
    "P\020\245\003\022#\n\036RET_PACKAGE_CAN_NOT_INLAY_HOLY\020\246"
    "\003\022#\n\036RET_PACKAGE_ALREADY_INLAY_HOLY\020\247\003\022&"
    "\n!RET_PACKAGE_COMPOSE_MATERIAL_LACK\020\250\003\022\037"
    "\n\032RET_PACKAGE_DROP_NOT_EXITS\020\251\003\022\"\n\035RET_P"
    "ACKAGE_DROP_CAN_NOT_PICK\020\252\003\022\036\n\031RET_EQUIP"
    "_EQUIP_NOT_EXIST\020\364\003\022\034\n\027RET_EQUIP_EQUIP_P"
    "OS_ERR\020\365\003\022!\n\034RET_EQUIP_POS_NOT_EXIT_EQUI"
    "P\020\366\003\022\034\n\027RET_MISSION_HAVE_ACCEPT\020\330\004\022\037\n\032RE"
    "T_MISSION_CAN_NOT_ACCEPT\020\331\004\022\034\n\027RET_MISSI"
    "ON_LEVEL_ERROR\020\332\004\022\032\n\025RET_MISSION_NOT_EXI"
    "ST\020\333\004\022 \n\033RET_MISSION_STATE_NOT_MATCH\020\334\004\022"
    "!\n\034RET_MISSION_PROFESSION_LIMIT\020\335\004\022\032\n\025RE"
    "T_MISSION_SEX_LIMIT\020\336\004\022\033\n\026RET_MISSION_CA"
    "MP_LIMIT\020\337\004\022\033\n\026RET_MISSION_RACE_LIMIT\020\340\004"
    "\022\034\n\027RET_MISSION_MUTEX_LIMIT\020\341\004\022&\n!RET_MI"
    "SSION_REPEAT_ACCEPT_MISSION\020\342\004\022\034\n\027RET_MI"
    "SSION_TIMES_ERROR\020\343\004\022)\n$RET_MISSION_HAVE"
    "_ACCEPT_NUMBER_LIMIT\020\344\004\022\032\n\025RET_MISSION_H"
    "AVE_DICE\020\345\004\022!\n\034RET_MISSION_DICE_TIMES_LI"
    "MIT\020\346\004\022(\n#RET_MISSION_CAN_NOT_GET_CAMP_R"
    "EWARD\020\347\004\022&\n!RET_MISSION_NOT_OPEN_CAMP_MI"
    "SSION\020\350\004\022 \n\033RET_DUPLICATE_CAN_NOT_ENTER\020"
    "\274\005\022\036\n\031RET_DUPLICATE_ENERGY_LACK\020\275\005\022\034\n\027RE"
    "T_DUPLICATE_ALREAY_IN\020\276\005\022 \n\033RET_DUPLICAT"
    "E_FLOP_NOT_OPEN\020\277\005\022 \n\033RET_DUPLICATE_OUT_"
    "FLOP_TIME\020\300\005\022!\n\034RET_DUPLICATE_RELIVE_NO_"
    "DEAD\020\301\005\022\037\n\032RET_DUPLICATE_PRE_NOT_PASS\020\302\005"
    "\022\"\n\035RET_DUPLICATE_MAX_LEVEL_LIMIT\020\303\005\022!\n\034"
    "RET_DUPLICATE_FLOP_NOT_EXIST\020\304\005\022!\n\034RET_D"
    "UPLICATE_FLOP_NUM_LIMIT\020\305\005\022!\n\034RET_DUPLIC"
    "ATE_LACK_ENTER_NUM\020\306\005\022\034\n\027RET_DUPLICATE_I"
    "S_UNLOCK\020\307\005\022!\n\034RET_DUPLICATE_AREA_NOT_EX"
    "IST\020\310\005\022\035\n\030RET_DUPLICATE_ENTER_AREA\020\311\005\022\032\n"
    "\025RET_DUPLICATE_IN_TEAM\020\312\005\022\032\n\025RET_DUPLICA"
    "TE_IN_ROOM\020\313\005\022\036\n\031RET_DUPLICATE_NOT_IN_TE"
    "AM\020\314\005\022\036\n\031RET_DUPLICATE_NOT_IN_ROOM\020\315\005\022!\n"
    "\034RET_DUPLICATE_NOT_TEM_LEADER\020\316\005\022\"\n\035RET_"
    "DUPLICATE_NOT_ROOM_LEADER\020\317\005\022#\n\036RET_DUPL"
    "ICATE_PLAYER_NUM_LIMIT\020\320\005\022#\n\036RET_DUPLICA"
    "TE_RELIVE_NUM_LIMIT\020\321\005\022 \n\033RET_DUPLICATE_"
    "IN_ERROR_TEAM\020\322\005\022 \n\033RET_DUPLICATE_IN_ERR"
    "OR_ROOM\020\323\005\022\034\n\027RET_RELATION_HAVE_APPLY\020\240\006"
    "\022\033\n\026RET_RELATION_NOT_AGREE\020\241\006\022$\n\037RET_REL"
    "ATION_CAN_NOT_APPLY_SELF\020\242\006\022#\n\036RET_RELAT"
    "ION_APPLY_GROUP_ERROR\020\243\006\022\036\n\031RET_RELATION"
    "_NOT_ADD_SELF\020\244\006\022\036\n\031RET_RELATION_NOT_IN_"
    "APPLY\020\245\006\022%\n RET_RELATION_SIZE_LIMIT_NO_A"
    "PPLY\020\246\006\022+\n&RET_RELATION_SIZE_LIMIT_NO_AP"
    "PLY_OTHER\020\247\006\022\036\n\031RET_RELATION_IS_MY_FRIEN"
    "D\020\250\006\022#\n\036RET_RELATION_SIZE_LIMIT_NO_ADD\020\251"
    "\006\022)\n$RET_RELATION_SIZE_LIMIT_NO_ADD_OTHE"
    "R\020\252\006\022\"\n\035RET_RELATION_ADD_BLACK_MYSELF\020\253\006"
    "\022\"\n\035RET_RELATION_BALCK_SIZE_LIMIT\020\254\006\022\037\n\032"
    "RET_RELATION_IN_YOUR_BALCK\020\255\006\022 \n\033RET_REL"
    "ATION_IN_OTHER_BALCK\020\256\006\022.\n)RET_RELATION_"
    "IN_OTHER_BALCK_CAN_NOT_APPLY\020\257\006\022-\n(RET_R"
    "ELATION_IN_YOUR_BALCK_CAN_NOT_APPLY\020\260\006\022\034"
    "\n\027RET_RELATION_NOT_SEARCH\020\261\006\022\035\n\030RET_RELA"
    "TION_NOT_FRIENDS\020\262\006\022$\n\037RET_RELATION_HAVE"
    "_GIVE_PHYSICAL\020\263\006\022+\n&RET_RELATION_GIVE_P"
    "HYSICAL_TIMES_LIMIT\020\264\006\022)\n$RET_RELATION_G"
    "ET_PHYSICAL_TIME_LIMTI\020\265\006\022\"\n\035RET_RELATIO"
    "N_NOT_GET_PHYSICAL\020\266\006\022#\n\036RET_RELATION_HA"
    "VE_GET_PHYSICAL\020\267\006\022)\n$RET_RELATION_GET_P"
    "HYSICAL_GIFT_LIMIT\020\270\006\022\034\n\027RET_RELATION_IN"
    "_CD_TIME\020\271\006\022\030\n\023RET_CHAT_NOT_MYSELF\020\204\007\022\037\n"
    "\032RET_CHAT_TARGET_NOT_ONLINE\020\205\007\022\035\n\030RET_CH"
    "AT_TARGET_IN_BLACK\020\206\007\022\"\n\035RET_CHAT_QUREY_"
    "CHAR_NOT_EXITS\020\207\007\022\036\n\031RET_MAIL_SEND_LEVEL"
    "_LIMIT\020\351\007\022\037\n\032RET_MAIL_SEND_TARGET_ERROR\020"
    "\352\007\022\030\n\023RET_MAIL_DATA_ERROR\020\353\007\022$\n\037RET_MAIL"
    "_TRADE_NOT_SEND_OFFLINE\020\354\007\022\035\n\030RET_MAIL_N"
    "O_SEND_TO_SELF\020\355\007\022\027\n\022RET_MAIL_NOT_EXIST\020"
    "\356\007\022\035\n\030RET_MAIL_SEND_TYPE_ERROR\020\357\007\022%\n RET"
    "_MAIL_TRADING_SELL_TYPE_ERROR\020\360\007\022!\n\034RET_"
    "MAIL_NOT_HAVE_ATTACHMENT\020\361\007\022\036\n\031RET_MAIL_"
    "GRID_INDEX_ERROR\020\362\007\022\035\n\030RET_MAIL_GOODS_NU"
    "M_LIMIT\020\363\007\022\030\n\023RET_MAIL_TYPE_ERROR\020\364\007\022\037\n\032"
    "RET_MAIL_CONTENT_LEN_LIMIT\020\365\007\022\035\n\030RET_MAI"
    "L_TOPIC_LEN_LIMIT\020\366\007\022\035\n\030RET_MAIL_SELL_TY"
    "PE_ERROR\020\367\007\022\034\n\027RET_MAIL_SELL_NUM_ERROR\020\370"
    "\007\022\032\n\025RET_MAIL_ALREDAY_FULL\020\371\007\022\033\n\026RET_MAI"
    "L_ALREADY_FETCH\020\372\007\022\'\n\"RET_CAMP_LEADER_CA"
    "N_PUBLISH_NOTICE\020\314\010\022\036\n\031RET_CAMP_NOTICE_L"
    "EN_LIMIT\020\315\010\022\035\n\030RET_CAMP_NOTICE_CD_LIMIT\020"
    "\316\010\022\035\n\030RET_CAMP_ALREADY_IN_CAMP\020\317\010\022$\n\037RET"
    "_CAMP_CHANGE_CAMP_TIME_LIMIT\020\320\010\022\033\n\026RET_C"
    "AMP_NOT_JOIN_CAMP\020\321\010\022\027\n\022RET_CAMP_NOT_EXI"
    "ST\020\322\010\022#\n\036RET_ACHIEVEMENT_SORTTYEP_ERROR\020"
    "\260\t\022\036\n\031RET_ACHIEVEMENT_NOT_EXIST\020\261\t\022$\n\037RE"
    "T_ACHIEVEMENT_REWARD_HAVE_GET\020\261\t\022%\n RET_"
    "ACHIEVEMENT_BOX_REWARD_ERROR\020\261\t\022+\n&RET_A"
    "CHIEVEMENT_BOX_REWARD_POINT_LIMIT\020\262\t\022(\n#"
    "RET_ACHIEVEMENT_BOX_REWARD_HAVE_GET\020\263\t\022\031"
    "\n\024RET_SKILL_LACK_MONEY\020\225\n\022\"\n\035RET_SKILL_C"
    "HARACTER_LEVEL_LOW\020\226\n\022%\n RET_DEPUTY_SKIL"
    "L_MAX_LEVEL_LIMIT\020\370\n\022\035\n\030RET_DEPUTY_LACK_"
    "SKILLFUL\020\371\n\022!\n\034RET_DEPUTY_LACK_UNION_CON"
    "TRI\020\372\n\022\"\n\035RET_DEPUTY_MAKE_LIST_NOT_OPEN\020"
    "\373\n\022#\n\036RET_DEPUTY_COLLECT_LACK_ENERGY\020\374\n\022"
    " \n\033RET_DEPUTY_COLLECT_BY_OTHER\020\375\n\022\032\n\025RET"
    "_DEPUTY_LACK_LEVEL\020\376\n\022\035\n\030RET_DEPUTY_COLL"
    "ECT_BREAK\020\377\n\022\037\n\032RET_DEPUTY_COLLECT_IN_MO"
    "VE\020\200\013\022\035\n\030RET_DEPUTY_RES_NOT_EXIST\020\201\013\022\035\n\030"
    "RET_MALL_BUY_COUNT_LIMIT\020\334\013\022\036\n\031RET_MALL_"
    "GOODS_COUNT_LACK\020\335\013\032\002\020\001*\376\003\n\nEMODULE_ID\022\023"
    "\n\017EMODULE_ID_NONE\020\000\022\027\n\023EMODULE_ID_SERV_S"
    "YS\020\001\022\025\n\021EMODULE_ID_PLAYER\020\002\022\024\n\020EMODULE_I"
    "D_LOGIN\020\003\022\024\n\020EMODULE_ID_SCENE\020\004\022\024\n\020EMODU"
    "LE_ID_SKILL\020\005\022\023\n\017EMODULE_ID_BUFF\020\006\022\026\n\022EM"
    "ODULE_ID_PACKAGE\020\007\022\023\n\017EMODULE_ID_TASK\020\010\022"
    "\023\n\017EMODULE_ID_CHAT\020\t\022\030\n\024EMODULE_ID_DUPLI"
    "CATE\020\n\022\025\n\021EMODULE_ID_FRIEND\020\013\022\023\n\017EMODULE"
    "_ID_MOVE\020\014\022\023\n\017EMODULE_ID_MAIL\020\r\022\023\n\017EMODU"
    "LE_ID_CAMP\020\016\022\032\n\026EMODULE_ID_ACHIEVEMENT\020\017"
    "\022\025\n\021EMODULE_ID_DEPUTY\020\020\022\022\n\016EMODULE_ID_PV"
    "P\020\021\022\023\n\017EMODULE_ID_MALL\020\022\022\023\n\017EMODULE_ID_R"
    "OOM\020\023\022\027\n\023EMODULE_ID_ACTIVITY\020\024\022\024\n\020EMODUL"
    "E_ID_LIMIT\020\036\032\002\020\001", 9216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common/ComDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Common_2fComDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Common_2fComDefine_2eproto {
  StaticDescriptorInitializer_Common_2fComDefine_2eproto() {
    protobuf_AddDesc_Common_2fComDefine_2eproto();
  }
} static_descriptor_initializer_Common_2fComDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* PROTOCOL_VERSION_UPPER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PROTOCOL_VERSION_UPPER_descriptor_;
}
bool PROTOCOL_VERSION_UPPER_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PROTOCOL_VERSION_LOWER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PROTOCOL_VERSION_LOWER_descriptor_;
}
bool PROTOCOL_VERSION_LOWER_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PingConfig_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingConfig_descriptor_;
}
bool PingConfig_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECharacterSex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECharacterSex_descriptor_;
}
bool ECharacterSex_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERace_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERace_descriptor_;
}
bool ERace_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECharacterProf_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECharacterProf_descriptor_;
}
bool ECharacterProf_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyType_descriptor_;
}
bool CurrencyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AttributeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttributeType_descriptor_;
}
bool AttributeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneType_descriptor_;
}
bool SceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SamplePolyFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SamplePolyFlags_descriptor_;
}
bool SamplePolyFlags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 65535:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapDefine_descriptor_;
}
bool MapDefine_IsValid(int value) {
  switch(value) {
    case 0:
    case 256:
    case 768:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* REGION_DEFINE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REGION_DEFINE_descriptor_;
}
bool REGION_DEFINE_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CharacterDefine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDefine_descriptor_;
}
bool CharacterDefine_IsValid(int value) {
  switch(value) {
    case 3:
    case 6:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPackageLabel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPackageLabel_descriptor_;
}
bool EPackageLabel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuality_descriptor_;
}
bool EQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEquipPos_descriptor_;
}
bool EEquipPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EArg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EArg_descriptor_;
}
bool EArg_IsValid(int value) {
  switch(value) {
    case 130100001:
    case 130100002:
    case 130100003:
    case 130100004:
    case 130100005:
    case 130100006:
    case 130100007:
    case 130100008:
    case 130100009:
    case 130100010:
    case 130100011:
    case 130100012:
    case 130100013:
    case 130100014:
    case 130100015:
    case 130100016:
    case 130100017:
    case 130100018:
    case 130100019:
    case 130100020:
    case 130100021:
    case 130100022:
    case 130100023:
    case 130100024:
    case 130100030:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMailType_descriptor_;
}
bool EMailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMailTradingSellType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMailTradingSellType_descriptor_;
}
bool EMailTradingSellType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERetCode_descriptor_;
}
bool ERetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 200:
    case 300:
    case 301:
    case 302:
    case 303:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 500:
    case 501:
    case 502:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 900:
    case 901:
    case 902:
    case 903:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1301:
    case 1302:
    case 1400:
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1405:
    case 1406:
    case 1407:
    case 1408:
    case 1409:
    case 1500:
    case 1501:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMODULE_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMODULE_ID_descriptor_;
}
bool EMODULE_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
