// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScutProtoBuffer/ActionProto.proto

#ifndef PROTOBUF_ScutProtoBuffer_2fActionProto_2eproto__INCLUDED
#define PROTOBUF_ScutProtoBuffer_2fActionProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto();
void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto();

class RequestHello1001Pack;
class ResponseHello1001Pack;
class RequestRegister1002Pack;
class ResponseRegister1002Pack;
class RequestLogin1004Pack;
class ResponseLogin1004Pack;

// ===================================================================

class RequestHello1001Pack : public ::google::protobuf::Message {
 public:
  RequestHello1001Pack();
  virtual ~RequestHello1001Pack();

  RequestHello1001Pack(const RequestHello1001Pack& from);

  inline RequestHello1001Pack& operator=(const RequestHello1001Pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHello1001Pack& default_instance();

  void Swap(RequestHello1001Pack* other);

  // implements Message ----------------------------------------------

  RequestHello1001Pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestHello1001Pack& from);
  void MergeFrom(const RequestHello1001Pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoBuf.RequestHello1001Pack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto();

  void InitAsDefaultInstance();
  static RequestHello1001Pack* default_instance_;
};
// -------------------------------------------------------------------

class ResponseHello1001Pack : public ::google::protobuf::Message {
 public:
  ResponseHello1001Pack();
  virtual ~ResponseHello1001Pack();

  ResponseHello1001Pack(const ResponseHello1001Pack& from);

  inline ResponseHello1001Pack& operator=(const ResponseHello1001Pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHello1001Pack& default_instance();

  void Swap(ResponseHello1001Pack* other);

  // implements Message ----------------------------------------------

  ResponseHello1001Pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseHello1001Pack& from);
  void MergeFrom(const ResponseHello1001Pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoBuf.ResponseHello1001Pack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto();

  void InitAsDefaultInstance();
  static ResponseHello1001Pack* default_instance_;
};
// -------------------------------------------------------------------

class RequestRegister1002Pack : public ::google::protobuf::Message {
 public:
  RequestRegister1002Pack();
  virtual ~RequestRegister1002Pack();

  RequestRegister1002Pack(const RequestRegister1002Pack& from);

  inline RequestRegister1002Pack& operator=(const RequestRegister1002Pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestRegister1002Pack& default_instance();

  void Swap(RequestRegister1002Pack* other);

  // implements Message ----------------------------------------------

  RequestRegister1002Pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestRegister1002Pack& from);
  void MergeFrom(const RequestRegister1002Pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServerID = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 1;
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional string DeviceID = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 2;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional int32 MobileType = 3;
  inline bool has_mobiletype() const;
  inline void clear_mobiletype();
  static const int kMobileTypeFieldNumber = 3;
  inline ::google::protobuf::int32 mobiletype() const;
  inline void set_mobiletype(::google::protobuf::int32 value);

  // optional int32 GameID = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 4;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional string ClientAppVersion = 5;
  inline bool has_clientappversion() const;
  inline void clear_clientappversion();
  static const int kClientAppVersionFieldNumber = 5;
  inline const ::std::string& clientappversion() const;
  inline void set_clientappversion(const ::std::string& value);
  inline void set_clientappversion(const char* value);
  inline void set_clientappversion(const char* value, size_t size);
  inline ::std::string* mutable_clientappversion();
  inline ::std::string* release_clientappversion();
  inline void set_allocated_clientappversion(::std::string* clientappversion);

  // optional int32 ScreenX = 6;
  inline bool has_screenx() const;
  inline void clear_screenx();
  static const int kScreenXFieldNumber = 6;
  inline ::google::protobuf::int32 screenx() const;
  inline void set_screenx(::google::protobuf::int32 value);

  // optional int32 ScreenY = 7;
  inline bool has_screeny() const;
  inline void clear_screeny();
  static const int kScreenYFieldNumber = 7;
  inline ::google::protobuf::int32 screeny() const;
  inline void set_screeny(::google::protobuf::int32 value);

  // optional string RetailID = 8;
  inline bool has_retailid() const;
  inline void clear_retailid();
  static const int kRetailIDFieldNumber = 8;
  inline const ::std::string& retailid() const;
  inline void set_retailid(const ::std::string& value);
  inline void set_retailid(const char* value);
  inline void set_retailid(const char* value, size_t size);
  inline ::std::string* mutable_retailid();
  inline ::std::string* release_retailid();
  inline void set_allocated_retailid(::std::string* retailid);

  // @@protoc_insertion_point(class_scope:ProtoBuf.RequestRegister1002Pack)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_mobiletype();
  inline void clear_has_mobiletype();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_clientappversion();
  inline void clear_has_clientappversion();
  inline void set_has_screenx();
  inline void clear_has_screenx();
  inline void set_has_screeny();
  inline void clear_has_screeny();
  inline void set_has_retailid();
  inline void clear_has_retailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serverid_;
  ::std::string* deviceid_;
  ::google::protobuf::int32 mobiletype_;
  ::google::protobuf::int32 gameid_;
  ::std::string* clientappversion_;
  ::google::protobuf::int32 screenx_;
  ::google::protobuf::int32 screeny_;
  ::std::string* retailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto();

  void InitAsDefaultInstance();
  static RequestRegister1002Pack* default_instance_;
};
// -------------------------------------------------------------------

class ResponseRegister1002Pack : public ::google::protobuf::Message {
 public:
  ResponseRegister1002Pack();
  virtual ~ResponseRegister1002Pack();

  ResponseRegister1002Pack(const ResponseRegister1002Pack& from);

  inline ResponseRegister1002Pack& operator=(const ResponseRegister1002Pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseRegister1002Pack& default_instance();

  void Swap(ResponseRegister1002Pack* other);

  // implements Message ----------------------------------------------

  ResponseRegister1002Pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseRegister1002Pack& from);
  void MergeFrom(const ResponseRegister1002Pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string passport = 1;
  inline bool has_passport() const;
  inline void clear_passport();
  static const int kPassportFieldNumber = 1;
  inline const ::std::string& passport() const;
  inline void set_passport(const ::std::string& value);
  inline void set_passport(const char* value);
  inline void set_passport(const char* value, size_t size);
  inline ::std::string* mutable_passport();
  inline ::std::string* release_passport();
  inline void set_allocated_passport(::std::string* passport);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ResponseRegister1002Pack)
 private:
  inline void set_has_passport();
  inline void clear_has_passport();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* passport_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto();

  void InitAsDefaultInstance();
  static ResponseRegister1002Pack* default_instance_;
};
// -------------------------------------------------------------------

class RequestLogin1004Pack : public ::google::protobuf::Message {
 public:
  RequestLogin1004Pack();
  virtual ~RequestLogin1004Pack();

  RequestLogin1004Pack(const RequestLogin1004Pack& from);

  inline RequestLogin1004Pack& operator=(const RequestLogin1004Pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestLogin1004Pack& default_instance();

  void Swap(RequestLogin1004Pack* other);

  // implements Message ----------------------------------------------

  RequestLogin1004Pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestLogin1004Pack& from);
  void MergeFrom(const RequestLogin1004Pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MobileType = 1;
  inline bool has_mobiletype() const;
  inline void clear_mobiletype();
  static const int kMobileTypeFieldNumber = 1;
  inline ::google::protobuf::int32 mobiletype() const;
  inline void set_mobiletype(::google::protobuf::int32 value);

  // optional string Pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline const ::std::string& pid() const;
  inline void set_pid(const ::std::string& value);
  inline void set_pid(const char* value);
  inline void set_pid(const char* value, size_t size);
  inline ::std::string* mutable_pid();
  inline ::std::string* release_pid();
  inline void set_allocated_pid(::std::string* pid);

  // optional string Pwd = 3;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 3;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // optional string RetialId = 4;
  inline bool has_retialid() const;
  inline void clear_retialid();
  static const int kRetialIdFieldNumber = 4;
  inline const ::std::string& retialid() const;
  inline void set_retialid(const ::std::string& value);
  inline void set_retialid(const char* value);
  inline void set_retialid(const char* value, size_t size);
  inline ::std::string* mutable_retialid();
  inline ::std::string* release_retialid();
  inline void set_allocated_retialid(::std::string* retialid);

  // optional int32 GameType = 5;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGameTypeFieldNumber = 5;
  inline ::google::protobuf::int32 gametype() const;
  inline void set_gametype(::google::protobuf::int32 value);

  // optional int32 ServerId = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 6;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional string DeviceID = 7;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIDFieldNumber = 7;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional int32 Sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string NickName = 9;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 9;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string HeadID = 10;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 10;
  inline const ::std::string& headid() const;
  inline void set_headid(const ::std::string& value);
  inline void set_headid(const char* value);
  inline void set_headid(const char* value, size_t size);
  inline ::std::string* mutable_headid();
  inline ::std::string* release_headid();
  inline void set_allocated_headid(::std::string* headid);

  // optional int32 ScreenX = 11;
  inline bool has_screenx() const;
  inline void clear_screenx();
  static const int kScreenXFieldNumber = 11;
  inline ::google::protobuf::int32 screenx() const;
  inline void set_screenx(::google::protobuf::int32 value);

  // optional int32 ScreenY = 12;
  inline bool has_screeny() const;
  inline void clear_screeny();
  static const int kScreenYFieldNumber = 12;
  inline ::google::protobuf::int32 screeny() const;
  inline void set_screeny(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.RequestLogin1004Pack)
 private:
  inline void set_has_mobiletype();
  inline void clear_has_mobiletype();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_retialid();
  inline void clear_has_retialid();
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_screenx();
  inline void clear_has_screenx();
  inline void set_has_screeny();
  inline void clear_has_screeny();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pid_;
  ::std::string* pwd_;
  ::google::protobuf::int32 mobiletype_;
  ::google::protobuf::int32 gametype_;
  ::std::string* retialid_;
  ::std::string* deviceid_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 sex_;
  ::std::string* nickname_;
  ::std::string* headid_;
  ::google::protobuf::int32 screenx_;
  ::google::protobuf::int32 screeny_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto();

  void InitAsDefaultInstance();
  static RequestLogin1004Pack* default_instance_;
};
// -------------------------------------------------------------------

class ResponseLogin1004Pack : public ::google::protobuf::Message {
 public:
  ResponseLogin1004Pack();
  virtual ~ResponseLogin1004Pack();

  ResponseLogin1004Pack(const ResponseLogin1004Pack& from);

  inline ResponseLogin1004Pack& operator=(const ResponseLogin1004Pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseLogin1004Pack& default_instance();

  void Swap(ResponseLogin1004Pack* other);

  // implements Message ----------------------------------------------

  ResponseLogin1004Pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseLogin1004Pack& from);
  void MergeFrom(const ResponseLogin1004Pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SessionID = 1;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional string UserID = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional int32 UserType = 3;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUserTypeFieldNumber = 3;
  inline ::google::protobuf::int32 usertype() const;
  inline void set_usertype(::google::protobuf::int32 value);

  // optional string LoginTime = 4;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 4;
  inline const ::std::string& logintime() const;
  inline void set_logintime(const ::std::string& value);
  inline void set_logintime(const char* value);
  inline void set_logintime(const char* value, size_t size);
  inline ::std::string* mutable_logintime();
  inline ::std::string* release_logintime();
  inline void set_allocated_logintime(::std::string* logintime);

  // optional int32 GuideID = 5;
  inline bool has_guideid() const;
  inline void clear_guideid();
  static const int kGuideIDFieldNumber = 5;
  inline ::google::protobuf::int32 guideid() const;
  inline void set_guideid(::google::protobuf::int32 value);

  // optional string PassportId = 6;
  inline bool has_passportid() const;
  inline void clear_passportid();
  static const int kPassportIdFieldNumber = 6;
  inline const ::std::string& passportid() const;
  inline void set_passportid(const ::std::string& value);
  inline void set_passportid(const char* value);
  inline void set_passportid(const char* value, size_t size);
  inline ::std::string* mutable_passportid();
  inline ::std::string* release_passportid();
  inline void set_allocated_passportid(::std::string* passportid);

  // optional string RefreshToken = 7;
  inline bool has_refreshtoken() const;
  inline void clear_refreshtoken();
  static const int kRefreshTokenFieldNumber = 7;
  inline const ::std::string& refreshtoken() const;
  inline void set_refreshtoken(const ::std::string& value);
  inline void set_refreshtoken(const char* value);
  inline void set_refreshtoken(const char* value, size_t size);
  inline ::std::string* mutable_refreshtoken();
  inline ::std::string* release_refreshtoken();
  inline void set_allocated_refreshtoken(::std::string* refreshtoken);

  // optional string QihooUserID = 8;
  inline bool has_qihoouserid() const;
  inline void clear_qihoouserid();
  static const int kQihooUserIDFieldNumber = 8;
  inline const ::std::string& qihoouserid() const;
  inline void set_qihoouserid(const ::std::string& value);
  inline void set_qihoouserid(const char* value);
  inline void set_qihoouserid(const char* value, size_t size);
  inline ::std::string* mutable_qihoouserid();
  inline ::std::string* release_qihoouserid();
  inline void set_allocated_qihoouserid(::std::string* qihoouserid);

  // optional string Scope = 9;
  inline bool has_scope() const;
  inline void clear_scope();
  static const int kScopeFieldNumber = 9;
  inline const ::std::string& scope() const;
  inline void set_scope(const ::std::string& value);
  inline void set_scope(const char* value);
  inline void set_scope(const char* value, size_t size);
  inline ::std::string* mutable_scope();
  inline ::std::string* release_scope();
  inline void set_allocated_scope(::std::string* scope);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ResponseLogin1004Pack)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_guideid();
  inline void clear_has_guideid();
  inline void set_has_passportid();
  inline void clear_has_passportid();
  inline void set_has_refreshtoken();
  inline void clear_has_refreshtoken();
  inline void set_has_qihoouserid();
  inline void clear_has_qihoouserid();
  inline void set_has_scope();
  inline void clear_has_scope();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sessionid_;
  ::std::string* userid_;
  ::std::string* logintime_;
  ::google::protobuf::int32 usertype_;
  ::google::protobuf::int32 guideid_;
  ::std::string* passportid_;
  ::std::string* refreshtoken_;
  ::std::string* qihoouserid_;
  ::std::string* scope_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto();
  friend void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto();

  void InitAsDefaultInstance();
  static ResponseLogin1004Pack* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestHello1001Pack

// -------------------------------------------------------------------

// ResponseHello1001Pack

// -------------------------------------------------------------------

// RequestRegister1002Pack

// optional string ServerID = 1;
inline bool RequestRegister1002Pack::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestRegister1002Pack::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestRegister1002Pack::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestRegister1002Pack::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& RequestRegister1002Pack::serverid() const {
  return *serverid_;
}
inline void RequestRegister1002Pack::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
}
inline void RequestRegister1002Pack::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
}
inline void RequestRegister1002Pack::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestRegister1002Pack::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    serverid_ = new ::std::string;
  }
  return serverid_;
}
inline ::std::string* RequestRegister1002Pack::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestRegister1002Pack::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string DeviceID = 2;
inline bool RequestRegister1002Pack::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestRegister1002Pack::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestRegister1002Pack::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestRegister1002Pack::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& RequestRegister1002Pack::deviceid() const {
  return *deviceid_;
}
inline void RequestRegister1002Pack::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void RequestRegister1002Pack::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void RequestRegister1002Pack::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestRegister1002Pack::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* RequestRegister1002Pack::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestRegister1002Pack::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 MobileType = 3;
inline bool RequestRegister1002Pack::has_mobiletype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestRegister1002Pack::set_has_mobiletype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestRegister1002Pack::clear_has_mobiletype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestRegister1002Pack::clear_mobiletype() {
  mobiletype_ = 0;
  clear_has_mobiletype();
}
inline ::google::protobuf::int32 RequestRegister1002Pack::mobiletype() const {
  return mobiletype_;
}
inline void RequestRegister1002Pack::set_mobiletype(::google::protobuf::int32 value) {
  set_has_mobiletype();
  mobiletype_ = value;
}

// optional int32 GameID = 4;
inline bool RequestRegister1002Pack::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestRegister1002Pack::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestRegister1002Pack::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestRegister1002Pack::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 RequestRegister1002Pack::gameid() const {
  return gameid_;
}
inline void RequestRegister1002Pack::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional string ClientAppVersion = 5;
inline bool RequestRegister1002Pack::has_clientappversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestRegister1002Pack::set_has_clientappversion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestRegister1002Pack::clear_has_clientappversion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestRegister1002Pack::clear_clientappversion() {
  if (clientappversion_ != &::google::protobuf::internal::kEmptyString) {
    clientappversion_->clear();
  }
  clear_has_clientappversion();
}
inline const ::std::string& RequestRegister1002Pack::clientappversion() const {
  return *clientappversion_;
}
inline void RequestRegister1002Pack::set_clientappversion(const ::std::string& value) {
  set_has_clientappversion();
  if (clientappversion_ == &::google::protobuf::internal::kEmptyString) {
    clientappversion_ = new ::std::string;
  }
  clientappversion_->assign(value);
}
inline void RequestRegister1002Pack::set_clientappversion(const char* value) {
  set_has_clientappversion();
  if (clientappversion_ == &::google::protobuf::internal::kEmptyString) {
    clientappversion_ = new ::std::string;
  }
  clientappversion_->assign(value);
}
inline void RequestRegister1002Pack::set_clientappversion(const char* value, size_t size) {
  set_has_clientappversion();
  if (clientappversion_ == &::google::protobuf::internal::kEmptyString) {
    clientappversion_ = new ::std::string;
  }
  clientappversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestRegister1002Pack::mutable_clientappversion() {
  set_has_clientappversion();
  if (clientappversion_ == &::google::protobuf::internal::kEmptyString) {
    clientappversion_ = new ::std::string;
  }
  return clientappversion_;
}
inline ::std::string* RequestRegister1002Pack::release_clientappversion() {
  clear_has_clientappversion();
  if (clientappversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientappversion_;
    clientappversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestRegister1002Pack::set_allocated_clientappversion(::std::string* clientappversion) {
  if (clientappversion_ != &::google::protobuf::internal::kEmptyString) {
    delete clientappversion_;
  }
  if (clientappversion) {
    set_has_clientappversion();
    clientappversion_ = clientappversion;
  } else {
    clear_has_clientappversion();
    clientappversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ScreenX = 6;
inline bool RequestRegister1002Pack::has_screenx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestRegister1002Pack::set_has_screenx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestRegister1002Pack::clear_has_screenx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestRegister1002Pack::clear_screenx() {
  screenx_ = 0;
  clear_has_screenx();
}
inline ::google::protobuf::int32 RequestRegister1002Pack::screenx() const {
  return screenx_;
}
inline void RequestRegister1002Pack::set_screenx(::google::protobuf::int32 value) {
  set_has_screenx();
  screenx_ = value;
}

// optional int32 ScreenY = 7;
inline bool RequestRegister1002Pack::has_screeny() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestRegister1002Pack::set_has_screeny() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RequestRegister1002Pack::clear_has_screeny() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RequestRegister1002Pack::clear_screeny() {
  screeny_ = 0;
  clear_has_screeny();
}
inline ::google::protobuf::int32 RequestRegister1002Pack::screeny() const {
  return screeny_;
}
inline void RequestRegister1002Pack::set_screeny(::google::protobuf::int32 value) {
  set_has_screeny();
  screeny_ = value;
}

// optional string RetailID = 8;
inline bool RequestRegister1002Pack::has_retailid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RequestRegister1002Pack::set_has_retailid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RequestRegister1002Pack::clear_has_retailid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RequestRegister1002Pack::clear_retailid() {
  if (retailid_ != &::google::protobuf::internal::kEmptyString) {
    retailid_->clear();
  }
  clear_has_retailid();
}
inline const ::std::string& RequestRegister1002Pack::retailid() const {
  return *retailid_;
}
inline void RequestRegister1002Pack::set_retailid(const ::std::string& value) {
  set_has_retailid();
  if (retailid_ == &::google::protobuf::internal::kEmptyString) {
    retailid_ = new ::std::string;
  }
  retailid_->assign(value);
}
inline void RequestRegister1002Pack::set_retailid(const char* value) {
  set_has_retailid();
  if (retailid_ == &::google::protobuf::internal::kEmptyString) {
    retailid_ = new ::std::string;
  }
  retailid_->assign(value);
}
inline void RequestRegister1002Pack::set_retailid(const char* value, size_t size) {
  set_has_retailid();
  if (retailid_ == &::google::protobuf::internal::kEmptyString) {
    retailid_ = new ::std::string;
  }
  retailid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestRegister1002Pack::mutable_retailid() {
  set_has_retailid();
  if (retailid_ == &::google::protobuf::internal::kEmptyString) {
    retailid_ = new ::std::string;
  }
  return retailid_;
}
inline ::std::string* RequestRegister1002Pack::release_retailid() {
  clear_has_retailid();
  if (retailid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retailid_;
    retailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestRegister1002Pack::set_allocated_retailid(::std::string* retailid) {
  if (retailid_ != &::google::protobuf::internal::kEmptyString) {
    delete retailid_;
  }
  if (retailid) {
    set_has_retailid();
    retailid_ = retailid;
  } else {
    clear_has_retailid();
    retailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResponseRegister1002Pack

// optional string passport = 1;
inline bool ResponseRegister1002Pack::has_passport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseRegister1002Pack::set_has_passport() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseRegister1002Pack::clear_has_passport() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseRegister1002Pack::clear_passport() {
  if (passport_ != &::google::protobuf::internal::kEmptyString) {
    passport_->clear();
  }
  clear_has_passport();
}
inline const ::std::string& ResponseRegister1002Pack::passport() const {
  return *passport_;
}
inline void ResponseRegister1002Pack::set_passport(const ::std::string& value) {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::kEmptyString) {
    passport_ = new ::std::string;
  }
  passport_->assign(value);
}
inline void ResponseRegister1002Pack::set_passport(const char* value) {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::kEmptyString) {
    passport_ = new ::std::string;
  }
  passport_->assign(value);
}
inline void ResponseRegister1002Pack::set_passport(const char* value, size_t size) {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::kEmptyString) {
    passport_ = new ::std::string;
  }
  passport_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseRegister1002Pack::mutable_passport() {
  set_has_passport();
  if (passport_ == &::google::protobuf::internal::kEmptyString) {
    passport_ = new ::std::string;
  }
  return passport_;
}
inline ::std::string* ResponseRegister1002Pack::release_passport() {
  clear_has_passport();
  if (passport_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passport_;
    passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseRegister1002Pack::set_allocated_passport(::std::string* passport) {
  if (passport_ != &::google::protobuf::internal::kEmptyString) {
    delete passport_;
  }
  if (passport) {
    set_has_passport();
    passport_ = passport;
  } else {
    clear_has_passport();
    passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool ResponseRegister1002Pack::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseRegister1002Pack::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseRegister1002Pack::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseRegister1002Pack::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& ResponseRegister1002Pack::password() const {
  return *password_;
}
inline void ResponseRegister1002Pack::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void ResponseRegister1002Pack::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void ResponseRegister1002Pack::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseRegister1002Pack::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* ResponseRegister1002Pack::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseRegister1002Pack::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RequestLogin1004Pack

// optional int32 MobileType = 1;
inline bool RequestLogin1004Pack::has_mobiletype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestLogin1004Pack::set_has_mobiletype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestLogin1004Pack::clear_has_mobiletype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestLogin1004Pack::clear_mobiletype() {
  mobiletype_ = 0;
  clear_has_mobiletype();
}
inline ::google::protobuf::int32 RequestLogin1004Pack::mobiletype() const {
  return mobiletype_;
}
inline void RequestLogin1004Pack::set_mobiletype(::google::protobuf::int32 value) {
  set_has_mobiletype();
  mobiletype_ = value;
}

// optional string Pid = 2;
inline bool RequestLogin1004Pack::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestLogin1004Pack::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestLogin1004Pack::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestLogin1004Pack::clear_pid() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    pid_->clear();
  }
  clear_has_pid();
}
inline const ::std::string& RequestLogin1004Pack::pid() const {
  return *pid_;
}
inline void RequestLogin1004Pack::set_pid(const ::std::string& value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
}
inline void RequestLogin1004Pack::set_pid(const char* value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
}
inline void RequestLogin1004Pack::set_pid(const char* value, size_t size) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  pid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin1004Pack::mutable_pid() {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    pid_ = new ::std::string;
  }
  return pid_;
}
inline ::std::string* RequestLogin1004Pack::release_pid() {
  clear_has_pid();
  if (pid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pid_;
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin1004Pack::set_allocated_pid(::std::string* pid) {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (pid) {
    set_has_pid();
    pid_ = pid;
  } else {
    clear_has_pid();
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Pwd = 3;
inline bool RequestLogin1004Pack::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestLogin1004Pack::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestLogin1004Pack::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestLogin1004Pack::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& RequestLogin1004Pack::pwd() const {
  return *pwd_;
}
inline void RequestLogin1004Pack::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void RequestLogin1004Pack::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void RequestLogin1004Pack::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin1004Pack::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* RequestLogin1004Pack::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin1004Pack::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string RetialId = 4;
inline bool RequestLogin1004Pack::has_retialid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestLogin1004Pack::set_has_retialid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestLogin1004Pack::clear_has_retialid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestLogin1004Pack::clear_retialid() {
  if (retialid_ != &::google::protobuf::internal::kEmptyString) {
    retialid_->clear();
  }
  clear_has_retialid();
}
inline const ::std::string& RequestLogin1004Pack::retialid() const {
  return *retialid_;
}
inline void RequestLogin1004Pack::set_retialid(const ::std::string& value) {
  set_has_retialid();
  if (retialid_ == &::google::protobuf::internal::kEmptyString) {
    retialid_ = new ::std::string;
  }
  retialid_->assign(value);
}
inline void RequestLogin1004Pack::set_retialid(const char* value) {
  set_has_retialid();
  if (retialid_ == &::google::protobuf::internal::kEmptyString) {
    retialid_ = new ::std::string;
  }
  retialid_->assign(value);
}
inline void RequestLogin1004Pack::set_retialid(const char* value, size_t size) {
  set_has_retialid();
  if (retialid_ == &::google::protobuf::internal::kEmptyString) {
    retialid_ = new ::std::string;
  }
  retialid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin1004Pack::mutable_retialid() {
  set_has_retialid();
  if (retialid_ == &::google::protobuf::internal::kEmptyString) {
    retialid_ = new ::std::string;
  }
  return retialid_;
}
inline ::std::string* RequestLogin1004Pack::release_retialid() {
  clear_has_retialid();
  if (retialid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retialid_;
    retialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin1004Pack::set_allocated_retialid(::std::string* retialid) {
  if (retialid_ != &::google::protobuf::internal::kEmptyString) {
    delete retialid_;
  }
  if (retialid) {
    set_has_retialid();
    retialid_ = retialid;
  } else {
    clear_has_retialid();
    retialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 GameType = 5;
inline bool RequestLogin1004Pack::has_gametype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestLogin1004Pack::set_has_gametype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestLogin1004Pack::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestLogin1004Pack::clear_gametype() {
  gametype_ = 0;
  clear_has_gametype();
}
inline ::google::protobuf::int32 RequestLogin1004Pack::gametype() const {
  return gametype_;
}
inline void RequestLogin1004Pack::set_gametype(::google::protobuf::int32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional int32 ServerId = 6;
inline bool RequestLogin1004Pack::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestLogin1004Pack::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestLogin1004Pack::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestLogin1004Pack::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 RequestLogin1004Pack::serverid() const {
  return serverid_;
}
inline void RequestLogin1004Pack::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional string DeviceID = 7;
inline bool RequestLogin1004Pack::has_deviceid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestLogin1004Pack::set_has_deviceid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RequestLogin1004Pack::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RequestLogin1004Pack::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& RequestLogin1004Pack::deviceid() const {
  return *deviceid_;
}
inline void RequestLogin1004Pack::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void RequestLogin1004Pack::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void RequestLogin1004Pack::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin1004Pack::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* RequestLogin1004Pack::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin1004Pack::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 Sex = 8;
inline bool RequestLogin1004Pack::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RequestLogin1004Pack::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RequestLogin1004Pack::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RequestLogin1004Pack::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 RequestLogin1004Pack::sex() const {
  return sex_;
}
inline void RequestLogin1004Pack::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string NickName = 9;
inline bool RequestLogin1004Pack::has_nickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RequestLogin1004Pack::set_has_nickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RequestLogin1004Pack::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RequestLogin1004Pack::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RequestLogin1004Pack::nickname() const {
  return *nickname_;
}
inline void RequestLogin1004Pack::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RequestLogin1004Pack::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RequestLogin1004Pack::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin1004Pack::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* RequestLogin1004Pack::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin1004Pack::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string HeadID = 10;
inline bool RequestLogin1004Pack::has_headid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RequestLogin1004Pack::set_has_headid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RequestLogin1004Pack::clear_has_headid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RequestLogin1004Pack::clear_headid() {
  if (headid_ != &::google::protobuf::internal::kEmptyString) {
    headid_->clear();
  }
  clear_has_headid();
}
inline const ::std::string& RequestLogin1004Pack::headid() const {
  return *headid_;
}
inline void RequestLogin1004Pack::set_headid(const ::std::string& value) {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  headid_->assign(value);
}
inline void RequestLogin1004Pack::set_headid(const char* value) {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  headid_->assign(value);
}
inline void RequestLogin1004Pack::set_headid(const char* value, size_t size) {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  headid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestLogin1004Pack::mutable_headid() {
  set_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    headid_ = new ::std::string;
  }
  return headid_;
}
inline ::std::string* RequestLogin1004Pack::release_headid() {
  clear_has_headid();
  if (headid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headid_;
    headid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestLogin1004Pack::set_allocated_headid(::std::string* headid) {
  if (headid_ != &::google::protobuf::internal::kEmptyString) {
    delete headid_;
  }
  if (headid) {
    set_has_headid();
    headid_ = headid;
  } else {
    clear_has_headid();
    headid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ScreenX = 11;
inline bool RequestLogin1004Pack::has_screenx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RequestLogin1004Pack::set_has_screenx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RequestLogin1004Pack::clear_has_screenx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RequestLogin1004Pack::clear_screenx() {
  screenx_ = 0;
  clear_has_screenx();
}
inline ::google::protobuf::int32 RequestLogin1004Pack::screenx() const {
  return screenx_;
}
inline void RequestLogin1004Pack::set_screenx(::google::protobuf::int32 value) {
  set_has_screenx();
  screenx_ = value;
}

// optional int32 ScreenY = 12;
inline bool RequestLogin1004Pack::has_screeny() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RequestLogin1004Pack::set_has_screeny() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RequestLogin1004Pack::clear_has_screeny() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RequestLogin1004Pack::clear_screeny() {
  screeny_ = 0;
  clear_has_screeny();
}
inline ::google::protobuf::int32 RequestLogin1004Pack::screeny() const {
  return screeny_;
}
inline void RequestLogin1004Pack::set_screeny(::google::protobuf::int32 value) {
  set_has_screeny();
  screeny_ = value;
}

// -------------------------------------------------------------------

// ResponseLogin1004Pack

// optional string SessionID = 1;
inline bool ResponseLogin1004Pack::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseLogin1004Pack::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseLogin1004Pack::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseLogin1004Pack::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& ResponseLogin1004Pack::sessionid() const {
  return *sessionid_;
}
inline void ResponseLogin1004Pack::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void ResponseLogin1004Pack::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void ResponseLogin1004Pack::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseLogin1004Pack::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* ResponseLogin1004Pack::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseLogin1004Pack::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string UserID = 2;
inline bool ResponseLogin1004Pack::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseLogin1004Pack::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseLogin1004Pack::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseLogin1004Pack::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& ResponseLogin1004Pack::userid() const {
  return *userid_;
}
inline void ResponseLogin1004Pack::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void ResponseLogin1004Pack::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void ResponseLogin1004Pack::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseLogin1004Pack::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* ResponseLogin1004Pack::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseLogin1004Pack::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 UserType = 3;
inline bool ResponseLogin1004Pack::has_usertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseLogin1004Pack::set_has_usertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseLogin1004Pack::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseLogin1004Pack::clear_usertype() {
  usertype_ = 0;
  clear_has_usertype();
}
inline ::google::protobuf::int32 ResponseLogin1004Pack::usertype() const {
  return usertype_;
}
inline void ResponseLogin1004Pack::set_usertype(::google::protobuf::int32 value) {
  set_has_usertype();
  usertype_ = value;
}

// optional string LoginTime = 4;
inline bool ResponseLogin1004Pack::has_logintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseLogin1004Pack::set_has_logintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseLogin1004Pack::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseLogin1004Pack::clear_logintime() {
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    logintime_->clear();
  }
  clear_has_logintime();
}
inline const ::std::string& ResponseLogin1004Pack::logintime() const {
  return *logintime_;
}
inline void ResponseLogin1004Pack::set_logintime(const ::std::string& value) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(value);
}
inline void ResponseLogin1004Pack::set_logintime(const char* value) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(value);
}
inline void ResponseLogin1004Pack::set_logintime(const char* value, size_t size) {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  logintime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseLogin1004Pack::mutable_logintime() {
  set_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    logintime_ = new ::std::string;
  }
  return logintime_;
}
inline ::std::string* ResponseLogin1004Pack::release_logintime() {
  clear_has_logintime();
  if (logintime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logintime_;
    logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseLogin1004Pack::set_allocated_logintime(::std::string* logintime) {
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    delete logintime_;
  }
  if (logintime) {
    set_has_logintime();
    logintime_ = logintime;
  } else {
    clear_has_logintime();
    logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 GuideID = 5;
inline bool ResponseLogin1004Pack::has_guideid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseLogin1004Pack::set_has_guideid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseLogin1004Pack::clear_has_guideid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseLogin1004Pack::clear_guideid() {
  guideid_ = 0;
  clear_has_guideid();
}
inline ::google::protobuf::int32 ResponseLogin1004Pack::guideid() const {
  return guideid_;
}
inline void ResponseLogin1004Pack::set_guideid(::google::protobuf::int32 value) {
  set_has_guideid();
  guideid_ = value;
}

// optional string PassportId = 6;
inline bool ResponseLogin1004Pack::has_passportid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResponseLogin1004Pack::set_has_passportid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResponseLogin1004Pack::clear_has_passportid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResponseLogin1004Pack::clear_passportid() {
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    passportid_->clear();
  }
  clear_has_passportid();
}
inline const ::std::string& ResponseLogin1004Pack::passportid() const {
  return *passportid_;
}
inline void ResponseLogin1004Pack::set_passportid(const ::std::string& value) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(value);
}
inline void ResponseLogin1004Pack::set_passportid(const char* value) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(value);
}
inline void ResponseLogin1004Pack::set_passportid(const char* value, size_t size) {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  passportid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseLogin1004Pack::mutable_passportid() {
  set_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    passportid_ = new ::std::string;
  }
  return passportid_;
}
inline ::std::string* ResponseLogin1004Pack::release_passportid() {
  clear_has_passportid();
  if (passportid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passportid_;
    passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseLogin1004Pack::set_allocated_passportid(::std::string* passportid) {
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    delete passportid_;
  }
  if (passportid) {
    set_has_passportid();
    passportid_ = passportid;
  } else {
    clear_has_passportid();
    passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string RefreshToken = 7;
inline bool ResponseLogin1004Pack::has_refreshtoken() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResponseLogin1004Pack::set_has_refreshtoken() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResponseLogin1004Pack::clear_has_refreshtoken() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResponseLogin1004Pack::clear_refreshtoken() {
  if (refreshtoken_ != &::google::protobuf::internal::kEmptyString) {
    refreshtoken_->clear();
  }
  clear_has_refreshtoken();
}
inline const ::std::string& ResponseLogin1004Pack::refreshtoken() const {
  return *refreshtoken_;
}
inline void ResponseLogin1004Pack::set_refreshtoken(const ::std::string& value) {
  set_has_refreshtoken();
  if (refreshtoken_ == &::google::protobuf::internal::kEmptyString) {
    refreshtoken_ = new ::std::string;
  }
  refreshtoken_->assign(value);
}
inline void ResponseLogin1004Pack::set_refreshtoken(const char* value) {
  set_has_refreshtoken();
  if (refreshtoken_ == &::google::protobuf::internal::kEmptyString) {
    refreshtoken_ = new ::std::string;
  }
  refreshtoken_->assign(value);
}
inline void ResponseLogin1004Pack::set_refreshtoken(const char* value, size_t size) {
  set_has_refreshtoken();
  if (refreshtoken_ == &::google::protobuf::internal::kEmptyString) {
    refreshtoken_ = new ::std::string;
  }
  refreshtoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseLogin1004Pack::mutable_refreshtoken() {
  set_has_refreshtoken();
  if (refreshtoken_ == &::google::protobuf::internal::kEmptyString) {
    refreshtoken_ = new ::std::string;
  }
  return refreshtoken_;
}
inline ::std::string* ResponseLogin1004Pack::release_refreshtoken() {
  clear_has_refreshtoken();
  if (refreshtoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refreshtoken_;
    refreshtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseLogin1004Pack::set_allocated_refreshtoken(::std::string* refreshtoken) {
  if (refreshtoken_ != &::google::protobuf::internal::kEmptyString) {
    delete refreshtoken_;
  }
  if (refreshtoken) {
    set_has_refreshtoken();
    refreshtoken_ = refreshtoken;
  } else {
    clear_has_refreshtoken();
    refreshtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string QihooUserID = 8;
inline bool ResponseLogin1004Pack::has_qihoouserid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResponseLogin1004Pack::set_has_qihoouserid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResponseLogin1004Pack::clear_has_qihoouserid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResponseLogin1004Pack::clear_qihoouserid() {
  if (qihoouserid_ != &::google::protobuf::internal::kEmptyString) {
    qihoouserid_->clear();
  }
  clear_has_qihoouserid();
}
inline const ::std::string& ResponseLogin1004Pack::qihoouserid() const {
  return *qihoouserid_;
}
inline void ResponseLogin1004Pack::set_qihoouserid(const ::std::string& value) {
  set_has_qihoouserid();
  if (qihoouserid_ == &::google::protobuf::internal::kEmptyString) {
    qihoouserid_ = new ::std::string;
  }
  qihoouserid_->assign(value);
}
inline void ResponseLogin1004Pack::set_qihoouserid(const char* value) {
  set_has_qihoouserid();
  if (qihoouserid_ == &::google::protobuf::internal::kEmptyString) {
    qihoouserid_ = new ::std::string;
  }
  qihoouserid_->assign(value);
}
inline void ResponseLogin1004Pack::set_qihoouserid(const char* value, size_t size) {
  set_has_qihoouserid();
  if (qihoouserid_ == &::google::protobuf::internal::kEmptyString) {
    qihoouserid_ = new ::std::string;
  }
  qihoouserid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseLogin1004Pack::mutable_qihoouserid() {
  set_has_qihoouserid();
  if (qihoouserid_ == &::google::protobuf::internal::kEmptyString) {
    qihoouserid_ = new ::std::string;
  }
  return qihoouserid_;
}
inline ::std::string* ResponseLogin1004Pack::release_qihoouserid() {
  clear_has_qihoouserid();
  if (qihoouserid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qihoouserid_;
    qihoouserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseLogin1004Pack::set_allocated_qihoouserid(::std::string* qihoouserid) {
  if (qihoouserid_ != &::google::protobuf::internal::kEmptyString) {
    delete qihoouserid_;
  }
  if (qihoouserid) {
    set_has_qihoouserid();
    qihoouserid_ = qihoouserid;
  } else {
    clear_has_qihoouserid();
    qihoouserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Scope = 9;
inline bool ResponseLogin1004Pack::has_scope() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResponseLogin1004Pack::set_has_scope() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResponseLogin1004Pack::clear_has_scope() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResponseLogin1004Pack::clear_scope() {
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    scope_->clear();
  }
  clear_has_scope();
}
inline const ::std::string& ResponseLogin1004Pack::scope() const {
  return *scope_;
}
inline void ResponseLogin1004Pack::set_scope(const ::std::string& value) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(value);
}
inline void ResponseLogin1004Pack::set_scope(const char* value) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(value);
}
inline void ResponseLogin1004Pack::set_scope(const char* value, size_t size) {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  scope_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseLogin1004Pack::mutable_scope() {
  set_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    scope_ = new ::std::string;
  }
  return scope_;
}
inline ::std::string* ResponseLogin1004Pack::release_scope() {
  clear_has_scope();
  if (scope_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scope_;
    scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseLogin1004Pack::set_allocated_scope(::std::string* scope) {
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    delete scope_;
  }
  if (scope) {
    set_has_scope();
    scope_ = scope;
  } else {
    clear_has_scope();
    scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ScutProtoBuffer_2fActionProto_2eproto__INCLUDED
