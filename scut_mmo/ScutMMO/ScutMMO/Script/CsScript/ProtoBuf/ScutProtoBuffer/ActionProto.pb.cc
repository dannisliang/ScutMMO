// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScutProtoBuffer/ActionProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ScutProtoBuffer/ActionProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* RequestHello1001Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHello1001Pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHello1001Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHello1001Pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRegister1002Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRegister1002Pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRegister1002Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRegister1002Pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestLogin1004Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLogin1004Pack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseLogin1004Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseLogin1004Pack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto() {
  protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ScutProtoBuffer/ActionProto.proto");
  GOOGLE_CHECK(file != NULL);
  RequestHello1001Pack_descriptor_ = file->message_type(0);
  static const int RequestHello1001Pack_offsets_[1] = {
  };
  RequestHello1001Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHello1001Pack_descriptor_,
      RequestHello1001Pack::default_instance_,
      RequestHello1001Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHello1001Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHello1001Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHello1001Pack));
  ResponseHello1001Pack_descriptor_ = file->message_type(1);
  static const int ResponseHello1001Pack_offsets_[1] = {
  };
  ResponseHello1001Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseHello1001Pack_descriptor_,
      ResponseHello1001Pack::default_instance_,
      ResponseHello1001Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHello1001Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHello1001Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseHello1001Pack));
  RequestRegister1002Pack_descriptor_ = file->message_type(2);
  static const int RequestRegister1002Pack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, mobiletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, clientappversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, screenx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, screeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, retailid_),
  };
  RequestRegister1002Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRegister1002Pack_descriptor_,
      RequestRegister1002Pack::default_instance_,
      RequestRegister1002Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegister1002Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRegister1002Pack));
  ResponseRegister1002Pack_descriptor_ = file->message_type(3);
  static const int ResponseRegister1002Pack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegister1002Pack, passport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegister1002Pack, password_),
  };
  ResponseRegister1002Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRegister1002Pack_descriptor_,
      ResponseRegister1002Pack::default_instance_,
      ResponseRegister1002Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegister1002Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegister1002Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRegister1002Pack));
  RequestLogin1004Pack_descriptor_ = file->message_type(4);
  static const int RequestLogin1004Pack_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, mobiletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, retialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, screenx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, screeny_),
  };
  RequestLogin1004Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestLogin1004Pack_descriptor_,
      RequestLogin1004Pack::default_instance_,
      RequestLogin1004Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLogin1004Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestLogin1004Pack));
  ResponseLogin1004Pack_descriptor_ = file->message_type(5);
  static const int ResponseLogin1004Pack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, guideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, passportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, refreshtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, qihoouserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, scope_),
  };
  ResponseLogin1004Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseLogin1004Pack_descriptor_,
      ResponseLogin1004Pack::default_instance_,
      ResponseLogin1004Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLogin1004Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseLogin1004Pack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ScutProtoBuffer_2fActionProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHello1001Pack_descriptor_, &RequestHello1001Pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseHello1001Pack_descriptor_, &ResponseHello1001Pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRegister1002Pack_descriptor_, &RequestRegister1002Pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRegister1002Pack_descriptor_, &ResponseRegister1002Pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestLogin1004Pack_descriptor_, &RequestLogin1004Pack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseLogin1004Pack_descriptor_, &ResponseLogin1004Pack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto() {
  delete RequestHello1001Pack::default_instance_;
  delete RequestHello1001Pack_reflection_;
  delete ResponseHello1001Pack::default_instance_;
  delete ResponseHello1001Pack_reflection_;
  delete RequestRegister1002Pack::default_instance_;
  delete RequestRegister1002Pack_reflection_;
  delete ResponseRegister1002Pack::default_instance_;
  delete ResponseRegister1002Pack_reflection_;
  delete RequestLogin1004Pack::default_instance_;
  delete RequestLogin1004Pack_reflection_;
  delete ResponseLogin1004Pack::default_instance_;
  delete ResponseLogin1004Pack_reflection_;
}

void protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!ScutProtoBuffer/ActionProto.proto\022\010Pro"
    "toBuf\"\026\n\024RequestHello1001Pack\"\027\n\025Respons"
    "eHello1001Pack\"\257\001\n\027RequestRegister1002Pa"
    "ck\022\020\n\010ServerID\030\001 \001(\t\022\020\n\010DeviceID\030\002 \001(\t\022\022"
    "\n\nMobileType\030\003 \001(\005\022\016\n\006GameID\030\004 \001(\005\022\030\n\020Cl"
    "ientAppVersion\030\005 \001(\t\022\017\n\007ScreenX\030\006 \001(\005\022\017\n"
    "\007ScreenY\030\007 \001(\005\022\020\n\010RetailID\030\010 \001(\t\">\n\030Resp"
    "onseRegister1002Pack\022\020\n\010passport\030\001 \001(\t\022\020"
    "\n\010password\030\002 \001(\t\"\335\001\n\024RequestLogin1004Pac"
    "k\022\022\n\nMobileType\030\001 \001(\005\022\013\n\003Pid\030\002 \001(\t\022\013\n\003Pw"
    "d\030\003 \001(\t\022\020\n\010RetialId\030\004 \001(\t\022\020\n\010GameType\030\005 "
    "\001(\005\022\020\n\010ServerId\030\006 \001(\005\022\020\n\010DeviceID\030\007 \001(\t\022"
    "\013\n\003Sex\030\010 \001(\005\022\020\n\010NickName\030\t \001(\t\022\016\n\006HeadID"
    "\030\n \001(\t\022\017\n\007ScreenX\030\013 \001(\005\022\017\n\007ScreenY\030\014 \001(\005"
    "\"\276\001\n\025ResponseLogin1004Pack\022\021\n\tSessionID\030"
    "\001 \001(\t\022\016\n\006UserID\030\002 \001(\t\022\020\n\010UserType\030\003 \001(\005\022"
    "\021\n\tLoginTime\030\004 \001(\t\022\017\n\007GuideID\030\005 \001(\005\022\022\n\nP"
    "assportId\030\006 \001(\t\022\024\n\014RefreshToken\030\007 \001(\t\022\023\n"
    "\013QihooUserID\030\010 \001(\t\022\r\n\005Scope\030\t \001(\t", 753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ScutProtoBuffer/ActionProto.proto", &protobuf_RegisterTypes);
  RequestHello1001Pack::default_instance_ = new RequestHello1001Pack();
  ResponseHello1001Pack::default_instance_ = new ResponseHello1001Pack();
  RequestRegister1002Pack::default_instance_ = new RequestRegister1002Pack();
  ResponseRegister1002Pack::default_instance_ = new ResponseRegister1002Pack();
  RequestLogin1004Pack::default_instance_ = new RequestLogin1004Pack();
  ResponseLogin1004Pack::default_instance_ = new ResponseLogin1004Pack();
  RequestHello1001Pack::default_instance_->InitAsDefaultInstance();
  ResponseHello1001Pack::default_instance_->InitAsDefaultInstance();
  RequestRegister1002Pack::default_instance_->InitAsDefaultInstance();
  ResponseRegister1002Pack::default_instance_->InitAsDefaultInstance();
  RequestLogin1004Pack::default_instance_->InitAsDefaultInstance();
  ResponseLogin1004Pack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ScutProtoBuffer_2fActionProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ScutProtoBuffer_2fActionProto_2eproto {
  StaticDescriptorInitializer_ScutProtoBuffer_2fActionProto_2eproto() {
    protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  }
} static_descriptor_initializer_ScutProtoBuffer_2fActionProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestHello1001Pack::RequestHello1001Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestHello1001Pack::InitAsDefaultInstance() {
}

RequestHello1001Pack::RequestHello1001Pack(const RequestHello1001Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestHello1001Pack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHello1001Pack::~RequestHello1001Pack() {
  SharedDtor();
}

void RequestHello1001Pack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestHello1001Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHello1001Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHello1001Pack_descriptor_;
}

const RequestHello1001Pack& RequestHello1001Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  return *default_instance_;
}

RequestHello1001Pack* RequestHello1001Pack::default_instance_ = NULL;

RequestHello1001Pack* RequestHello1001Pack::New() const {
  return new RequestHello1001Pack;
}

void RequestHello1001Pack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHello1001Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestHello1001Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestHello1001Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestHello1001Pack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHello1001Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHello1001Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHello1001Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHello1001Pack::MergeFrom(const RequestHello1001Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHello1001Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHello1001Pack::CopyFrom(const RequestHello1001Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHello1001Pack::IsInitialized() const {

  return true;
}

void RequestHello1001Pack::Swap(RequestHello1001Pack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHello1001Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHello1001Pack_descriptor_;
  metadata.reflection = RequestHello1001Pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResponseHello1001Pack::ResponseHello1001Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseHello1001Pack::InitAsDefaultInstance() {
}

ResponseHello1001Pack::ResponseHello1001Pack(const ResponseHello1001Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseHello1001Pack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseHello1001Pack::~ResponseHello1001Pack() {
  SharedDtor();
}

void ResponseHello1001Pack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseHello1001Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHello1001Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHello1001Pack_descriptor_;
}

const ResponseHello1001Pack& ResponseHello1001Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  return *default_instance_;
}

ResponseHello1001Pack* ResponseHello1001Pack::default_instance_ = NULL;

ResponseHello1001Pack* ResponseHello1001Pack::New() const {
  return new ResponseHello1001Pack;
}

void ResponseHello1001Pack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseHello1001Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResponseHello1001Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseHello1001Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseHello1001Pack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHello1001Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseHello1001Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseHello1001Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseHello1001Pack::MergeFrom(const ResponseHello1001Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseHello1001Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHello1001Pack::CopyFrom(const ResponseHello1001Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHello1001Pack::IsInitialized() const {

  return true;
}

void ResponseHello1001Pack::Swap(ResponseHello1001Pack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseHello1001Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHello1001Pack_descriptor_;
  metadata.reflection = ResponseHello1001Pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRegister1002Pack::kServerIDFieldNumber;
const int RequestRegister1002Pack::kDeviceIDFieldNumber;
const int RequestRegister1002Pack::kMobileTypeFieldNumber;
const int RequestRegister1002Pack::kGameIDFieldNumber;
const int RequestRegister1002Pack::kClientAppVersionFieldNumber;
const int RequestRegister1002Pack::kScreenXFieldNumber;
const int RequestRegister1002Pack::kScreenYFieldNumber;
const int RequestRegister1002Pack::kRetailIDFieldNumber;
#endif  // !_MSC_VER

RequestRegister1002Pack::RequestRegister1002Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRegister1002Pack::InitAsDefaultInstance() {
}

RequestRegister1002Pack::RequestRegister1002Pack(const RequestRegister1002Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRegister1002Pack::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobiletype_ = 0;
  gameid_ = 0;
  clientappversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenx_ = 0;
  screeny_ = 0;
  retailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegister1002Pack::~RequestRegister1002Pack() {
  SharedDtor();
}

void RequestRegister1002Pack::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    delete serverid_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (clientappversion_ != &::google::protobuf::internal::kEmptyString) {
    delete clientappversion_;
  }
  if (retailid_ != &::google::protobuf::internal::kEmptyString) {
    delete retailid_;
  }
  if (this != default_instance_) {
  }
}

void RequestRegister1002Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRegister1002Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegister1002Pack_descriptor_;
}

const RequestRegister1002Pack& RequestRegister1002Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  return *default_instance_;
}

RequestRegister1002Pack* RequestRegister1002Pack::default_instance_ = NULL;

RequestRegister1002Pack* RequestRegister1002Pack::New() const {
  return new RequestRegister1002Pack;
}

void RequestRegister1002Pack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::kEmptyString) {
        serverid_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    mobiletype_ = 0;
    gameid_ = 0;
    if (has_clientappversion()) {
      if (clientappversion_ != &::google::protobuf::internal::kEmptyString) {
        clientappversion_->clear();
      }
    }
    screenx_ = 0;
    screeny_ = 0;
    if (has_retailid()) {
      if (retailid_ != &::google::protobuf::internal::kEmptyString) {
        retailid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRegister1002Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DeviceID;
        break;
      }

      // optional string DeviceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MobileType;
        break;
      }

      // optional int32 MobileType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MobileType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobiletype_)));
          set_has_mobiletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GameID;
        break;
      }

      // optional int32 GameID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ClientAppVersion;
        break;
      }

      // optional string ClientAppVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientAppVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientappversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientappversion().data(), this->clientappversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ScreenX;
        break;
      }

      // optional int32 ScreenX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenx_)));
          set_has_screenx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ScreenY;
        break;
      }

      // optional int32 ScreenY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screeny_)));
          set_has_screeny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_RetailID;
        break;
      }

      // optional string RetailID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RetailID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->retailid().data(), this->retailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRegister1002Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ServerID = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serverid(), output);
  }

  // optional string DeviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  // optional int32 MobileType = 3;
  if (has_mobiletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mobiletype(), output);
  }

  // optional int32 GameID = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gameid(), output);
  }

  // optional string ClientAppVersion = 5;
  if (has_clientappversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientappversion().data(), this->clientappversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->clientappversion(), output);
  }

  // optional int32 ScreenX = 6;
  if (has_screenx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->screenx(), output);
  }

  // optional int32 ScreenY = 7;
  if (has_screeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->screeny(), output);
  }

  // optional string RetailID = 8;
  if (has_retailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retailid().data(), this->retailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->retailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRegister1002Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ServerID = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // optional string DeviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // optional int32 MobileType = 3;
  if (has_mobiletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mobiletype(), target);
  }

  // optional int32 GameID = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gameid(), target);
  }

  // optional string ClientAppVersion = 5;
  if (has_clientappversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientappversion().data(), this->clientappversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clientappversion(), target);
  }

  // optional int32 ScreenX = 6;
  if (has_screenx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->screenx(), target);
  }

  // optional int32 ScreenY = 7;
  if (has_screeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->screeny(), target);
  }

  // optional string RetailID = 8;
  if (has_retailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retailid().data(), this->retailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->retailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRegister1002Pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerID = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional string DeviceID = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional int32 MobileType = 3;
    if (has_mobiletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobiletype());
    }

    // optional int32 GameID = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional string ClientAppVersion = 5;
    if (has_clientappversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientappversion());
    }

    // optional int32 ScreenX = 6;
    if (has_screenx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenx());
    }

    // optional int32 ScreenY = 7;
    if (has_screeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screeny());
    }

    // optional string RetailID = 8;
    if (has_retailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegister1002Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRegister1002Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRegister1002Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRegister1002Pack::MergeFrom(const RequestRegister1002Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_mobiletype()) {
      set_mobiletype(from.mobiletype());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_clientappversion()) {
      set_clientappversion(from.clientappversion());
    }
    if (from.has_screenx()) {
      set_screenx(from.screenx());
    }
    if (from.has_screeny()) {
      set_screeny(from.screeny());
    }
    if (from.has_retailid()) {
      set_retailid(from.retailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRegister1002Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRegister1002Pack::CopyFrom(const RequestRegister1002Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegister1002Pack::IsInitialized() const {

  return true;
}

void RequestRegister1002Pack::Swap(RequestRegister1002Pack* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(mobiletype_, other->mobiletype_);
    std::swap(gameid_, other->gameid_);
    std::swap(clientappversion_, other->clientappversion_);
    std::swap(screenx_, other->screenx_);
    std::swap(screeny_, other->screeny_);
    std::swap(retailid_, other->retailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRegister1002Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRegister1002Pack_descriptor_;
  metadata.reflection = RequestRegister1002Pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRegister1002Pack::kPassportFieldNumber;
const int ResponseRegister1002Pack::kPasswordFieldNumber;
#endif  // !_MSC_VER

ResponseRegister1002Pack::ResponseRegister1002Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRegister1002Pack::InitAsDefaultInstance() {
}

ResponseRegister1002Pack::ResponseRegister1002Pack(const ResponseRegister1002Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRegister1002Pack::SharedCtor() {
  _cached_size_ = 0;
  passport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRegister1002Pack::~ResponseRegister1002Pack() {
  SharedDtor();
}

void ResponseRegister1002Pack::SharedDtor() {
  if (passport_ != &::google::protobuf::internal::kEmptyString) {
    delete passport_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ResponseRegister1002Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegister1002Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRegister1002Pack_descriptor_;
}

const ResponseRegister1002Pack& ResponseRegister1002Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  return *default_instance_;
}

ResponseRegister1002Pack* ResponseRegister1002Pack::default_instance_ = NULL;

ResponseRegister1002Pack* ResponseRegister1002Pack::New() const {
  return new ResponseRegister1002Pack;
}

void ResponseRegister1002Pack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_passport()) {
      if (passport_ != &::google::protobuf::internal::kEmptyString) {
        passport_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRegister1002Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string passport = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passport().data(), this->passport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRegister1002Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string passport = 1;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->passport(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRegister1002Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string passport = 1;
  if (has_passport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passport().data(), this->passport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->passport(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRegister1002Pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string passport = 1;
    if (has_passport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passport());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegister1002Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRegister1002Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRegister1002Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRegister1002Pack::MergeFrom(const ResponseRegister1002Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passport()) {
      set_passport(from.passport());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRegister1002Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegister1002Pack::CopyFrom(const ResponseRegister1002Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegister1002Pack::IsInitialized() const {

  return true;
}

void ResponseRegister1002Pack::Swap(ResponseRegister1002Pack* other) {
  if (other != this) {
    std::swap(passport_, other->passport_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRegister1002Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRegister1002Pack_descriptor_;
  metadata.reflection = ResponseRegister1002Pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLogin1004Pack::kMobileTypeFieldNumber;
const int RequestLogin1004Pack::kPidFieldNumber;
const int RequestLogin1004Pack::kPwdFieldNumber;
const int RequestLogin1004Pack::kRetialIdFieldNumber;
const int RequestLogin1004Pack::kGameTypeFieldNumber;
const int RequestLogin1004Pack::kServerIdFieldNumber;
const int RequestLogin1004Pack::kDeviceIDFieldNumber;
const int RequestLogin1004Pack::kSexFieldNumber;
const int RequestLogin1004Pack::kNickNameFieldNumber;
const int RequestLogin1004Pack::kHeadIDFieldNumber;
const int RequestLogin1004Pack::kScreenXFieldNumber;
const int RequestLogin1004Pack::kScreenYFieldNumber;
#endif  // !_MSC_VER

RequestLogin1004Pack::RequestLogin1004Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestLogin1004Pack::InitAsDefaultInstance() {
}

RequestLogin1004Pack::RequestLogin1004Pack(const RequestLogin1004Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestLogin1004Pack::SharedCtor() {
  _cached_size_ = 0;
  mobiletype_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gametype_ = 0;
  serverid_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenx_ = 0;
  screeny_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLogin1004Pack::~RequestLogin1004Pack() {
  SharedDtor();
}

void RequestLogin1004Pack::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (retialid_ != &::google::protobuf::internal::kEmptyString) {
    delete retialid_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (headid_ != &::google::protobuf::internal::kEmptyString) {
    delete headid_;
  }
  if (this != default_instance_) {
  }
}

void RequestLogin1004Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLogin1004Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLogin1004Pack_descriptor_;
}

const RequestLogin1004Pack& RequestLogin1004Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  return *default_instance_;
}

RequestLogin1004Pack* RequestLogin1004Pack::default_instance_ = NULL;

RequestLogin1004Pack* RequestLogin1004Pack::New() const {
  return new RequestLogin1004Pack;
}

void RequestLogin1004Pack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mobiletype_ = 0;
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_retialid()) {
      if (retialid_ != &::google::protobuf::internal::kEmptyString) {
        retialid_->clear();
      }
    }
    gametype_ = 0;
    serverid_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_headid()) {
      if (headid_ != &::google::protobuf::internal::kEmptyString) {
        headid_->clear();
      }
    }
    screenx_ = 0;
    screeny_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestLogin1004Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MobileType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobiletype_)));
          set_has_mobiletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pid;
        break;
      }

      // optional string Pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Pwd;
        break;
      }

      // optional string Pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RetialId;
        break;
      }

      // optional string RetialId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RetialId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retialid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->retialid().data(), this->retialid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GameType;
        break;
      }

      // optional int32 GameType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ServerId;
        break;
      }

      // optional int32 ServerId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DeviceID;
        break;
      }

      // optional string DeviceID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Sex;
        break;
      }

      // optional int32 Sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_NickName;
        break;
      }

      // optional string NickName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_HeadID;
        break;
      }

      // optional string HeadID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeadID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headid().data(), this->headid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ScreenX;
        break;
      }

      // optional int32 ScreenX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenx_)));
          set_has_screenx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ScreenY;
        break;
      }

      // optional int32 ScreenY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screeny_)));
          set_has_screeny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestLogin1004Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MobileType = 1;
  if (has_mobiletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mobiletype(), output);
  }

  // optional string Pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pid(), output);
  }

  // optional string Pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }

  // optional string RetialId = 4;
  if (has_retialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retialid().data(), this->retialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->retialid(), output);
  }

  // optional int32 GameType = 5;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gametype(), output);
  }

  // optional int32 ServerId = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->serverid(), output);
  }

  // optional string DeviceID = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deviceid(), output);
  }

  // optional int32 Sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }

  // optional string NickName = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->nickname(), output);
  }

  // optional string HeadID = 10;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headid().data(), this->headid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->headid(), output);
  }

  // optional int32 ScreenX = 11;
  if (has_screenx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->screenx(), output);
  }

  // optional int32 ScreenY = 12;
  if (has_screeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->screeny(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestLogin1004Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MobileType = 1;
  if (has_mobiletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mobiletype(), target);
  }

  // optional string Pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pid(), target);
  }

  // optional string Pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // optional string RetialId = 4;
  if (has_retialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retialid().data(), this->retialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->retialid(), target);
  }

  // optional int32 GameType = 5;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gametype(), target);
  }

  // optional int32 ServerId = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->serverid(), target);
  }

  // optional string DeviceID = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceid(), target);
  }

  // optional int32 Sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }

  // optional string NickName = 9;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->nickname(), target);
  }

  // optional string HeadID = 10;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headid().data(), this->headid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->headid(), target);
  }

  // optional int32 ScreenX = 11;
  if (has_screenx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->screenx(), target);
  }

  // optional int32 ScreenY = 12;
  if (has_screeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->screeny(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestLogin1004Pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MobileType = 1;
    if (has_mobiletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobiletype());
    }

    // optional string Pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional string Pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string RetialId = 4;
    if (has_retialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retialid());
    }

    // optional int32 GameType = 5;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional int32 ServerId = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional string DeviceID = 7;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional int32 Sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string NickName = 9;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string HeadID = 10;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headid());
    }

    // optional int32 ScreenX = 11;
    if (has_screenx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenx());
    }

    // optional int32 ScreenY = 12;
    if (has_screeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screeny());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLogin1004Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestLogin1004Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestLogin1004Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestLogin1004Pack::MergeFrom(const RequestLogin1004Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobiletype()) {
      set_mobiletype(from.mobiletype());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_retialid()) {
      set_retialid(from.retialid());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_screenx()) {
      set_screenx(from.screenx());
    }
    if (from.has_screeny()) {
      set_screeny(from.screeny());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestLogin1004Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLogin1004Pack::CopyFrom(const RequestLogin1004Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLogin1004Pack::IsInitialized() const {

  return true;
}

void RequestLogin1004Pack::Swap(RequestLogin1004Pack* other) {
  if (other != this) {
    std::swap(mobiletype_, other->mobiletype_);
    std::swap(pid_, other->pid_);
    std::swap(pwd_, other->pwd_);
    std::swap(retialid_, other->retialid_);
    std::swap(gametype_, other->gametype_);
    std::swap(serverid_, other->serverid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(sex_, other->sex_);
    std::swap(nickname_, other->nickname_);
    std::swap(headid_, other->headid_);
    std::swap(screenx_, other->screenx_);
    std::swap(screeny_, other->screeny_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestLogin1004Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLogin1004Pack_descriptor_;
  metadata.reflection = RequestLogin1004Pack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseLogin1004Pack::kSessionIDFieldNumber;
const int ResponseLogin1004Pack::kUserIDFieldNumber;
const int ResponseLogin1004Pack::kUserTypeFieldNumber;
const int ResponseLogin1004Pack::kLoginTimeFieldNumber;
const int ResponseLogin1004Pack::kGuideIDFieldNumber;
const int ResponseLogin1004Pack::kPassportIdFieldNumber;
const int ResponseLogin1004Pack::kRefreshTokenFieldNumber;
const int ResponseLogin1004Pack::kQihooUserIDFieldNumber;
const int ResponseLogin1004Pack::kScopeFieldNumber;
#endif  // !_MSC_VER

ResponseLogin1004Pack::ResponseLogin1004Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseLogin1004Pack::InitAsDefaultInstance() {
}

ResponseLogin1004Pack::ResponseLogin1004Pack(const ResponseLogin1004Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseLogin1004Pack::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usertype_ = 0;
  logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guideid_ = 0;
  passportid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refreshtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qihoouserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLogin1004Pack::~ResponseLogin1004Pack() {
  SharedDtor();
}

void ResponseLogin1004Pack::SharedDtor() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    delete logintime_;
  }
  if (passportid_ != &::google::protobuf::internal::kEmptyString) {
    delete passportid_;
  }
  if (refreshtoken_ != &::google::protobuf::internal::kEmptyString) {
    delete refreshtoken_;
  }
  if (qihoouserid_ != &::google::protobuf::internal::kEmptyString) {
    delete qihoouserid_;
  }
  if (scope_ != &::google::protobuf::internal::kEmptyString) {
    delete scope_;
  }
  if (this != default_instance_) {
  }
}

void ResponseLogin1004Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLogin1004Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseLogin1004Pack_descriptor_;
}

const ResponseLogin1004Pack& ResponseLogin1004Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScutProtoBuffer_2fActionProto_2eproto();
  return *default_instance_;
}

ResponseLogin1004Pack* ResponseLogin1004Pack::default_instance_ = NULL;

ResponseLogin1004Pack* ResponseLogin1004Pack::New() const {
  return new ResponseLogin1004Pack;
}

void ResponseLogin1004Pack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
        sessionid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    usertype_ = 0;
    if (has_logintime()) {
      if (logintime_ != &::google::protobuf::internal::kEmptyString) {
        logintime_->clear();
      }
    }
    guideid_ = 0;
    if (has_passportid()) {
      if (passportid_ != &::google::protobuf::internal::kEmptyString) {
        passportid_->clear();
      }
    }
    if (has_refreshtoken()) {
      if (refreshtoken_ != &::google::protobuf::internal::kEmptyString) {
        refreshtoken_->clear();
      }
    }
    if (has_qihoouserid()) {
      if (qihoouserid_ != &::google::protobuf::internal::kEmptyString) {
        qihoouserid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scope()) {
      if (scope_ != &::google::protobuf::internal::kEmptyString) {
        scope_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseLogin1004Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SessionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserID;
        break;
      }

      // optional string UserID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UserType;
        break;
      }

      // optional int32 UserType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_LoginTime;
        break;
      }

      // optional string LoginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logintime().data(), this->logintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GuideID;
        break;
      }

      // optional int32 GuideID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guideid_)));
          set_has_guideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PassportId;
        break;
      }

      // optional string PassportId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassportId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passportid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passportid().data(), this->passportid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RefreshToken;
        break;
      }

      // optional string RefreshToken = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RefreshToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refreshtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refreshtoken().data(), this->refreshtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_QihooUserID;
        break;
      }

      // optional string QihooUserID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QihooUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qihoouserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qihoouserid().data(), this->qihoouserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Scope;
        break;
      }

      // optional string Scope = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scope().data(), this->scope().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseLogin1004Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string SessionID = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sessionid(), output);
  }

  // optional string UserID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // optional int32 UserType = 3;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usertype(), output);
  }

  // optional string LoginTime = 4;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->logintime(), output);
  }

  // optional int32 GuideID = 5;
  if (has_guideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guideid(), output);
  }

  // optional string PassportId = 6;
  if (has_passportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passportid().data(), this->passportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->passportid(), output);
  }

  // optional string RefreshToken = 7;
  if (has_refreshtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refreshtoken().data(), this->refreshtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->refreshtoken(), output);
  }

  // optional string QihooUserID = 8;
  if (has_qihoouserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qihoouserid().data(), this->qihoouserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->qihoouserid(), output);
  }

  // optional string Scope = 9;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->scope(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseLogin1004Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string SessionID = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional string UserID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // optional int32 UserType = 3;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usertype(), target);
  }

  // optional string LoginTime = 4;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logintime(), target);
  }

  // optional int32 GuideID = 5;
  if (has_guideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guideid(), target);
  }

  // optional string PassportId = 6;
  if (has_passportid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passportid().data(), this->passportid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->passportid(), target);
  }

  // optional string RefreshToken = 7;
  if (has_refreshtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refreshtoken().data(), this->refreshtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->refreshtoken(), target);
  }

  // optional string QihooUserID = 8;
  if (has_qihoouserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qihoouserid().data(), this->qihoouserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->qihoouserid(), target);
  }

  // optional string Scope = 9;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->scope(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseLogin1004Pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SessionID = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionid());
    }

    // optional string UserID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional int32 UserType = 3;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertype());
    }

    // optional string LoginTime = 4;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logintime());
    }

    // optional int32 GuideID = 5;
    if (has_guideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guideid());
    }

    // optional string PassportId = 6;
    if (has_passportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passportid());
    }

    // optional string RefreshToken = 7;
    if (has_refreshtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refreshtoken());
    }

    // optional string QihooUserID = 8;
    if (has_qihoouserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qihoouserid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Scope = 9;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scope());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLogin1004Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseLogin1004Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseLogin1004Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseLogin1004Pack::MergeFrom(const ResponseLogin1004Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_guideid()) {
      set_guideid(from.guideid());
    }
    if (from.has_passportid()) {
      set_passportid(from.passportid());
    }
    if (from.has_refreshtoken()) {
      set_refreshtoken(from.refreshtoken());
    }
    if (from.has_qihoouserid()) {
      set_qihoouserid(from.qihoouserid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scope()) {
      set_scope(from.scope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseLogin1004Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLogin1004Pack::CopyFrom(const ResponseLogin1004Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLogin1004Pack::IsInitialized() const {

  return true;
}

void ResponseLogin1004Pack::Swap(ResponseLogin1004Pack* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(userid_, other->userid_);
    std::swap(usertype_, other->usertype_);
    std::swap(logintime_, other->logintime_);
    std::swap(guideid_, other->guideid_);
    std::swap(passportid_, other->passportid_);
    std::swap(refreshtoken_, other->refreshtoken_);
    std::swap(qihoouserid_, other->qihoouserid_);
    std::swap(scope_, other->scope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseLogin1004Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseLogin1004Pack_descriptor_;
  metadata.reflection = ResponseLogin1004Pack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
