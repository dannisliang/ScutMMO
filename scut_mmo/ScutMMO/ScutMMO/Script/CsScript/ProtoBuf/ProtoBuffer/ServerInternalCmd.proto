
package ProtoBuf;

//服务器和服务器之间的协议号定义
enum ServerInternalCmd
{
	//登录
	SERVER_INTERNAL_LOGIN_BEGIN = 1;
	CENTER_SERVER_PROTOCOL_LOGINLOGIC_REQ						= 2;	// 用户拿着token请求登录逻辑服务器，逻辑服务器进一步跟中心服验证token
	CENTER_SERVER_PROTOCOL_ENTERWORLD_REQ						= 3;	// 用户请求进入游戏
	CENTER_SERVER_PROTOCOL_LOGOUTLOGIC_REQ						= 4;	// 用户登出游戏，通知中心服
	CENTER_SERVER_PROTOCOL_SYNC_CHARACTER_REQ					= 5;	// 同步character基本信息到center server
	CENTER_SERVER_PROTOCOL_CLIENT_RECONNECT_LOGIC_REQ			= 6;	// 客户端重新连接逻辑服（断线重连），每次重连都让中心服验证一次
	
	CENTER_SERVER_PROTOCOL_ACCOUNT_LOGIN_CHECK_REQ				= 7;	//登录服向中心服请求账号登录验证	
	CENTER_SERVER_PROTOCOL_LOGIN_TOKEN_CHECK_REQ				= 8;	//逻辑服向中心服请求登录token验证	
	CENTER_SERVER_PROTOCOL_ACCOUNT_LOGOUT_NOTIFY				= 9;	//登录服通知中心服账号下线	
	CENTER_SERVER_PROTOCOL_LOGIC_TO_CENTER_CREATE_CHAR_NOTIFY	= 10;	//逻辑服通知中心服创建角色
	CENTER_SERVER_PROTOCOL_LOGIC_TO_CENTER_DEL_CHAR_NOTIFY		= 11;	//逻辑服通知中心服删除角色	
	CENTER_SERVER_PROTOCOL_LOGIC_TO_CENTER_CHAR_ATTR_SYNC		= 12;	//逻辑服通知中心服角色属性同步
	CENTER_SERVER_PROTOCOL_LOGINLOGIC_RSP						= 13;
	CENTER_SERVER_PROTOCOL_ENTERWORLD_RSP						= 14;	// 用户请求进入游戏返回
	CENTER_SERVER_PROTOCOL_CLIENT_RECONNECT_LOGIC_RSP			= 15;	
	CENTER_SERVER_PROTOCOL_ACCOUNT_LOGIN_CHECK_RSP				= 16;	//登录服向中心服请求账户登录验证 返回	
	CENTER_SERVER_PROTOCOL_LOGIN_TOKEN_CHECK_RSP				= 17;	//逻辑服向中心服请求登录token验证 返回	
	CENTER_SERVER_PROTOCOL_KICK_CHANNEL_USER_NOTIFY				= 18;	//中心服通知逻辑服账户被踢下线	
	CENTER_SERVER_PROTOCOL_CENTER_ACCOUNT_LOGOUT_NOTIFY			= 19;	//中心服通知登录服 中心服账号下线

	SERVER_INTERNAL_LOGIN_END									= 50;

	//系统
	SERVER_INTERNAL_SYSTEM_BEGIN								= 60;
	CENTER_SERVER_PROTOCOL_PING_REQ								= 61;
	LOG_SERVER_PROTOCOL_PING_REQ								= 62;
	LOGIN_SERVER_PROTOCOL_PING_REQ								= 63;
	CENTER_SERVER_PROTOCOL_REDIRECT_TO_CENTERSERVER				= 64;
	CENTER_SERVER_PROTOCOL_LOGINSERVER_REGISTE					= 65;
	CENTER_SERVER_PROTOCOL_LOGICSERVER_REGISTE					= 66;
	CENTER_SERVER_PROTOCOL_BROADCAST_TO_LOGIC					= 67;	// 中心服广播给逻辑服
	CENTER_SERVER_PROTOCOL_REDIRECT_TO_CLIENT					= 68;	// 中心服发给客户端的重定向协议（先发给逻辑服，再转给客户端）
	CENTER_SERVER_PROTOCOL_DBPROXY_ADDRESSINFO					= 69;	// @temp by JinnMa // 广播 dbproxy server 地址信息给 logic server(to logic server) // 当前是逻辑服根据配置直接去取（时候是否要改变？）				

	SERVER_INTERNAL_SYSTEM_END									= 80;


	//场景
	SERVER_INTERNAL_SCENE_BEGIN									= 90;
	CENTER_SERVER_PROTOCOL_SWITCH_SERVER_BEGIN					= 91;	//用户开始切逻辑服
	CENTER_SERVER_PROTOCOL_RSP_SCENCE_ID						= 92;	//中心服分配场景Id给逻辑服
	SERVER_INTERNAL_SCENE_END									= 110;


					
	//聊天
	SERVER_INTERNAL_CHAT_BEGIN									= 120;
	CENTER_SERVER_PROTOCOL_CHAT_REQ								= 121;	// 请求聊天
	CENTER_SERVER_PROTOCOL_GWSYSCHATMSGNOTIFY					= 122;	// 逻辑服通知世界服转发传闻或广播
	SERVER_INTERNAL_CHAT_END									= 130;
	
	//好友
	SERVER_INTERNAL_FRIEND_BEGIN								= 140;
	CENTER_SERVER_PROTOCOL_GET_PHYSICAL_TO_LOGIC				= 141;	// 中心服向逻辑服请求添加体力
	CENTER_SERVER_PROTOCOL_GET_PHYSICAL_GIFT_TO_LOGIC			= 142;	// 中心服向逻辑服请求领取礼包
	SERVER_INTERNAL_FRIEND_END									= 160;


	//副本
	SERVER_INTERNAL_DUPLICATE_BEGIN								= 170;
	LOGIC_TO_CENTER_DUPLICATE_ENTER_DUP_REQ						= 171;	//逻辑服向中心服请求进入副本
	CENTER_TO_LOGIC_DUPLICATE_ENTER_DUP_RSP						= 172;	//中心服返回逻辑服进入副本

	LOGIC_TO_CENTER_CREATE_DUPLICATE_SCENE_REQ					= 173;	//逻辑服向中心服请求创建副本场景
	CENTER_TO_LOGIC_CREATE_DUPLICATE_SCENE_RSP					= 174;	//中心服返回逻辑服创建副本场景结果
	LOGIC_TO_CENTER_CREATE_DUPLICATE_RSP						= 175;	//逻辑服向中心服返回创建副本结果
	CENTER_TO_LOGIC_DUPLICATE_NOTIFY_PREPARE					= 176;	//中心服通知逻辑服玩家准备进副本
	LOGIC_TO_CENTER_DUPLICATE_PREPARE_RSP						= 177;	//逻辑服返回中心服玩家准备进副本
	CENTER_TO_LOGIC_DUPLICATE_NOTIFY_ENTER						= 178;	//中心服通知逻辑服进副本
	LOGIC_TO_CENTER_DUPLICATE_ENTER_RSP							= 179;	//逻辑服返回中心服进入副本
	LOGIC_TO_CENTER_DUPLICATE_LEAVE_RSP							= 180;	//逻辑服返回中心服离开副本
	LOGIC_TO_CENTER_DUPLICATE_BEGIN_RSP							= 181;	//逻辑服返回中心服副本开始
	LOGIC_TO_CENTER_DUPLICATE_END_RSP							= 182;	//逻辑服返回中心服副本结束
	LOGIC_TO_CENTER_DUPLICATE_DESTORY_RSP						= 183;	//逻辑服返回中心服副本销毁
	SERVER_INTERNAL_DUPLICATE_END								= 190;

	SERVER_INTERNAL_MAIL_BEGIN									= 200;
	CENTER_SERVER_PROTOCOL_SEND_MAIL_REQ						= 201;
	CENTER_SERVER_PROTOCOL_SEND_MAIL_RSP						= 202;
	CENTER_SERVER_PROTOCOL_GET_MAIL_ATTACHMENT_TO_LOGIC			= 203;
	CENTER_SERVER_PROTOCOL_UPDATE_MAIL_NOTIFY					= 204;  // 逻辑服通知世界服提取附件成功
	CENTER_SERVER_PROTOCOL_GET_ALL_MAIL_ATTACHMENT_TO_LOGIC		= 205;	// 通知逻辑服一键领取所有附件
	CENTER_SERVER_PROTOCOL_SEND_SYSTEM_MAIL						= 206;	// 逻辑服请求世界服发送系统邮件
	CENTER_SERVER_PROTOCOL_SEND_MAIL_TO_LOGIC					= 207;	// 世界服通知逻辑服

	SERVER_INTERNAL_MAIL_END									= 250;

	//阵营
	SERVER_INTERNAL_CAMP_BEGIN								= 260;
	CENTER_TO_LOGIC_CAMP_CHAR_INFO_NOTIFY					= 261;	//中心服通知逻辑服玩家阵营信息
	CENTER_TO_LOGIC_CAMP_CHECK_NOTICE_COST_REQ				= 262;	//中心服请求逻辑服验证阵营公告扣费
	LOGIC_TO_CENTER_CAMP_CHECK_NOTICE_COST_RSP				= 263;	//逻辑服返回中心服验证阵营公告扣费
	SERVER_INTERNAL_CAMP_END								= 299;

	//成就
	SERVER_INTERNAL_ACHIEVEMENT_BEGIN						= 300;
	SERVER_INTERNAL_ACHIEVEMENTNOTIFY						= 301;	//中心服通知逻辑服更新成就信息
	SERVER_INTERNAL_ACHIEVEMENT_END							= 310;

	//商城
	SERVER_INTERNAL_MALL_BEGIN								= 320;
	LOGIC_TO_CENTER_BUY_VERIFY_REQ							= 321;		//购买请求 逻辑服到中心服验证
	CENTER_TO_LOGIC_BUY_VERIFY_RSP							= 322;		//中心服处理返回
	SERVER_INTERNAL_MALL_END								= 330;
	
	//活跃度系统(每日每周刷新归到活跃度系统中)
	SERVER_INTERNAL_ACTIVITY_BEGIN							= 331;
	CENTER_TO_LOGIC_DAILY_UPDATE_NOTIFY						= 332;		//中心服通知逻辑服每日刷新
	CENTER_TO_LOGIC_WEEK_UPDATE_NOTIFY						= 333;		//中心服通知逻辑服每周刷新
	SERVER_INTERNAL_ACTIVITY_END							= 400;


	//房间
	SERVER_INTERNAL_ROOM_BEGIN								= 450;
	LOGIC_TO_CENTER_ROOM_CREATE								= 451;	//创建房间
	LOGIC_TO_CENTER_ROOM_SET_PWD							= 452;	//设置密码
	LOGIC_TO_CENTER_ROOM_JOIN								= 453;	//加入房间
	LOGIC_TO_CENTER_ROOM_INVITE_FRIEND						= 454;	//邀请好友
	LOGIC_TO_CENTER_ROOM_INVITE_REPLY						= 455;	//回复邀请
	LOGIC_TO_CENTER_ROOM_KICK								= 456;	//请离房间
	LOGIC_TO_CENTER_ROOM_LEAVE								= 457;	//离开房间
	LOGIC_TO_CENTER_ROOM_AUTO_JOIN							= 458;	//自动加入
	CENTER_TO_LOGIC_ROOM_CHAR_ROOM_NOTIFY					= 459;	//中心服通知逻辑服更新玩家房间
	SERVER_INTERNAL_ROOM_END								= 480;
};



enum DBProxyServerCmd
{

	//系统
	DBPROXY_PROTOCOL_SYSTEM_BEGIN			= 1;
	DBPROXY_PROTOCOL_PING_REQ				= 2;

	DBPROXY_PROTOCOL_GLOBAL_GET_REQ			= 3;	//获取阵营数据
	DBPROXY_PROTOCOL_GLOBAL_GET_RSP			= 4;	//阵营数据返回
	DBPROXY_PROTOCOL_GLOBAL_SAVE_REQ		= 5;	//保存阵营数据
	DBPROXY_PROTOCOL_GLOBAL_SAVE_RSP		= 6;	//保存阵营数据返回
	DBPROXY_PROTOCOL_ALL_CHARACTER_CAMP_REQ = 7;	//获取所有角色阵营数据
	DBPROXY_PROTOCOL_ALL_CHARACTER_CAMP_RSP = 8;	//所有角色阵营数据返回

	DBPROXY_PROTOCOL_SYSTEM_END				= 20;

	//登录
	DBPROXY_PROTOCOL_LOGIN_BEGIN						= 30;
	DBPROXY_PROTOCOL_GET_CHARACTER_LIST_REQ				= 31;	// 获取已创建的角色列表请求
	DBPROXY_PROTOCOL_GET_CHARACTER_LIST_RSP				= 32;	// 角色列表返回
	DBPROXY_PROTOCOL_CREATE_CHARACTER_REQ				= 33;	// 创建角色请求
	DBPROXY_PROTOCOL_CREATE_CHARACTER_RSP				= 34;	// 创建角色返回
	DBPROXY_PROTOCOL_GET_CHARACTER_DATA_REQ				= 35;	// 获取单个角色的详细信息请求
	DBPROXY_PROTOCOL_GET_CHARACTER_DATA_RSP				= 36;	// 角色详细信息返回
	DBPROXY_PROTOCOL_DEL_CHARACTER_REQ					= 37;	// 删除角色
	DBPROXY_PROTOCOL_DEL_CHARACTER_RSP					= 38;	// 删除角色返回

	DBPROXY_PROTOCOL_GET_CHARACTER_OFFLINE_DATA_REQ		= 39;	// 获取单个角色离线信息请求（用来做 Center Server的Cache数据）
	DBPROXY_PROTOCOL_GET_CHARACTER_OFFLINE_DATA_RSP		= 40;	// 角色离线信息返回

	DBPROXY_PROTOCOL_ACCOUNT_LOGINT_REQ					= 41;	// 账户登录请求
	DBPROXY_PROTOCOL_ACCOUNT_LOGINT_RSP					= 42;	// 账户登录返回
	DBPROXY_PROTOCOL_ACCOUNT_SET_ONLINE_FALG_REQ		= 43;	// 账户设置在线状态
	DBPROXY_PROTOCOL_OFFLINE_CHARACTER_LIST_REQ			= 44;	// 获取离线玩家列表
	DBPROXY_PROTOCOL_OFFLINE_CHARACTER_LIST_RSP			= 45;	// 离线玩家列表返回
	DBPROXY_PROTOCOL_ACTIVE_CHARACTER_DATA_REQ			= 46;	// 获取单个活跃玩家数据
	DBPROXY_PROTOCOL_ACTIVE_CHARACTER_DATA_RSP			= 47;	// 单个活跃玩家数据返回
	DBPROXY_PROTOCOL_GET_PLAYER_ROLE_LIST				= 48;	// 获取某玩家的角色列表基本信息
	
	DBPROXY_PROTOCOL_LOGIN_END							= 60;


	//好友
	DBPROXY_PROTOCOL_FRIEND_BEGIN						= 70;
	DBPROXY_PROTOCOL_ALL_FRIEND_DATA_REQ				= 71;	// 获取所有好友数据
	DBPROXY_PROTOCOL_SAVE_FRIEND_DATA_REQ				= 72;	// 保存好友数据
	DBPROXY_PROTOCOL_ALL_FRIEND_DATA_RSP				= 73;	// 所有好友数据返回
	DBPROXY_PROTOCOL_SAVE_FRIEND_DATA_RSP				= 74;	// 保存好友数据返回
	DBPROXY_PROTOCOL_FRIEND_END							= 80;

	//角色
	DBPROXY_PROTOCOL_PLAYER_BEGIN						= 90;
	DBPROXY_PROTOCOL_SET_CHARACTER_DATA_REQ				= 91;	// 更新单个角色的详细信息请求
	DBPROXY_PROTOCOL_SET_CHARACTER_DATA_RSP				= 92;	// 更新角色信息返回	
	DBPROXY_PROTOCOL_PLAYER_END							= 100;

	//邮件
	DBPROXY_PROTOCOL_MAIL_BEGIN							= 101;
	DBPROXY_PROTOCOL_TRADING_MAIL_DATA_REQ				= 102;	//	请求所有玩家交易邮件数据
	DBPROXY_PROTOCOL_SAVE_MAIL_DATA_REQ					= 103;	//	保存玩家邮件数据
	DBPROXY_PROTOCOL_CHARACTER_MAIL_DATA_REQ			= 104;	//	请求单个玩家邮件数据
	DBPROXY_PROTOCOL_TRADING_MAIL_DATA_RSP				= 105;	//	所有邮件摘要数据返回
	DBPROXY_PROTOCOL_CHARACTER_MAIL_DATA_RSP			= 106;	//	玩家邮件数据返回
	DBPROXY_PROTOCOL_OFFLINE_MAIL_DATA_REQ				= 107;	//	玩家离线邮件数据加载
	DBPROXY_PROTOCOL_OFFLINE_MAIL_DATA_RSP				= 108;	//  玩家离线邮件数据返回
	DBPROXY_PROTOCOL_SAVE_OFFLINE_MAIL_DATA_REQ			= 109;	//	玩家离线邮件数据保存请求
	DBPROXY_PROTOCOL_MAX_MAIL_ID_REQ					= 110;	//  最大邮件ID请求
	DBPROXY_PROTOCOL_MAX_MAIL_ID_RSP					= 111;	//  最大邮件ID返回
	DBPROXY_PROTOCOL_CHARACTER_DELETE_MAIL_REQ			= 112;	//	删除某个玩家的所有邮件数据
	DBPROXY_PROTOCOL_MAIL_END							= 120;	
	//阵营
	DBPROXY_PROTOCOL_CAMP_BEGIN							= 130;
	DBPROXY_PROTOCOL_CAMP_PLAYER_GET_REQ				= 131;	//获取玩家阵营数据
	DBPROXY_PROTOCOL_CAMP_PLAYER_GET_RSP				= 132;	//玩家阵营数据返回
	DBPROXY_PROTOCOL_CAMP_PLAYER_SAVE_REQ				= 133;	//保存玩家阵营数据
	DBPROXY_PROTOCOL_CAMP_PLAYER_SAVE_RSP				= 134;	//保存玩家阵营数据返回
	DBPROXY_PROTOCOL_CAMP_END							= 140;

	//商城
	DBPROXY_PROTOCOL_MALL_BEGIN							= 150;
	DBPROXY_PROTOCOL_CHARACTER_MALL_DATA_REQ			= 151;  //获取玩家商城数据
	DBPROXY_PROTOCOL_CHARACTER_MALL_DATA_RSP			= 152;  //玩家商城数据返回
	DBPROXY_PROTOCOL_MALL_PLAYER_SAVE_REQ				= 153;  //保存玩家商城数据
	DBPROXY_PROTOCOL_MALL_PLAYER_SAVE_RSP				= 154;	//保存玩家商城数据返回
	DBPROXY_PROTOCOL_MALL_END							= 160;

	DBPROXY_PROTOCOL_END = 200;
};