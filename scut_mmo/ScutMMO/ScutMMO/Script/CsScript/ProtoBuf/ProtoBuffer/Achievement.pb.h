// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Achievement.proto

#ifndef PROTOBUF_ProtoBuffer_2fAchievement_2eproto__INCLUDED
#define PROTOBUF_ProtoBuffer_2fAchievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBuffer/ComProtocol.pb.h"
#include "ProtoBuffer/ClientToServerCmd.pb.h"
#include "Common/ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

class CGGetAchievementInfoReq;
class ClientAchievementSortInfo;
class GCGetAchievementInfoRsp;
class CGGetAchievementRewardReq;
class GCGetAchievementRewardRsp;
class CGGetAchievementBoxRewardReq;
class CGGetAchievementBoxRewardRsp;
class ClientAchievementInfo;
class GCAchievementNotify;
class WGAchievementNotify;

// ===================================================================

class CGGetAchievementInfoReq : public ::google::protobuf::Message {
 public:
  CGGetAchievementInfoReq();
  virtual ~CGGetAchievementInfoReq();

  CGGetAchievementInfoReq(const CGGetAchievementInfoReq& from);

  inline CGGetAchievementInfoReq& operator=(const CGGetAchievementInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetAchievementInfoReq& default_instance();

  void Swap(CGGetAchievementInfoReq* other);

  // implements Message ----------------------------------------------

  CGGetAchievementInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetAchievementInfoReq& from);
  void MergeFrom(const CGGetAchievementInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoBuf.CGGetAchievementInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static CGGetAchievementInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class ClientAchievementSortInfo : public ::google::protobuf::Message {
 public:
  ClientAchievementSortInfo();
  virtual ~ClientAchievementSortInfo();

  ClientAchievementSortInfo(const ClientAchievementSortInfo& from);

  inline ClientAchievementSortInfo& operator=(const ClientAchievementSortInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientAchievementSortInfo& default_instance();

  void Swap(ClientAchievementSortInfo* other);

  // implements Message ----------------------------------------------

  ClientAchievementSortInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientAchievementSortInfo& from);
  void MergeFrom(const ClientAchievementSortInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sortType = 1;
  inline bool has_sorttype() const;
  inline void clear_sorttype();
  static const int kSortTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sorttype() const;
  inline void set_sorttype(::google::protobuf::uint32 value);

  // repeated .ProtoBuf.ClientAchievementInfo achievementInfoList = 2;
  inline int achievementinfolist_size() const;
  inline void clear_achievementinfolist();
  static const int kAchievementInfoListFieldNumber = 2;
  inline const ::ProtoBuf::ClientAchievementInfo& achievementinfolist(int index) const;
  inline ::ProtoBuf::ClientAchievementInfo* mutable_achievementinfolist(int index);
  inline ::ProtoBuf::ClientAchievementInfo* add_achievementinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >&
      achievementinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >*
      mutable_achievementinfolist();

  // optional uint32 achievementProgress = 3;
  inline bool has_achievementprogress() const;
  inline void clear_achievementprogress();
  static const int kAchievementProgressFieldNumber = 3;
  inline ::google::protobuf::uint32 achievementprogress() const;
  inline void set_achievementprogress(::google::protobuf::uint32 value);

  // optional uint32 achievementReward = 4;
  inline bool has_achievementreward() const;
  inline void clear_achievementreward();
  static const int kAchievementRewardFieldNumber = 4;
  inline ::google::protobuf::uint32 achievementreward() const;
  inline void set_achievementreward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ClientAchievementSortInfo)
 private:
  inline void set_has_sorttype();
  inline void clear_has_sorttype();
  inline void set_has_achievementprogress();
  inline void clear_has_achievementprogress();
  inline void set_has_achievementreward();
  inline void clear_has_achievementreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo > achievementinfolist_;
  ::google::protobuf::uint32 sorttype_;
  ::google::protobuf::uint32 achievementprogress_;
  ::google::protobuf::uint32 achievementreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static ClientAchievementSortInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCGetAchievementInfoRsp : public ::google::protobuf::Message {
 public:
  GCGetAchievementInfoRsp();
  virtual ~GCGetAchievementInfoRsp();

  GCGetAchievementInfoRsp(const GCGetAchievementInfoRsp& from);

  inline GCGetAchievementInfoRsp& operator=(const GCGetAchievementInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetAchievementInfoRsp& default_instance();

  void Swap(GCGetAchievementInfoRsp* other);

  // implements Message ----------------------------------------------

  GCGetAchievementInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetAchievementInfoRsp& from);
  void MergeFrom(const GCGetAchievementInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.ClientAchievementSortInfo achievementList = 1;
  inline int achievementlist_size() const;
  inline void clear_achievementlist();
  static const int kAchievementListFieldNumber = 1;
  inline const ::ProtoBuf::ClientAchievementSortInfo& achievementlist(int index) const;
  inline ::ProtoBuf::ClientAchievementSortInfo* mutable_achievementlist(int index);
  inline ::ProtoBuf::ClientAchievementSortInfo* add_achievementlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementSortInfo >&
      achievementlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementSortInfo >*
      mutable_achievementlist();

  // @@protoc_insertion_point(class_scope:ProtoBuf.GCGetAchievementInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementSortInfo > achievementlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static GCGetAchievementInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class CGGetAchievementRewardReq : public ::google::protobuf::Message {
 public:
  CGGetAchievementRewardReq();
  virtual ~CGGetAchievementRewardReq();

  CGGetAchievementRewardReq(const CGGetAchievementRewardReq& from);

  inline CGGetAchievementRewardReq& operator=(const CGGetAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetAchievementRewardReq& default_instance();

  void Swap(CGGetAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  CGGetAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetAchievementRewardReq& from);
  void MergeFrom(const CGGetAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sortType = 1;
  inline bool has_sorttype() const;
  inline void clear_sorttype();
  static const int kSortTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sorttype() const;
  inline void set_sorttype(::google::protobuf::uint32 value);

  // optional uint32 achievementId = 2;
  inline bool has_achievementid() const;
  inline void clear_achievementid();
  static const int kAchievementIdFieldNumber = 2;
  inline ::google::protobuf::uint32 achievementid() const;
  inline void set_achievementid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CGGetAchievementRewardReq)
 private:
  inline void set_has_sorttype();
  inline void clear_has_sorttype();
  inline void set_has_achievementid();
  inline void clear_has_achievementid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sorttype_;
  ::google::protobuf::uint32 achievementid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static CGGetAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class GCGetAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  GCGetAchievementRewardRsp();
  virtual ~GCGetAchievementRewardRsp();

  GCGetAchievementRewardRsp(const GCGetAchievementRewardRsp& from);

  inline GCGetAchievementRewardRsp& operator=(const GCGetAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetAchievementRewardRsp& default_instance();

  void Swap(GCGetAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  GCGetAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetAchievementRewardRsp& from);
  void MergeFrom(const GCGetAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sortType = 1;
  inline bool has_sorttype() const;
  inline void clear_sorttype();
  static const int kSortTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sorttype() const;
  inline void set_sorttype(::google::protobuf::uint32 value);

  // optional uint32 achievementId = 2;
  inline bool has_achievementid() const;
  inline void clear_achievementid();
  static const int kAchievementIdFieldNumber = 2;
  inline ::google::protobuf::uint32 achievementid() const;
  inline void set_achievementid(::google::protobuf::uint32 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.GCGetAchievementRewardRsp)
 private:
  inline void set_has_sorttype();
  inline void clear_has_sorttype();
  inline void set_has_achievementid();
  inline void clear_has_achievementid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sorttype_;
  ::google::protobuf::uint32 achievementid_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static GCGetAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class CGGetAchievementBoxRewardReq : public ::google::protobuf::Message {
 public:
  CGGetAchievementBoxRewardReq();
  virtual ~CGGetAchievementBoxRewardReq();

  CGGetAchievementBoxRewardReq(const CGGetAchievementBoxRewardReq& from);

  inline CGGetAchievementBoxRewardReq& operator=(const CGGetAchievementBoxRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetAchievementBoxRewardReq& default_instance();

  void Swap(CGGetAchievementBoxRewardReq* other);

  // implements Message ----------------------------------------------

  CGGetAchievementBoxRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetAchievementBoxRewardReq& from);
  void MergeFrom(const CGGetAchievementBoxRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 prizeId = 1;
  inline bool has_prizeid() const;
  inline void clear_prizeid();
  static const int kPrizeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 prizeid() const;
  inline void set_prizeid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CGGetAchievementBoxRewardReq)
 private:
  inline void set_has_prizeid();
  inline void clear_has_prizeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 prizeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static CGGetAchievementBoxRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class CGGetAchievementBoxRewardRsp : public ::google::protobuf::Message {
 public:
  CGGetAchievementBoxRewardRsp();
  virtual ~CGGetAchievementBoxRewardRsp();

  CGGetAchievementBoxRewardRsp(const CGGetAchievementBoxRewardRsp& from);

  inline CGGetAchievementBoxRewardRsp& operator=(const CGGetAchievementBoxRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetAchievementBoxRewardRsp& default_instance();

  void Swap(CGGetAchievementBoxRewardRsp* other);

  // implements Message ----------------------------------------------

  CGGetAchievementBoxRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetAchievementBoxRewardRsp& from);
  void MergeFrom(const CGGetAchievementBoxRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 prizeId = 1;
  inline bool has_prizeid() const;
  inline void clear_prizeid();
  static const int kPrizeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 prizeid() const;
  inline void set_prizeid(::google::protobuf::uint32 value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CGGetAchievementBoxRewardRsp)
 private:
  inline void set_has_prizeid();
  inline void clear_has_prizeid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 prizeid_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static CGGetAchievementBoxRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class ClientAchievementInfo : public ::google::protobuf::Message {
 public:
  ClientAchievementInfo();
  virtual ~ClientAchievementInfo();

  ClientAchievementInfo(const ClientAchievementInfo& from);

  inline ClientAchievementInfo& operator=(const ClientAchievementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientAchievementInfo& default_instance();

  void Swap(ClientAchievementInfo* other);

  // implements Message ----------------------------------------------

  ClientAchievementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientAchievementInfo& from);
  void MergeFrom(const ClientAchievementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 completeCount = 3;
  inline bool has_completecount() const;
  inline void clear_completecount();
  static const int kCompleteCountFieldNumber = 3;
  inline ::google::protobuf::uint32 completecount() const;
  inline void set_completecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ClientAchievementInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_completecount();
  inline void clear_has_completecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 completecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static ClientAchievementInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCAchievementNotify : public ::google::protobuf::Message {
 public:
  GCAchievementNotify();
  virtual ~GCAchievementNotify();

  GCAchievementNotify(const GCAchievementNotify& from);

  inline GCAchievementNotify& operator=(const GCAchievementNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCAchievementNotify& default_instance();

  void Swap(GCAchievementNotify* other);

  // implements Message ----------------------------------------------

  GCAchievementNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCAchievementNotify& from);
  void MergeFrom(const GCAchievementNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.ClientAchievementInfo changeAchievementList = 1;
  inline int changeachievementlist_size() const;
  inline void clear_changeachievementlist();
  static const int kChangeAchievementListFieldNumber = 1;
  inline const ::ProtoBuf::ClientAchievementInfo& changeachievementlist(int index) const;
  inline ::ProtoBuf::ClientAchievementInfo* mutable_changeachievementlist(int index);
  inline ::ProtoBuf::ClientAchievementInfo* add_changeachievementlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >&
      changeachievementlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >*
      mutable_changeachievementlist();

  // @@protoc_insertion_point(class_scope:ProtoBuf.GCAchievementNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo > changeachievementlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static GCAchievementNotify* default_instance_;
};
// -------------------------------------------------------------------

class WGAchievementNotify : public ::google::protobuf::Message {
 public:
  WGAchievementNotify();
  virtual ~WGAchievementNotify();

  WGAchievementNotify(const WGAchievementNotify& from);

  inline WGAchievementNotify& operator=(const WGAchievementNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WGAchievementNotify& default_instance();

  void Swap(WGAchievementNotify* other);

  // implements Message ----------------------------------------------

  WGAchievementNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WGAchievementNotify& from);
  void MergeFrom(const WGAchievementNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 parameterType = 3;
  inline bool has_parametertype() const;
  inline void clear_parametertype();
  static const int kParameterTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 parametertype() const;
  inline void set_parametertype(::google::protobuf::uint32 value);

  // optional uint32 parameter = 4;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 4;
  inline ::google::protobuf::uint32 parameter() const;
  inline void set_parameter(::google::protobuf::uint32 value);

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.WGAchievementNotify)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_parametertype();
  inline void clear_has_parametertype();
  inline void set_has_parameter();
  inline void clear_has_parameter();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 parametertype_;
  ::google::protobuf::uint32 parameter_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static WGAchievementNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// CGGetAchievementInfoReq

// -------------------------------------------------------------------

// ClientAchievementSortInfo

// optional uint32 sortType = 1;
inline bool ClientAchievementSortInfo::has_sorttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientAchievementSortInfo::set_has_sorttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientAchievementSortInfo::clear_has_sorttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientAchievementSortInfo::clear_sorttype() {
  sorttype_ = 0u;
  clear_has_sorttype();
}
inline ::google::protobuf::uint32 ClientAchievementSortInfo::sorttype() const {
  return sorttype_;
}
inline void ClientAchievementSortInfo::set_sorttype(::google::protobuf::uint32 value) {
  set_has_sorttype();
  sorttype_ = value;
}

// repeated .ProtoBuf.ClientAchievementInfo achievementInfoList = 2;
inline int ClientAchievementSortInfo::achievementinfolist_size() const {
  return achievementinfolist_.size();
}
inline void ClientAchievementSortInfo::clear_achievementinfolist() {
  achievementinfolist_.Clear();
}
inline const ::ProtoBuf::ClientAchievementInfo& ClientAchievementSortInfo::achievementinfolist(int index) const {
  return achievementinfolist_.Get(index);
}
inline ::ProtoBuf::ClientAchievementInfo* ClientAchievementSortInfo::mutable_achievementinfolist(int index) {
  return achievementinfolist_.Mutable(index);
}
inline ::ProtoBuf::ClientAchievementInfo* ClientAchievementSortInfo::add_achievementinfolist() {
  return achievementinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >&
ClientAchievementSortInfo::achievementinfolist() const {
  return achievementinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >*
ClientAchievementSortInfo::mutable_achievementinfolist() {
  return &achievementinfolist_;
}

// optional uint32 achievementProgress = 3;
inline bool ClientAchievementSortInfo::has_achievementprogress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientAchievementSortInfo::set_has_achievementprogress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientAchievementSortInfo::clear_has_achievementprogress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientAchievementSortInfo::clear_achievementprogress() {
  achievementprogress_ = 0u;
  clear_has_achievementprogress();
}
inline ::google::protobuf::uint32 ClientAchievementSortInfo::achievementprogress() const {
  return achievementprogress_;
}
inline void ClientAchievementSortInfo::set_achievementprogress(::google::protobuf::uint32 value) {
  set_has_achievementprogress();
  achievementprogress_ = value;
}

// optional uint32 achievementReward = 4;
inline bool ClientAchievementSortInfo::has_achievementreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientAchievementSortInfo::set_has_achievementreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientAchievementSortInfo::clear_has_achievementreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientAchievementSortInfo::clear_achievementreward() {
  achievementreward_ = 0u;
  clear_has_achievementreward();
}
inline ::google::protobuf::uint32 ClientAchievementSortInfo::achievementreward() const {
  return achievementreward_;
}
inline void ClientAchievementSortInfo::set_achievementreward(::google::protobuf::uint32 value) {
  set_has_achievementreward();
  achievementreward_ = value;
}

// -------------------------------------------------------------------

// GCGetAchievementInfoRsp

// repeated .ProtoBuf.ClientAchievementSortInfo achievementList = 1;
inline int GCGetAchievementInfoRsp::achievementlist_size() const {
  return achievementlist_.size();
}
inline void GCGetAchievementInfoRsp::clear_achievementlist() {
  achievementlist_.Clear();
}
inline const ::ProtoBuf::ClientAchievementSortInfo& GCGetAchievementInfoRsp::achievementlist(int index) const {
  return achievementlist_.Get(index);
}
inline ::ProtoBuf::ClientAchievementSortInfo* GCGetAchievementInfoRsp::mutable_achievementlist(int index) {
  return achievementlist_.Mutable(index);
}
inline ::ProtoBuf::ClientAchievementSortInfo* GCGetAchievementInfoRsp::add_achievementlist() {
  return achievementlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementSortInfo >&
GCGetAchievementInfoRsp::achievementlist() const {
  return achievementlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementSortInfo >*
GCGetAchievementInfoRsp::mutable_achievementlist() {
  return &achievementlist_;
}

// -------------------------------------------------------------------

// CGGetAchievementRewardReq

// optional uint32 sortType = 1;
inline bool CGGetAchievementRewardReq::has_sorttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetAchievementRewardReq::set_has_sorttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetAchievementRewardReq::clear_has_sorttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetAchievementRewardReq::clear_sorttype() {
  sorttype_ = 0u;
  clear_has_sorttype();
}
inline ::google::protobuf::uint32 CGGetAchievementRewardReq::sorttype() const {
  return sorttype_;
}
inline void CGGetAchievementRewardReq::set_sorttype(::google::protobuf::uint32 value) {
  set_has_sorttype();
  sorttype_ = value;
}

// optional uint32 achievementId = 2;
inline bool CGGetAchievementRewardReq::has_achievementid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGetAchievementRewardReq::set_has_achievementid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGetAchievementRewardReq::clear_has_achievementid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGetAchievementRewardReq::clear_achievementid() {
  achievementid_ = 0u;
  clear_has_achievementid();
}
inline ::google::protobuf::uint32 CGGetAchievementRewardReq::achievementid() const {
  return achievementid_;
}
inline void CGGetAchievementRewardReq::set_achievementid(::google::protobuf::uint32 value) {
  set_has_achievementid();
  achievementid_ = value;
}

// -------------------------------------------------------------------

// GCGetAchievementRewardRsp

// optional uint32 sortType = 1;
inline bool GCGetAchievementRewardRsp::has_sorttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGetAchievementRewardRsp::set_has_sorttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGetAchievementRewardRsp::clear_has_sorttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGetAchievementRewardRsp::clear_sorttype() {
  sorttype_ = 0u;
  clear_has_sorttype();
}
inline ::google::protobuf::uint32 GCGetAchievementRewardRsp::sorttype() const {
  return sorttype_;
}
inline void GCGetAchievementRewardRsp::set_sorttype(::google::protobuf::uint32 value) {
  set_has_sorttype();
  sorttype_ = value;
}

// optional uint32 achievementId = 2;
inline bool GCGetAchievementRewardRsp::has_achievementid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGetAchievementRewardRsp::set_has_achievementid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGetAchievementRewardRsp::clear_has_achievementid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGetAchievementRewardRsp::clear_achievementid() {
  achievementid_ = 0u;
  clear_has_achievementid();
}
inline ::google::protobuf::uint32 GCGetAchievementRewardRsp::achievementid() const {
  return achievementid_;
}
inline void GCGetAchievementRewardRsp::set_achievementid(::google::protobuf::uint32 value) {
  set_has_achievementid();
  achievementid_ = value;
}

// optional uint32 ret = 3;
inline bool GCGetAchievementRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCGetAchievementRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCGetAchievementRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCGetAchievementRewardRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GCGetAchievementRewardRsp::ret() const {
  return ret_;
}
inline void GCGetAchievementRewardRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// CGGetAchievementBoxRewardReq

// optional uint32 prizeId = 1;
inline bool CGGetAchievementBoxRewardReq::has_prizeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetAchievementBoxRewardReq::set_has_prizeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetAchievementBoxRewardReq::clear_has_prizeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetAchievementBoxRewardReq::clear_prizeid() {
  prizeid_ = 0u;
  clear_has_prizeid();
}
inline ::google::protobuf::uint32 CGGetAchievementBoxRewardReq::prizeid() const {
  return prizeid_;
}
inline void CGGetAchievementBoxRewardReq::set_prizeid(::google::protobuf::uint32 value) {
  set_has_prizeid();
  prizeid_ = value;
}

// -------------------------------------------------------------------

// CGGetAchievementBoxRewardRsp

// optional uint32 prizeId = 1;
inline bool CGGetAchievementBoxRewardRsp::has_prizeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetAchievementBoxRewardRsp::set_has_prizeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetAchievementBoxRewardRsp::clear_has_prizeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetAchievementBoxRewardRsp::clear_prizeid() {
  prizeid_ = 0u;
  clear_has_prizeid();
}
inline ::google::protobuf::uint32 CGGetAchievementBoxRewardRsp::prizeid() const {
  return prizeid_;
}
inline void CGGetAchievementBoxRewardRsp::set_prizeid(::google::protobuf::uint32 value) {
  set_has_prizeid();
  prizeid_ = value;
}

// optional uint32 ret = 2;
inline bool CGGetAchievementBoxRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGetAchievementBoxRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGetAchievementBoxRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGetAchievementBoxRewardRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 CGGetAchievementBoxRewardRsp::ret() const {
  return ret_;
}
inline void CGGetAchievementBoxRewardRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ClientAchievementInfo

// optional uint32 id = 1;
inline bool ClientAchievementInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientAchievementInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientAchievementInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientAchievementInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ClientAchievementInfo::id() const {
  return id_;
}
inline void ClientAchievementInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 status = 2;
inline bool ClientAchievementInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientAchievementInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientAchievementInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientAchievementInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ClientAchievementInfo::status() const {
  return status_;
}
inline void ClientAchievementInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 completeCount = 3;
inline bool ClientAchievementInfo::has_completecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientAchievementInfo::set_has_completecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientAchievementInfo::clear_has_completecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientAchievementInfo::clear_completecount() {
  completecount_ = 0u;
  clear_has_completecount();
}
inline ::google::protobuf::uint32 ClientAchievementInfo::completecount() const {
  return completecount_;
}
inline void ClientAchievementInfo::set_completecount(::google::protobuf::uint32 value) {
  set_has_completecount();
  completecount_ = value;
}

// -------------------------------------------------------------------

// GCAchievementNotify

// repeated .ProtoBuf.ClientAchievementInfo changeAchievementList = 1;
inline int GCAchievementNotify::changeachievementlist_size() const {
  return changeachievementlist_.size();
}
inline void GCAchievementNotify::clear_changeachievementlist() {
  changeachievementlist_.Clear();
}
inline const ::ProtoBuf::ClientAchievementInfo& GCAchievementNotify::changeachievementlist(int index) const {
  return changeachievementlist_.Get(index);
}
inline ::ProtoBuf::ClientAchievementInfo* GCAchievementNotify::mutable_changeachievementlist(int index) {
  return changeachievementlist_.Mutable(index);
}
inline ::ProtoBuf::ClientAchievementInfo* GCAchievementNotify::add_changeachievementlist() {
  return changeachievementlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >&
GCAchievementNotify::changeachievementlist() const {
  return changeachievementlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ClientAchievementInfo >*
GCAchievementNotify::mutable_changeachievementlist() {
  return &changeachievementlist_;
}

// -------------------------------------------------------------------

// WGAchievementNotify

// optional uint32 charId = 1;
inline bool WGAchievementNotify::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WGAchievementNotify::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WGAchievementNotify::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WGAchievementNotify::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 WGAchievementNotify::charid() const {
  return charid_;
}
inline void WGAchievementNotify::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 type = 2;
inline bool WGAchievementNotify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WGAchievementNotify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WGAchievementNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WGAchievementNotify::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 WGAchievementNotify::type() const {
  return type_;
}
inline void WGAchievementNotify::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 parameterType = 3;
inline bool WGAchievementNotify::has_parametertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WGAchievementNotify::set_has_parametertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WGAchievementNotify::clear_has_parametertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WGAchievementNotify::clear_parametertype() {
  parametertype_ = 0u;
  clear_has_parametertype();
}
inline ::google::protobuf::uint32 WGAchievementNotify::parametertype() const {
  return parametertype_;
}
inline void WGAchievementNotify::set_parametertype(::google::protobuf::uint32 value) {
  set_has_parametertype();
  parametertype_ = value;
}

// optional uint32 parameter = 4;
inline bool WGAchievementNotify::has_parameter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WGAchievementNotify::set_has_parameter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WGAchievementNotify::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WGAchievementNotify::clear_parameter() {
  parameter_ = 0u;
  clear_has_parameter();
}
inline ::google::protobuf::uint32 WGAchievementNotify::parameter() const {
  return parameter_;
}
inline void WGAchievementNotify::set_parameter(::google::protobuf::uint32 value) {
  set_has_parameter();
  parameter_ = value;
}

// optional uint32 count = 5;
inline bool WGAchievementNotify::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WGAchievementNotify::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WGAchievementNotify::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WGAchievementNotify::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 WGAchievementNotify::count() const {
  return count_;
}
inline void WGAchievementNotify::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBuffer_2fAchievement_2eproto__INCLUDED
