// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ServerToClientCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/ServerToClientCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::EnumDescriptor* ServerToClientCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GAME_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGIN_FLAG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGOUT_FLAG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fServerToClientCmd_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fServerToClientCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/ServerToClientCmd.proto");
  GOOGLE_CHECK(file != NULL);
  ServerToClientCmd_descriptor_ = file->enum_type(0);
  GAME_STATE_descriptor_ = file->enum_type(1);
  LOGIN_FLAG_descriptor_ = file->enum_type(2);
  LOGOUT_FLAG_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fServerToClientCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fServerToClientCmd_2eproto() {
}

void protobuf_AddDesc_ProtoBuffer_2fServerToClientCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#ProtoBuffer/ServerToClientCmd.proto\022\010P"
    "rotoBuf*\3722\n\021ServerToClientCmd\022 \n\034SERVER_"
    "TO_CLIENT_LOGIN_BEGIN\020\001\022!\n\035LOGIN_TO_CLIE"
    "NT_CHECK_VERSION\020\004\022!\n\035LOGIN_TO_CLIENT_AC"
    "COUNT_LOGIN\020\005\022\030\n\024LOGIC_TO_CLIENT_PING\020B\022"
    "\035\n\031LOGIC_TO_CLIENT_RECONNECT\020C\022&\n\"LOGIC_"
    "TO_CLIENT_LOGOUT_LOGICSERVER\020D\022%\n!LOGIC_"
    "TO_CLIENT_LOGIN_LOGICSERVER\020E\022&\n\"LOGIC_T"
    "O_CLIENT_GET_CHARACTER_LIST\020F\022$\n LOGIC_T"
    "O_CLIENT_CREATE_CHARACTER\020G\022!\n\035LOGIC_TO_"
    "CLIENT_DEL_CHARACTER\020H\022\'\n#LOGIC_TO_CLIEN"
    "T_NOTIFY_CLIENT_STATE\020I\022\036\n\032SERVER_TO_CLI"
    "ENT_LOGIN_END\020Z\022!\n\035SERVER_TO_CLIENT_PLAY"
    "ER_BEGIN\020d\022\036\n\032LOGIC_TO_CLIENT_PLAYERINFO"
    "\020e\022$\n LOGIC_TO_CLIENT_CREATURE_DESTORY\020f"
    "\022#\n\037LOGIC_TO_CLIENT_CREATURE_CREATE\020g\022)\n"
    "%LOGIC_TO_CLIENT_CREATURE_SYN_ATTR_ALL\020h"
    "\022%\n!LOGIC_TO_CLIENT_CREATURE_SYN_ATTR\020i\022"
    "\"\n\036LOGIC_TO_CLIENT_CREATURE_LEVUP\020j\022\037\n\033S"
    "ERVER_TO_CLIENT_PLAYER_END\020n\022 \n\034SERVER_T"
    "O_CLIENT_SCENE_BEGIN\020o\022\036\n\032LOGIC_TO_CLIEN"
    "T_ACTOR_MOVE\020p\022#\n\037LOGIC_TO_CLIENT_ACTOR_"
    "SKILLMOVE\020q\022#\n\037LOGIC_TO_CLIENT_NOTIFY_LO"
    "AD_MAP\020r\022&\n\"LOGIC_TO_CLIENT_SCENE_TRANS_"
    "RESULT\020s\022*\n&LOGIC_TO_CLIENT_NOTIFY_TRANS"
    "_LOGICNODE\020t\022#\n\037LOGIC_TO_CLIENT_ACTOR_BE"
    "AT_BACK\020u\022%\n!LOGIC_TO_CLIENT_ACTOR_TELEP"
    "ORTING\020v\022%\n!LOGIC_TO_CLIENT_ACTOR_ROCKER"
    "_MOVE\020w\022$\n LOGIC_TO_CLIENT_ACTOR_POS_UPD"
    "ATE\020x\022\037\n\032SERVER_TO_CLIENT_SCENE_END\020\201\001\022!"
    "\n\034SERVER_TO_CLIENT_SKILL_BEGIN\020\202\001\022+\n&LOG"
    "IC_TO_CLIENT_SKILL_RESULT_BROADCAST\020\203\001\022("
    "\n#LOGIC_TO_CLIENT_SKILL_USE_BROADCAST\020\204\001"
    "\022*\n%LOGIC_TO_CLIENT_BUFF_RESULT_BROADCAS"
    "T\020\205\001\022\'\n\"LOGIC_TO_CLIENT_SKILL_LEVEL_UP_R"
    "SP\020\206\001\022#\n\036LOGIC_TO_CLIENT_SKILL_STOP_USE\020"
    "\207\001\022\037\n\032SERVER_TO_CLIENT_SKILL_END\020\214\001\022#\n\036S"
    "ERVER_TO_CLIENT_PACKAGE_BEGIN\020\226\001\022\'\n\"LOGI"
    "C_TO_CLIENT_PACKAGE_LABEL_INFO\020\227\001\022!\n\034LOG"
    "IC_TO_CLIENT_PACKAGE_INFO\020\230\001\022!\n\034LOGIC_TO"
    "_CLIENT_PACKAGE_SORT\020\231\001\022!\n\034LOGIC_TO_CLIE"
    "NT_PACKAGE_SELL\020\232\001\022 \n\033LOGIC_TO_CLIENT_PA"
    "CKAGE_USE\020\233\001\022#\n\036LOGIC_TO_CLIENT_PACKAGE_"
    "UPDATE\020\234\001\022*\n%LOGIC_TO_CLIENT_PACKAGE_UPD"
    "ATE_EXPAND\020\235\001\022&\n!LOGIC_TO_CLIENT_PLAYER_"
    "EQUIP_INFO\020\236\001\022\'\n\"LOGIC_TO_CLIENT_PLAYER_"
    "EQUIP_DRESS\020\237\001\022)\n$LOGIC_TO_CLIENT_PLAYER"
    "_EQUIP_UNDRESS\020\240\001\022(\n#LOGIC_TO_CLIENT_PLA"
    "YER_EQUIP_UPDATE\020\241\001\022.\n)LOGIC_TO_CLIENT_P"
    "LAYER_EQUIP_ONEKEY_DRESS\020\242\001\022 \n\033LOGIC_TO_"
    "CLIENT_EQUIP_STREN\020\243\001\022\'\n\"LOGIC_TO_CLIENT"
    "_EQUIP_ONEKEY_STREN\020\244\001\022!\n\034LOGIC_TO_CLIEN"
    "T_EQUIP_REFINE\020\245\001\022\"\n\035LOGIC_TO_CLIENT_EQU"
    "IP_DIGHOLE\020\246\001\022 \n\033LOGIC_TO_CLIENT_EQUIP_I"
    "NLAY\020\247\001\022\"\n\035LOGIC_TO_CLIENT_EQUIP_TAKEOFF"
    "\020\250\001\022\"\n\035LOGIC_TO_CLIENT_EQUIP_COMPOSE\020\251\001\022"
    "!\n\034LOGIC_TO_CLIENT_EQUIP_RECAST\020\252\001\022%\n LO"
    "GIC_TO_CLIENT_EQUIP_INLAY_HOLY\020\253\001\022\'\n\"LOG"
    "IC_TO_CLIENT_EQUIP_TAKEOFF_HOLY\020\254\001\022+\n&LO"
    "GIC_TO_CLIENT_EQUIP_COMPOSE_MATERIAL\020\255\001\022"
    "\'\n\"LOGIC_TO_CLIENT_PLAYER_PICKUP_DROP\020\256\001"
    "\022%\n LOGIC_TO_CLIENT_PLYAER_EQUIP_DEL\020\257\001\022"
    "!\n\034SERVER_TO_CLIENT_PACKAGE_END\020\276\001\022%\n SE"
    "RVER_TO_CLIENT_DUPLICATE_BEGIN\020\310\001\022#\n\036LOG"
    "IC_TO_CLIENT_DUPLICATE_INFO\020\311\001\022$\n\037LOGIC_"
    "TO_CLIENT_DUPLICATE_ENTER\020\312\001\022#\n\036LOGIC_TO"
    "_CLIENT_DUPLICATE_EXIT\020\313\001\022%\n LOGIC_TO_CL"
    "IENT_DUPLICATE_RESULT\020\314\001\022)\n$LOGIC_TO_CLI"
    "ENT_DUPLICATE_AUTO_FIGHT\020\315\001\022&\n!LOGIC_TO_"
    "CLIENT_DUPLICATE_LOTTERY\020\316\001\022&\n!LOGIC_TO_"
    "CLIENT_DUPLICATE_BUY_NUM\020\317\001\022$\n\037LOGIC_TO_"
    "CLIENT_DUPLICATE_SWEEP\020\320\001\022%\n LOGIC_TO_CL"
    "IENT_DUPLICATE_UPDATE\020\321\001\022%\n LOGIC_TO_CLI"
    "ENT_DUPLICATE_RELIVE\020\322\001\022$\n\037LOGIC_TO_CLIE"
    "NT_DUPLICATE_LEAVE\020\323\001\022)\n$LOGIC_TO_CLIENT"
    "_DUPLICATE_ENTER_AREA\020\324\001\022#\n\036SERVER_TO_CL"
    "IENT_DUPLICATE_END\020\334\001\022 \n\033SERVER_TO_CLIEN"
    "T_BUFF_BEGIN\020\346\001\022#\n\036LOGIC_TO_CLIENT_START"
    "_BUFF_BAG\020\347\001\022!\n\034LOGIC_TO_CLIENT_END_BUFF"
    "_BAG\020\350\001\022\"\n\035LOGIC_TO_CLIENT_MISS_BUFF_BAG"
    "\020\351\001\022#\n\036LOGIC_TO_CLIENT_SYN_BUFF_STATE\020\352\001"
    "\022\036\n\031LOGIC_TO_CLIENT_PLAY_IDLE\020\353\001\022)\n$LOGI"
    "C_TO_CLIENT_REPLACE_NORMAL_SKILL\020\354\001\022\036\n\031S"
    "ERVER_TO_CLIENT_BUFF_END\020\372\001\022#\n\036SERVER_TO"
    "_CLIENT_MISSION_BEGIN\020\216\002\022&\n!LOGIC_TO_CLI"
    "ENT_QUERY_MiSSIONLIST\020\217\002\022\"\n\035LOGIC_TO_CLI"
    "ENT_ACCEPTMISSION\020\220\002\022#\n\036LOGIC_TO_CLIENT_"
    "ABANDONMISSION\020\221\002\022\"\n\035LOGIC_TO_CLIENT_SUB"
    "MITMISSION\020\222\002\022.\n)LOGIC_TO_CLIENT_UPDATEM"
    "ISSIONSTATUSNOTIFY\020\223\002\022/\n*LOGIC_TO_CLIENT"
    "_UPDATEACCEPTABLELISTNOTIFY\020\224\002\022)\n$LOGIC_"
    "TO_CLIENT_RECEIVEMISSIONNOTIFY\020\225\002\022*\n%LOG"
    "IC_TO_CLIENT_GCDELETEMISSIONNOTIFY\020\226\002\022\'\n"
    "\"LOGIC_TO_CLIENT_GETCAMPMISSIONINFO\020\227\002\022$"
    "\n\037LOGIC_TO_CLIENT_DICECAMPMISSION\020\230\002\022%\n "
    "LOGIC_TO_CLIENT_GETCAMPBOXREWARD\020\231\002\022!\n\034S"
    "ERVER_TO_CLIENT_MISSION_END\020\254\002\022 \n\033SERVER"
    "_TO_CLIENT_CHAT_BEGIN\020\266\002\022\037\n\032LOGIC_TO_CLI"
    "ENT_CHATMSGREQ\020\267\002\022(\n#LOGIC_TO_CLIENT_SYS"
    "TEMCHATMSGNOTIFY\020\270\002\022#\n\036CENTER_TO_CLIENT_"
    "ASKOFFLINEMSG\020\271\002\022*\n%CENTER_TO_CLIENT_INT"
    "RVALASKOFFLINEMSG\020\272\002\022+\n&CENTER_TO_CLIENT"
    "_CHARACTER_DETAIL_DATA\020\273\002\022\036\n\031SERVER_TO_C"
    "LIENT_CHAT_END\020\312\002\022\"\n\035SERVER_TO_CLIENT_FR"
    "IEND_BEGIN\020\336\002\022$\n\037CENTER_TO_CLIENT_APPLY_"
    "RELATION\020\337\002\022$\n\037CENTER_TO_CLIENT_AGREE_RE"
    "LATION\020\340\002\022%\n CENTER_TO_CLIENT_DELETE_REL"
    "ATION\020\341\002\022&\n!CENTER_TO_CLIENT_RECENT_CHAT"
    "_LIST\020\342\002\022#\n\036CENTER_TO_CLIENT_ONEKEY_FRIE"
    "ND\020\343\002\022#\n\036CENTER_TO_CLIENT_RELATION_INFO\020"
    "\344\002\022!\n\034CENTER_TO_CLIENT_SEARCH_USER\020\345\002\022%\n"
    " CENTER_TO_CLIENT_NOTIFY_RELATION\020\346\002\022#\n\036"
    "CENTER_TO_CLIENT_GIVE_PHYSICAL\020\347\002\022&\n!CEN"
    "TER_TO_CLIENT_AllGIVE_PHYSICAL\020\350\002\022\"\n\035CEN"
    "TER_TO_CLIENT_GET_PHYSICAL\020\351\002\022\'\n\"CENTER_"
    "TO_CLIENT_GET_PHYSICAL_GIFT\020\352\002\022\037\n\032CENTER"
    "_TO_CLIENT_APPLYLIST\020\353\002\022$\n\037CENTER_TO_CLI"
    "ENT_CLEARAPPLYLIST\020\354\002\022$\n\037CENTER_TO_CLIEN"
    "T_PHYSICALNOTIFY\020\355\002\022 \n\033SERVER_TO_CLIENT_"
    "FRIEND_END\020\374\002\022 \n\033SERVER_TO_CLIENT_MAIL_B"
    "EGIN\020\220\003\022\036\n\031SERVER_TO_CLIENT_SENDMAIL\020\221\003\022"
    " \n\033SERVER_TO_CLIENT_DELETEMAIL\020\222\003\022#\n\036SER"
    "VER_TO_CLIENT_NEWMAILNOTIFY\020\223\003\022%\n SERVER"
    "_TO_CLIENT_GETMAILITEMLIST\020\224\003\022\035\n\030SERVER_"
    "TO_CLIENT_ASKMAIL\020\225\003\022&\n!SERVER_TO_CLIENT"
    "_UNREADMAILNOTIFY\020\226\003\022\'\n\"SERVER_TO_CLIENT"
    "_GETMAILATTACHMENT\020\227\003\022*\n%SERVER_TO_CLIEN"
    "T_GETALLMAILATTACHMENT\020\230\003\022\036\n\031SERVER_TO_C"
    "LIENT_MAIL_END\020\302\003\022 \n\033SERVER_TO_CLIENT_CA"
    "MP_BEGIN\020\314\003\022\037\n\032CENTER_TO_CLIENT_CAMP_JOI"
    "N\020\315\003\022!\n\034CENTER_TO_CLIENT_CAMP_CHANGE\020\316\003\022"
    "\037\n\032CENTER_TO_CLIENT_CAMP_INFO\020\317\003\022$\n\037CENT"
    "ER_TO_CLIENT_CAMP_RANK_INFO\020\320\003\022%\n CENTER"
    "_TO_CLIENT_CAMP_HONOR_INFO\020\321\003\022)\n$CENTER_"
    "TO_CLIENT_CAMP_PUBLISH_NOTICE\020\322\003\022\'\n\"CENT"
    "ER_TO_CLIENT_CAMP_BROAD_NOTICE\020\323\003\022\036\n\031SER"
    "VER_TO_CLIENT_CAMP_END\020\210\004\022)\n$SERVER_TO_C"
    "LIENT_ACHIEVENTMENT_BEGIN\020\222\004\022)\n$SERVER_T"
    "O_CLIENT_ACHIEVENTMENTNOTIFY\020\223\004\022%\n SERVE"
    "R_TO_CLIENT_ACHIEVEMENTINFO\020\224\004\022*\n%SERVER"
    "_TO_CLIENT_GETACHIEVEMENTREWARD\020\226\004\022-\n(SE"
    "RVER_TO_CLIENT_GETACHIEVEMENTBOXREWARD\020\227"
    "\004\022\'\n\"SERVER_TO_CLIENT_ACHIEVENTMENT_END\020"
    "\234\004\022\"\n\035SERVER_TO_CLIENT_DEPUTY_BEGIN\020\246\004\022/"
    "\n*SERVER_TO_CLIENT_DEPUTY_COLLECT_SKILL_"
    "INFO\020\247\004\022,\n\'SERVER_TO_CLIENT_DEPUTY_MAKE_"
    "SKILL_INFO\020\250\004\0222\n-SERVER_TO_CLIENT_DEPUTY"
    "_UPGRADE_COLLECT_SKILL\020\251\004\022.\n)SERVER_TO_C"
    "LIENT_DEPUTY_REFINE_MAKE_SKILL\020\252\004\022,\n\'SER"
    "VER_TO_CLIENT_DEPUTY_COLLECT_OPERATE\020\253\004\022"
    ")\n$SERVER_TO_CLIENT_DEPUTY_MAKE_OPERATE\020"
    "\254\004\022+\n&SERVER_TO_CLIENT_DEPUTY_NOTIFY_COL"
    "LECT\020\255\004\0222\n-SERVER_TO_CLIENT_DEPUTY_UPDAT"
    "E_COLLECT_ENERGY\020\256\004\022\037\n\032SERVER_TO_CLIENT_"
    "PVP_BEGIN\020\366\004\022\"\n\035SERVER_TO_CLIENT_RET_SET"
    "_MODE\020\367\004\022\'\n\"SERVER_TO_CLIENT_PVP_KILLING"
    "_VALUE\020\370\004\022\'\n\"SERVER_TO_CLIENT_UPDATE_RED"
    "_PLAYER\020\371\004\022\035\n\030SERVER_TO_CLIENT_PVP_END\020\377"
    "\004\022 \n\033SERVER_TO_CLIENT_MALL_BEGIN\020\212\005\022%\n C"
    "ENTER_TO_CLIENT_ASK_DATA_RESULT\020\213\005\022\037\n\032LO"
    "GIC_TO_CLIENT_BUY_RESULT\020\214\005\022#\n\036CENTER_TO"
    "_CLIENT_CHANGE_NOTIFY\020\215\005\022%\n CENTER_TO_CL"
    "IENT_GET_TIME_RESULT\020\216\005\022\036\n\031SERVER_TO_CLI"
    "ENT_MALL_END\020\224\005\022#\n\036LOGIC_TO_CLIENT_PROTO"
    "COL_COUNT\020\200\010*\264\003\n\nGAME_STATE\022\023\n\017GAME_STAT"
    "E_NULL\020\000\022!\n\035GAME_STATE_LOGIN_ONLINE_BEGI"
    "N\020\001\022#\n\037GAME_STATE_LOGIN_ONLINE_REPLACE\020\002"
    "\022\037\n\033GAME_STATE_LOGIN_ONLINE_END\020\003\022\"\n\036GAM"
    "E_STATE_LOAD_CHARLIST_BEGIN\020\004\022 \n\034GAME_ST"
    "ATE_LOAD_CHARLIST_END\020\005\022\032\n\026GAME_STATE_SE"
    "LECT_ROLE\020\006\022 \n\034GAME_STATE_CREATE_ROLE_BE"
    "GIN\020\007\022\036\n\032GAME_STATE_CREATE_ROLE_END\020\010\022\031\n"
    "\025GAME_STATE_ENTER_GAME\020\t\022\031\n\025GAME_STATE_S"
    "YNC_BEGIN\020\n\022\027\n\023GAME_STATE_SYNC_END\020\013\022\033\n\027"
    "GAME_STATE_ENTER_SCENCE\020\014\022\030\n\024GAME_STATE_"
    "PLAYERING\020\r*n\n\nLOGIN_FLAG\022\023\n\017LOGIN_FLAG_"
    "NULL\020\000\022\025\n\021LOGIN_FLAG_NORMAL\020\001\022\026\n\022LOGIN_F"
    "LAG_REPLACE\020\002\022\034\n\030LOGIN_FLAG_SWITCH_SERVE"
    "R\020\003*\222\001\n\013LOGOUT_FLAG\022\024\n\020LOGOUT_FLAG_NULL\020"
    "\000\022\026\n\022LOGOUT_FLAG_NORMAL\020\001\022\027\n\023LOGOUT_FLAG"
    "_REPLACE\020\002\022\035\n\031LOGOUT_FLAG_SWITCH_SERVER\020"
    "\003\022\035\n\031LOGOUT_FLAG_BREAK_TIMEOUT\020\004", 7272);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/ServerToClientCmd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fServerToClientCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fServerToClientCmd_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fServerToClientCmd_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fServerToClientCmd_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fServerToClientCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerToClientCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientCmd_descriptor_;
}
bool ServerToClientCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 4:
    case 5:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 90:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 190:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 220:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 250:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 300:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 330:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 380:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 450:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 520:
    case 530:
    case 531:
    case 532:
    case 534:
    case 535:
    case 540:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 630:
    case 631:
    case 632:
    case 633:
    case 639:
    case 650:
    case 651:
    case 652:
    case 653:
    case 654:
    case 660:
    case 1024:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAME_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GAME_STATE_descriptor_;
}
bool GAME_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOGIN_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_FLAG_descriptor_;
}
bool LOGIN_FLAG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOGOUT_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGOUT_FLAG_descriptor_;
}
bool LOGOUT_FLAG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
