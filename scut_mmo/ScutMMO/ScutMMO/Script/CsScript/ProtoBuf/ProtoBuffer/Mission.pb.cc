// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Mission.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Mission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* CItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMissionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMissionTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGQueryMissionListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGQueryMissionListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCQueryMissionListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCQueryMissionListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAcceptMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAcceptMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAcceptMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAcceptMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAbandonMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAbandonMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAbandonMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAbandonMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSubmitMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSubmitMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSubmitMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSubmitMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateMissionStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateMissionStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateAcceptableListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateAcceptableListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCReceiveMissionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCReceiveMissionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDeleteMissionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDeleteMissionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTalkWithNpcReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTalkWithNpcReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetCampMissionInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetCampMissionInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetCampMissionInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetCampMissionInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDiceCampMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDiceCampMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDiceCampMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDiceCampMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetCampBoxRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetCampBoxRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetCampBoxRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetCampBoxRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fMission_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Mission.proto");
  GOOGLE_CHECK(file != NULL);
  CItemInfo_descriptor_ = file->message_type(0);
  static const int CItemInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, curvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, finvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, parma1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, parma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, parma3_),
  };
  CItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CItemInfo_descriptor_,
      CItemInfo::default_instance_,
      CItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CItemInfo));
  CMissionTrack_descriptor_ = file->message_type(1);
  static const int CMissionTrack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, accepttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, iteminfo_),
  };
  CMissionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMissionTrack_descriptor_,
      CMissionTrack::default_instance_,
      CMissionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMissionTrack));
  CGQueryMissionListReq_descriptor_ = file->message_type(2);
  static const int CGQueryMissionListReq_offsets_[1] = {
  };
  CGQueryMissionListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGQueryMissionListReq_descriptor_,
      CGQueryMissionListReq::default_instance_,
      CGQueryMissionListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQueryMissionListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQueryMissionListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGQueryMissionListReq));
  GCQueryMissionListRsp_descriptor_ = file->message_type(3);
  static const int GCQueryMissionListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, acceptedlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, acceptablelist_),
  };
  GCQueryMissionListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCQueryMissionListRsp_descriptor_,
      GCQueryMissionListRsp::default_instance_,
      GCQueryMissionListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCQueryMissionListRsp));
  CGAcceptMissionReq_descriptor_ = file->message_type(4);
  static const int CGAcceptMissionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAcceptMissionReq, missionid_),
  };
  CGAcceptMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAcceptMissionReq_descriptor_,
      CGAcceptMissionReq::default_instance_,
      CGAcceptMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAcceptMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAcceptMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAcceptMissionReq));
  GCAcceptMissionRsp_descriptor_ = file->message_type(5);
  static const int GCAcceptMissionRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAcceptMissionRsp, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAcceptMissionRsp, ret_),
  };
  GCAcceptMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAcceptMissionRsp_descriptor_,
      GCAcceptMissionRsp::default_instance_,
      GCAcceptMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAcceptMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAcceptMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAcceptMissionRsp));
  CGAbandonMissionReq_descriptor_ = file->message_type(6);
  static const int CGAbandonMissionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAbandonMissionReq, missionid_),
  };
  CGAbandonMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAbandonMissionReq_descriptor_,
      CGAbandonMissionReq::default_instance_,
      CGAbandonMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAbandonMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAbandonMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAbandonMissionReq));
  GCAbandonMissionRsp_descriptor_ = file->message_type(7);
  static const int GCAbandonMissionRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAbandonMissionRsp, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAbandonMissionRsp, ret_),
  };
  GCAbandonMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAbandonMissionRsp_descriptor_,
      GCAbandonMissionRsp::default_instance_,
      GCAbandonMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAbandonMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAbandonMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAbandonMissionRsp));
  CGSubmitMissionReq_descriptor_ = file->message_type(8);
  static const int CGSubmitMissionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, index_),
  };
  CGSubmitMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSubmitMissionReq_descriptor_,
      CGSubmitMissionReq::default_instance_,
      CGSubmitMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSubmitMissionReq));
  GCSubmitMissionRsp_descriptor_ = file->message_type(9);
  static const int GCSubmitMissionRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, ret_),
  };
  GCSubmitMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSubmitMissionRsp_descriptor_,
      GCSubmitMissionRsp::default_instance_,
      GCSubmitMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSubmitMissionRsp));
  GCUpdateMissionStatusNotify_descriptor_ = file->message_type(10);
  static const int GCUpdateMissionStatusNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateMissionStatusNotify, updatelist_),
  };
  GCUpdateMissionStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateMissionStatusNotify_descriptor_,
      GCUpdateMissionStatusNotify::default_instance_,
      GCUpdateMissionStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateMissionStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateMissionStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateMissionStatusNotify));
  GCUpdateAcceptableListNotify_descriptor_ = file->message_type(11);
  static const int GCUpdateAcceptableListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateAcceptableListNotify, acceptablelist_),
  };
  GCUpdateAcceptableListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateAcceptableListNotify_descriptor_,
      GCUpdateAcceptableListNotify::default_instance_,
      GCUpdateAcceptableListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateAcceptableListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateAcceptableListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateAcceptableListNotify));
  GCReceiveMissionNotify_descriptor_ = file->message_type(12);
  static const int GCReceiveMissionNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReceiveMissionNotify, receivelist_),
  };
  GCReceiveMissionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCReceiveMissionNotify_descriptor_,
      GCReceiveMissionNotify::default_instance_,
      GCReceiveMissionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReceiveMissionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReceiveMissionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCReceiveMissionNotify));
  GCDeleteMissionNotify_descriptor_ = file->message_type(13);
  static const int GCDeleteMissionNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeleteMissionNotify, missionid_),
  };
  GCDeleteMissionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDeleteMissionNotify_descriptor_,
      GCDeleteMissionNotify::default_instance_,
      GCDeleteMissionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeleteMissionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeleteMissionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDeleteMissionNotify));
  CGTalkWithNpcReq_descriptor_ = file->message_type(14);
  static const int CGTalkWithNpcReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, missionid_),
  };
  CGTalkWithNpcReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTalkWithNpcReq_descriptor_,
      CGTalkWithNpcReq::default_instance_,
      CGTalkWithNpcReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTalkWithNpcReq));
  CGGetCampMissionInfoReq_descriptor_ = file->message_type(15);
  static const int CGGetCampMissionInfoReq_offsets_[1] = {
  };
  CGGetCampMissionInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetCampMissionInfoReq_descriptor_,
      CGGetCampMissionInfoReq::default_instance_,
      CGGetCampMissionInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCampMissionInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCampMissionInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetCampMissionInfoReq));
  CampMissionInfo_descriptor_ = file->message_type(16);
  static const int CampMissionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampMissionInfo, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampMissionInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampMissionInfo, isaccept_),
  };
  CampMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampMissionInfo_descriptor_,
      CampMissionInfo::default_instance_,
      CampMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampMissionInfo));
  GCGetCampMissionInfoRsp_descriptor_ = file->message_type(17);
  static const int GCGetCampMissionInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCampMissionInfoRsp, missioninfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCampMissionInfoRsp, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCampMissionInfoRsp, boxporgress_),
  };
  GCGetCampMissionInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetCampMissionInfoRsp_descriptor_,
      GCGetCampMissionInfoRsp::default_instance_,
      GCGetCampMissionInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCampMissionInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCampMissionInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetCampMissionInfoRsp));
  CGDiceCampMissionReq_descriptor_ = file->message_type(18);
  static const int CGDiceCampMissionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionReq, isnormal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionReq, missionid_),
  };
  CGDiceCampMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDiceCampMissionReq_descriptor_,
      CGDiceCampMissionReq::default_instance_,
      CGDiceCampMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDiceCampMissionReq));
  CGDiceCampMissionRsp_descriptor_ = file->message_type(19);
  static const int CGDiceCampMissionRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionRsp, missionid_),
  };
  CGDiceCampMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDiceCampMissionRsp_descriptor_,
      CGDiceCampMissionRsp::default_instance_,
      CGDiceCampMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDiceCampMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDiceCampMissionRsp));
  CGGetCampBoxRewardReq_descriptor_ = file->message_type(20);
  static const int CGGetCampBoxRewardReq_offsets_[1] = {
  };
  CGGetCampBoxRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetCampBoxRewardReq_descriptor_,
      CGGetCampBoxRewardReq::default_instance_,
      CGGetCampBoxRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCampBoxRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCampBoxRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetCampBoxRewardReq));
  CGGetCampBoxRewardRsp_descriptor_ = file->message_type(21);
  static const int CGGetCampBoxRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCampBoxRewardRsp, ret_),
  };
  CGGetCampBoxRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetCampBoxRewardRsp_descriptor_,
      CGGetCampBoxRewardRsp::default_instance_,
      CGGetCampBoxRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCampBoxRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCampBoxRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetCampBoxRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fMission_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CItemInfo_descriptor_, &CItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMissionTrack_descriptor_, &CMissionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGQueryMissionListReq_descriptor_, &CGQueryMissionListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCQueryMissionListRsp_descriptor_, &GCQueryMissionListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAcceptMissionReq_descriptor_, &CGAcceptMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAcceptMissionRsp_descriptor_, &GCAcceptMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAbandonMissionReq_descriptor_, &CGAbandonMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAbandonMissionRsp_descriptor_, &GCAbandonMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSubmitMissionReq_descriptor_, &CGSubmitMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSubmitMissionRsp_descriptor_, &GCSubmitMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateMissionStatusNotify_descriptor_, &GCUpdateMissionStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateAcceptableListNotify_descriptor_, &GCUpdateAcceptableListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCReceiveMissionNotify_descriptor_, &GCReceiveMissionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDeleteMissionNotify_descriptor_, &GCDeleteMissionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTalkWithNpcReq_descriptor_, &CGTalkWithNpcReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetCampMissionInfoReq_descriptor_, &CGGetCampMissionInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampMissionInfo_descriptor_, &CampMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetCampMissionInfoRsp_descriptor_, &GCGetCampMissionInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDiceCampMissionReq_descriptor_, &CGDiceCampMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDiceCampMissionRsp_descriptor_, &CGDiceCampMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetCampBoxRewardReq_descriptor_, &CGGetCampBoxRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetCampBoxRewardRsp_descriptor_, &CGGetCampBoxRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fMission_2eproto() {
  delete CItemInfo::default_instance_;
  delete CItemInfo_reflection_;
  delete CMissionTrack::default_instance_;
  delete CMissionTrack_reflection_;
  delete CGQueryMissionListReq::default_instance_;
  delete CGQueryMissionListReq_reflection_;
  delete GCQueryMissionListRsp::default_instance_;
  delete GCQueryMissionListRsp_reflection_;
  delete CGAcceptMissionReq::default_instance_;
  delete CGAcceptMissionReq_reflection_;
  delete GCAcceptMissionRsp::default_instance_;
  delete GCAcceptMissionRsp_reflection_;
  delete CGAbandonMissionReq::default_instance_;
  delete CGAbandonMissionReq_reflection_;
  delete GCAbandonMissionRsp::default_instance_;
  delete GCAbandonMissionRsp_reflection_;
  delete CGSubmitMissionReq::default_instance_;
  delete CGSubmitMissionReq_reflection_;
  delete GCSubmitMissionRsp::default_instance_;
  delete GCSubmitMissionRsp_reflection_;
  delete GCUpdateMissionStatusNotify::default_instance_;
  delete GCUpdateMissionStatusNotify_reflection_;
  delete GCUpdateAcceptableListNotify::default_instance_;
  delete GCUpdateAcceptableListNotify_reflection_;
  delete GCReceiveMissionNotify::default_instance_;
  delete GCReceiveMissionNotify_reflection_;
  delete GCDeleteMissionNotify::default_instance_;
  delete GCDeleteMissionNotify_reflection_;
  delete CGTalkWithNpcReq::default_instance_;
  delete CGTalkWithNpcReq_reflection_;
  delete CGGetCampMissionInfoReq::default_instance_;
  delete CGGetCampMissionInfoReq_reflection_;
  delete CampMissionInfo::default_instance_;
  delete CampMissionInfo_reflection_;
  delete GCGetCampMissionInfoRsp::default_instance_;
  delete GCGetCampMissionInfoRsp_reflection_;
  delete CGDiceCampMissionReq::default_instance_;
  delete CGDiceCampMissionReq_reflection_;
  delete CGDiceCampMissionRsp::default_instance_;
  delete CGDiceCampMissionRsp_reflection_;
  delete CGGetCampBoxRewardReq::default_instance_;
  delete CGGetCampBoxRewardReq_reflection_;
  delete CGGetCampBoxRewardRsp::default_instance_;
  delete CGGetCampBoxRewardRsp_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fMission_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ProtoBuffer/Mission.proto\022\010ProtoBuf\032\035P"
    "rotoBuffer/ComProtocol.proto\032#ProtoBuffe"
    "r/ClientToServerCmd.proto\032\026Common/ComDef"
    "ine.proto\"y\n\tCItemInfo\022\014\n\004type\030\001 \001(\r\022\n\n\002"
    "id\030\002 \001(\004\022\020\n\010curValue\030\003 \001(\r\022\020\n\010finValue\030\004"
    " \001(\r\022\016\n\006parma1\030\005 \001(\r\022\016\n\006parma2\030\006 \001(\r\022\016\n\006"
    "parma3\030\007 \001(\r\"m\n\rCMissionTrack\022\021\n\tmission"
    "Id\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\022\022\n\nacceptTime\030\003"
    " \001(\r\022%\n\010itemInfo\030\004 \001(\0132\023.ProtoBuf.CItemI"
    "nfo\"\027\n\025CGQueryMissionListReq\"^\n\025GCQueryM"
    "issionListRsp\022-\n\014acceptedList\030\001 \003(\0132\027.Pr"
    "otoBuf.CMissionTrack\022\026\n\016acceptableList\030\002"
    " \003(\r\"\'\n\022CGAcceptMissionReq\022\021\n\tmissionId\030"
    "\001 \001(\r\"4\n\022GCAcceptMissionRsp\022\021\n\tmissionId"
    "\030\001 \001(\r\022\013\n\003ret\030\002 \001(\r\"(\n\023CGAbandonMissionR"
    "eq\022\021\n\tmissionId\030\001 \001(\r\"5\n\023GCAbandonMissio"
    "nRsp\022\021\n\tmissionId\030\001 \001(\r\022\013\n\003ret\030\002 \001(\r\"6\n\022"
    "CGSubmitMissionReq\022\021\n\tmissionId\030\001 \001(\r\022\r\n"
    "\005index\030\002 \001(\r\"4\n\022GCSubmitMissionRsp\022\021\n\tmi"
    "ssionId\030\001 \001(\r\022\013\n\003ret\030\002 \001(\r\"J\n\033GCUpdateMi"
    "ssionStatusNotify\022+\n\nupdateList\030\001 \003(\0132\027."
    "ProtoBuf.CMissionTrack\"6\n\034GCUpdateAccept"
    "ableListNotify\022\026\n\016acceptableList\030\001 \003(\r\"F"
    "\n\026GCReceiveMissionNotify\022,\n\013receiveList\030"
    "\001 \003(\0132\027.ProtoBuf.CMissionTrack\"*\n\025GCDele"
    "teMissionNotify\022\021\n\tmissionId\030\001 \003(\r\"4\n\020CG"
    "TalkWithNpcReq\022\r\n\005npcId\030\001 \001(\r\022\021\n\tmission"
    "Id\030\002 \001(\r\"\031\n\027CGGetCampMissionInfoReq\"G\n\017C"
    "ampMissionInfo\022\021\n\tmissionId\030\001 \001(\r\022\017\n\007qua"
    "lity\030\002 \001(\r\022\020\n\010isAccept\030\003 \001(\010\"q\n\027GCGetCam"
    "pMissionInfoRsp\0222\n\017missionInfoList\030\001 \003(\013"
    "2\031.ProtoBuf.CampMissionInfo\022\r\n\005times\030\002 \001"
    "(\r\022\023\n\013boxPorgress\030\003 \001(\r\";\n\024CGDiceCampMis"
    "sionReq\022\020\n\010isNormal\030\001 \001(\010\022\021\n\tmissionId\030\002"
    " \001(\r\"6\n\024CGDiceCampMissionRsp\022\013\n\003ret\030\001 \001("
    "\r\022\021\n\tmissionId\030\002 \001(\r\"\027\n\025CGGetCampBoxRewa"
    "rdReq\"$\n\025CGGetCampBoxRewardRsp\022\013\n\003ret\030\001 "
    "\001(\r", 1483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Mission.proto", &protobuf_RegisterTypes);
  CItemInfo::default_instance_ = new CItemInfo();
  CMissionTrack::default_instance_ = new CMissionTrack();
  CGQueryMissionListReq::default_instance_ = new CGQueryMissionListReq();
  GCQueryMissionListRsp::default_instance_ = new GCQueryMissionListRsp();
  CGAcceptMissionReq::default_instance_ = new CGAcceptMissionReq();
  GCAcceptMissionRsp::default_instance_ = new GCAcceptMissionRsp();
  CGAbandonMissionReq::default_instance_ = new CGAbandonMissionReq();
  GCAbandonMissionRsp::default_instance_ = new GCAbandonMissionRsp();
  CGSubmitMissionReq::default_instance_ = new CGSubmitMissionReq();
  GCSubmitMissionRsp::default_instance_ = new GCSubmitMissionRsp();
  GCUpdateMissionStatusNotify::default_instance_ = new GCUpdateMissionStatusNotify();
  GCUpdateAcceptableListNotify::default_instance_ = new GCUpdateAcceptableListNotify();
  GCReceiveMissionNotify::default_instance_ = new GCReceiveMissionNotify();
  GCDeleteMissionNotify::default_instance_ = new GCDeleteMissionNotify();
  CGTalkWithNpcReq::default_instance_ = new CGTalkWithNpcReq();
  CGGetCampMissionInfoReq::default_instance_ = new CGGetCampMissionInfoReq();
  CampMissionInfo::default_instance_ = new CampMissionInfo();
  GCGetCampMissionInfoRsp::default_instance_ = new GCGetCampMissionInfoRsp();
  CGDiceCampMissionReq::default_instance_ = new CGDiceCampMissionReq();
  CGDiceCampMissionRsp::default_instance_ = new CGDiceCampMissionRsp();
  CGGetCampBoxRewardReq::default_instance_ = new CGGetCampBoxRewardReq();
  CGGetCampBoxRewardRsp::default_instance_ = new CGGetCampBoxRewardRsp();
  CItemInfo::default_instance_->InitAsDefaultInstance();
  CMissionTrack::default_instance_->InitAsDefaultInstance();
  CGQueryMissionListReq::default_instance_->InitAsDefaultInstance();
  GCQueryMissionListRsp::default_instance_->InitAsDefaultInstance();
  CGAcceptMissionReq::default_instance_->InitAsDefaultInstance();
  GCAcceptMissionRsp::default_instance_->InitAsDefaultInstance();
  CGAbandonMissionReq::default_instance_->InitAsDefaultInstance();
  GCAbandonMissionRsp::default_instance_->InitAsDefaultInstance();
  CGSubmitMissionReq::default_instance_->InitAsDefaultInstance();
  GCSubmitMissionRsp::default_instance_->InitAsDefaultInstance();
  GCUpdateMissionStatusNotify::default_instance_->InitAsDefaultInstance();
  GCUpdateAcceptableListNotify::default_instance_->InitAsDefaultInstance();
  GCReceiveMissionNotify::default_instance_->InitAsDefaultInstance();
  GCDeleteMissionNotify::default_instance_->InitAsDefaultInstance();
  CGTalkWithNpcReq::default_instance_->InitAsDefaultInstance();
  CGGetCampMissionInfoReq::default_instance_->InitAsDefaultInstance();
  CampMissionInfo::default_instance_->InitAsDefaultInstance();
  GCGetCampMissionInfoRsp::default_instance_->InitAsDefaultInstance();
  CGDiceCampMissionReq::default_instance_->InitAsDefaultInstance();
  CGDiceCampMissionRsp::default_instance_->InitAsDefaultInstance();
  CGGetCampBoxRewardReq::default_instance_->InitAsDefaultInstance();
  CGGetCampBoxRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fMission_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fMission_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fMission_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fMission_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CItemInfo::kTypeFieldNumber;
const int CItemInfo::kIdFieldNumber;
const int CItemInfo::kCurValueFieldNumber;
const int CItemInfo::kFinValueFieldNumber;
const int CItemInfo::kParma1FieldNumber;
const int CItemInfo::kParma2FieldNumber;
const int CItemInfo::kParma3FieldNumber;
#endif  // !_MSC_VER

CItemInfo::CItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CItemInfo::InitAsDefaultInstance() {
}

CItemInfo::CItemInfo(const CItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  curvalue_ = 0u;
  finvalue_ = 0u;
  parma1_ = 0u;
  parma2_ = 0u;
  parma3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CItemInfo::~CItemInfo() {
  SharedDtor();
}

void CItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CItemInfo_descriptor_;
}

const CItemInfo& CItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CItemInfo* CItemInfo::default_instance_ = NULL;

CItemInfo* CItemInfo::New() const {
  return new CItemInfo;
}

void CItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    curvalue_ = 0u;
    finvalue_ = 0u;
    parma1_ = 0u;
    parma2_ = 0u;
    parma3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curValue;
        break;
      }

      // optional uint32 curValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curvalue_)));
          set_has_curvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finValue;
        break;
      }

      // optional uint32 finValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finvalue_)));
          set_has_finvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parma1;
        break;
      }

      // optional uint32 parma1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parma1_)));
          set_has_parma1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parma2;
        break;
      }

      // optional uint32 parma2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parma2_)));
          set_has_parma2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_parma3;
        break;
      }

      // optional uint32 parma3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parma3_)));
          set_has_parma3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 curValue = 3;
  if (has_curvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curvalue(), output);
  }

  // optional uint32 finValue = 4;
  if (has_finvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finvalue(), output);
  }

  // optional uint32 parma1 = 5;
  if (has_parma1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parma1(), output);
  }

  // optional uint32 parma2 = 6;
  if (has_parma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->parma2(), output);
  }

  // optional uint32 parma3 = 7;
  if (has_parma3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->parma3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 curValue = 3;
  if (has_curvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curvalue(), target);
  }

  // optional uint32 finValue = 4;
  if (has_finvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finvalue(), target);
  }

  // optional uint32 parma1 = 5;
  if (has_parma1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parma1(), target);
  }

  // optional uint32 parma2 = 6;
  if (has_parma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->parma2(), target);
  }

  // optional uint32 parma3 = 7;
  if (has_parma3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->parma3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 curValue = 3;
    if (has_curvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curvalue());
    }

    // optional uint32 finValue = 4;
    if (has_finvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finvalue());
    }

    // optional uint32 parma1 = 5;
    if (has_parma1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parma1());
    }

    // optional uint32 parma2 = 6;
    if (has_parma2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parma2());
    }

    // optional uint32 parma3 = 7;
    if (has_parma3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parma3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CItemInfo::MergeFrom(const CItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curvalue()) {
      set_curvalue(from.curvalue());
    }
    if (from.has_finvalue()) {
      set_finvalue(from.finvalue());
    }
    if (from.has_parma1()) {
      set_parma1(from.parma1());
    }
    if (from.has_parma2()) {
      set_parma2(from.parma2());
    }
    if (from.has_parma3()) {
      set_parma3(from.parma3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CItemInfo::CopyFrom(const CItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CItemInfo::IsInitialized() const {

  return true;
}

void CItemInfo::Swap(CItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(curvalue_, other->curvalue_);
    std::swap(finvalue_, other->finvalue_);
    std::swap(parma1_, other->parma1_);
    std::swap(parma2_, other->parma2_);
    std::swap(parma3_, other->parma3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CItemInfo_descriptor_;
  metadata.reflection = CItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMissionTrack::kMissionIdFieldNumber;
const int CMissionTrack::kStatusFieldNumber;
const int CMissionTrack::kAcceptTimeFieldNumber;
const int CMissionTrack::kItemInfoFieldNumber;
#endif  // !_MSC_VER

CMissionTrack::CMissionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMissionTrack::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::ProtoBuf::CItemInfo*>(&::ProtoBuf::CItemInfo::default_instance());
}

CMissionTrack::CMissionTrack(const CMissionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMissionTrack::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  status_ = 0u;
  accepttime_ = 0u;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMissionTrack::~CMissionTrack() {
  SharedDtor();
}

void CMissionTrack::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void CMissionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMissionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMissionTrack_descriptor_;
}

const CMissionTrack& CMissionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CMissionTrack* CMissionTrack::default_instance_ = NULL;

CMissionTrack* CMissionTrack::New() const {
  return new CMissionTrack;
}

void CMissionTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    status_ = 0u;
    accepttime_ = 0u;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::ProtoBuf::CItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMissionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_acceptTime;
        break;
      }

      // optional uint32 acceptTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accepttime_)));
          set_has_accepttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemInfo;
        break;
      }

      // optional .ProtoBuf.CItemInfo itemInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMissionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 acceptTime = 3;
  if (has_accepttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accepttime(), output);
  }

  // optional .ProtoBuf.CItemInfo itemInfo = 4;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMissionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 acceptTime = 3;
  if (has_accepttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accepttime(), target);
  }

  // optional .ProtoBuf.CItemInfo itemInfo = 4;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMissionTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 acceptTime = 3;
    if (has_accepttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accepttime());
    }

    // optional .ProtoBuf.CItemInfo itemInfo = 4;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMissionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMissionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMissionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMissionTrack::MergeFrom(const CMissionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_accepttime()) {
      set_accepttime(from.accepttime());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::ProtoBuf::CItemInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMissionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMissionTrack::CopyFrom(const CMissionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMissionTrack::IsInitialized() const {

  return true;
}

void CMissionTrack::Swap(CMissionTrack* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(status_, other->status_);
    std::swap(accepttime_, other->accepttime_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMissionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMissionTrack_descriptor_;
  metadata.reflection = CMissionTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGQueryMissionListReq::CGQueryMissionListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGQueryMissionListReq::InitAsDefaultInstance() {
}

CGQueryMissionListReq::CGQueryMissionListReq(const CGQueryMissionListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGQueryMissionListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGQueryMissionListReq::~CGQueryMissionListReq() {
  SharedDtor();
}

void CGQueryMissionListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGQueryMissionListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGQueryMissionListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGQueryMissionListReq_descriptor_;
}

const CGQueryMissionListReq& CGQueryMissionListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGQueryMissionListReq* CGQueryMissionListReq::default_instance_ = NULL;

CGQueryMissionListReq* CGQueryMissionListReq::New() const {
  return new CGQueryMissionListReq;
}

void CGQueryMissionListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGQueryMissionListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGQueryMissionListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGQueryMissionListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGQueryMissionListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGQueryMissionListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGQueryMissionListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGQueryMissionListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGQueryMissionListReq::MergeFrom(const CGQueryMissionListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGQueryMissionListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGQueryMissionListReq::CopyFrom(const CGQueryMissionListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQueryMissionListReq::IsInitialized() const {

  return true;
}

void CGQueryMissionListReq::Swap(CGQueryMissionListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGQueryMissionListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGQueryMissionListReq_descriptor_;
  metadata.reflection = CGQueryMissionListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCQueryMissionListRsp::kAcceptedListFieldNumber;
const int GCQueryMissionListRsp::kAcceptableListFieldNumber;
#endif  // !_MSC_VER

GCQueryMissionListRsp::GCQueryMissionListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCQueryMissionListRsp::InitAsDefaultInstance() {
}

GCQueryMissionListRsp::GCQueryMissionListRsp(const GCQueryMissionListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCQueryMissionListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCQueryMissionListRsp::~GCQueryMissionListRsp() {
  SharedDtor();
}

void GCQueryMissionListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCQueryMissionListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCQueryMissionListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCQueryMissionListRsp_descriptor_;
}

const GCQueryMissionListRsp& GCQueryMissionListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCQueryMissionListRsp* GCQueryMissionListRsp::default_instance_ = NULL;

GCQueryMissionListRsp* GCQueryMissionListRsp::New() const {
  return new GCQueryMissionListRsp;
}

void GCQueryMissionListRsp::Clear() {
  acceptedlist_.Clear();
  acceptablelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCQueryMissionListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CMissionTrack acceptedList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptedList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acceptedlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_acceptedList;
        if (input->ExpectTag(16)) goto parse_acceptableList;
        break;
      }

      // repeated uint32 acceptableList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptableList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_acceptablelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_acceptablelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_acceptableList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCQueryMissionListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CMissionTrack acceptedList = 1;
  for (int i = 0; i < this->acceptedlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acceptedlist(i), output);
  }

  // repeated uint32 acceptableList = 2;
  for (int i = 0; i < this->acceptablelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->acceptablelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCQueryMissionListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CMissionTrack acceptedList = 1;
  for (int i = 0; i < this->acceptedlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acceptedlist(i), target);
  }

  // repeated uint32 acceptableList = 2;
  for (int i = 0; i < this->acceptablelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->acceptablelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCQueryMissionListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CMissionTrack acceptedList = 1;
  total_size += 1 * this->acceptedlist_size();
  for (int i = 0; i < this->acceptedlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceptedlist(i));
  }

  // repeated uint32 acceptableList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->acceptablelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->acceptablelist(i));
    }
    total_size += 1 * this->acceptablelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCQueryMissionListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCQueryMissionListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCQueryMissionListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCQueryMissionListRsp::MergeFrom(const GCQueryMissionListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptedlist_.MergeFrom(from.acceptedlist_);
  acceptablelist_.MergeFrom(from.acceptablelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCQueryMissionListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCQueryMissionListRsp::CopyFrom(const GCQueryMissionListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQueryMissionListRsp::IsInitialized() const {

  return true;
}

void GCQueryMissionListRsp::Swap(GCQueryMissionListRsp* other) {
  if (other != this) {
    acceptedlist_.Swap(&other->acceptedlist_);
    acceptablelist_.Swap(&other->acceptablelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCQueryMissionListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCQueryMissionListRsp_descriptor_;
  metadata.reflection = GCQueryMissionListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAcceptMissionReq::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CGAcceptMissionReq::CGAcceptMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAcceptMissionReq::InitAsDefaultInstance() {
}

CGAcceptMissionReq::CGAcceptMissionReq(const CGAcceptMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAcceptMissionReq::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAcceptMissionReq::~CGAcceptMissionReq() {
  SharedDtor();
}

void CGAcceptMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAcceptMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAcceptMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAcceptMissionReq_descriptor_;
}

const CGAcceptMissionReq& CGAcceptMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGAcceptMissionReq* CGAcceptMissionReq::default_instance_ = NULL;

CGAcceptMissionReq* CGAcceptMissionReq::New() const {
  return new CGAcceptMissionReq;
}

void CGAcceptMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAcceptMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAcceptMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAcceptMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAcceptMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAcceptMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAcceptMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAcceptMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAcceptMissionReq::MergeFrom(const CGAcceptMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAcceptMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAcceptMissionReq::CopyFrom(const CGAcceptMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAcceptMissionReq::IsInitialized() const {

  return true;
}

void CGAcceptMissionReq::Swap(CGAcceptMissionReq* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAcceptMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAcceptMissionReq_descriptor_;
  metadata.reflection = CGAcceptMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAcceptMissionRsp::kMissionIdFieldNumber;
const int GCAcceptMissionRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GCAcceptMissionRsp::GCAcceptMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCAcceptMissionRsp::InitAsDefaultInstance() {
}

GCAcceptMissionRsp::GCAcceptMissionRsp(const GCAcceptMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCAcceptMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAcceptMissionRsp::~GCAcceptMissionRsp() {
  SharedDtor();
}

void GCAcceptMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAcceptMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAcceptMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAcceptMissionRsp_descriptor_;
}

const GCAcceptMissionRsp& GCAcceptMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCAcceptMissionRsp* GCAcceptMissionRsp::default_instance_ = NULL;

GCAcceptMissionRsp* GCAcceptMissionRsp::New() const {
  return new GCAcceptMissionRsp;
}

void GCAcceptMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAcceptMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCAcceptMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCAcceptMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCAcceptMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAcceptMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAcceptMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAcceptMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAcceptMissionRsp::MergeFrom(const GCAcceptMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAcceptMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAcceptMissionRsp::CopyFrom(const GCAcceptMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAcceptMissionRsp::IsInitialized() const {

  return true;
}

void GCAcceptMissionRsp::Swap(GCAcceptMissionRsp* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAcceptMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAcceptMissionRsp_descriptor_;
  metadata.reflection = GCAcceptMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAbandonMissionReq::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CGAbandonMissionReq::CGAbandonMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGAbandonMissionReq::InitAsDefaultInstance() {
}

CGAbandonMissionReq::CGAbandonMissionReq(const CGAbandonMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGAbandonMissionReq::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAbandonMissionReq::~CGAbandonMissionReq() {
  SharedDtor();
}

void CGAbandonMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAbandonMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAbandonMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAbandonMissionReq_descriptor_;
}

const CGAbandonMissionReq& CGAbandonMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGAbandonMissionReq* CGAbandonMissionReq::default_instance_ = NULL;

CGAbandonMissionReq* CGAbandonMissionReq::New() const {
  return new CGAbandonMissionReq;
}

void CGAbandonMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAbandonMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGAbandonMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGAbandonMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGAbandonMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAbandonMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAbandonMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAbandonMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAbandonMissionReq::MergeFrom(const CGAbandonMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAbandonMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAbandonMissionReq::CopyFrom(const CGAbandonMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAbandonMissionReq::IsInitialized() const {

  return true;
}

void CGAbandonMissionReq::Swap(CGAbandonMissionReq* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAbandonMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAbandonMissionReq_descriptor_;
  metadata.reflection = CGAbandonMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAbandonMissionRsp::kMissionIdFieldNumber;
const int GCAbandonMissionRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GCAbandonMissionRsp::GCAbandonMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCAbandonMissionRsp::InitAsDefaultInstance() {
}

GCAbandonMissionRsp::GCAbandonMissionRsp(const GCAbandonMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCAbandonMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAbandonMissionRsp::~GCAbandonMissionRsp() {
  SharedDtor();
}

void GCAbandonMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAbandonMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAbandonMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAbandonMissionRsp_descriptor_;
}

const GCAbandonMissionRsp& GCAbandonMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCAbandonMissionRsp* GCAbandonMissionRsp::default_instance_ = NULL;

GCAbandonMissionRsp* GCAbandonMissionRsp::New() const {
  return new GCAbandonMissionRsp;
}

void GCAbandonMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAbandonMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCAbandonMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCAbandonMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCAbandonMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAbandonMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAbandonMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAbandonMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAbandonMissionRsp::MergeFrom(const GCAbandonMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAbandonMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAbandonMissionRsp::CopyFrom(const GCAbandonMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAbandonMissionRsp::IsInitialized() const {

  return true;
}

void GCAbandonMissionRsp::Swap(GCAbandonMissionRsp* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAbandonMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAbandonMissionRsp_descriptor_;
  metadata.reflection = GCAbandonMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSubmitMissionReq::kMissionIdFieldNumber;
const int CGSubmitMissionReq::kIndexFieldNumber;
#endif  // !_MSC_VER

CGSubmitMissionReq::CGSubmitMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGSubmitMissionReq::InitAsDefaultInstance() {
}

CGSubmitMissionReq::CGSubmitMissionReq(const CGSubmitMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGSubmitMissionReq::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSubmitMissionReq::~CGSubmitMissionReq() {
  SharedDtor();
}

void CGSubmitMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSubmitMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSubmitMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSubmitMissionReq_descriptor_;
}

const CGSubmitMissionReq& CGSubmitMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGSubmitMissionReq* CGSubmitMissionReq::default_instance_ = NULL;

CGSubmitMissionReq* CGSubmitMissionReq::New() const {
  return new CGSubmitMissionReq;
}

void CGSubmitMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSubmitMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGSubmitMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGSubmitMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGSubmitMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSubmitMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSubmitMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSubmitMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSubmitMissionReq::MergeFrom(const CGSubmitMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSubmitMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSubmitMissionReq::CopyFrom(const CGSubmitMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSubmitMissionReq::IsInitialized() const {

  return true;
}

void CGSubmitMissionReq::Swap(CGSubmitMissionReq* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSubmitMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSubmitMissionReq_descriptor_;
  metadata.reflection = CGSubmitMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSubmitMissionRsp::kMissionIdFieldNumber;
const int GCSubmitMissionRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GCSubmitMissionRsp::GCSubmitMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCSubmitMissionRsp::InitAsDefaultInstance() {
}

GCSubmitMissionRsp::GCSubmitMissionRsp(const GCSubmitMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCSubmitMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSubmitMissionRsp::~GCSubmitMissionRsp() {
  SharedDtor();
}

void GCSubmitMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSubmitMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSubmitMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSubmitMissionRsp_descriptor_;
}

const GCSubmitMissionRsp& GCSubmitMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCSubmitMissionRsp* GCSubmitMissionRsp::default_instance_ = NULL;

GCSubmitMissionRsp* GCSubmitMissionRsp::New() const {
  return new GCSubmitMissionRsp;
}

void GCSubmitMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSubmitMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCSubmitMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCSubmitMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCSubmitMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSubmitMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSubmitMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSubmitMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSubmitMissionRsp::MergeFrom(const GCSubmitMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSubmitMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSubmitMissionRsp::CopyFrom(const GCSubmitMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSubmitMissionRsp::IsInitialized() const {

  return true;
}

void GCSubmitMissionRsp::Swap(GCSubmitMissionRsp* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSubmitMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSubmitMissionRsp_descriptor_;
  metadata.reflection = GCSubmitMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateMissionStatusNotify::kUpdateListFieldNumber;
#endif  // !_MSC_VER

GCUpdateMissionStatusNotify::GCUpdateMissionStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCUpdateMissionStatusNotify::InitAsDefaultInstance() {
}

GCUpdateMissionStatusNotify::GCUpdateMissionStatusNotify(const GCUpdateMissionStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCUpdateMissionStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateMissionStatusNotify::~GCUpdateMissionStatusNotify() {
  SharedDtor();
}

void GCUpdateMissionStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateMissionStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateMissionStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateMissionStatusNotify_descriptor_;
}

const GCUpdateMissionStatusNotify& GCUpdateMissionStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCUpdateMissionStatusNotify* GCUpdateMissionStatusNotify::default_instance_ = NULL;

GCUpdateMissionStatusNotify* GCUpdateMissionStatusNotify::New() const {
  return new GCUpdateMissionStatusNotify;
}

void GCUpdateMissionStatusNotify::Clear() {
  updatelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateMissionStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CMissionTrack updateList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_updateList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCUpdateMissionStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CMissionTrack updateList = 1;
  for (int i = 0; i < this->updatelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updatelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCUpdateMissionStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CMissionTrack updateList = 1;
  for (int i = 0; i < this->updatelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updatelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCUpdateMissionStatusNotify::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CMissionTrack updateList = 1;
  total_size += 1 * this->updatelist_size();
  for (int i = 0; i < this->updatelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateMissionStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateMissionStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateMissionStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateMissionStatusNotify::MergeFrom(const GCUpdateMissionStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  updatelist_.MergeFrom(from.updatelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateMissionStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateMissionStatusNotify::CopyFrom(const GCUpdateMissionStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateMissionStatusNotify::IsInitialized() const {

  return true;
}

void GCUpdateMissionStatusNotify::Swap(GCUpdateMissionStatusNotify* other) {
  if (other != this) {
    updatelist_.Swap(&other->updatelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateMissionStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateMissionStatusNotify_descriptor_;
  metadata.reflection = GCUpdateMissionStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateAcceptableListNotify::kAcceptableListFieldNumber;
#endif  // !_MSC_VER

GCUpdateAcceptableListNotify::GCUpdateAcceptableListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCUpdateAcceptableListNotify::InitAsDefaultInstance() {
}

GCUpdateAcceptableListNotify::GCUpdateAcceptableListNotify(const GCUpdateAcceptableListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCUpdateAcceptableListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateAcceptableListNotify::~GCUpdateAcceptableListNotify() {
  SharedDtor();
}

void GCUpdateAcceptableListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateAcceptableListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateAcceptableListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateAcceptableListNotify_descriptor_;
}

const GCUpdateAcceptableListNotify& GCUpdateAcceptableListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCUpdateAcceptableListNotify* GCUpdateAcceptableListNotify::default_instance_ = NULL;

GCUpdateAcceptableListNotify* GCUpdateAcceptableListNotify::New() const {
  return new GCUpdateAcceptableListNotify;
}

void GCUpdateAcceptableListNotify::Clear() {
  acceptablelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateAcceptableListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 acceptableList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptableList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_acceptablelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_acceptablelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_acceptableList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCUpdateAcceptableListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 acceptableList = 1;
  for (int i = 0; i < this->acceptablelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->acceptablelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCUpdateAcceptableListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 acceptableList = 1;
  for (int i = 0; i < this->acceptablelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->acceptablelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCUpdateAcceptableListNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint32 acceptableList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->acceptablelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->acceptablelist(i));
    }
    total_size += 1 * this->acceptablelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateAcceptableListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateAcceptableListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateAcceptableListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateAcceptableListNotify::MergeFrom(const GCUpdateAcceptableListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptablelist_.MergeFrom(from.acceptablelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateAcceptableListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateAcceptableListNotify::CopyFrom(const GCUpdateAcceptableListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateAcceptableListNotify::IsInitialized() const {

  return true;
}

void GCUpdateAcceptableListNotify::Swap(GCUpdateAcceptableListNotify* other) {
  if (other != this) {
    acceptablelist_.Swap(&other->acceptablelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateAcceptableListNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateAcceptableListNotify_descriptor_;
  metadata.reflection = GCUpdateAcceptableListNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCReceiveMissionNotify::kReceiveListFieldNumber;
#endif  // !_MSC_VER

GCReceiveMissionNotify::GCReceiveMissionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCReceiveMissionNotify::InitAsDefaultInstance() {
}

GCReceiveMissionNotify::GCReceiveMissionNotify(const GCReceiveMissionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCReceiveMissionNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCReceiveMissionNotify::~GCReceiveMissionNotify() {
  SharedDtor();
}

void GCReceiveMissionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCReceiveMissionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCReceiveMissionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCReceiveMissionNotify_descriptor_;
}

const GCReceiveMissionNotify& GCReceiveMissionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCReceiveMissionNotify* GCReceiveMissionNotify::default_instance_ = NULL;

GCReceiveMissionNotify* GCReceiveMissionNotify::New() const {
  return new GCReceiveMissionNotify;
}

void GCReceiveMissionNotify::Clear() {
  receivelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCReceiveMissionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CMissionTrack receiveList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiveList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receivelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_receiveList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCReceiveMissionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CMissionTrack receiveList = 1;
  for (int i = 0; i < this->receivelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->receivelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCReceiveMissionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CMissionTrack receiveList = 1;
  for (int i = 0; i < this->receivelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->receivelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCReceiveMissionNotify::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CMissionTrack receiveList = 1;
  total_size += 1 * this->receivelist_size();
  for (int i = 0; i < this->receivelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receivelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCReceiveMissionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCReceiveMissionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCReceiveMissionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCReceiveMissionNotify::MergeFrom(const GCReceiveMissionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  receivelist_.MergeFrom(from.receivelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCReceiveMissionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCReceiveMissionNotify::CopyFrom(const GCReceiveMissionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCReceiveMissionNotify::IsInitialized() const {

  return true;
}

void GCReceiveMissionNotify::Swap(GCReceiveMissionNotify* other) {
  if (other != this) {
    receivelist_.Swap(&other->receivelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCReceiveMissionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCReceiveMissionNotify_descriptor_;
  metadata.reflection = GCReceiveMissionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDeleteMissionNotify::kMissionIdFieldNumber;
#endif  // !_MSC_VER

GCDeleteMissionNotify::GCDeleteMissionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCDeleteMissionNotify::InitAsDefaultInstance() {
}

GCDeleteMissionNotify::GCDeleteMissionNotify(const GCDeleteMissionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCDeleteMissionNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDeleteMissionNotify::~GCDeleteMissionNotify() {
  SharedDtor();
}

void GCDeleteMissionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDeleteMissionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDeleteMissionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDeleteMissionNotify_descriptor_;
}

const GCDeleteMissionNotify& GCDeleteMissionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCDeleteMissionNotify* GCDeleteMissionNotify::default_instance_ = NULL;

GCDeleteMissionNotify* GCDeleteMissionNotify::New() const {
  return new GCDeleteMissionNotify;
}

void GCDeleteMissionNotify::Clear() {
  missionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDeleteMissionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_missionid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_missionid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_missionId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCDeleteMissionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 missionId = 1;
  for (int i = 0; i < this->missionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->missionid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCDeleteMissionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 missionId = 1;
  for (int i = 0; i < this->missionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->missionid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCDeleteMissionNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint32 missionId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->missionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->missionid(i));
    }
    total_size += 1 * this->missionid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDeleteMissionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDeleteMissionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDeleteMissionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDeleteMissionNotify::MergeFrom(const GCDeleteMissionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  missionid_.MergeFrom(from.missionid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDeleteMissionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDeleteMissionNotify::CopyFrom(const GCDeleteMissionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDeleteMissionNotify::IsInitialized() const {

  return true;
}

void GCDeleteMissionNotify::Swap(GCDeleteMissionNotify* other) {
  if (other != this) {
    missionid_.Swap(&other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDeleteMissionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDeleteMissionNotify_descriptor_;
  metadata.reflection = GCDeleteMissionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTalkWithNpcReq::kNpcIdFieldNumber;
const int CGTalkWithNpcReq::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CGTalkWithNpcReq::CGTalkWithNpcReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGTalkWithNpcReq::InitAsDefaultInstance() {
}

CGTalkWithNpcReq::CGTalkWithNpcReq(const CGTalkWithNpcReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGTalkWithNpcReq::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  missionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTalkWithNpcReq::~CGTalkWithNpcReq() {
  SharedDtor();
}

void CGTalkWithNpcReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTalkWithNpcReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTalkWithNpcReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTalkWithNpcReq_descriptor_;
}

const CGTalkWithNpcReq& CGTalkWithNpcReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGTalkWithNpcReq* CGTalkWithNpcReq::default_instance_ = NULL;

CGTalkWithNpcReq* CGTalkWithNpcReq::New() const {
  return new CGTalkWithNpcReq;
}

void CGTalkWithNpcReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    missionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTalkWithNpcReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npcId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_missionId;
        break;
      }

      // optional uint32 missionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGTalkWithNpcReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 npcId = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  // optional uint32 missionId = 2;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGTalkWithNpcReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 npcId = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  // optional uint32 missionId = 2;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGTalkWithNpcReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npcId = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint32 missionId = 2;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTalkWithNpcReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTalkWithNpcReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTalkWithNpcReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTalkWithNpcReq::MergeFrom(const CGTalkWithNpcReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTalkWithNpcReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTalkWithNpcReq::CopyFrom(const CGTalkWithNpcReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTalkWithNpcReq::IsInitialized() const {

  return true;
}

void CGTalkWithNpcReq::Swap(CGTalkWithNpcReq* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTalkWithNpcReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTalkWithNpcReq_descriptor_;
  metadata.reflection = CGTalkWithNpcReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetCampMissionInfoReq::CGGetCampMissionInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGGetCampMissionInfoReq::InitAsDefaultInstance() {
}

CGGetCampMissionInfoReq::CGGetCampMissionInfoReq(const CGGetCampMissionInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGGetCampMissionInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetCampMissionInfoReq::~CGGetCampMissionInfoReq() {
  SharedDtor();
}

void CGGetCampMissionInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetCampMissionInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetCampMissionInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetCampMissionInfoReq_descriptor_;
}

const CGGetCampMissionInfoReq& CGGetCampMissionInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGGetCampMissionInfoReq* CGGetCampMissionInfoReq::default_instance_ = NULL;

CGGetCampMissionInfoReq* CGGetCampMissionInfoReq::New() const {
  return new CGGetCampMissionInfoReq;
}

void CGGetCampMissionInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetCampMissionInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGGetCampMissionInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGGetCampMissionInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGGetCampMissionInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetCampMissionInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetCampMissionInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetCampMissionInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetCampMissionInfoReq::MergeFrom(const CGGetCampMissionInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetCampMissionInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetCampMissionInfoReq::CopyFrom(const CGGetCampMissionInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetCampMissionInfoReq::IsInitialized() const {

  return true;
}

void CGGetCampMissionInfoReq::Swap(CGGetCampMissionInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetCampMissionInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetCampMissionInfoReq_descriptor_;
  metadata.reflection = CGGetCampMissionInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampMissionInfo::kMissionIdFieldNumber;
const int CampMissionInfo::kQualityFieldNumber;
const int CampMissionInfo::kIsAcceptFieldNumber;
#endif  // !_MSC_VER

CampMissionInfo::CampMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampMissionInfo::InitAsDefaultInstance() {
}

CampMissionInfo::CampMissionInfo(const CampMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  quality_ = 0u;
  isaccept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampMissionInfo::~CampMissionInfo() {
  SharedDtor();
}

void CampMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampMissionInfo_descriptor_;
}

const CampMissionInfo& CampMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CampMissionInfo* CampMissionInfo::default_instance_ = NULL;

CampMissionInfo* CampMissionInfo::New() const {
  return new CampMissionInfo;
}

void CampMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    quality_ = 0u;
    isaccept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isAccept;
        break;
      }

      // optional bool isAccept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAccept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaccept_)));
          set_has_isaccept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  // optional bool isAccept = 3;
  if (has_isaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isaccept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  // optional bool isAccept = 3;
  if (has_isaccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isaccept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional bool isAccept = 3;
    if (has_isaccept()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampMissionInfo::MergeFrom(const CampMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_isaccept()) {
      set_isaccept(from.isaccept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampMissionInfo::CopyFrom(const CampMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampMissionInfo::IsInitialized() const {

  return true;
}

void CampMissionInfo::Swap(CampMissionInfo* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(quality_, other->quality_);
    std::swap(isaccept_, other->isaccept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampMissionInfo_descriptor_;
  metadata.reflection = CampMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetCampMissionInfoRsp::kMissionInfoListFieldNumber;
const int GCGetCampMissionInfoRsp::kTimesFieldNumber;
const int GCGetCampMissionInfoRsp::kBoxPorgressFieldNumber;
#endif  // !_MSC_VER

GCGetCampMissionInfoRsp::GCGetCampMissionInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCGetCampMissionInfoRsp::InitAsDefaultInstance() {
}

GCGetCampMissionInfoRsp::GCGetCampMissionInfoRsp(const GCGetCampMissionInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCGetCampMissionInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  boxporgress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetCampMissionInfoRsp::~GCGetCampMissionInfoRsp() {
  SharedDtor();
}

void GCGetCampMissionInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetCampMissionInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetCampMissionInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetCampMissionInfoRsp_descriptor_;
}

const GCGetCampMissionInfoRsp& GCGetCampMissionInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

GCGetCampMissionInfoRsp* GCGetCampMissionInfoRsp::default_instance_ = NULL;

GCGetCampMissionInfoRsp* GCGetCampMissionInfoRsp::New() const {
  return new GCGetCampMissionInfoRsp;
}

void GCGetCampMissionInfoRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    times_ = 0u;
    boxporgress_ = 0u;
  }
  missioninfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetCampMissionInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CampMissionInfo missionInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missioninfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_missionInfoList;
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxPorgress;
        break;
      }

      // optional uint32 boxPorgress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxPorgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxporgress_)));
          set_has_boxporgress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCGetCampMissionInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CampMissionInfo missionInfoList = 1;
  for (int i = 0; i < this->missioninfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missioninfolist(i), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // optional uint32 boxPorgress = 3;
  if (has_boxporgress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boxporgress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCGetCampMissionInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CampMissionInfo missionInfoList = 1;
  for (int i = 0; i < this->missioninfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missioninfolist(i), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // optional uint32 boxPorgress = 3;
  if (has_boxporgress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boxporgress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCGetCampMissionInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 boxPorgress = 3;
    if (has_boxporgress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxporgress());
    }

  }
  // repeated .ProtoBuf.CampMissionInfo missionInfoList = 1;
  total_size += 1 * this->missioninfolist_size();
  for (int i = 0; i < this->missioninfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missioninfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetCampMissionInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetCampMissionInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetCampMissionInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetCampMissionInfoRsp::MergeFrom(const GCGetCampMissionInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  missioninfolist_.MergeFrom(from.missioninfolist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_boxporgress()) {
      set_boxporgress(from.boxporgress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetCampMissionInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetCampMissionInfoRsp::CopyFrom(const GCGetCampMissionInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetCampMissionInfoRsp::IsInitialized() const {

  return true;
}

void GCGetCampMissionInfoRsp::Swap(GCGetCampMissionInfoRsp* other) {
  if (other != this) {
    missioninfolist_.Swap(&other->missioninfolist_);
    std::swap(times_, other->times_);
    std::swap(boxporgress_, other->boxporgress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetCampMissionInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetCampMissionInfoRsp_descriptor_;
  metadata.reflection = GCGetCampMissionInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDiceCampMissionReq::kIsNormalFieldNumber;
const int CGDiceCampMissionReq::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CGDiceCampMissionReq::CGDiceCampMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGDiceCampMissionReq::InitAsDefaultInstance() {
}

CGDiceCampMissionReq::CGDiceCampMissionReq(const CGDiceCampMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGDiceCampMissionReq::SharedCtor() {
  _cached_size_ = 0;
  isnormal_ = false;
  missionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDiceCampMissionReq::~CGDiceCampMissionReq() {
  SharedDtor();
}

void CGDiceCampMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDiceCampMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDiceCampMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDiceCampMissionReq_descriptor_;
}

const CGDiceCampMissionReq& CGDiceCampMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGDiceCampMissionReq* CGDiceCampMissionReq::default_instance_ = NULL;

CGDiceCampMissionReq* CGDiceCampMissionReq::New() const {
  return new CGDiceCampMissionReq;
}

void CGDiceCampMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isnormal_ = false;
    missionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDiceCampMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isNormal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnormal_)));
          set_has_isnormal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_missionId;
        break;
      }

      // optional uint32 missionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGDiceCampMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isNormal = 1;
  if (has_isnormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnormal(), output);
  }

  // optional uint32 missionId = 2;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGDiceCampMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isNormal = 1;
  if (has_isnormal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnormal(), target);
  }

  // optional uint32 missionId = 2;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGDiceCampMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isNormal = 1;
    if (has_isnormal()) {
      total_size += 1 + 1;
    }

    // optional uint32 missionId = 2;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDiceCampMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDiceCampMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDiceCampMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDiceCampMissionReq::MergeFrom(const CGDiceCampMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnormal()) {
      set_isnormal(from.isnormal());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDiceCampMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDiceCampMissionReq::CopyFrom(const CGDiceCampMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDiceCampMissionReq::IsInitialized() const {

  return true;
}

void CGDiceCampMissionReq::Swap(CGDiceCampMissionReq* other) {
  if (other != this) {
    std::swap(isnormal_, other->isnormal_);
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDiceCampMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDiceCampMissionReq_descriptor_;
  metadata.reflection = CGDiceCampMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDiceCampMissionRsp::kRetFieldNumber;
const int CGDiceCampMissionRsp::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CGDiceCampMissionRsp::CGDiceCampMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGDiceCampMissionRsp::InitAsDefaultInstance() {
}

CGDiceCampMissionRsp::CGDiceCampMissionRsp(const CGDiceCampMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGDiceCampMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  missionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDiceCampMissionRsp::~CGDiceCampMissionRsp() {
  SharedDtor();
}

void CGDiceCampMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDiceCampMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDiceCampMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDiceCampMissionRsp_descriptor_;
}

const CGDiceCampMissionRsp& CGDiceCampMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGDiceCampMissionRsp* CGDiceCampMissionRsp::default_instance_ = NULL;

CGDiceCampMissionRsp* CGDiceCampMissionRsp::New() const {
  return new CGDiceCampMissionRsp;
}

void CGDiceCampMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    missionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDiceCampMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_missionId;
        break;
      }

      // optional uint32 missionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGDiceCampMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 missionId = 2;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGDiceCampMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 missionId = 2;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGDiceCampMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 missionId = 2;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDiceCampMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDiceCampMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDiceCampMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDiceCampMissionRsp::MergeFrom(const CGDiceCampMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDiceCampMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDiceCampMissionRsp::CopyFrom(const CGDiceCampMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDiceCampMissionRsp::IsInitialized() const {

  return true;
}

void CGDiceCampMissionRsp::Swap(CGDiceCampMissionRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDiceCampMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDiceCampMissionRsp_descriptor_;
  metadata.reflection = CGDiceCampMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetCampBoxRewardReq::CGGetCampBoxRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGGetCampBoxRewardReq::InitAsDefaultInstance() {
}

CGGetCampBoxRewardReq::CGGetCampBoxRewardReq(const CGGetCampBoxRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGGetCampBoxRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetCampBoxRewardReq::~CGGetCampBoxRewardReq() {
  SharedDtor();
}

void CGGetCampBoxRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetCampBoxRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetCampBoxRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetCampBoxRewardReq_descriptor_;
}

const CGGetCampBoxRewardReq& CGGetCampBoxRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGGetCampBoxRewardReq* CGGetCampBoxRewardReq::default_instance_ = NULL;

CGGetCampBoxRewardReq* CGGetCampBoxRewardReq::New() const {
  return new CGGetCampBoxRewardReq;
}

void CGGetCampBoxRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetCampBoxRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGGetCampBoxRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGGetCampBoxRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGGetCampBoxRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetCampBoxRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetCampBoxRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetCampBoxRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetCampBoxRewardReq::MergeFrom(const CGGetCampBoxRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetCampBoxRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetCampBoxRewardReq::CopyFrom(const CGGetCampBoxRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetCampBoxRewardReq::IsInitialized() const {

  return true;
}

void CGGetCampBoxRewardReq::Swap(CGGetCampBoxRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetCampBoxRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetCampBoxRewardReq_descriptor_;
  metadata.reflection = CGGetCampBoxRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetCampBoxRewardRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CGGetCampBoxRewardRsp::CGGetCampBoxRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGGetCampBoxRewardRsp::InitAsDefaultInstance() {
}

CGGetCampBoxRewardRsp::CGGetCampBoxRewardRsp(const CGGetCampBoxRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGGetCampBoxRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetCampBoxRewardRsp::~CGGetCampBoxRewardRsp() {
  SharedDtor();
}

void CGGetCampBoxRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetCampBoxRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetCampBoxRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetCampBoxRewardRsp_descriptor_;
}

const CGGetCampBoxRewardRsp& CGGetCampBoxRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMission_2eproto();
  return *default_instance_;
}

CGGetCampBoxRewardRsp* CGGetCampBoxRewardRsp::default_instance_ = NULL;

CGGetCampBoxRewardRsp* CGGetCampBoxRewardRsp::New() const {
  return new CGGetCampBoxRewardRsp;
}

void CGGetCampBoxRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetCampBoxRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGGetCampBoxRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGGetCampBoxRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGGetCampBoxRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetCampBoxRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetCampBoxRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetCampBoxRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetCampBoxRewardRsp::MergeFrom(const CGGetCampBoxRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetCampBoxRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetCampBoxRewardRsp::CopyFrom(const CGGetCampBoxRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetCampBoxRewardRsp::IsInitialized() const {

  return true;
}

void CGGetCampBoxRewardRsp::Swap(CGGetCampBoxRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetCampBoxRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetCampBoxRewardRsp_descriptor_;
  metadata.reflection = CGGetCampBoxRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
