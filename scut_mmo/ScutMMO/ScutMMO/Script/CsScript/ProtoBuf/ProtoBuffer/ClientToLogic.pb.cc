// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ClientToLogic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/ClientToLogic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* CSEnterSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSEnterSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingLogicServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingLogicServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientResetTimeOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientResetTimeOut_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientResetTimeOut_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientResetTimeOut_Time_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginLogicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginLogicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCharacterListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCharacterListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCreateCharacterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCreateCharacterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDelCharacterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDelCharacterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoAttrPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoAttrPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeEndSKillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeEndSKillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevUpSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevUpSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransSceneReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransSceneReq_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CheckVersionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckVersionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckVersionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckVersionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CheckVersionResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpSetModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpSetModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpSetModeRespone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpSetModeRespone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fClientToLogic_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/ClientToLogic.proto");
  GOOGLE_CHECK(file != NULL);
  CSEnterSceneReq_descriptor_ = file->message_type(0);
  static const int CSEnterSceneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterSceneReq, mapid_),
  };
  CSEnterSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSEnterSceneReq_descriptor_,
      CSEnterSceneReq::default_instance_,
      CSEnterSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSEnterSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSEnterSceneReq));
  PingLogicServer_descriptor_ = file->message_type(1);
  static const int PingLogicServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingLogicServer, clienttick_),
  };
  PingLogicServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingLogicServer_descriptor_,
      PingLogicServer::default_instance_,
      PingLogicServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingLogicServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingLogicServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingLogicServer));
  ClientResetTimeOut_descriptor_ = file->message_type(2);
  static const int ClientResetTimeOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResetTimeOut, type_),
  };
  ClientResetTimeOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientResetTimeOut_descriptor_,
      ClientResetTimeOut::default_instance_,
      ClientResetTimeOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResetTimeOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientResetTimeOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientResetTimeOut));
  ClientResetTimeOut_Type_descriptor_ = ClientResetTimeOut_descriptor_->enum_type(0);
  ClientResetTimeOut_Time_descriptor_ = ClientResetTimeOut_descriptor_->enum_type(1);
  AccountLoginLogicRequest_descriptor_ = file->message_type(3);
  static const int AccountLoginLogicRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicRequest, username_),
  };
  AccountLoginLogicRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginLogicRequest_descriptor_,
      AccountLoginLogicRequest::default_instance_,
      AccountLoginLogicRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginLogicRequest));
  ReconnectRequest_descriptor_ = file->message_type(4);
  static const int ReconnectRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, accountindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, startmark_),
  };
  ReconnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectRequest_descriptor_,
      ReconnectRequest::default_instance_,
      ReconnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectRequest));
  ClientCharacterListRequest_descriptor_ = file->message_type(5);
  static const int ClientCharacterListRequest_offsets_[1] = {
  };
  ClientCharacterListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCharacterListRequest_descriptor_,
      ClientCharacterListRequest::default_instance_,
      ClientCharacterListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCharacterListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCharacterListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCharacterListRequest));
  ClientCreateCharacterRequest_descriptor_ = file->message_type(6);
  static const int ClientCreateCharacterRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterRequest, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterRequest, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterRequest, race_),
  };
  ClientCreateCharacterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCreateCharacterRequest_descriptor_,
      ClientCreateCharacterRequest::default_instance_,
      ClientCreateCharacterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCreateCharacterRequest));
  ClientDelCharacterReq_descriptor_ = file->message_type(7);
  static const int ClientDelCharacterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelCharacterReq, charid_),
  };
  ClientDelCharacterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientDelCharacterReq_descriptor_,
      ClientDelCharacterReq::default_instance_,
      ClientDelCharacterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelCharacterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelCharacterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientDelCharacterReq));
  EnterWorld_descriptor_ = file->message_type(8);
  static const int EnterWorld_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorld, charid_),
  };
  EnterWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterWorld_descriptor_,
      EnterWorld::default_instance_,
      EnterWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterWorld));
  AttrPoint_descriptor_ = file->message_type(9);
  static const int AttrPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrPoint, apoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrPoint, playerattrs_),
  };
  AttrPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrPoint_descriptor_,
      AttrPoint::default_instance_,
      AttrPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrPoint));
  AutoAttrPoint_descriptor_ = file->message_type(10);
  static const int AutoAttrPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAttrPoint, setauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAttrPoint, autoattrs_),
  };
  AutoAttrPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoAttrPoint_descriptor_,
      AutoAttrPoint::default_instance_,
      AutoAttrPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAttrPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAttrPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoAttrPoint));
  UseSkillReq_descriptor_ = file->message_type(11);
  static const int UseSkillReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillReq, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillReq, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillReq, targetcids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillReq, targetpos_),
  };
  UseSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillReq_descriptor_,
      UseSkillReq::default_instance_,
      UseSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillReq));
  ChargeEndSKillReq_descriptor_ = file->message_type(12);
  static const int ChargeEndSKillReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeEndSKillReq, skillid_),
  };
  ChargeEndSKillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeEndSKillReq_descriptor_,
      ChargeEndSKillReq::default_instance_,
      ChargeEndSKillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeEndSKillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeEndSKillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeEndSKillReq));
  LevUpSkillReq_descriptor_ = file->message_type(13);
  static const int LevUpSkillReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillReq, skillid_),
  };
  LevUpSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevUpSkillReq_descriptor_,
      LevUpSkillReq::default_instance_,
      LevUpSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevUpSkillReq));
  UseSkillStop_descriptor_ = file->message_type(14);
  static const int UseSkillStop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillStop, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillStop, skillstep_),
  };
  UseSkillStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillStop_descriptor_,
      UseSkillStop::default_instance_,
      UseSkillStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillStop));
  TransSceneReq_descriptor_ = file->message_type(15);
  static const int TransSceneReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, dstpos_),
  };
  TransSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransSceneReq_descriptor_,
      TransSceneReq::default_instance_,
      TransSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransSceneReq));
  TransSceneReq_Type_descriptor_ = TransSceneReq_descriptor_->enum_type(0);
  CheckVersionRequest_descriptor_ = file->message_type(16);
  static const int CheckVersionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionRequest, imei_),
  };
  CheckVersionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckVersionRequest_descriptor_,
      CheckVersionRequest::default_instance_,
      CheckVersionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVersionRequest));
  CheckVersionResponse_descriptor_ = file->message_type(17);
  static const int CheckVersionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResponse, version_),
  };
  CheckVersionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckVersionResponse_descriptor_,
      CheckVersionResponse::default_instance_,
      CheckVersionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVersionResponse));
  CheckVersionResponse_Result_descriptor_ = CheckVersionResponse_descriptor_->enum_type(0);
  AccountLoginRequest_descriptor_ = file->message_type(18);
  static const int AccountLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, token_),
  };
  AccountLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginRequest_descriptor_,
      AccountLoginRequest::default_instance_,
      AccountLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginRequest));
  AccountLoginResponse_descriptor_ = file->message_type(19);
  static const int AccountLoginResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, logicip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, logicport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, logictoken_),
  };
  AccountLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginResponse_descriptor_,
      AccountLoginResponse::default_instance_,
      AccountLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginResponse));
  PingLoginRequest_descriptor_ = file->message_type(20);
  static const int PingLoginRequest_offsets_[1] = {
  };
  PingLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingLoginRequest_descriptor_,
      PingLoginRequest::default_instance_,
      PingLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingLoginRequest));
  PvpSetModeRequest_descriptor_ = file->message_type(21);
  static const int PvpSetModeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRequest, pk_mode_),
  };
  PvpSetModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpSetModeRequest_descriptor_,
      PvpSetModeRequest::default_instance_,
      PvpSetModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpSetModeRequest));
  PvpSetModeRespone_descriptor_ = file->message_type(22);
  static const int PvpSetModeRespone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRespone, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRespone, pk_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRespone, cid_),
  };
  PvpSetModeRespone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpSetModeRespone_descriptor_,
      PvpSetModeRespone::default_instance_,
      PvpSetModeRespone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRespone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpSetModeRespone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpSetModeRespone));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fClientToLogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSEnterSceneReq_descriptor_, &CSEnterSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingLogicServer_descriptor_, &PingLogicServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientResetTimeOut_descriptor_, &ClientResetTimeOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginLogicRequest_descriptor_, &AccountLoginLogicRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectRequest_descriptor_, &ReconnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCharacterListRequest_descriptor_, &ClientCharacterListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCreateCharacterRequest_descriptor_, &ClientCreateCharacterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientDelCharacterReq_descriptor_, &ClientDelCharacterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterWorld_descriptor_, &EnterWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrPoint_descriptor_, &AttrPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoAttrPoint_descriptor_, &AutoAttrPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillReq_descriptor_, &UseSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeEndSKillReq_descriptor_, &ChargeEndSKillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevUpSkillReq_descriptor_, &LevUpSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillStop_descriptor_, &UseSkillStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransSceneReq_descriptor_, &TransSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVersionRequest_descriptor_, &CheckVersionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVersionResponse_descriptor_, &CheckVersionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginRequest_descriptor_, &AccountLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginResponse_descriptor_, &AccountLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingLoginRequest_descriptor_, &PingLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpSetModeRequest_descriptor_, &PvpSetModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpSetModeRespone_descriptor_, &PvpSetModeRespone::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fClientToLogic_2eproto() {
  delete CSEnterSceneReq::default_instance_;
  delete CSEnterSceneReq_reflection_;
  delete PingLogicServer::default_instance_;
  delete PingLogicServer_reflection_;
  delete ClientResetTimeOut::default_instance_;
  delete ClientResetTimeOut_reflection_;
  delete AccountLoginLogicRequest::default_instance_;
  delete AccountLoginLogicRequest_reflection_;
  delete ReconnectRequest::default_instance_;
  delete ReconnectRequest_reflection_;
  delete ClientCharacterListRequest::default_instance_;
  delete ClientCharacterListRequest_reflection_;
  delete ClientCreateCharacterRequest::default_instance_;
  delete ClientCreateCharacterRequest_reflection_;
  delete ClientDelCharacterReq::default_instance_;
  delete ClientDelCharacterReq_reflection_;
  delete EnterWorld::default_instance_;
  delete EnterWorld_reflection_;
  delete AttrPoint::default_instance_;
  delete AttrPoint_reflection_;
  delete AutoAttrPoint::default_instance_;
  delete AutoAttrPoint_reflection_;
  delete UseSkillReq::default_instance_;
  delete UseSkillReq_reflection_;
  delete ChargeEndSKillReq::default_instance_;
  delete ChargeEndSKillReq_reflection_;
  delete LevUpSkillReq::default_instance_;
  delete LevUpSkillReq_reflection_;
  delete UseSkillStop::default_instance_;
  delete UseSkillStop_reflection_;
  delete TransSceneReq::default_instance_;
  delete TransSceneReq_reflection_;
  delete CheckVersionRequest::default_instance_;
  delete CheckVersionRequest_reflection_;
  delete CheckVersionResponse::default_instance_;
  delete CheckVersionResponse_reflection_;
  delete AccountLoginRequest::default_instance_;
  delete AccountLoginRequest_reflection_;
  delete AccountLoginResponse::default_instance_;
  delete AccountLoginResponse_reflection_;
  delete PingLoginRequest::default_instance_;
  delete PingLoginRequest_reflection_;
  delete PvpSetModeRequest::default_instance_;
  delete PvpSetModeRequest_reflection_;
  delete PvpSetModeRespone::default_instance_;
  delete PvpSetModeRespone_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037ProtoBuffer/ClientToLogic.proto\022\010Proto"
    "Buf\032\035ProtoBuffer/ComProtocol.proto\032#Prot"
    "oBuffer/ClientToServerCmd.proto\032\026Common/"
    "ComDefine.proto\" \n\017CSEnterSceneReq\022\r\n\005ma"
    "pId\030\001 \002(\r\"%\n\017PingLogicServer\022\022\n\nclientTi"
    "ck\030\001 \002(\004\"~\n\022ClientResetTimeOut\022/\n\004type\030\001"
    " \002(\0162!.ProtoBuf.ClientResetTimeOut.Type\""
    "\036\n\004Type\022\n\n\006RETSET\020\000\022\n\n\006PLAYCG\020\001\"\027\n\004Time\022"
    "\017\n\013PLAYCG_TIME\020(\"o\n\030AccountLoginLogicReq"
    "uest\022\017\n\007groupId\030\001 \002(\r\022\r\n\005token\030\002 \002(\004\022\021\n\t"
    "channelId\030\003 \002(\t\022\016\n\006userId\030\004 \002(\t\022\020\n\010userN"
    "ame\030\005 \002(\t\"\217\001\n\020ReconnectRequest\022\024\n\014accoun"
    "tIndex\030\001 \002(\r\022\016\n\006charId\030\002 \002(\r\022\r\n\005token\030\003 "
    "\002(\004\022\021\n\tchannelId\030\004 \002(\t\022\016\n\006userId\030\005 \002(\t\022\020"
    "\n\010userName\030\006 \002(\t\022\021\n\tstartMark\030\007 \002(\004\"\034\n\032C"
    "lientCharacterListRequest\"f\n\034ClientCreat"
    "eCharacterRequest\022\017\n\007groupId\030\001 \002(\r\022\014\n\004na"
    "me\030\002 \002(\t\022\013\n\003sex\030\003 \002(\r\022\014\n\004prof\030\004 \002(\r\022\014\n\004r"
    "ace\030\005 \002(\r\"\'\n\025ClientDelCharacterReq\022\016\n\006ch"
    "arid\030\001 \002(\r\"\034\n\nEnterWorld\022\016\n\006charId\030\001 \002(\r"
    "\"@\n\tAttrPoint\022\016\n\006APoint\030\001 \002(\r\022#\n\013PlayerA"
    "ttrs\030\002 \003(\0132\016.ProtoBuf.Attr\"C\n\rAutoAttrPo"
    "int\022\017\n\007setAuto\030\001 \002(\r\022!\n\tAutoAttrs\030\002 \003(\0132"
    "\016.ProtoBuf.Attr\"|\n\013UseSkillReq\022\017\n\007skillI"
    "d\030\001 \002(\r\022 \n\003dir\030\002 \002(\0132\023.ProtoBuf.Vector3P"
    "B\022\022\n\ntargetCids\030\003 \003(\r\022&\n\ttargetPos\030\004 \001(\013"
    "2\023.ProtoBuf.Vector3PB\"$\n\021ChargeEndSKillR"
    "eq\022\017\n\007skillId\030\001 \002(\r\" \n\rLevUpSkillReq\022\017\n\007"
    "skillId\030\001 \002(\r\"2\n\014UseSkillStop\022\017\n\007skillId"
    "\030\001 \002(\r\022\021\n\tskillStep\030\002 \001(\r\"\217\001\n\rTransScene"
    "Req\022\016\n\006typeId\030\001 \002(\r\022\022\n\ninstanceId\030\002 \001(\r\022"
    "#\n\006dstPos\030\003 \001(\0132\023.ProtoBuf.Vector3PB\"5\n\004"
    "Type\022\010\n\004Test\020\000\022\016\n\nTransPoint\020\001\022\t\n\005Route\020"
    "\002\022\010\n\004Free\020\003\"4\n\023CheckVersionRequest\022\017\n\007ve"
    "rsion\030\001 \002(\r\022\014\n\004imei\030\002 \001(\t\"\367\001\n\024CheckVersi"
    "onResponse\0225\n\006result\030\001 \002(\0162%.ProtoBuf.Ch"
    "eckVersionResponse.Result\022\017\n\007version\030\002 \001"
    "(\r\"\226\001\n\006Result\022\031\n\025CHECK_VERSION_SUCCESS\020\001"
    "\022\030\n\024CHECK_VERSION_REFUSE\020\002\022\027\n\023SERVER_LOA"
    "D_IS_FULL\020\003\022\023\n\017LOGIN_IS_CLOSED\020\004\022\024\n\020LOGI"
    "N_IS_REFUSED\020\005\022\023\n\017SOMETHING_ERROR\020\006\"H\n\023A"
    "ccountLoginRequest\022\021\n\tuser_name\030\001 \002(\t\022\017\n"
    "\007user_id\030\002 \002(\t\022\r\n\005token\030\003 \001(\t\"p\n\024Account"
    "LoginResponse\022\017\n\007retcode\030\001 \002(\005\022\017\n\007groupI"
    "D\030\002 \001(\r\022\017\n\007logicIp\030\003 \001(\t\022\021\n\tlogicPort\030\004 "
    "\001(\r\022\022\n\nlogicToken\030\005 \001(\004\"\022\n\020PingLoginRequ"
    "est\"$\n\021PvpSetModeRequest\022\017\n\007pk_mode\030\001 \002("
    "\r\"B\n\021PvpSetModeRespone\022\017\n\007retcode\030\001 \002(\005\022"
    "\017\n\007pk_mode\030\002 \002(\r\022\013\n\003cid\030\003 \002(\r", 1949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/ClientToLogic.proto", &protobuf_RegisterTypes);
  CSEnterSceneReq::default_instance_ = new CSEnterSceneReq();
  PingLogicServer::default_instance_ = new PingLogicServer();
  ClientResetTimeOut::default_instance_ = new ClientResetTimeOut();
  AccountLoginLogicRequest::default_instance_ = new AccountLoginLogicRequest();
  ReconnectRequest::default_instance_ = new ReconnectRequest();
  ClientCharacterListRequest::default_instance_ = new ClientCharacterListRequest();
  ClientCreateCharacterRequest::default_instance_ = new ClientCreateCharacterRequest();
  ClientDelCharacterReq::default_instance_ = new ClientDelCharacterReq();
  EnterWorld::default_instance_ = new EnterWorld();
  AttrPoint::default_instance_ = new AttrPoint();
  AutoAttrPoint::default_instance_ = new AutoAttrPoint();
  UseSkillReq::default_instance_ = new UseSkillReq();
  ChargeEndSKillReq::default_instance_ = new ChargeEndSKillReq();
  LevUpSkillReq::default_instance_ = new LevUpSkillReq();
  UseSkillStop::default_instance_ = new UseSkillStop();
  TransSceneReq::default_instance_ = new TransSceneReq();
  CheckVersionRequest::default_instance_ = new CheckVersionRequest();
  CheckVersionResponse::default_instance_ = new CheckVersionResponse();
  AccountLoginRequest::default_instance_ = new AccountLoginRequest();
  AccountLoginResponse::default_instance_ = new AccountLoginResponse();
  PingLoginRequest::default_instance_ = new PingLoginRequest();
  PvpSetModeRequest::default_instance_ = new PvpSetModeRequest();
  PvpSetModeRespone::default_instance_ = new PvpSetModeRespone();
  CSEnterSceneReq::default_instance_->InitAsDefaultInstance();
  PingLogicServer::default_instance_->InitAsDefaultInstance();
  ClientResetTimeOut::default_instance_->InitAsDefaultInstance();
  AccountLoginLogicRequest::default_instance_->InitAsDefaultInstance();
  ReconnectRequest::default_instance_->InitAsDefaultInstance();
  ClientCharacterListRequest::default_instance_->InitAsDefaultInstance();
  ClientCreateCharacterRequest::default_instance_->InitAsDefaultInstance();
  ClientDelCharacterReq::default_instance_->InitAsDefaultInstance();
  EnterWorld::default_instance_->InitAsDefaultInstance();
  AttrPoint::default_instance_->InitAsDefaultInstance();
  AutoAttrPoint::default_instance_->InitAsDefaultInstance();
  UseSkillReq::default_instance_->InitAsDefaultInstance();
  ChargeEndSKillReq::default_instance_->InitAsDefaultInstance();
  LevUpSkillReq::default_instance_->InitAsDefaultInstance();
  UseSkillStop::default_instance_->InitAsDefaultInstance();
  TransSceneReq::default_instance_->InitAsDefaultInstance();
  CheckVersionRequest::default_instance_->InitAsDefaultInstance();
  CheckVersionResponse::default_instance_->InitAsDefaultInstance();
  AccountLoginRequest::default_instance_->InitAsDefaultInstance();
  AccountLoginResponse::default_instance_->InitAsDefaultInstance();
  PingLoginRequest::default_instance_->InitAsDefaultInstance();
  PvpSetModeRequest::default_instance_->InitAsDefaultInstance();
  PvpSetModeRespone::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fClientToLogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fClientToLogic_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fClientToLogic_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fClientToLogic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSEnterSceneReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

CSEnterSceneReq::CSEnterSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSEnterSceneReq::InitAsDefaultInstance() {
}

CSEnterSceneReq::CSEnterSceneReq(const CSEnterSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSEnterSceneReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEnterSceneReq::~CSEnterSceneReq() {
  SharedDtor();
}

void CSEnterSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSEnterSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSEnterSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSEnterSceneReq_descriptor_;
}

const CSEnterSceneReq& CSEnterSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

CSEnterSceneReq* CSEnterSceneReq::default_instance_ = NULL;

CSEnterSceneReq* CSEnterSceneReq::New() const {
  return new CSEnterSceneReq;
}

void CSEnterSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSEnterSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEnterSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSEnterSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSEnterSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEnterSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSEnterSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSEnterSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSEnterSceneReq::MergeFrom(const CSEnterSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSEnterSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSEnterSceneReq::CopyFrom(const CSEnterSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEnterSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSEnterSceneReq::Swap(CSEnterSceneReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSEnterSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSEnterSceneReq_descriptor_;
  metadata.reflection = CSEnterSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PingLogicServer::kClientTickFieldNumber;
#endif  // !_MSC_VER

PingLogicServer::PingLogicServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingLogicServer::InitAsDefaultInstance() {
}

PingLogicServer::PingLogicServer(const PingLogicServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingLogicServer::SharedCtor() {
  _cached_size_ = 0;
  clienttick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingLogicServer::~PingLogicServer() {
  SharedDtor();
}

void PingLogicServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingLogicServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingLogicServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingLogicServer_descriptor_;
}

const PingLogicServer& PingLogicServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

PingLogicServer* PingLogicServer::default_instance_ = NULL;

PingLogicServer* PingLogicServer::New() const {
  return new PingLogicServer;
}

void PingLogicServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clienttick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingLogicServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 clientTick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clienttick_)));
          set_has_clienttick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingLogicServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 clientTick = 1;
  if (has_clienttick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clienttick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingLogicServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 clientTick = 1;
  if (has_clienttick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clienttick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingLogicServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 clientTick = 1;
    if (has_clienttick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clienttick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingLogicServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingLogicServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingLogicServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingLogicServer::MergeFrom(const PingLogicServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttick()) {
      set_clienttick(from.clienttick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingLogicServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingLogicServer::CopyFrom(const PingLogicServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingLogicServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PingLogicServer::Swap(PingLogicServer* other) {
  if (other != this) {
    std::swap(clienttick_, other->clienttick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingLogicServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingLogicServer_descriptor_;
  metadata.reflection = PingLogicServer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientResetTimeOut_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResetTimeOut_Type_descriptor_;
}
bool ClientResetTimeOut_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientResetTimeOut_Type ClientResetTimeOut::RETSET;
const ClientResetTimeOut_Type ClientResetTimeOut::PLAYCG;
const ClientResetTimeOut_Type ClientResetTimeOut::Type_MIN;
const ClientResetTimeOut_Type ClientResetTimeOut::Type_MAX;
const int ClientResetTimeOut::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ClientResetTimeOut_Time_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResetTimeOut_Time_descriptor_;
}
bool ClientResetTimeOut_Time_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientResetTimeOut_Time ClientResetTimeOut::PLAYCG_TIME;
const ClientResetTimeOut_Time ClientResetTimeOut::Time_MIN;
const ClientResetTimeOut_Time ClientResetTimeOut::Time_MAX;
const int ClientResetTimeOut::Time_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientResetTimeOut::kTypeFieldNumber;
#endif  // !_MSC_VER

ClientResetTimeOut::ClientResetTimeOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientResetTimeOut::InitAsDefaultInstance() {
}

ClientResetTimeOut::ClientResetTimeOut(const ClientResetTimeOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientResetTimeOut::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientResetTimeOut::~ClientResetTimeOut() {
  SharedDtor();
}

void ClientResetTimeOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientResetTimeOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientResetTimeOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientResetTimeOut_descriptor_;
}

const ClientResetTimeOut& ClientResetTimeOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

ClientResetTimeOut* ClientResetTimeOut::default_instance_ = NULL;

ClientResetTimeOut* ClientResetTimeOut::New() const {
  return new ClientResetTimeOut;
}

void ClientResetTimeOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientResetTimeOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.ClientResetTimeOut.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::ClientResetTimeOut_Type_IsValid(value)) {
            set_type(static_cast< ::ProtoBuf::ClientResetTimeOut_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientResetTimeOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.ClientResetTimeOut.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientResetTimeOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.ClientResetTimeOut.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientResetTimeOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.ClientResetTimeOut.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResetTimeOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientResetTimeOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientResetTimeOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientResetTimeOut::MergeFrom(const ClientResetTimeOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientResetTimeOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientResetTimeOut::CopyFrom(const ClientResetTimeOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResetTimeOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientResetTimeOut::Swap(ClientResetTimeOut* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientResetTimeOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientResetTimeOut_descriptor_;
  metadata.reflection = ClientResetTimeOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginLogicRequest::kGroupIdFieldNumber;
const int AccountLoginLogicRequest::kTokenFieldNumber;
const int AccountLoginLogicRequest::kChannelIdFieldNumber;
const int AccountLoginLogicRequest::kUserIdFieldNumber;
const int AccountLoginLogicRequest::kUserNameFieldNumber;
#endif  // !_MSC_VER

AccountLoginLogicRequest::AccountLoginLogicRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginLogicRequest::InitAsDefaultInstance() {
}

AccountLoginLogicRequest::AccountLoginLogicRequest(const AccountLoginLogicRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginLogicRequest::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  token_ = GOOGLE_ULONGLONG(0);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginLogicRequest::~AccountLoginLogicRequest() {
  SharedDtor();
}

void AccountLoginLogicRequest::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginLogicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginLogicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginLogicRequest_descriptor_;
}

const AccountLoginLogicRequest& AccountLoginLogicRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

AccountLoginLogicRequest* AccountLoginLogicRequest::default_instance_ = NULL;

AccountLoginLogicRequest* AccountLoginLogicRequest::New() const {
  return new AccountLoginLogicRequest;
}

void AccountLoginLogicRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    token_ = GOOGLE_ULONGLONG(0);
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginLogicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required uint64 token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelId;
        break;
      }

      // required string channelId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userId;
        break;
      }

      // required string userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }

      // required string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginLogicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // required uint64 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token(), output);
  }

  // required string channelId = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelid(), output);
  }

  // required string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // required string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginLogicRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // required uint64 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token(), target);
  }

  // required string channelId = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelid(), target);
  }

  // required string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // required string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginLogicRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required uint64 token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

    // required string channelId = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginLogicRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginLogicRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginLogicRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginLogicRequest::MergeFrom(const AccountLoginLogicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginLogicRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginLogicRequest::CopyFrom(const AccountLoginLogicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginLogicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AccountLoginLogicRequest::Swap(AccountLoginLogicRequest* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(token_, other->token_);
    std::swap(channelid_, other->channelid_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginLogicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginLogicRequest_descriptor_;
  metadata.reflection = AccountLoginLogicRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectRequest::kAccountIndexFieldNumber;
const int ReconnectRequest::kCharIdFieldNumber;
const int ReconnectRequest::kTokenFieldNumber;
const int ReconnectRequest::kChannelIdFieldNumber;
const int ReconnectRequest::kUserIdFieldNumber;
const int ReconnectRequest::kUserNameFieldNumber;
const int ReconnectRequest::kStartMarkFieldNumber;
#endif  // !_MSC_VER

ReconnectRequest::ReconnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconnectRequest::InitAsDefaultInstance() {
}

ReconnectRequest::ReconnectRequest(const ReconnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconnectRequest::SharedCtor() {
  _cached_size_ = 0;
  accountindex_ = 0u;
  charid_ = 0u;
  token_ = GOOGLE_ULONGLONG(0);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startmark_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectRequest::~ReconnectRequest() {
  SharedDtor();
}

void ReconnectRequest::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectRequest_descriptor_;
}

const ReconnectRequest& ReconnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

ReconnectRequest* ReconnectRequest::default_instance_ = NULL;

ReconnectRequest* ReconnectRequest::New() const {
  return new ReconnectRequest;
}

void ReconnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountindex_ = 0u;
    charid_ = 0u;
    token_ = GOOGLE_ULONGLONG(0);
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    startmark_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 accountIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountindex_)));
          set_has_accountindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token;
        break;
      }

      // required uint64 token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channelId;
        break;
      }

      // required string channelId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userId;
        break;
      }

      // required string userId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_userName;
        break;
      }

      // required string userName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_startMark;
        break;
      }

      // required uint64 startMark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startmark_)));
          set_has_startmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 accountIndex = 1;
  if (has_accountindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountindex(), output);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // required uint64 token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->token(), output);
  }

  // required string channelId = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channelid(), output);
  }

  // required string userId = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // required string userName = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->username(), output);
  }

  // required uint64 startMark = 7;
  if (has_startmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->startmark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 accountIndex = 1;
  if (has_accountindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountindex(), target);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // required uint64 token = 3;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->token(), target);
  }

  // required string channelId = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channelid(), target);
  }

  // required string userId = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required string userName = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  // required uint64 startMark = 7;
  if (has_startmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->startmark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 accountIndex = 1;
    if (has_accountindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountindex());
    }

    // required uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint64 token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

    // required string channelId = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string userId = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string userName = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required uint64 startMark = 7;
    if (has_startmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startmark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectRequest::MergeFrom(const ReconnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountindex()) {
      set_accountindex(from.accountindex());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_startmark()) {
      set_startmark(from.startmark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectRequest::CopyFrom(const ReconnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ReconnectRequest::Swap(ReconnectRequest* other) {
  if (other != this) {
    std::swap(accountindex_, other->accountindex_);
    std::swap(charid_, other->charid_);
    std::swap(token_, other->token_);
    std::swap(channelid_, other->channelid_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(startmark_, other->startmark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectRequest_descriptor_;
  metadata.reflection = ReconnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientCharacterListRequest::ClientCharacterListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCharacterListRequest::InitAsDefaultInstance() {
}

ClientCharacterListRequest::ClientCharacterListRequest(const ClientCharacterListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCharacterListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCharacterListRequest::~ClientCharacterListRequest() {
  SharedDtor();
}

void ClientCharacterListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientCharacterListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCharacterListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCharacterListRequest_descriptor_;
}

const ClientCharacterListRequest& ClientCharacterListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

ClientCharacterListRequest* ClientCharacterListRequest::default_instance_ = NULL;

ClientCharacterListRequest* ClientCharacterListRequest::New() const {
  return new ClientCharacterListRequest;
}

void ClientCharacterListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCharacterListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientCharacterListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCharacterListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCharacterListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCharacterListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCharacterListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCharacterListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCharacterListRequest::MergeFrom(const ClientCharacterListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCharacterListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCharacterListRequest::CopyFrom(const ClientCharacterListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCharacterListRequest::IsInitialized() const {

  return true;
}

void ClientCharacterListRequest::Swap(ClientCharacterListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCharacterListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCharacterListRequest_descriptor_;
  metadata.reflection = ClientCharacterListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCreateCharacterRequest::kGroupIdFieldNumber;
const int ClientCreateCharacterRequest::kNameFieldNumber;
const int ClientCreateCharacterRequest::kSexFieldNumber;
const int ClientCreateCharacterRequest::kProfFieldNumber;
const int ClientCreateCharacterRequest::kRaceFieldNumber;
#endif  // !_MSC_VER

ClientCreateCharacterRequest::ClientCreateCharacterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCreateCharacterRequest::InitAsDefaultInstance() {
}

ClientCreateCharacterRequest::ClientCreateCharacterRequest(const ClientCreateCharacterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCreateCharacterRequest::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  prof_ = 0u;
  race_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCreateCharacterRequest::~ClientCreateCharacterRequest() {
  SharedDtor();
}

void ClientCreateCharacterRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientCreateCharacterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCreateCharacterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCreateCharacterRequest_descriptor_;
}

const ClientCreateCharacterRequest& ClientCreateCharacterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

ClientCreateCharacterRequest* ClientCreateCharacterRequest::default_instance_ = NULL;

ClientCreateCharacterRequest* ClientCreateCharacterRequest::New() const {
  return new ClientCreateCharacterRequest;
}

void ClientCreateCharacterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    prof_ = 0u;
    race_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCreateCharacterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // required uint32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_race;
        break;
      }

      // required uint32 race = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCreateCharacterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // required uint32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // required uint32 race = 5;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->race(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCreateCharacterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // required uint32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // required uint32 race = 5;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->race(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCreateCharacterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 race = 5;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->race());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCreateCharacterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCreateCharacterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCreateCharacterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCreateCharacterRequest::MergeFrom(const ClientCreateCharacterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCreateCharacterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCreateCharacterRequest::CopyFrom(const ClientCreateCharacterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCreateCharacterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClientCreateCharacterRequest::Swap(ClientCreateCharacterRequest* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(prof_, other->prof_);
    std::swap(race_, other->race_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCreateCharacterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCreateCharacterRequest_descriptor_;
  metadata.reflection = ClientCreateCharacterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientDelCharacterReq::kCharidFieldNumber;
#endif  // !_MSC_VER

ClientDelCharacterReq::ClientDelCharacterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientDelCharacterReq::InitAsDefaultInstance() {
}

ClientDelCharacterReq::ClientDelCharacterReq(const ClientDelCharacterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientDelCharacterReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDelCharacterReq::~ClientDelCharacterReq() {
  SharedDtor();
}

void ClientDelCharacterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientDelCharacterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDelCharacterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDelCharacterReq_descriptor_;
}

const ClientDelCharacterReq& ClientDelCharacterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

ClientDelCharacterReq* ClientDelCharacterReq::default_instance_ = NULL;

ClientDelCharacterReq* ClientDelCharacterReq::New() const {
  return new ClientDelCharacterReq;
}

void ClientDelCharacterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientDelCharacterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientDelCharacterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientDelCharacterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientDelCharacterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDelCharacterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientDelCharacterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientDelCharacterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientDelCharacterReq::MergeFrom(const ClientDelCharacterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientDelCharacterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDelCharacterReq::CopyFrom(const ClientDelCharacterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDelCharacterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientDelCharacterReq::Swap(ClientDelCharacterReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientDelCharacterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDelCharacterReq_descriptor_;
  metadata.reflection = ClientDelCharacterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterWorld::kCharIdFieldNumber;
#endif  // !_MSC_VER

EnterWorld::EnterWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterWorld::InitAsDefaultInstance() {
}

EnterWorld::EnterWorld(const EnterWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterWorld::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterWorld::~EnterWorld() {
  SharedDtor();
}

void EnterWorld::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterWorld_descriptor_;
}

const EnterWorld& EnterWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

EnterWorld* EnterWorld::default_instance_ = NULL;

EnterWorld* EnterWorld::New() const {
  return new EnterWorld;
}

void EnterWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterWorld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterWorld::MergeFrom(const EnterWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWorld::CopyFrom(const EnterWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterWorld::Swap(EnterWorld* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterWorld_descriptor_;
  metadata.reflection = EnterWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrPoint::kAPointFieldNumber;
const int AttrPoint::kPlayerAttrsFieldNumber;
#endif  // !_MSC_VER

AttrPoint::AttrPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrPoint::InitAsDefaultInstance() {
}

AttrPoint::AttrPoint(const AttrPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrPoint::SharedCtor() {
  _cached_size_ = 0;
  apoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrPoint::~AttrPoint() {
  SharedDtor();
}

void AttrPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrPoint_descriptor_;
}

const AttrPoint& AttrPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

AttrPoint* AttrPoint::default_instance_ = NULL;

AttrPoint* AttrPoint::New() const {
  return new AttrPoint;
}

void AttrPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apoint_ = 0u;
  }
  playerattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 APoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apoint_)));
          set_has_apoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerAttrs;
        break;
      }

      // repeated .ProtoBuf.Attr PlayerAttrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerAttrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 APoint = 1;
  if (has_apoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->apoint(), output);
  }

  // repeated .ProtoBuf.Attr PlayerAttrs = 2;
  for (int i = 0; i < this->playerattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerattrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 APoint = 1;
  if (has_apoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->apoint(), target);
  }

  // repeated .ProtoBuf.Attr PlayerAttrs = 2;
  for (int i = 0; i < this->playerattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerattrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 APoint = 1;
    if (has_apoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apoint());
    }

  }
  // repeated .ProtoBuf.Attr PlayerAttrs = 2;
  total_size += 1 * this->playerattrs_size();
  for (int i = 0; i < this->playerattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrPoint::MergeFrom(const AttrPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerattrs_.MergeFrom(from.playerattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apoint()) {
      set_apoint(from.apoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrPoint::CopyFrom(const AttrPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerattrs_size(); i++) {
    if (!this->playerattrs(i).IsInitialized()) return false;
  }
  return true;
}

void AttrPoint::Swap(AttrPoint* other) {
  if (other != this) {
    std::swap(apoint_, other->apoint_);
    playerattrs_.Swap(&other->playerattrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrPoint_descriptor_;
  metadata.reflection = AttrPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoAttrPoint::kSetAutoFieldNumber;
const int AutoAttrPoint::kAutoAttrsFieldNumber;
#endif  // !_MSC_VER

AutoAttrPoint::AutoAttrPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoAttrPoint::InitAsDefaultInstance() {
}

AutoAttrPoint::AutoAttrPoint(const AutoAttrPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoAttrPoint::SharedCtor() {
  _cached_size_ = 0;
  setauto_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoAttrPoint::~AutoAttrPoint() {
  SharedDtor();
}

void AutoAttrPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoAttrPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAttrPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoAttrPoint_descriptor_;
}

const AutoAttrPoint& AutoAttrPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

AutoAttrPoint* AutoAttrPoint::default_instance_ = NULL;

AutoAttrPoint* AutoAttrPoint::New() const {
  return new AutoAttrPoint;
}

void AutoAttrPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    setauto_ = 0u;
  }
  autoattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoAttrPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 setAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setauto_)));
          set_has_setauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AutoAttrs;
        break;
      }

      // repeated .ProtoBuf.Attr AutoAttrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AutoAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autoattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AutoAttrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoAttrPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 setAuto = 1;
  if (has_setauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->setauto(), output);
  }

  // repeated .ProtoBuf.Attr AutoAttrs = 2;
  for (int i = 0; i < this->autoattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->autoattrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoAttrPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 setAuto = 1;
  if (has_setauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->setauto(), target);
  }

  // repeated .ProtoBuf.Attr AutoAttrs = 2;
  for (int i = 0; i < this->autoattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->autoattrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoAttrPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 setAuto = 1;
    if (has_setauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setauto());
    }

  }
  // repeated .ProtoBuf.Attr AutoAttrs = 2;
  total_size += 1 * this->autoattrs_size();
  for (int i = 0; i < this->autoattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autoattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAttrPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoAttrPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoAttrPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoAttrPoint::MergeFrom(const AutoAttrPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  autoattrs_.MergeFrom(from.autoattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setauto()) {
      set_setauto(from.setauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoAttrPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAttrPoint::CopyFrom(const AutoAttrPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAttrPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < autoattrs_size(); i++) {
    if (!this->autoattrs(i).IsInitialized()) return false;
  }
  return true;
}

void AutoAttrPoint::Swap(AutoAttrPoint* other) {
  if (other != this) {
    std::swap(setauto_, other->setauto_);
    autoattrs_.Swap(&other->autoattrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoAttrPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoAttrPoint_descriptor_;
  metadata.reflection = AutoAttrPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillReq::kSkillIdFieldNumber;
const int UseSkillReq::kDirFieldNumber;
const int UseSkillReq::kTargetCidsFieldNumber;
const int UseSkillReq::kTargetPosFieldNumber;
#endif  // !_MSC_VER

UseSkillReq::UseSkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillReq::InitAsDefaultInstance() {
  dir_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
  targetpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

UseSkillReq::UseSkillReq(const UseSkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillReq::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  dir_ = NULL;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillReq::~UseSkillReq() {
  SharedDtor();
}

void UseSkillReq::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete targetpos_;
  }
}

void UseSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillReq_descriptor_;
}

const UseSkillReq& UseSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

UseSkillReq* UseSkillReq::default_instance_ = NULL;

UseSkillReq* UseSkillReq::New() const {
  return new UseSkillReq;
}

void UseSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::ProtoBuf::Vector3PB::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::ProtoBuf::Vector3PB::Clear();
    }
  }
  targetcids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dir;
        break;
      }

      // required .ProtoBuf.Vector3PB dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetCids;
        break;
      }

      // repeated uint32 targetCids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetCids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_targetcids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_targetcids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetCids;
        if (input->ExpectTag(34)) goto parse_targetPos;
        break;
      }

      // optional .ProtoBuf.Vector3PB targetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required .ProtoBuf.Vector3PB dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dir(), output);
  }

  // repeated uint32 targetCids = 3;
  for (int i = 0; i < this->targetcids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->targetcids(i), output);
  }

  // optional .ProtoBuf.Vector3PB targetPos = 4;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required .ProtoBuf.Vector3PB dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dir(), target);
  }

  // repeated uint32 targetCids = 3;
  for (int i = 0; i < this->targetcids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->targetcids(i), target);
  }

  // optional .ProtoBuf.Vector3PB targetPos = 4;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required .ProtoBuf.Vector3PB dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional .ProtoBuf.Vector3PB targetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  // repeated uint32 targetCids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetcids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->targetcids(i));
    }
    total_size += 1 * this->targetcids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillReq::MergeFrom(const UseSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetcids_.MergeFrom(from.targetcids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_dir()) {
      mutable_dir()->::ProtoBuf::Vector3PB::MergeFrom(from.dir());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::ProtoBuf::Vector3PB::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillReq::CopyFrom(const UseSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void UseSkillReq::Swap(UseSkillReq* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(dir_, other->dir_);
    targetcids_.Swap(&other->targetcids_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillReq_descriptor_;
  metadata.reflection = UseSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeEndSKillReq::kSkillIdFieldNumber;
#endif  // !_MSC_VER

ChargeEndSKillReq::ChargeEndSKillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeEndSKillReq::InitAsDefaultInstance() {
}

ChargeEndSKillReq::ChargeEndSKillReq(const ChargeEndSKillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeEndSKillReq::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeEndSKillReq::~ChargeEndSKillReq() {
  SharedDtor();
}

void ChargeEndSKillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeEndSKillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeEndSKillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeEndSKillReq_descriptor_;
}

const ChargeEndSKillReq& ChargeEndSKillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

ChargeEndSKillReq* ChargeEndSKillReq::default_instance_ = NULL;

ChargeEndSKillReq* ChargeEndSKillReq::New() const {
  return new ChargeEndSKillReq;
}

void ChargeEndSKillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeEndSKillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeEndSKillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeEndSKillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeEndSKillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeEndSKillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeEndSKillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeEndSKillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeEndSKillReq::MergeFrom(const ChargeEndSKillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeEndSKillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeEndSKillReq::CopyFrom(const ChargeEndSKillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeEndSKillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChargeEndSKillReq::Swap(ChargeEndSKillReq* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeEndSKillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeEndSKillReq_descriptor_;
  metadata.reflection = ChargeEndSKillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevUpSkillReq::kSkillIdFieldNumber;
#endif  // !_MSC_VER

LevUpSkillReq::LevUpSkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevUpSkillReq::InitAsDefaultInstance() {
}

LevUpSkillReq::LevUpSkillReq(const LevUpSkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevUpSkillReq::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevUpSkillReq::~LevUpSkillReq() {
  SharedDtor();
}

void LevUpSkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevUpSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevUpSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevUpSkillReq_descriptor_;
}

const LevUpSkillReq& LevUpSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

LevUpSkillReq* LevUpSkillReq::default_instance_ = NULL;

LevUpSkillReq* LevUpSkillReq::New() const {
  return new LevUpSkillReq;
}

void LevUpSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevUpSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevUpSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevUpSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevUpSkillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevUpSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevUpSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevUpSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevUpSkillReq::MergeFrom(const LevUpSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevUpSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevUpSkillReq::CopyFrom(const LevUpSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevUpSkillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LevUpSkillReq::Swap(LevUpSkillReq* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevUpSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevUpSkillReq_descriptor_;
  metadata.reflection = LevUpSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillStop::kSkillIdFieldNumber;
const int UseSkillStop::kSkillStepFieldNumber;
#endif  // !_MSC_VER

UseSkillStop::UseSkillStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillStop::InitAsDefaultInstance() {
}

UseSkillStop::UseSkillStop(const UseSkillStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillStop::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skillstep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillStop::~UseSkillStop() {
  SharedDtor();
}

void UseSkillStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSkillStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillStop_descriptor_;
}

const UseSkillStop& UseSkillStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

UseSkillStop* UseSkillStop::default_instance_ = NULL;

UseSkillStop* UseSkillStop::New() const {
  return new UseSkillStop;
}

void UseSkillStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skillstep_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillStep;
        break;
      }

      // optional uint32 skillStep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillstep_)));
          set_has_skillstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 skillStep = 2;
  if (has_skillstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillstep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 skillStep = 2;
  if (has_skillstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillstep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillStep = 2;
    if (has_skillstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillstep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillStop::MergeFrom(const UseSkillStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skillstep()) {
      set_skillstep(from.skillstep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillStop::CopyFrom(const UseSkillStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UseSkillStop::Swap(UseSkillStop* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skillstep_, other->skillstep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillStop_descriptor_;
  metadata.reflection = UseSkillStop_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransSceneReq_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransSceneReq_Type_descriptor_;
}
bool TransSceneReq_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransSceneReq_Type TransSceneReq::Test;
const TransSceneReq_Type TransSceneReq::TransPoint;
const TransSceneReq_Type TransSceneReq::Route;
const TransSceneReq_Type TransSceneReq::Free;
const TransSceneReq_Type TransSceneReq::Type_MIN;
const TransSceneReq_Type TransSceneReq::Type_MAX;
const int TransSceneReq::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransSceneReq::kTypeIdFieldNumber;
const int TransSceneReq::kInstanceIdFieldNumber;
const int TransSceneReq::kDstPosFieldNumber;
#endif  // !_MSC_VER

TransSceneReq::TransSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransSceneReq::InitAsDefaultInstance() {
  dstpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

TransSceneReq::TransSceneReq(const TransSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransSceneReq::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0u;
  instanceid_ = 0u;
  dstpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransSceneReq::~TransSceneReq() {
  SharedDtor();
}

void TransSceneReq::SharedDtor() {
  if (this != default_instance_) {
    delete dstpos_;
  }
}

void TransSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransSceneReq_descriptor_;
}

const TransSceneReq& TransSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

TransSceneReq* TransSceneReq::default_instance_ = NULL;

TransSceneReq* TransSceneReq::New() const {
  return new TransSceneReq;
}

void TransSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    typeid__ = 0u;
    instanceid_ = 0u;
    if (has_dstpos()) {
      if (dstpos_ != NULL) dstpos_->::ProtoBuf::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 typeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceId;
        break;
      }

      // optional uint32 instanceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dstPos;
        break;
      }

      // optional .ProtoBuf.Vector3PB dstPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dstpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 typeId = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typeid_(), output);
  }

  // optional uint32 instanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instanceid(), output);
  }

  // optional .ProtoBuf.Vector3PB dstPos = 3;
  if (has_dstpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dstpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 typeId = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typeid_(), target);
  }

  // optional uint32 instanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instanceid(), target);
  }

  // optional .ProtoBuf.Vector3PB dstPos = 3;
  if (has_dstpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dstpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 typeId = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typeid_());
    }

    // optional uint32 instanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // optional .ProtoBuf.Vector3PB dstPos = 3;
    if (has_dstpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dstpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransSceneReq::MergeFrom(const TransSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_dstpos()) {
      mutable_dstpos()->::ProtoBuf::Vector3PB::MergeFrom(from.dstpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransSceneReq::CopyFrom(const TransSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dstpos()) {
    if (!this->dstpos().IsInitialized()) return false;
  }
  return true;
}

void TransSceneReq::Swap(TransSceneReq* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(instanceid_, other->instanceid_);
    std::swap(dstpos_, other->dstpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransSceneReq_descriptor_;
  metadata.reflection = TransSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckVersionRequest::kVersionFieldNumber;
const int CheckVersionRequest::kImeiFieldNumber;
#endif  // !_MSC_VER

CheckVersionRequest::CheckVersionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckVersionRequest::InitAsDefaultInstance() {
}

CheckVersionRequest::CheckVersionRequest(const CheckVersionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckVersionRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVersionRequest::~CheckVersionRequest() {
  SharedDtor();
}

void CheckVersionRequest::SharedDtor() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (this != default_instance_) {
  }
}

void CheckVersionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVersionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVersionRequest_descriptor_;
}

const CheckVersionRequest& CheckVersionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

CheckVersionRequest* CheckVersionRequest::default_instance_ = NULL;

CheckVersionRequest* CheckVersionRequest::New() const {
  return new CheckVersionRequest;
}

void CheckVersionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVersionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_imei;
        break;
      }

      // optional string imei = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckVersionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string imei = 2;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->imei(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckVersionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional string imei = 2;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imei(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckVersionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string imei = 2;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVersionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVersionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckVersionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVersionRequest::MergeFrom(const CheckVersionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVersionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionRequest::CopyFrom(const CheckVersionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckVersionRequest::Swap(CheckVersionRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(imei_, other->imei_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckVersionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckVersionRequest_descriptor_;
  metadata.reflection = CheckVersionRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CheckVersionResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVersionResponse_Result_descriptor_;
}
bool CheckVersionResponse_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CheckVersionResponse_Result CheckVersionResponse::CHECK_VERSION_SUCCESS;
const CheckVersionResponse_Result CheckVersionResponse::CHECK_VERSION_REFUSE;
const CheckVersionResponse_Result CheckVersionResponse::SERVER_LOAD_IS_FULL;
const CheckVersionResponse_Result CheckVersionResponse::LOGIN_IS_CLOSED;
const CheckVersionResponse_Result CheckVersionResponse::LOGIN_IS_REFUSED;
const CheckVersionResponse_Result CheckVersionResponse::SOMETHING_ERROR;
const CheckVersionResponse_Result CheckVersionResponse::Result_MIN;
const CheckVersionResponse_Result CheckVersionResponse::Result_MAX;
const int CheckVersionResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CheckVersionResponse::kResultFieldNumber;
const int CheckVersionResponse::kVersionFieldNumber;
#endif  // !_MSC_VER

CheckVersionResponse::CheckVersionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckVersionResponse::InitAsDefaultInstance() {
}

CheckVersionResponse::CheckVersionResponse(const CheckVersionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckVersionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVersionResponse::~CheckVersionResponse() {
  SharedDtor();
}

void CheckVersionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckVersionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVersionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVersionResponse_descriptor_;
}

const CheckVersionResponse& CheckVersionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

CheckVersionResponse* CheckVersionResponse::default_instance_ = NULL;

CheckVersionResponse* CheckVersionResponse::New() const {
  return new CheckVersionResponse;
}

void CheckVersionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVersionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.CheckVersionResponse.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::CheckVersionResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::CheckVersionResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckVersionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.CheckVersionResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckVersionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.CheckVersionResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckVersionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.CheckVersionResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVersionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVersionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckVersionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVersionResponse::MergeFrom(const CheckVersionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVersionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionResponse::CopyFrom(const CheckVersionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckVersionResponse::Swap(CheckVersionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckVersionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckVersionResponse_descriptor_;
  metadata.reflection = CheckVersionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginRequest::kUserNameFieldNumber;
const int AccountLoginRequest::kUserIdFieldNumber;
const int AccountLoginRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

AccountLoginRequest::AccountLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginRequest::InitAsDefaultInstance() {
}

AccountLoginRequest::AccountLoginRequest(const AccountLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginRequest::~AccountLoginRequest() {
  SharedDtor();
}

void AccountLoginRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginRequest_descriptor_;
}

const AccountLoginRequest& AccountLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

AccountLoginRequest* AccountLoginRequest::default_instance_ = NULL;

AccountLoginRequest* AccountLoginRequest::New() const {
  return new AccountLoginRequest;
}

void AccountLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginRequest::MergeFrom(const AccountLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginRequest::CopyFrom(const AccountLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccountLoginRequest::Swap(AccountLoginRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(user_id_, other->user_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginRequest_descriptor_;
  metadata.reflection = AccountLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginResponse::kRetcodeFieldNumber;
const int AccountLoginResponse::kGroupIDFieldNumber;
const int AccountLoginResponse::kLogicIpFieldNumber;
const int AccountLoginResponse::kLogicPortFieldNumber;
const int AccountLoginResponse::kLogicTokenFieldNumber;
#endif  // !_MSC_VER

AccountLoginResponse::AccountLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginResponse::InitAsDefaultInstance() {
}

AccountLoginResponse::AccountLoginResponse(const AccountLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  groupid_ = 0u;
  logicip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logicport_ = 0u;
  logictoken_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginResponse::~AccountLoginResponse() {
  SharedDtor();
}

void AccountLoginResponse::SharedDtor() {
  if (logicip_ != &::google::protobuf::internal::kEmptyString) {
    delete logicip_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginResponse_descriptor_;
}

const AccountLoginResponse& AccountLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

AccountLoginResponse* AccountLoginResponse::default_instance_ = NULL;

AccountLoginResponse* AccountLoginResponse::New() const {
  return new AccountLoginResponse;
}

void AccountLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    groupid_ = 0u;
    if (has_logicip()) {
      if (logicip_ != &::google::protobuf::internal::kEmptyString) {
        logicip_->clear();
      }
    }
    logicport_ = 0u;
    logictoken_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupID;
        break;
      }

      // optional uint32 groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logicIp;
        break;
      }

      // optional string logicIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logicIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logicip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logicip().data(), this->logicip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logicPort;
        break;
      }

      // optional uint32 logicPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicport_)));
          set_has_logicport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logicToken;
        break;
      }

      // optional uint64 logicToken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logictoken_)));
          set_has_logictoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint32 groupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // optional string logicIp = 3;
  if (has_logicip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logicip().data(), this->logicip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->logicip(), output);
  }

  // optional uint32 logicPort = 4;
  if (has_logicport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logicport(), output);
  }

  // optional uint64 logicToken = 5;
  if (has_logictoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logictoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 groupID = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // optional string logicIp = 3;
  if (has_logicip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logicip().data(), this->logicip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logicip(), target);
  }

  // optional uint32 logicPort = 4;
  if (has_logicport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logicport(), target);
  }

  // optional uint64 logicToken = 5;
  if (has_logictoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logictoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint32 groupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional string logicIp = 3;
    if (has_logicip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logicip());
    }

    // optional uint32 logicPort = 4;
    if (has_logicport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicport());
    }

    // optional uint64 logicToken = 5;
    if (has_logictoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logictoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginResponse::MergeFrom(const AccountLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_logicip()) {
      set_logicip(from.logicip());
    }
    if (from.has_logicport()) {
      set_logicport(from.logicport());
    }
    if (from.has_logictoken()) {
      set_logictoken(from.logictoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginResponse::CopyFrom(const AccountLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountLoginResponse::Swap(AccountLoginResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(groupid_, other->groupid_);
    std::swap(logicip_, other->logicip_);
    std::swap(logicport_, other->logicport_);
    std::swap(logictoken_, other->logictoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginResponse_descriptor_;
  metadata.reflection = AccountLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PingLoginRequest::PingLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingLoginRequest::InitAsDefaultInstance() {
}

PingLoginRequest::PingLoginRequest(const PingLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingLoginRequest::~PingLoginRequest() {
  SharedDtor();
}

void PingLoginRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingLoginRequest_descriptor_;
}

const PingLoginRequest& PingLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

PingLoginRequest* PingLoginRequest::default_instance_ = NULL;

PingLoginRequest* PingLoginRequest::New() const {
  return new PingLoginRequest;
}

void PingLoginRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PingLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingLoginRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingLoginRequest::MergeFrom(const PingLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingLoginRequest::CopyFrom(const PingLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingLoginRequest::IsInitialized() const {

  return true;
}

void PingLoginRequest::Swap(PingLoginRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingLoginRequest_descriptor_;
  metadata.reflection = PingLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpSetModeRequest::kPkModeFieldNumber;
#endif  // !_MSC_VER

PvpSetModeRequest::PvpSetModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpSetModeRequest::InitAsDefaultInstance() {
}

PvpSetModeRequest::PvpSetModeRequest(const PvpSetModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpSetModeRequest::SharedCtor() {
  _cached_size_ = 0;
  pk_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpSetModeRequest::~PvpSetModeRequest() {
  SharedDtor();
}

void PvpSetModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpSetModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpSetModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpSetModeRequest_descriptor_;
}

const PvpSetModeRequest& PvpSetModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

PvpSetModeRequest* PvpSetModeRequest::default_instance_ = NULL;

PvpSetModeRequest* PvpSetModeRequest::New() const {
  return new PvpSetModeRequest;
}

void PvpSetModeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pk_mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpSetModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pk_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_mode_)));
          set_has_pk_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpSetModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pk_mode = 1;
  if (has_pk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pk_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpSetModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pk_mode = 1;
  if (has_pk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pk_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpSetModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pk_mode = 1;
    if (has_pk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpSetModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpSetModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpSetModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpSetModeRequest::MergeFrom(const PvpSetModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk_mode()) {
      set_pk_mode(from.pk_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpSetModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpSetModeRequest::CopyFrom(const PvpSetModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpSetModeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PvpSetModeRequest::Swap(PvpSetModeRequest* other) {
  if (other != this) {
    std::swap(pk_mode_, other->pk_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpSetModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpSetModeRequest_descriptor_;
  metadata.reflection = PvpSetModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpSetModeRespone::kRetcodeFieldNumber;
const int PvpSetModeRespone::kPkModeFieldNumber;
const int PvpSetModeRespone::kCidFieldNumber;
#endif  // !_MSC_VER

PvpSetModeRespone::PvpSetModeRespone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpSetModeRespone::InitAsDefaultInstance() {
}

PvpSetModeRespone::PvpSetModeRespone(const PvpSetModeRespone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpSetModeRespone::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  pk_mode_ = 0u;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpSetModeRespone::~PvpSetModeRespone() {
  SharedDtor();
}

void PvpSetModeRespone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpSetModeRespone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpSetModeRespone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpSetModeRespone_descriptor_;
}

const PvpSetModeRespone& PvpSetModeRespone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fClientToLogic_2eproto();
  return *default_instance_;
}

PvpSetModeRespone* PvpSetModeRespone::default_instance_ = NULL;

PvpSetModeRespone* PvpSetModeRespone::New() const {
  return new PvpSetModeRespone;
}

void PvpSetModeRespone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    pk_mode_ = 0u;
    cid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpSetModeRespone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pk_mode;
        break;
      }

      // required uint32 pk_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_mode_)));
          set_has_pk_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // required uint32 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpSetModeRespone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 pk_mode = 2;
  if (has_pk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pk_mode(), output);
  }

  // required uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpSetModeRespone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 pk_mode = 2;
  if (has_pk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pk_mode(), target);
  }

  // required uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpSetModeRespone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 pk_mode = 2;
    if (has_pk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_mode());
    }

    // required uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpSetModeRespone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpSetModeRespone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpSetModeRespone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpSetModeRespone::MergeFrom(const PvpSetModeRespone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_pk_mode()) {
      set_pk_mode(from.pk_mode());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpSetModeRespone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpSetModeRespone::CopyFrom(const PvpSetModeRespone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpSetModeRespone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PvpSetModeRespone::Swap(PvpSetModeRespone* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(pk_mode_, other->pk_mode_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpSetModeRespone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpSetModeRespone_descriptor_;
  metadata.reflection = PvpSetModeRespone_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
