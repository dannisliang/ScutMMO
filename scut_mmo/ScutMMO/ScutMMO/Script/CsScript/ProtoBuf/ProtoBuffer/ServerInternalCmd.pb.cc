// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ServerInternalCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/ServerInternalCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::EnumDescriptor* ServerInternalCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DBProxyServerCmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fServerInternalCmd_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fServerInternalCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/ServerInternalCmd.proto");
  GOOGLE_CHECK(file != NULL);
  ServerInternalCmd_descriptor_ = file->enum_type(0);
  DBProxyServerCmd_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fServerInternalCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fServerInternalCmd_2eproto() {
}

void protobuf_AddDesc_ProtoBuffer_2fServerInternalCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#ProtoBuffer/ServerInternalCmd.proto\022\010P"
    "rotoBuf*\260\037\n\021ServerInternalCmd\022\037\n\033SERVER_"
    "INTERNAL_LOGIN_BEGIN\020\001\022)\n%CENTER_SERVER_"
    "PROTOCOL_LOGINLOGIC_REQ\020\002\022)\n%CENTER_SERV"
    "ER_PROTOCOL_ENTERWORLD_REQ\020\003\022*\n&CENTER_S"
    "ERVER_PROTOCOL_LOGOUTLOGIC_REQ\020\004\022-\n)CENT"
    "ER_SERVER_PROTOCOL_SYNC_CHARACTER_REQ\020\005\022"
    "5\n1CENTER_SERVER_PROTOCOL_CLIENT_RECONNE"
    "CT_LOGIC_REQ\020\006\0222\n.CENTER_SERVER_PROTOCOL"
    "_ACCOUNT_LOGIN_CHECK_REQ\020\007\0220\n,CENTER_SER"
    "VER_PROTOCOL_LOGIN_TOKEN_CHECK_REQ\020\010\0220\n,"
    "CENTER_SERVER_PROTOCOL_ACCOUNT_LOGOUT_NO"
    "TIFY\020\t\022=\n9CENTER_SERVER_PROTOCOL_LOGIC_T"
    "O_CENTER_CREATE_CHAR_NOTIFY\020\n\022:\n6CENTER_"
    "SERVER_PROTOCOL_LOGIC_TO_CENTER_DEL_CHAR"
    "_NOTIFY\020\013\0229\n5CENTER_SERVER_PROTOCOL_LOGI"
    "C_TO_CENTER_CHAR_ATTR_SYNC\020\014\022)\n%CENTER_S"
    "ERVER_PROTOCOL_LOGINLOGIC_RSP\020\r\022)\n%CENTE"
    "R_SERVER_PROTOCOL_ENTERWORLD_RSP\020\016\0225\n1CE"
    "NTER_SERVER_PROTOCOL_CLIENT_RECONNECT_LO"
    "GIC_RSP\020\017\0222\n.CENTER_SERVER_PROTOCOL_ACCO"
    "UNT_LOGIN_CHECK_RSP\020\020\0220\n,CENTER_SERVER_P"
    "ROTOCOL_LOGIN_TOKEN_CHECK_RSP\020\021\0223\n/CENTE"
    "R_SERVER_PROTOCOL_KICK_CHANNEL_USER_NOTI"
    "FY\020\022\0227\n3CENTER_SERVER_PROTOCOL_CENTER_AC"
    "COUNT_LOGOUT_NOTIFY\020\023\022\035\n\031SERVER_INTERNAL"
    "_LOGIN_END\0202\022 \n\034SERVER_INTERNAL_SYSTEM_B"
    "EGIN\020<\022#\n\037CENTER_SERVER_PROTOCOL_PING_RE"
    "Q\020=\022 \n\034LOG_SERVER_PROTOCOL_PING_REQ\020>\022\"\n"
    "\036LOGIN_SERVER_PROTOCOL_PING_REQ\020\?\0223\n/CEN"
    "TER_SERVER_PROTOCOL_REDIRECT_TO_CENTERSE"
    "RVER\020@\022.\n*CENTER_SERVER_PROTOCOL_LOGINSE"
    "RVER_REGISTE\020A\022.\n*CENTER_SERVER_PROTOCOL"
    "_LOGICSERVER_REGISTE\020B\022-\n)CENTER_SERVER_"
    "PROTOCOL_BROADCAST_TO_LOGIC\020C\022-\n)CENTER_"
    "SERVER_PROTOCOL_REDIRECT_TO_CLIENT\020D\022.\n*"
    "CENTER_SERVER_PROTOCOL_DBPROXY_ADDRESSIN"
    "FO\020E\022\036\n\032SERVER_INTERNAL_SYSTEM_END\020P\022\037\n\033"
    "SERVER_INTERNAL_SCENE_BEGIN\020Z\022.\n*CENTER_"
    "SERVER_PROTOCOL_SWITCH_SERVER_BEGIN\020[\022(\n"
    "$CENTER_SERVER_PROTOCOL_RSP_SCENCE_ID\020\\\022"
    "\035\n\031SERVER_INTERNAL_SCENE_END\020n\022\036\n\032SERVER"
    "_INTERNAL_CHAT_BEGIN\020x\022#\n\037CENTER_SERVER_"
    "PROTOCOL_CHAT_REQ\020y\022-\n)CENTER_SERVER_PRO"
    "TOCOL_GWSYSCHATMSGNOTIFY\020z\022\035\n\030SERVER_INT"
    "ERNAL_CHAT_END\020\202\001\022!\n\034SERVER_INTERNAL_FRI"
    "END_BEGIN\020\214\001\0221\n,CENTER_SERVER_PROTOCOL_G"
    "ET_PHYSICAL_TO_LOGIC\020\215\001\0226\n1CENTER_SERVER"
    "_PROTOCOL_GET_PHYSICAL_GIFT_TO_LOGIC\020\216\001\022"
    "\037\n\032SERVER_INTERNAL_FRIEND_END\020\240\001\022$\n\037SERV"
    "ER_INTERNAL_DUPLICATE_BEGIN\020\252\001\022,\n\'LOGIC_"
    "TO_CENTER_DUPLICATE_ENTER_DUP_REQ\020\253\001\022,\n\'"
    "CENTER_TO_LOGIC_DUPLICATE_ENTER_DUP_RSP\020"
    "\254\001\022/\n*LOGIC_TO_CENTER_CREATE_DUPLICATE_S"
    "CENE_REQ\020\255\001\022/\n*CENTER_TO_LOGIC_CREATE_DU"
    "PLICATE_SCENE_RSP\020\256\001\022)\n$LOGIC_TO_CENTER_"
    "CREATE_DUPLICATE_RSP\020\257\001\022-\n(CENTER_TO_LOG"
    "IC_DUPLICATE_NOTIFY_PREPARE\020\260\001\022*\n%LOGIC_"
    "TO_CENTER_DUPLICATE_PREPARE_RSP\020\261\001\022+\n&CE"
    "NTER_TO_LOGIC_DUPLICATE_NOTIFY_ENTER\020\262\001\022"
    "(\n#LOGIC_TO_CENTER_DUPLICATE_ENTER_RSP\020\263"
    "\001\022(\n#LOGIC_TO_CENTER_DUPLICATE_LEAVE_RSP"
    "\020\264\001\022(\n#LOGIC_TO_CENTER_DUPLICATE_BEGIN_R"
    "SP\020\265\001\022&\n!LOGIC_TO_CENTER_DUPLICATE_END_R"
    "SP\020\266\001\022*\n%LOGIC_TO_CENTER_DUPLICATE_DESTO"
    "RY_RSP\020\267\001\022\"\n\035SERVER_INTERNAL_DUPLICATE_E"
    "ND\020\276\001\022\037\n\032SERVER_INTERNAL_MAIL_BEGIN\020\310\001\022)"
    "\n$CENTER_SERVER_PROTOCOL_SEND_MAIL_REQ\020\311"
    "\001\022)\n$CENTER_SERVER_PROTOCOL_SEND_MAIL_RS"
    "P\020\312\001\0228\n3CENTER_SERVER_PROTOCOL_GET_MAIL_"
    "ATTACHMENT_TO_LOGIC\020\313\001\022.\n)CENTER_SERVER_"
    "PROTOCOL_UPDATE_MAIL_NOTIFY\020\314\001\022<\n7CENTER"
    "_SERVER_PROTOCOL_GET_ALL_MAIL_ATTACHMENT"
    "_TO_LOGIC\020\315\001\022,\n\'CENTER_SERVER_PROTOCOL_S"
    "END_SYSTEM_MAIL\020\316\001\022.\n)CENTER_SERVER_PROT"
    "OCOL_SEND_MAIL_TO_LOGIC\020\317\001\022\035\n\030SERVER_INT"
    "ERNAL_MAIL_END\020\372\001\022\037\n\032SERVER_INTERNAL_CAM"
    "P_BEGIN\020\204\002\022*\n%CENTER_TO_LOGIC_CAMP_CHAR_"
    "INFO_NOTIFY\020\205\002\022/\n*CENTER_TO_LOGIC_CAMP_C"
    "HECK_NOTICE_COST_REQ\020\206\002\022/\n*LOGIC_TO_CENT"
    "ER_CAMP_CHECK_NOTICE_COST_RSP\020\207\002\022\035\n\030SERV"
    "ER_INTERNAL_CAMP_END\020\253\002\022&\n!SERVER_INTERN"
    "AL_ACHIEVEMENT_BEGIN\020\254\002\022&\n!SERVER_INTERN"
    "AL_ACHIEVEMENTNOTIFY\020\255\002\022$\n\037SERVER_INTERN"
    "AL_ACHIEVEMENT_END\020\266\002\022\037\n\032SERVER_INTERNAL"
    "_MALL_BEGIN\020\300\002\022#\n\036LOGIC_TO_CENTER_BUY_VE"
    "RIFY_REQ\020\301\002\022#\n\036CENTER_TO_LOGIC_BUY_VERIF"
    "Y_RSP\020\302\002\022\035\n\030SERVER_INTERNAL_MALL_END\020\312\002\022"
    "#\n\036SERVER_INTERNAL_ACTIVITY_BEGIN\020\313\002\022(\n#"
    "CENTER_TO_LOGIC_DAILY_UPDATE_NOTIFY\020\314\002\022\'"
    "\n\"CENTER_TO_LOGIC_WEEK_UPDATE_NOTIFY\020\315\002\022"
    "!\n\034SERVER_INTERNAL_ACTIVITY_END\020\220\003\022\037\n\032SE"
    "RVER_INTERNAL_ROOM_BEGIN\020\302\003\022 \n\033LOGIC_TO_"
    "CENTER_ROOM_CREATE\020\303\003\022!\n\034LOGIC_TO_CENTER"
    "_ROOM_SET_PWD\020\304\003\022\036\n\031LOGIC_TO_CENTER_ROOM"
    "_JOIN\020\305\003\022\'\n\"LOGIC_TO_CENTER_ROOM_INVITE_"
    "FRIEND\020\306\003\022&\n!LOGIC_TO_CENTER_ROOM_INVITE"
    "_REPLY\020\307\003\022\036\n\031LOGIC_TO_CENTER_ROOM_KICK\020\310"
    "\003\022\037\n\032LOGIC_TO_CENTER_ROOM_LEAVE\020\311\003\022#\n\036LO"
    "GIC_TO_CENTER_ROOM_AUTO_JOIN\020\312\003\022*\n%CENTE"
    "R_TO_LOGIC_ROOM_CHAR_ROOM_NOTIFY\020\313\003\022\035\n\030S"
    "ERVER_INTERNAL_ROOM_END\020\340\003*\215\025\n\020DBProxySe"
    "rverCmd\022!\n\035DBPROXY_PROTOCOL_SYSTEM_BEGIN"
    "\020\001\022\035\n\031DBPROXY_PROTOCOL_PING_REQ\020\002\022#\n\037DBP"
    "ROXY_PROTOCOL_GLOBAL_GET_REQ\020\003\022#\n\037DBPROX"
    "Y_PROTOCOL_GLOBAL_GET_RSP\020\004\022$\n DBPROXY_P"
    "ROTOCOL_GLOBAL_SAVE_REQ\020\005\022$\n DBPROXY_PRO"
    "TOCOL_GLOBAL_SAVE_RSP\020\006\022+\n\'DBPROXY_PROTO"
    "COL_ALL_CHARACTER_CAMP_REQ\020\007\022+\n\'DBPROXY_"
    "PROTOCOL_ALL_CHARACTER_CAMP_RSP\020\010\022\037\n\033DBP"
    "ROXY_PROTOCOL_SYSTEM_END\020\024\022 \n\034DBPROXY_PR"
    "OTOCOL_LOGIN_BEGIN\020\036\022+\n\'DBPROXY_PROTOCOL"
    "_GET_CHARACTER_LIST_REQ\020\037\022+\n\'DBPROXY_PRO"
    "TOCOL_GET_CHARACTER_LIST_RSP\020 \022)\n%DBPROX"
    "Y_PROTOCOL_CREATE_CHARACTER_REQ\020!\022)\n%DBP"
    "ROXY_PROTOCOL_CREATE_CHARACTER_RSP\020\"\022+\n\'"
    "DBPROXY_PROTOCOL_GET_CHARACTER_DATA_REQ\020"
    "#\022+\n\'DBPROXY_PROTOCOL_GET_CHARACTER_DATA"
    "_RSP\020$\022&\n\"DBPROXY_PROTOCOL_DEL_CHARACTER"
    "_REQ\020%\022&\n\"DBPROXY_PROTOCOL_DEL_CHARACTER"
    "_RSP\020&\0223\n/DBPROXY_PROTOCOL_GET_CHARACTER"
    "_OFFLINE_DATA_REQ\020\'\0223\n/DBPROXY_PROTOCOL_"
    "GET_CHARACTER_OFFLINE_DATA_RSP\020(\022\'\n#DBPR"
    "OXY_PROTOCOL_ACCOUNT_LOGINT_REQ\020)\022\'\n#DBP"
    "ROXY_PROTOCOL_ACCOUNT_LOGINT_RSP\020*\0220\n,DB"
    "PROXY_PROTOCOL_ACCOUNT_SET_ONLINE_FALG_R"
    "EQ\020+\022/\n+DBPROXY_PROTOCOL_OFFLINE_CHARACT"
    "ER_LIST_REQ\020,\022/\n+DBPROXY_PROTOCOL_OFFLIN"
    "E_CHARACTER_LIST_RSP\020-\022.\n*DBPROXY_PROTOC"
    "OL_ACTIVE_CHARACTER_DATA_REQ\020.\022.\n*DBPROX"
    "Y_PROTOCOL_ACTIVE_CHARACTER_DATA_RSP\020/\022)"
    "\n%DBPROXY_PROTOCOL_GET_PLAYER_ROLE_LIST\020"
    "0\022\036\n\032DBPROXY_PROTOCOL_LOGIN_END\020<\022!\n\035DBP"
    "ROXY_PROTOCOL_FRIEND_BEGIN\020F\022(\n$DBPROXY_"
    "PROTOCOL_ALL_FRIEND_DATA_REQ\020G\022)\n%DBPROX"
    "Y_PROTOCOL_SAVE_FRIEND_DATA_REQ\020H\022(\n$DBP"
    "ROXY_PROTOCOL_ALL_FRIEND_DATA_RSP\020I\022)\n%D"
    "BPROXY_PROTOCOL_SAVE_FRIEND_DATA_RSP\020J\022\037"
    "\n\033DBPROXY_PROTOCOL_FRIEND_END\020P\022!\n\035DBPRO"
    "XY_PROTOCOL_PLAYER_BEGIN\020Z\022+\n\'DBPROXY_PR"
    "OTOCOL_SET_CHARACTER_DATA_REQ\020[\022+\n\'DBPRO"
    "XY_PROTOCOL_SET_CHARACTER_DATA_RSP\020\\\022\037\n\033"
    "DBPROXY_PROTOCOL_PLAYER_END\020d\022\037\n\033DBPROXY"
    "_PROTOCOL_MAIL_BEGIN\020e\022*\n&DBPROXY_PROTOC"
    "OL_TRADING_MAIL_DATA_REQ\020f\022\'\n#DBPROXY_PR"
    "OTOCOL_SAVE_MAIL_DATA_REQ\020g\022,\n(DBPROXY_P"
    "ROTOCOL_CHARACTER_MAIL_DATA_REQ\020h\022*\n&DBP"
    "ROXY_PROTOCOL_TRADING_MAIL_DATA_RSP\020i\022,\n"
    "(DBPROXY_PROTOCOL_CHARACTER_MAIL_DATA_RS"
    "P\020j\022*\n&DBPROXY_PROTOCOL_OFFLINE_MAIL_DAT"
    "A_REQ\020k\022*\n&DBPROXY_PROTOCOL_OFFLINE_MAIL"
    "_DATA_RSP\020l\022/\n+DBPROXY_PROTOCOL_SAVE_OFF"
    "LINE_MAIL_DATA_REQ\020m\022$\n DBPROXY_PROTOCOL"
    "_MAX_MAIL_ID_REQ\020n\022$\n DBPROXY_PROTOCOL_M"
    "AX_MAIL_ID_RSP\020o\022.\n*DBPROXY_PROTOCOL_CHA"
    "RACTER_DELETE_MAIL_REQ\020p\022\035\n\031DBPROXY_PROT"
    "OCOL_MAIL_END\020x\022 \n\033DBPROXY_PROTOCOL_CAMP"
    "_BEGIN\020\202\001\022)\n$DBPROXY_PROTOCOL_CAMP_PLAYE"
    "R_GET_REQ\020\203\001\022)\n$DBPROXY_PROTOCOL_CAMP_PL"
    "AYER_GET_RSP\020\204\001\022*\n%DBPROXY_PROTOCOL_CAMP"
    "_PLAYER_SAVE_REQ\020\205\001\022*\n%DBPROXY_PROTOCOL_"
    "CAMP_PLAYER_SAVE_RSP\020\206\001\022\036\n\031DBPROXY_PROTO"
    "COL_CAMP_END\020\214\001\022 \n\033DBPROXY_PROTOCOL_MALL"
    "_BEGIN\020\226\001\022-\n(DBPROXY_PROTOCOL_CHARACTER_"
    "MALL_DATA_REQ\020\227\001\022-\n(DBPROXY_PROTOCOL_CHA"
    "RACTER_MALL_DATA_RSP\020\230\001\022*\n%DBPROXY_PROTO"
    "COL_MALL_PLAYER_SAVE_REQ\020\231\001\022*\n%DBPROXY_P"
    "ROTOCOL_MALL_PLAYER_SAVE_RSP\020\232\001\022\036\n\031DBPRO"
    "XY_PROTOCOL_MALL_END\020\240\001\022\031\n\024DBPROXY_PROTO"
    "COL_END\020\310\001", 6770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/ServerInternalCmd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fServerInternalCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fServerInternalCmd_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fServerInternalCmd_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fServerInternalCmd_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fServerInternalCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerInternalCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInternalCmd_descriptor_;
}
bool ServerInternalCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 50:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 80:
    case 90:
    case 91:
    case 92:
    case 110:
    case 120:
    case 121:
    case 122:
    case 130:
    case 140:
    case 141:
    case 142:
    case 160:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 190:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 250:
    case 260:
    case 261:
    case 262:
    case 263:
    case 299:
    case 300:
    case 301:
    case 310:
    case 320:
    case 321:
    case 322:
    case 330:
    case 331:
    case 332:
    case 333:
    case 400:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 480:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DBProxyServerCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBProxyServerCmd_descriptor_;
}
bool DBProxyServerCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 20:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 60:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 90:
    case 91:
    case 92:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 120:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 140:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 160:
    case 200:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
