// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ComProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/ComProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValueCurrency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValueCurrency_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBPvpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBPvpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBEffPreCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBEffPreCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSubmittedMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSubmittedMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBWithoutPreComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBWithoutPreComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSignleCampMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSignleCampMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBCampMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBCampMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBLoopMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBLoopMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSkillItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSkillItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBAttrDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBAttrDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBExtendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBExtendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FashionProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FashionProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBPackageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBPackageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBFashionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBFashionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateSingleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateSingleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDuplicateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDuplicateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleCampRankDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleCampRankDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampRankDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampRankDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleCampDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleCampDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllCampDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllCampDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterCampDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterCampDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllMallDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllMallDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleCharacterMallDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleCharacterMallDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleAchievementDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleAchievementDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupAchievementDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAchievementDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterAchievementDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterAchievementDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleDeputyDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleDeputyDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectDeputyDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectDeputyDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeDeputyDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeDeputyDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDeputyDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDeputyDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorSkillMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorSkillMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorRockerMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorRockerMove_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorRockerMove_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActorPosUpDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorPosUpDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharSyncAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharSyncAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* DigPerfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DigPerfor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DigPerfor_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IsCanTransSceneRouteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsCanTransSceneRouteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsCanTransSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsCanTransSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSellProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSellProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyDressProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyDressProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardItemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationPhysicalTab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationPhysicalTab_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterPlayerMiniInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterPlayerMiniInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDetailProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDetailProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailAttachmentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailAttachmentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiniMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiniMailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MonsterAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreatureState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/ComProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyMessage_descriptor_ = file->message_type(0);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMessage));
  RegisterServiceRequest_descriptor_ = file->message_type(1);
  static const int RegisterServiceRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, service_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, listen_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, listen_port_),
  };
  RegisterServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterServiceRequest_descriptor_,
      RegisterServiceRequest::default_instance_,
      RegisterServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterServiceRequest));
  ValueCurrency_descriptor_ = file->message_type(2);
  static const int ValueCurrency_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueCurrency, cointype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueCurrency, coinvalue_),
  };
  ValueCurrency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValueCurrency_descriptor_,
      ValueCurrency::default_instance_,
      ValueCurrency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueCurrency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueCurrency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValueCurrency));
  CharacterDBPvpData_descriptor_ = file->message_type(3);
  static const int CharacterDBPvpData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, pk_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, pk_killing_value_),
  };
  CharacterDBPvpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBPvpData_descriptor_,
      CharacterDBPvpData::default_instance_,
      CharacterDBPvpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPvpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBPvpData));
  CharacterDBBaseInfo_descriptor_ = file->message_type(4);
  static const int CharacterDBBaseInfo_offsets_[65] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastsavetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enter_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enterposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enterposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enterposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, enter_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastrevivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, lastposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, intelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, physique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, endurance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, camplev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, married_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, campkilling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, hostilekilling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, attr_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, pointpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, pointintelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, pointagility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, pointphysique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, pointendurance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, pointprecision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, autopower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, autointelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, autoagility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, autophysique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, autoendurance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, autoprecision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, autopoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, knight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, pvpdata_),
  };
  CharacterDBBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBBaseInfo_descriptor_,
      CharacterDBBaseInfo::default_instance_,
      CharacterDBBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBBaseInfo));
  CharacterDBTaskData_descriptor_ = file->message_type(5);
  static const int CharacterDBTaskData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, effprecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, submitmission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, withoutprecomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, missiontrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, assignlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, campmissioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, loopmissioninfo_),
  };
  CharacterDBTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBTaskData_descriptor_,
      CharacterDBTaskData::default_instance_,
      CharacterDBTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBTaskData));
  CharacterDBEffPreCondition_descriptor_ = file->message_type(6);
  static const int CharacterDBEffPreCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEffPreCondition, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEffPreCondition, time_),
  };
  CharacterDBEffPreCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBEffPreCondition_descriptor_,
      CharacterDBEffPreCondition::default_instance_,
      CharacterDBEffPreCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEffPreCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEffPreCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBEffPreCondition));
  CharacterDBSubmittedMission_descriptor_ = file->message_type(7);
  static const int CharacterDBSubmittedMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSubmittedMission, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSubmittedMission, times_),
  };
  CharacterDBSubmittedMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSubmittedMission_descriptor_,
      CharacterDBSubmittedMission::default_instance_,
      CharacterDBSubmittedMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSubmittedMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSubmittedMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSubmittedMission));
  CharacterDBWithoutPreComplete_descriptor_ = file->message_type(8);
  static const int CharacterDBWithoutPreComplete_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWithoutPreComplete, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWithoutPreComplete, finishyearday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWithoutPreComplete, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWithoutPreComplete, acceptable_),
  };
  CharacterDBWithoutPreComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBWithoutPreComplete_descriptor_,
      CharacterDBWithoutPreComplete::default_instance_,
      CharacterDBWithoutPreComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWithoutPreComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBWithoutPreComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBWithoutPreComplete));
  CharacterDBMissionItemInfo_descriptor_ = file->message_type(9);
  static const int CharacterDBMissionItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, currentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, finalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, completedflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma3_),
  };
  CharacterDBMissionItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionItemInfo_descriptor_,
      CharacterDBMissionItemInfo::default_instance_,
      CharacterDBMissionItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionItemInfo));
  CharacterDBMissionTrack_descriptor_ = file->message_type(10);
  static const int CharacterDBMissionTrack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, acceptmissiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, submittedmissiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, iteminfo_),
  };
  CharacterDBMissionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionTrack_descriptor_,
      CharacterDBMissionTrack::default_instance_,
      CharacterDBMissionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionTrack));
  CharacterDBSignleCampMission_descriptor_ = file->message_type(11);
  static const int CharacterDBSignleCampMission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSignleCampMission, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSignleCampMission, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSignleCampMission, isaccept_),
  };
  CharacterDBSignleCampMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSignleCampMission_descriptor_,
      CharacterDBSignleCampMission::default_instance_,
      CharacterDBSignleCampMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSignleCampMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSignleCampMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSignleCampMission));
  CharacterDBCampMissionInfo_descriptor_ = file->message_type(12);
  static const int CharacterDBCampMissionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCampMissionInfo, campsinglemission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCampMissionInfo, camprefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCampMissionInfo, camptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCampMissionInfo, boxprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCampMissionInfo, campopen_),
  };
  CharacterDBCampMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBCampMissionInfo_descriptor_,
      CharacterDBCampMissionInfo::default_instance_,
      CharacterDBCampMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCampMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBCampMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBCampMissionInfo));
  CharacterDBLoopMissionInfo_descriptor_ = file->message_type(13);
  static const int CharacterDBLoopMissionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBLoopMissionInfo, loopcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBLoopMissionInfo, loopfinishcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBLoopMissionInfo, loopopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBLoopMissionInfo, loopmissionid_),
  };
  CharacterDBLoopMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBLoopMissionInfo_descriptor_,
      CharacterDBLoopMissionInfo::default_instance_,
      CharacterDBLoopMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBLoopMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBLoopMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBLoopMissionInfo));
  CharacterDBSkillItem_descriptor_ = file->message_type(14);
  static const int CharacterDBSkillItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, cd_),
  };
  CharacterDBSkillItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSkillItem_descriptor_,
      CharacterDBSkillItem::default_instance_,
      CharacterDBSkillItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSkillItem));
  CharacterDBSkillData_descriptor_ = file->message_type(15);
  static const int CharacterDBSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, skillattrs_),
  };
  CharacterDBSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSkillData_descriptor_,
      CharacterDBSkillData::default_instance_,
      CharacterDBSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSkillData));
  CharacterDBAttrDetailInfo_descriptor_ = file->message_type(16);
  static const int CharacterDBAttrDetailInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, intelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, physique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, endurance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, max_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, mat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, dp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, mdp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, toughness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, crit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, crit_extradamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, crit_reducedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, extra_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, reduce_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, apdamagerate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, apreducedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, freezeres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, burners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, weakres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, fastingres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, funkres_),
  };
  CharacterDBAttrDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBAttrDetailInfo_descriptor_,
      CharacterDBAttrDetailInfo::default_instance_,
      CharacterDBAttrDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBAttrDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBAttrDetailInfo));
  CharacterDBExtendData_descriptor_ = file->message_type(17);
  static const int CharacterDBExtendData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBExtendData, attr_detail_),
  };
  CharacterDBExtendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBExtendData_descriptor_,
      CharacterDBExtendData::default_instance_,
      CharacterDBExtendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBExtendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBExtendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBExtendData));
  CharacterDBInfo_descriptor_ = file->message_type(18);
  static const int CharacterDBInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, basedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, taskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, extenddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, equipdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, duplicatedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, achievementdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, deputydata_),
  };
  CharacterDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBInfo_descriptor_,
      CharacterDBInfo::default_instance_,
      CharacterDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBInfo));
  CharacterDBSimpleInfo_descriptor_ = file->message_type(19);
  static const int CharacterDBSimpleInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, clothes_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, wing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, knight_),
  };
  CharacterDBSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBSimpleInfo_descriptor_,
      CharacterDBSimpleInfo::default_instance_,
      CharacterDBSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBSimpleInfo));
  ItemProtoInfo_descriptor_ = file->message_type(20);
  static const int ItemProtoInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, strenlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, refinelev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, holy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, refineex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, baseattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, inlay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, maker_),
  };
  ItemProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemProtoInfo_descriptor_,
      ItemProtoInfo::default_instance_,
      ItemProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemProtoInfo));
  FashionProtoInfo_descriptor_ = file->message_type(21);
  static const int FashionProtoInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionProtoInfo, fashion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionProtoInfo, left_sec_),
  };
  FashionProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FashionProtoInfo_descriptor_,
      FashionProtoInfo::default_instance_,
      FashionProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FashionProtoInfo));
  CharacterDBPackageData_descriptor_ = file->message_type(22);
  static const int CharacterDBPackageData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, expand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, task_),
  };
  CharacterDBPackageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBPackageData_descriptor_,
      CharacterDBPackageData::default_instance_,
      CharacterDBPackageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBPackageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBPackageData));
  CharacterDBEquipData_descriptor_ = file->message_type(23);
  static const int CharacterDBEquipData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEquipData, equip_),
  };
  CharacterDBEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBEquipData_descriptor_,
      CharacterDBEquipData::default_instance_,
      CharacterDBEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBEquipData));
  CharacterDBFashionData_descriptor_ = file->message_type(24);
  static const int CharacterDBFashionData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, dress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, open_),
  };
  CharacterDBFashionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBFashionData_descriptor_,
      CharacterDBFashionData::default_instance_,
      CharacterDBFashionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBFashionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBFashionData));
  DuplicateSingleProto_descriptor_ = file->message_type(25);
  static const int DuplicateSingleProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, dupliate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, last_fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, buy_count_),
  };
  DuplicateSingleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateSingleProto_descriptor_,
      DuplicateSingleProto::default_instance_,
      DuplicateSingleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateSingleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateSingleProto));
  CharacterDBDuplicateData_descriptor_ = file->message_type(26);
  static const int CharacterDBDuplicateData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, duplicate_),
  };
  CharacterDBDuplicateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDuplicateData_descriptor_,
      CharacterDBDuplicateData::default_instance_,
      CharacterDBDuplicateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDuplicateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDuplicateData));
  CharacterDBMailData_descriptor_ = file->message_type(27);
  static const int CharacterDBMailData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMailData, maillist_),
  };
  CharacterDBMailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMailData_descriptor_,
      CharacterDBMailData::default_instance_,
      CharacterDBMailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMailData));
  SingleCampRankDBInfo_descriptor_ = file->message_type(28);
  static const int SingleCampRankDBInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampRankDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampRankDBInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampRankDBInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampRankDBInfo, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampRankDBInfo, knight_),
  };
  SingleCampRankDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleCampRankDBInfo_descriptor_,
      SingleCampRankDBInfo::default_instance_,
      SingleCampRankDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampRankDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampRankDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleCampRankDBInfo));
  CampRankDBData_descriptor_ = file->message_type(29);
  static const int CampRankDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankDBData, rank_),
  };
  CampRankDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampRankDBData_descriptor_,
      CampRankDBData::default_instance_,
      CampRankDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampRankDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampRankDBData));
  SingleCampDBData_descriptor_ = file->message_type(30);
  static const int SingleCampDBData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, last_notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, last_fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, active_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, total_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, lev_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, fight_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, official_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, knight_rank_),
  };
  SingleCampDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleCampDBData_descriptor_,
      SingleCampDBData::default_instance_,
      SingleCampDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCampDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleCampDBData));
  AllCampDBData_descriptor_ = file->message_type(31);
  static const int AllCampDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCampDBData, all_camp_data_),
  };
  AllCampDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllCampDBData_descriptor_,
      AllCampDBData::default_instance_,
      AllCampDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCampDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCampDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllCampDBData));
  GlobalDBData_descriptor_ = file->message_type(32);
  static const int GlobalDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBData, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBData, global_data_),
  };
  GlobalDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBData_descriptor_,
      GlobalDBData::default_instance_,
      GlobalDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBData));
  CharacterCampDBData_descriptor_ = file->message_type(33);
  static const int CharacterCampDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBData, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBData, total_contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBData, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBData, last_join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBData, charid_),
  };
  CharacterCampDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterCampDBData_descriptor_,
      CharacterCampDBData::default_instance_,
      CharacterCampDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterCampDBData));
  MallInfo_descriptor_ = file->message_type(34);
  static const int MallInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, mall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, buy_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, goods_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, goods_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, open_cool_time_),
  };
  MallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallInfo_descriptor_,
      MallInfo::default_instance_,
      MallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallInfo));
  AllMallDBData_descriptor_ = file->message_type(35);
  static const int AllMallDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMallDBData, last_logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMallDBData, all_mall_data_),
  };
  AllMallDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllMallDBData_descriptor_,
      AllMallDBData::default_instance_,
      AllMallDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMallDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMallDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllMallDBData));
  SingleCharacterMallDB_descriptor_ = file->message_type(36);
  static const int SingleCharacterMallDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCharacterMallDB, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCharacterMallDB, info_),
  };
  SingleCharacterMallDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleCharacterMallDB_descriptor_,
      SingleCharacterMallDB::default_instance_,
      SingleCharacterMallDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCharacterMallDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCharacterMallDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleCharacterMallDB));
  SingleAchievementDBData_descriptor_ = file->message_type(37);
  static const int SingleAchievementDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, completecount_),
  };
  SingleAchievementDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleAchievementDBData_descriptor_,
      SingleAchievementDBData::default_instance_,
      SingleAchievementDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAchievementDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleAchievementDBData));
  GroupAchievementDBData_descriptor_ = file->message_type(38);
  static const int GroupAchievementDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, achievementinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, achievementreward_),
  };
  GroupAchievementDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupAchievementDBData_descriptor_,
      GroupAchievementDBData::default_instance_,
      GroupAchievementDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAchievementDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupAchievementDBData));
  CharacterAchievementDBData_descriptor_ = file->message_type(39);
  static const int CharacterAchievementDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAchievementDBData, groupachievementdata_),
  };
  CharacterAchievementDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterAchievementDBData_descriptor_,
      CharacterAchievementDBData::default_instance_,
      CharacterAchievementDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAchievementDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAchievementDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterAchievementDBData));
  SingleDeputyDBData_descriptor_ = file->message_type(40);
  static const int SingleDeputyDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDeputyDBData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDeputyDBData, skill_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDeputyDBData, lvl_val_),
  };
  SingleDeputyDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleDeputyDBData_descriptor_,
      SingleDeputyDBData::default_instance_,
      SingleDeputyDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDeputyDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDeputyDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleDeputyDBData));
  CollectDeputyDBData_descriptor_ = file->message_type(41);
  static const int CollectDeputyDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectDeputyDBData, data_),
  };
  CollectDeputyDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectDeputyDBData_descriptor_,
      CollectDeputyDBData::default_instance_,
      CollectDeputyDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectDeputyDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectDeputyDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectDeputyDBData));
  MakeDeputyDBData_descriptor_ = file->message_type(42);
  static const int MakeDeputyDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeDeputyDBData, data_),
  };
  MakeDeputyDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeDeputyDBData_descriptor_,
      MakeDeputyDBData::default_instance_,
      MakeDeputyDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeDeputyDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeDeputyDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeDeputyDBData));
  CharacterDeputyDBData_descriptor_ = file->message_type(43);
  static const int CharacterDeputyDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDeputyDBData, collect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDeputyDBData, make_),
  };
  CharacterDeputyDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDeputyDBData_descriptor_,
      CharacterDeputyDBData::default_instance_,
      CharacterDeputyDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDeputyDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDeputyDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDeputyDBData));
  Vector3PB_descriptor_ = file->message_type(44);
  static const int Vector3PB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, z_),
  };
  Vector3PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3PB_descriptor_,
      Vector3PB::default_instance_,
      Vector3PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3PB));
  ActorMove_descriptor_ = file->message_type(45);
  static const int ActorMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMove, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMove, currentpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMove, path_),
  };
  ActorMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorMove_descriptor_,
      ActorMove::default_instance_,
      ActorMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorMove));
  ActorSkillMove_descriptor_ = file->message_type(46);
  static const int ActorSkillMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillMove, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillMove, currentpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillMove, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillMove, speed_),
  };
  ActorSkillMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorSkillMove_descriptor_,
      ActorSkillMove::default_instance_,
      ActorSkillMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorSkillMove));
  ActorRockerMove_descriptor_ = file->message_type(47);
  static const int ActorRockerMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRockerMove, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRockerMove, currentpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRockerMove, currentrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRockerMove, movetype_),
  };
  ActorRockerMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorRockerMove_descriptor_,
      ActorRockerMove::default_instance_,
      ActorRockerMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRockerMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRockerMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorRockerMove));
  ActorRockerMove_Type_descriptor_ = ActorRockerMove_descriptor_->enum_type(0);
  ActorPosUpDate_descriptor_ = file->message_type(48);
  static const int ActorPosUpDate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorPosUpDate, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorPosUpDate, currentpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorPosUpDate, currentdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorPosUpDate, isend_),
  };
  ActorPosUpDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorPosUpDate_descriptor_,
      ActorPosUpDate::default_instance_,
      ActorPosUpDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorPosUpDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorPosUpDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorPosUpDate));
  CharSyncAttr_descriptor_ = file->message_type(49);
  static const int CharSyncAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharSyncAttr, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharSyncAttr, attrval_),
  };
  CharSyncAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharSyncAttr_descriptor_,
      CharSyncAttr::default_instance_,
      CharSyncAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharSyncAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharSyncAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharSyncAttr));
  SkillCell_descriptor_ = file->message_type(50);
  static const int SkillCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCell, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCell, skilllev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCell, cd_),
  };
  SkillCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCell_descriptor_,
      SkillCell::default_instance_,
      SkillCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCell));
  Attr_descriptor_ = file->message_type(51);
  static const int Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, attrnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, attrvalue_),
  };
  Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr_descriptor_,
      Attr::default_instance_,
      Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr));
  DigPerfor_descriptor_ = file->message_type(52);
  static const int DigPerfor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, value_),
  };
  DigPerfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DigPerfor_descriptor_,
      DigPerfor::default_instance_,
      DigPerfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DigPerfor));
  DigPerfor_Type_descriptor_ = DigPerfor_descriptor_->enum_type(0);
  IsCanTransSceneRouteReq_descriptor_ = file->message_type(53);
  static const int IsCanTransSceneRouteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCanTransSceneRouteReq, dstmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCanTransSceneRouteReq, scenerouteid_),
  };
  IsCanTransSceneRouteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsCanTransSceneRouteReq_descriptor_,
      IsCanTransSceneRouteReq::default_instance_,
      IsCanTransSceneRouteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCanTransSceneRouteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCanTransSceneRouteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsCanTransSceneRouteReq));
  IsCanTransSceneReq_descriptor_ = file->message_type(54);
  static const int IsCanTransSceneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCanTransSceneReq, dstmapid_),
  };
  IsCanTransSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsCanTransSceneReq_descriptor_,
      IsCanTransSceneReq::default_instance_,
      IsCanTransSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCanTransSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsCanTransSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsCanTransSceneReq));
  ItemSellProto_descriptor_ = file->message_type(55);
  static const int ItemSellProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, num_),
  };
  ItemSellProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSellProto_descriptor_,
      ItemSellProto::default_instance_,
      ItemSellProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSellProto));
  OneKeyDressProto_descriptor_ = file->message_type(56);
  static const int OneKeyDressProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyDressProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyDressProto, pos_),
  };
  OneKeyDressProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyDressProto_descriptor_,
      OneKeyDressProto::default_instance_,
      OneKeyDressProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyDressProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyDressProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyDressProto));
  RewardItemProto_descriptor_ = file->message_type(57);
  static const int RewardItemProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemProto, info_),
  };
  RewardItemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItemProto_descriptor_,
      RewardItemProto::default_instance_,
      RewardItemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItemProto));
  DuplicateProto_descriptor_ = file->message_type(58);
  static const int DuplicateProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateProto, dupliate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateProto, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateProto, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateProto, buy_count_),
  };
  DuplicateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateProto_descriptor_,
      DuplicateProto::default_instance_,
      DuplicateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateProto));
  RelationMember_descriptor_ = file->message_type(59);
  static const int RelationMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationMember, id_),
  };
  RelationMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationMember_descriptor_,
      RelationMember::default_instance_,
      RelationMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationMember));
  RelationInfo_descriptor_ = file->message_type(60);
  static const int RelationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationInfo, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationInfo, members_),
  };
  RelationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationInfo_descriptor_,
      RelationInfo::default_instance_,
      RelationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationInfo));
  RelationPhysicalTab_descriptor_ = file->message_type(61);
  static const int RelationPhysicalTab_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationPhysicalTab, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationPhysicalTab, lastgiveplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationPhysicalTab, lastgetphytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationPhysicalTab, getplystatus_),
  };
  RelationPhysicalTab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationPhysicalTab_descriptor_,
      RelationPhysicalTab::default_instance_,
      RelationPhysicalTab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationPhysicalTab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationPhysicalTab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationPhysicalTab));
  RelationDBInfo_descriptor_ = file->message_type(62);
  static const int RelationDBInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, physicaltab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, applylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, givetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, lastgiveplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, progress_),
  };
  RelationDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationDBInfo_descriptor_,
      RelationDBInfo::default_instance_,
      RelationDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationDBInfo));
  CharacterPlayerMiniInfo_descriptor_ = file->message_type(63);
  static const int CharacterPlayerMiniInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, closeness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, giveplysical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, getplystatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, recenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, recenttime_),
  };
  CharacterPlayerMiniInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterPlayerMiniInfo_descriptor_,
      CharacterPlayerMiniInfo::default_instance_,
      CharacterPlayerMiniInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPlayerMiniInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterPlayerMiniInfo));
  CharacterDetailProtoInfo_descriptor_ = file->message_type(64);
  static const int CharacterDetailProtoInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, equip_),
  };
  CharacterDetailProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDetailProtoInfo_descriptor_,
      CharacterDetailProtoInfo::default_instance_,
      CharacterDetailProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDetailProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDetailProtoInfo));
  MailAttachmentList_descriptor_ = file->message_type(65);
  static const int MailAttachmentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, iteminfo_),
  };
  MailAttachmentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailAttachmentList_descriptor_,
      MailAttachmentList::default_instance_,
      MailAttachmentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailAttachmentList));
  MailHead_descriptor_ = file->message_type(66);
  static const int MailHead_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, sendplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, sendplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, destplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, attachmentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, fetch_),
  };
  MailHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailHead_descriptor_,
      MailHead::default_instance_,
      MailHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailHead));
  MailInfo_descriptor_ = file->message_type(67);
  static const int MailInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sellnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, attachmentlist_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  MiniMailInfo_descriptor_ = file->message_type(68);
  static const int MiniMailInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniMailInfo, mailhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniMailInfo, sellmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniMailInfo, attachmentlist_),
  };
  MiniMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiniMailInfo_descriptor_,
      MiniMailInfo::default_instance_,
      MiniMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiniMailInfo));
  PlayerAttr_descriptor_ = file->enum_type(0);
  MonsterAttr_descriptor_ = file->enum_type(1);
  CreatureState_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterServiceRequest_descriptor_, &RegisterServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValueCurrency_descriptor_, &ValueCurrency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBPvpData_descriptor_, &CharacterDBPvpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBBaseInfo_descriptor_, &CharacterDBBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBTaskData_descriptor_, &CharacterDBTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBEffPreCondition_descriptor_, &CharacterDBEffPreCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSubmittedMission_descriptor_, &CharacterDBSubmittedMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBWithoutPreComplete_descriptor_, &CharacterDBWithoutPreComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionItemInfo_descriptor_, &CharacterDBMissionItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionTrack_descriptor_, &CharacterDBMissionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSignleCampMission_descriptor_, &CharacterDBSignleCampMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBCampMissionInfo_descriptor_, &CharacterDBCampMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBLoopMissionInfo_descriptor_, &CharacterDBLoopMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSkillItem_descriptor_, &CharacterDBSkillItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSkillData_descriptor_, &CharacterDBSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBAttrDetailInfo_descriptor_, &CharacterDBAttrDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBExtendData_descriptor_, &CharacterDBExtendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBInfo_descriptor_, &CharacterDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBSimpleInfo_descriptor_, &CharacterDBSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemProtoInfo_descriptor_, &ItemProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FashionProtoInfo_descriptor_, &FashionProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBPackageData_descriptor_, &CharacterDBPackageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBEquipData_descriptor_, &CharacterDBEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBFashionData_descriptor_, &CharacterDBFashionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateSingleProto_descriptor_, &DuplicateSingleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDuplicateData_descriptor_, &CharacterDBDuplicateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMailData_descriptor_, &CharacterDBMailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleCampRankDBInfo_descriptor_, &SingleCampRankDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampRankDBData_descriptor_, &CampRankDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleCampDBData_descriptor_, &SingleCampDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllCampDBData_descriptor_, &AllCampDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBData_descriptor_, &GlobalDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterCampDBData_descriptor_, &CharacterCampDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallInfo_descriptor_, &MallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllMallDBData_descriptor_, &AllMallDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleCharacterMallDB_descriptor_, &SingleCharacterMallDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleAchievementDBData_descriptor_, &SingleAchievementDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupAchievementDBData_descriptor_, &GroupAchievementDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterAchievementDBData_descriptor_, &CharacterAchievementDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleDeputyDBData_descriptor_, &SingleDeputyDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectDeputyDBData_descriptor_, &CollectDeputyDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeDeputyDBData_descriptor_, &MakeDeputyDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDeputyDBData_descriptor_, &CharacterDeputyDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3PB_descriptor_, &Vector3PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorMove_descriptor_, &ActorMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorSkillMove_descriptor_, &ActorSkillMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorRockerMove_descriptor_, &ActorRockerMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorPosUpDate_descriptor_, &ActorPosUpDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharSyncAttr_descriptor_, &CharSyncAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCell_descriptor_, &SkillCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr_descriptor_, &Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DigPerfor_descriptor_, &DigPerfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsCanTransSceneRouteReq_descriptor_, &IsCanTransSceneRouteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsCanTransSceneReq_descriptor_, &IsCanTransSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSellProto_descriptor_, &ItemSellProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyDressProto_descriptor_, &OneKeyDressProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItemProto_descriptor_, &RewardItemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateProto_descriptor_, &DuplicateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationMember_descriptor_, &RelationMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationInfo_descriptor_, &RelationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationPhysicalTab_descriptor_, &RelationPhysicalTab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationDBInfo_descriptor_, &RelationDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterPlayerMiniInfo_descriptor_, &CharacterPlayerMiniInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDetailProtoInfo_descriptor_, &CharacterDetailProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailAttachmentList_descriptor_, &MailAttachmentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailHead_descriptor_, &MailHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiniMailInfo_descriptor_, &MiniMailInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto() {
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete RegisterServiceRequest::default_instance_;
  delete RegisterServiceRequest_reflection_;
  delete ValueCurrency::default_instance_;
  delete ValueCurrency_reflection_;
  delete CharacterDBPvpData::default_instance_;
  delete CharacterDBPvpData_reflection_;
  delete CharacterDBBaseInfo::default_instance_;
  delete CharacterDBBaseInfo_reflection_;
  delete CharacterDBTaskData::default_instance_;
  delete CharacterDBTaskData_reflection_;
  delete CharacterDBEffPreCondition::default_instance_;
  delete CharacterDBEffPreCondition_reflection_;
  delete CharacterDBSubmittedMission::default_instance_;
  delete CharacterDBSubmittedMission_reflection_;
  delete CharacterDBWithoutPreComplete::default_instance_;
  delete CharacterDBWithoutPreComplete_reflection_;
  delete CharacterDBMissionItemInfo::default_instance_;
  delete CharacterDBMissionItemInfo_reflection_;
  delete CharacterDBMissionTrack::default_instance_;
  delete CharacterDBMissionTrack_reflection_;
  delete CharacterDBSignleCampMission::default_instance_;
  delete CharacterDBSignleCampMission_reflection_;
  delete CharacterDBCampMissionInfo::default_instance_;
  delete CharacterDBCampMissionInfo_reflection_;
  delete CharacterDBLoopMissionInfo::default_instance_;
  delete CharacterDBLoopMissionInfo_reflection_;
  delete CharacterDBSkillItem::default_instance_;
  delete CharacterDBSkillItem_reflection_;
  delete CharacterDBSkillData::default_instance_;
  delete CharacterDBSkillData_reflection_;
  delete CharacterDBAttrDetailInfo::default_instance_;
  delete CharacterDBAttrDetailInfo_reflection_;
  delete CharacterDBExtendData::default_instance_;
  delete CharacterDBExtendData_reflection_;
  delete CharacterDBInfo::default_instance_;
  delete CharacterDBInfo_reflection_;
  delete CharacterDBSimpleInfo::default_instance_;
  delete CharacterDBSimpleInfo_reflection_;
  delete ItemProtoInfo::default_instance_;
  delete ItemProtoInfo_reflection_;
  delete FashionProtoInfo::default_instance_;
  delete FashionProtoInfo_reflection_;
  delete CharacterDBPackageData::default_instance_;
  delete CharacterDBPackageData_reflection_;
  delete CharacterDBEquipData::default_instance_;
  delete CharacterDBEquipData_reflection_;
  delete CharacterDBFashionData::default_instance_;
  delete CharacterDBFashionData_reflection_;
  delete DuplicateSingleProto::default_instance_;
  delete DuplicateSingleProto_reflection_;
  delete CharacterDBDuplicateData::default_instance_;
  delete CharacterDBDuplicateData_reflection_;
  delete CharacterDBMailData::default_instance_;
  delete CharacterDBMailData_reflection_;
  delete SingleCampRankDBInfo::default_instance_;
  delete SingleCampRankDBInfo_reflection_;
  delete CampRankDBData::default_instance_;
  delete CampRankDBData_reflection_;
  delete SingleCampDBData::default_instance_;
  delete SingleCampDBData_reflection_;
  delete AllCampDBData::default_instance_;
  delete AllCampDBData_reflection_;
  delete GlobalDBData::default_instance_;
  delete GlobalDBData_reflection_;
  delete CharacterCampDBData::default_instance_;
  delete CharacterCampDBData_reflection_;
  delete MallInfo::default_instance_;
  delete MallInfo_reflection_;
  delete AllMallDBData::default_instance_;
  delete AllMallDBData_reflection_;
  delete SingleCharacterMallDB::default_instance_;
  delete SingleCharacterMallDB_reflection_;
  delete SingleAchievementDBData::default_instance_;
  delete SingleAchievementDBData_reflection_;
  delete GroupAchievementDBData::default_instance_;
  delete GroupAchievementDBData_reflection_;
  delete CharacterAchievementDBData::default_instance_;
  delete CharacterAchievementDBData_reflection_;
  delete SingleDeputyDBData::default_instance_;
  delete SingleDeputyDBData_reflection_;
  delete CollectDeputyDBData::default_instance_;
  delete CollectDeputyDBData_reflection_;
  delete MakeDeputyDBData::default_instance_;
  delete MakeDeputyDBData_reflection_;
  delete CharacterDeputyDBData::default_instance_;
  delete CharacterDeputyDBData_reflection_;
  delete Vector3PB::default_instance_;
  delete Vector3PB_reflection_;
  delete ActorMove::default_instance_;
  delete ActorMove_reflection_;
  delete ActorSkillMove::default_instance_;
  delete ActorSkillMove_reflection_;
  delete ActorRockerMove::default_instance_;
  delete ActorRockerMove_reflection_;
  delete ActorPosUpDate::default_instance_;
  delete ActorPosUpDate_reflection_;
  delete CharSyncAttr::default_instance_;
  delete CharSyncAttr_reflection_;
  delete SkillCell::default_instance_;
  delete SkillCell_reflection_;
  delete Attr::default_instance_;
  delete Attr_reflection_;
  delete DigPerfor::default_instance_;
  delete DigPerfor_reflection_;
  delete IsCanTransSceneRouteReq::default_instance_;
  delete IsCanTransSceneRouteReq_reflection_;
  delete IsCanTransSceneReq::default_instance_;
  delete IsCanTransSceneReq_reflection_;
  delete ItemSellProto::default_instance_;
  delete ItemSellProto_reflection_;
  delete OneKeyDressProto::default_instance_;
  delete OneKeyDressProto_reflection_;
  delete RewardItemProto::default_instance_;
  delete RewardItemProto_reflection_;
  delete DuplicateProto::default_instance_;
  delete DuplicateProto_reflection_;
  delete RelationMember::default_instance_;
  delete RelationMember_reflection_;
  delete RelationInfo::default_instance_;
  delete RelationInfo_reflection_;
  delete RelationPhysicalTab::default_instance_;
  delete RelationPhysicalTab_reflection_;
  delete RelationDBInfo::default_instance_;
  delete RelationDBInfo_reflection_;
  delete CharacterPlayerMiniInfo::default_instance_;
  delete CharacterPlayerMiniInfo_reflection_;
  delete CharacterDetailProtoInfo::default_instance_;
  delete CharacterDetailProtoInfo_reflection_;
  delete MailAttachmentList::default_instance_;
  delete MailAttachmentList_reflection_;
  delete MailHead::default_instance_;
  delete MailHead_reflection_;
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete MiniMailInfo::default_instance_;
  delete MiniMailInfo_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035ProtoBuffer/ComProtocol.proto\022\010ProtoBu"
    "f\032\026Common/ComDefine.proto\"\016\n\014EmptyMessag"
    "e\"|\n\026RegisterServiceRequest\022\024\n\014service_t"
    "ype\030\001 \002(\r\022\020\n\010group_id\030\002 \002(\r\022\022\n\nservice_i"
    "d\030\003 \002(\r\022\021\n\tlisten_ip\030\004 \002(\t\022\023\n\013listen_por"
    "t\030\005 \002(\r\"4\n\rValueCurrency\022\020\n\010coinType\030\001 \002"
    "(\005\022\021\n\tcoinValue\030\002 \002(\005\"\?\n\022CharacterDBPvpD"
    "ata\022\017\n\007pk_mode\030\001 \001(\r\022\030\n\020pk_killing_value"
    "\030\002 \001(\r\"\227\n\n\023CharacterDBBaseInfo\022\021\n\tchanne"
    "lId\030\001 \002(\t\022\016\n\006userId\030\002 \002(\t\022\020\n\010userName\030\003 "
    "\002(\t\022\022\n\ncreateTime\030\004 \002(\004\022\024\n\014lastSaveTime\030"
    "\005 \002(\004\022\022\n\nonlineTime\030\006 \002(\004\022\021\n\tloginTime\030\007"
    " \002(\004\022\022\n\nlogoutTime\030\010 \002(\004\022)\n\010currency\030\t \003"
    "(\0132\027.ProtoBuf.ValueCurrency\022\014\n\004name\030\n \002("
    "\t\022\013\n\003sex\030\013 \002(\r\022\014\n\004prof\030\014 \002(\r\022\r\n\005level\030\r "
    "\002(\r\022\013\n\003exp\030\016 \002(\003\022\n\n\002hp\030\017 \002(\r\022\022\n\nfightPow"
    "er\030\020 \002(\r\022\026\n\016enter_scene_id\030\021 \002(\r\022\021\n\tente"
    "rPosX\030\022 \002(\002\022\021\n\tenterPosY\030\023 \002(\002\022\021\n\tenterP"
    "osZ\030\024 \002(\002\022\014\n\004race\030\025 \002(\r\022\024\n\014enter_map_id\030"
    "\026 \002(\r\022\026\n\016lastReviveTime\030\027 \001(\004\022\020\n\010curStat"
    "e\030\030 \001(\r\022\023\n\013lastSceneId\030\031 \001(\r\022\021\n\tlastMapI"
    "d\030\032 \001(\r\022\020\n\010lastPosX\030\033 \001(\002\022\020\n\010lastPosY\030\034 "
    "\001(\002\022\020\n\010lastPosZ\030\035 \001(\002\022\014\n\004gold\030\036 \001(\r\022\020\n\010b"
    "indgold\030\037 \001(\r\022\017\n\007diamond\030  \001(\r\022\023\n\013binddi"
    "amond\030! \001(\r\022\r\n\005power\030\" \001(\r\022\024\n\014intelligen"
    "ce\030# \001(\r\022\017\n\007agility\030$ \001(\r\022\020\n\010physique\030% "
    "\001(\r\022\021\n\tendurance\030& \001(\r\022\021\n\tprecision\030\' \001("
    "\r\022\n\n\002mp\030( \001(\r\022\013\n\003vip\030) \001(\r\022\014\n\004camp\030* \001(\r"
    "\022\017\n\007camplev\030+ \001(\r\022\017\n\007married\030, \001(\r\022\023\n\013ca"
    "mpkilling\030- \001(\r\022\026\n\016hostilekilling\030. \001(\r\022"
    "\017\n\007stamina\030/ \001(\r\022\022\n\nattr_point\0300 \001(\r\022\022\n\n"
    "pointPower\0301 \001(\r\022\031\n\021pointIntelligence\0302 "
    "\001(\r\022\024\n\014pointAgility\0303 \001(\r\022\025\n\rpointPhysiq"
    "ue\0304 \001(\r\022\026\n\016pointEndurance\0305 \001(\r\022\026\n\016poin"
    "tPrecision\0306 \001(\r\022\021\n\tautoPower\0307 \001(\r\022\030\n\020a"
    "utoIntelligence\0308 \001(\r\022\023\n\013autoAgility\0309 \001"
    "(\r\022\024\n\014autoPhysique\030: \001(\r\022\025\n\rautoEnduranc"
    "e\030; \001(\r\022\025\n\rautoPrecision\030< \001(\r\022\021\n\tautoPo"
    "int\030= \001(\r\022\024\n\014duplicate_id\030> \001(\r\022\020\n\010offic"
    "ial\030\? \001(\005\022\016\n\006knight\030@ \001(\005\022-\n\007pvpData\030A \001"
    "(\0132\034.ProtoBuf.CharacterDBPvpData\"\242\003\n\023Cha"
    "racterDBTaskData\022=\n\017effPreCondition\030\001 \003("
    "\0132$.ProtoBuf.CharacterDBEffPreCondition\022"
    "<\n\rsubmitMission\030\002 \003(\0132%.ProtoBuf.Charac"
    "terDBSubmittedMission\022C\n\022withoutPreCompl"
    "ete\030\003 \003(\0132\'.ProtoBuf.CharacterDBWithoutP"
    "reComplete\0227\n\014missionTrack\030\004 \003(\0132!.Proto"
    "Buf.CharacterDBMissionTrack\022\022\n\nassignLis"
    "t\030\005 \003(\r\022=\n\017campMissionInfo\030\006 \001(\0132$.Proto"
    "Buf.CharacterDBCampMissionInfo\022=\n\017loopMi"
    "ssionInfo\030\007 \001(\0132$.ProtoBuf.CharacterDBLo"
    "opMissionInfo\"=\n\032CharacterDBEffPreCondit"
    "ion\022\021\n\tmissionId\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"\?\n\033"
    "CharacterDBSubmittedMission\022\021\n\tmissionId"
    "\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\"l\n\035CharacterDBWith"
    "outPreComplete\022\021\n\tmissionId\030\001 \001(\r\022\025\n\rfin"
    "ishYearDay\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\022\022\n\naccep"
    "table\030\004 \001(\010\"\247\001\n\032CharacterDBMissionItemIn"
    "fo\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022\024\n\014currentV"
    "alue\030\003 \001(\r\022\022\n\nfinalValue\030\004 \001(\r\022\025\n\rcomple"
    "tedFlag\030\005 \001(\010\022\016\n\006parma1\030\006 \001(\r\022\016\n\006parma2\030"
    "\007 \001(\r\022\016\n\006parma3\030\010 \001(\r\"\276\001\n\027CharacterDBMis"
    "sionTrack\022\021\n\tmissionId\030\001 \001(\r\022\016\n\006status\030\002"
    " \001(\r\022\017\n\007version\030\003 \001(\r\022\031\n\021acceptMissionTi"
    "me\030\004 \001(\r\022\034\n\024submittedMissionTime\030\005 \001(\r\0226"
    "\n\010itemInfo\030\006 \001(\0132$.ProtoBuf.CharacterDBM"
    "issionItemInfo\"T\n\034CharacterDBSignleCampM"
    "ission\022\021\n\tmissionId\030\001 \001(\r\022\017\n\007quality\030\002 \001"
    "(\r\022\020\n\010isAccept\030\003 \001(\010\"\262\001\n\032CharacterDBCamp"
    "MissionInfo\022A\n\021campSingleMission\030\001 \003(\0132&"
    ".ProtoBuf.CharacterDBSignleCampMission\022\027"
    "\n\017campRefreshTime\030\002 \001(\r\022\021\n\tcampTimes\030\003 \001"
    "(\r\022\023\n\013boxProgress\030\004 \001(\r\022\020\n\010campOpen\030\005 \001("
    "\010\"q\n\032CharacterDBLoopMissionInfo\022\021\n\tloopC"
    "ount\030\001 \001(\r\022\027\n\017loopFinishCount\030\002 \001(\r\022\020\n\010l"
    "oopOpen\030\003 \001(\010\022\025\n\rloopMissionId\030\004 \001(\r\"G\n\024"
    "CharacterDBSkillItem\022\017\n\007skillID\030\001 \002(\005\022\022\n"
    "\nskillLevel\030\002 \002(\005\022\n\n\002cd\030\003 \001(\004\"]\n\024Charact"
    "erDBSkillData\0221\n\tskillList\030\001 \003(\0132\036.Proto"
    "Buf.CharacterDBSkillItem\022\022\n\nskillAttrs\030\002"
    " \003(\r\"\206\004\n\031CharacterDBAttrDetailInfo\022\016\n\006ma"
    "x_hp\030\001 \001(\r\022\024\n\014intelligence\030\002 \001(\r\022\017\n\007agil"
    "ity\030\003 \001(\r\022\020\n\010physique\030\004 \001(\r\022\021\n\tendurance"
    "\030\005 \001(\r\022\021\n\tprecision\030\006 \001(\r\022\016\n\006max_mp\030\007 \001("
    "\r\022\n\n\002ap\030\010 \001(\r\022\013\n\003mat\030\t \001(\r\022\n\n\002dp\030\n \001(\r\022\013"
    "\n\003mdp\030\013 \001(\r\022\013\n\003hit\030\014 \001(\r\022\r\n\005dodge\030\r \001(\r\022"
    "\014\n\004crit\030\016 \001(\r\022\021\n\ttoughness\030\017 \001(\r\022\021\n\tcrit"
    "_rate\030\020 \001(\r\022\030\n\020crit_extradamage\030\021 \001(\r\022\031\n"
    "\021crit_reducedamage\030\022 \001(\r\022\024\n\014extra_damage"
    "\030\023 \001(\r\022\025\n\rreduce_damage\030\024 \001(\r\022\024\n\014apdamag"
    "erate\030\025 \001(\r\022\026\n\016apreducedamage\030\026 \001(\r\022\021\n\tf"
    "reezeres\030\027 \001(\r\022\017\n\007burners\030\030 \001(\r\022\017\n\007weakr"
    "es\030\031 \001(\r\022\022\n\nfastingres\030\032 \001(\r\022\017\n\007funkres\030"
    "\033 \001(\r\"Q\n\025CharacterDBExtendData\0228\n\013attr_d"
    "etail\030\001 \001(\0132#.ProtoBuf.CharacterDBAttrDe"
    "tailInfo\"\222\004\n\017CharacterDBInfo\022\016\n\006charId\030\001"
    " \002(\r\022\017\n\007groupId\030\002 \002(\r\022/\n\010baseData\030\003 \002(\0132"
    "\035.ProtoBuf.CharacterDBBaseInfo\0222\n\010itemDa"
    "ta\030\004 \001(\0132 .ProtoBuf.CharacterDBPackageDa"
    "ta\022/\n\010taskData\030\005 \001(\0132\035.ProtoBuf.Characte"
    "rDBTaskData\0221\n\tskillData\030\006 \001(\0132\036.ProtoBu"
    "f.CharacterDBSkillData\0223\n\nextendData\030\007 \001"
    "(\0132\037.ProtoBuf.CharacterDBExtendData\0221\n\te"
    "quipData\030\010 \001(\0132\036.ProtoBuf.CharacterDBEqu"
    "ipData\0229\n\rduplicateData\030\t \001(\0132\".ProtoBuf"
    ".CharacterDBDuplicateData\022=\n\017achievement"
    "Data\030\n \001(\0132$.ProtoBuf.CharacterAchieveme"
    "ntDBData\0223\n\ndeputyData\030\013 \001(\0132\037.ProtoBuf."
    "CharacterDeputyDBData\"\226\002\n\025CharacterDBSim"
    "pleInfo\022\016\n\006charId\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\013\n"
    "\003sex\030\003 \002(\r\022\014\n\004prof\030\004 \002(\r\022\r\n\005level\030\005 \002(\r\022"
    "\014\n\004race\030\006 \002(\r\022\013\n\003exp\030\007 \001(\003\022\n\n\002hp\030\010 \001(\r\022\022"
    "\n\nfightPower\030\t \001(\r\022\021\n\tweapon_id\030\n \001(\r\022\022\n"
    "\nclothes_id\030\013 \001(\r\022\017\n\007wing_id\030\014 \001(\r\022\022\n\nfa"
    "shion_id\030\r \003(\r\022\014\n\004camp\030\016 \001(\005\022\020\n\010official"
    "\030\017 \001(\005\022\016\n\006knight\030\020 \001(\005\"\363\001\n\rItemProtoInfo"
    "\022\017\n\007item_id\030\001 \002(\r\022\020\n\010item_num\030\002 \002(\005\022\014\n\004b"
    "ind\030\003 \001(\005\022\020\n\010strenlev\030\004 \001(\005\022\021\n\trefinelev"
    "\030\005 \001(\005\022\014\n\004holy\030\006 \001(\005\022 \n\010refineex\030\007 \003(\0132\016"
    ".ProtoBuf.Attr\022 \n\010baseattr\030\010 \003(\0132\016.Proto"
    "Buf.Attr\022\r\n\005inlay\030\t \003(\r\022\r\n\005index\030\n \001(\005\022\r"
    "\n\005fight\030\013 \001(\005\022\r\n\005maker\030\014 \001(\t\"8\n\020FashionP"
    "rotoInfo\022\022\n\nfashion_id\030\001 \002(\r\022\020\n\010left_sec"
    "\030\002 \001(\004\"\316\001\n\026CharacterDBPackageData\022\022\n\nexp"
    "and_num\030\001 \002(\005\022&\n\005equip\030\002 \003(\0132\027.ProtoBuf."
    "ItemProtoInfo\022&\n\005daily\030\003 \003(\0132\027.ProtoBuf."
    "ItemProtoInfo\022)\n\010material\030\004 \003(\0132\027.ProtoB"
    "uf.ItemProtoInfo\022%\n\004task\030\005 \003(\0132\027.ProtoBu"
    "f.ItemProtoInfo\">\n\024CharacterDBEquipData\022"
    "&\n\005equip\030\001 \003(\0132\027.ProtoBuf.ItemProtoInfo\""
    "{\n\026CharacterDBFashionData\022(\n\004data\030\001 \003(\0132"
    "\032.ProtoBuf.FashionProtoInfo\022)\n\005dress\030\002 \003"
    "(\0132\032.ProtoBuf.FashionProtoInfo\022\014\n\004open\030\003"
    " \001(\005\"v\n\024DuplicateSingleProto\022\023\n\013dupliate"
    "_id\030\001 \002(\005\022\014\n\004star\030\002 \001(\005\022\024\n\014reward_count\030"
    "\003 \001(\005\022\022\n\nlast_fresh\030\004 \001(\004\022\021\n\tbuy_count\030\005"
    " \001(\005\"M\n\030CharacterDBDuplicateData\0221\n\tdupl"
    "icate\030\001 \003(\0132\036.ProtoBuf.DuplicateSinglePr"
    "oto\";\n\023CharacterDBMailData\022$\n\010mailList\030\001"
    " \003(\0132\022.ProtoBuf.MailInfo\"f\n\024SingleCampRa"
    "nkDBInfo\022\016\n\006charid\030\001 \001(\r\022\r\n\005level\030\002 \001(\005\022"
    "\r\n\005fight\030\003 \001(\005\022\020\n\010official\030\004 \001(\005\022\016\n\006knig"
    "ht\030\005 \001(\005\">\n\016CampRankDBData\022,\n\004rank\030\001 \003(\013"
    "2\036.ProtoBuf.SingleCampRankDBInfo\"\322\002\n\020Sin"
    "gleCampDBData\022\017\n\007camp_id\030\001 \001(\005\022\021\n\tleader"
    "_id\030\002 \001(\r\022\016\n\006notice\030\003 \001(\t\022\023\n\013last_notice"
    "\030\004 \001(\004\022\022\n\nlast_fresh\030\005 \001(\004\022\022\n\nactive_num"
    "\030\006 \001(\r\022\023\n\013total_fight\030\007 \001(\004\022*\n\010lev_rank\030"
    "\010 \001(\0132\030.ProtoBuf.CampRankDBData\022,\n\nfight"
    "_rank\030\t \001(\0132\030.ProtoBuf.CampRankDBData\022/\n"
    "\rofficial_rank\030\n \001(\0132\030.ProtoBuf.CampRank"
    "DBData\022-\n\013knight_rank\030\013 \001(\0132\030.ProtoBuf.C"
    "ampRankDBData\"B\n\rAllCampDBData\0221\n\rall_ca"
    "mp_data\030\001 \003(\0132\032.ProtoBuf.SingleCampDBDat"
    "a\"4\n\014GlobalDBData\022\017\n\007type_id\030\001 \002(\005\022\023\n\013gl"
    "obal_data\030\002 \001(\014\"x\n\023CharacterCampDBData\022\022"
    "\n\ncontribute\030\001 \001(\r\022\030\n\020total_contribute\030\002"
    " \001(\r\022\020\n\010prestige\030\003 \001(\r\022\021\n\tlast_join\030\004 \001("
    "\004\022\016\n\006charid\030\005 \001(\r\"\226\001\n\010MallInfo\022\017\n\007mall_i"
    "d\030\001 \001(\r\022\022\n\nbuy_amount\030\002 \001(\r\022\024\n\014goods_amo"
    "unt\030\003 \001(\r\022\022\n\ngoods_time\030\004 \001(\004\022\020\n\010buy_tim"
    "e\030\005 \001(\004\022\021\n\topen_time\030\006 \001(\004\022\026\n\016open_cool_"
    "time\030\007 \001(\004\"O\n\rAllMallDBData\022\023\n\013last_logo"
    "ut\030\001 \001(\004\022)\n\rall_mall_data\030\002 \003(\0132\022.ProtoB"
    "uf.MallInfo\"N\n\025SingleCharacterMallDB\022\016\n\006"
    "charid\030\001 \001(\r\022%\n\004info\030\002 \001(\0132\027.ProtoBuf.Al"
    "lMallDBData\"L\n\027SingleAchievementDBData\022\n"
    "\n\002id\030\001 \001(\r\022\016\n\006status\030\002 \001(\r\022\025\n\rcompleteCo"
    "unt\030\003 \001(\r\"\205\001\n\026GroupAchievementDBData\022\020\n\010"
    "sortType\030\001 \001(\r\022>\n\023achievementInfoList\030\002 "
    "\003(\0132!.ProtoBuf.SingleAchievementDBData\022\031"
    "\n\021achievementReward\030\003 \001(\r\"\\\n\032CharacterAc"
    "hievementDBData\022>\n\024groupAchievementData\030"
    "\001 \003(\0132 .ProtoBuf.GroupAchievementDBData\""
    "F\n\022SingleDeputyDBData\022\014\n\004type\030\001 \002(\005\022\021\n\ts"
    "kill_lvl\030\002 \002(\005\022\017\n\007lvl_val\030\003 \001(\005\"A\n\023Colle"
    "ctDeputyDBData\022*\n\004data\030\001 \003(\0132\034.ProtoBuf."
    "SingleDeputyDBData\">\n\020MakeDeputyDBData\022*"
    "\n\004data\030\001 \003(\0132\034.ProtoBuf.SingleDeputyDBDa"
    "ta\"q\n\025CharacterDeputyDBData\022.\n\007collect\030\001"
    " \001(\0132\035.ProtoBuf.CollectDeputyDBData\022(\n\004m"
    "ake\030\002 \001(\0132\032.ProtoBuf.MakeDeputyDBData\",\n"
    "\tVector3PB\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 "
    "\002(\002\"d\n\tActorMove\022\013\n\003cid\030\001 \002(\r\022\'\n\ncurrent"
    "Pos\030\002 \002(\0132\023.ProtoBuf.Vector3PB\022!\n\004path\030\003"
    " \003(\0132\023.ProtoBuf.Vector3PB\"x\n\016ActorSkillM"
    "ove\022\013\n\003cid\030\001 \002(\r\022\'\n\ncurrentPos\030\002 \002(\0132\023.P"
    "rotoBuf.Vector3PB\022!\n\004path\030\003 \003(\0132\023.ProtoB"
    "uf.Vector3PB\022\r\n\005speed\030\004 \002(\002\"\330\001\n\017ActorRoc"
    "kerMove\022\013\n\003cid\030\001 \002(\r\022\'\n\ncurrentPos\030\002 \002(\013"
    "2\023.ProtoBuf.Vector3PB\022\024\n\014currentRange\030\003 "
    "\002(\002\0220\n\010moveType\030\004 \002(\0162\036.ProtoBuf.ActorRo"
    "ckerMove.Type\"G\n\004Type\022\006\n\002Up\020\001\022\010\n\004Down\020\002\022"
    "\010\n\004Stop\020\003\022\t\n\005Block\020\004\022\n\n\006UpRoll\020\005\022\014\n\010Down"
    "Roll\020\006\"~\n\016ActorPosUpDate\022\013\n\003cid\030\001 \002(\r\022\'\n"
    "\ncurrentPos\030\002 \002(\0132\023.ProtoBuf.Vector3PB\022\'"
    "\n\ncurrentDir\030\003 \002(\0132\023.ProtoBuf.Vector3PB\022"
    "\r\n\005isend\030\004 \001(\r\"/\n\014CharSyncAttr\022\016\n\006attrid"
    "\030\001 \002(\r\022\017\n\007attrval\030\002 \002(\r\":\n\tSkillCell\022\017\n\007"
    "skillId\030\001 \002(\r\022\020\n\010skillLev\030\002 \002(\r\022\n\n\002cd\030\003 "
    "\001(\004\"*\n\004Attr\022\017\n\007AttrNum\030\001 \002(\r\022\021\n\tAttrvalu"
    "e\030\002 \002(\r\"^\n\tDigPerfor\022\014\n\004type\030\001 \002(\r\022\r\n\005va"
    "lue\030\002 \001(\r\"4\n\004Type\022\t\n\005addHp\020\001\022\014\n\010reduceHp"
    "\020\002\022\t\n\005cirit\020\003\022\010\n\004doge\020\004\"A\n\027IsCanTransSce"
    "neRouteReq\022\020\n\010dstMapId\030\001 \002(\r\022\024\n\014sceneRou"
    "teId\030\002 \002(\r\"&\n\022IsCanTransSceneReq\022\020\n\010dstM"
    "apId\030\001 \002(\r\"+\n\rItemSellProto\022\r\n\005index\030\001 \002"
    "(\r\022\013\n\003num\030\002 \001(\005\".\n\020OneKeyDressProto\022\r\n\005i"
    "ndex\030\001 \002(\005\022\013\n\003pos\030\002 \001(\005\"8\n\017RewardItemPro"
    "to\022%\n\004info\030\001 \003(\0132\027.ProtoBuf.ItemProtoInf"
    "o\"\\\n\016DuplicateProto\022\023\n\013dupliate_id\030\001 \002(\005"
    "\022\014\n\004star\030\002 \001(\005\022\024\n\014reward_count\030\003 \001(\005\022\021\n\t"
    "buy_count\030\004 \001(\005\"\034\n\016RelationMember\022\n\n\002id\030"
    "\001 \001(\r\"M\n\014RelationInfo\022\022\n\ngroupIndex\030\001 \001("
    "\r\022)\n\007members\030\002 \003(\0132\030.ProtoBuf.RelationMe"
    "mber\"h\n\023RelationPhysicalTab\022\n\n\002id\030\001 \001(\r\022"
    "\027\n\017lastGivePlyTime\030\002 \001(\004\022\026\n\016lastGetPhyTi"
    "me\030\003 \001(\r\022\024\n\014getPlyStatus\030\004 \001(\r\"\273\001\n\016Relat"
    "ionDBInfo\022$\n\004info\030\001 \003(\0132\026.ProtoBuf.Relat"
    "ionInfo\0222\n\013physicalTab\030\002 \003(\0132\035.ProtoBuf."
    "RelationPhysicalTab\022\021\n\tapplyList\030\003 \003(\r\022\021"
    "\n\tgiveTimes\030\004 \001(\r\022\027\n\017lastGivePlyTime\030\005 \001"
    "(\004\022\020\n\010progress\030\006 \001(\r\"\314\001\n\027CharacterPlayer"
    "MiniInfo\022\020\n\010playerId\030\001 \001(\r\022\022\n\nplayerName"
    "\030\002 \001(\t\022\013\n\003sex\030\003 \001(\r\022\r\n\005level\030\004 \001(\r\022\021\n\tcl"
    "oseness\030\005 \001(\r\022\033\n\014givePlysical\030\006 \001(\010:\005fal"
    "se\022\027\n\014getPlyStatus\030\007 \001(\r:\0010\022\022\n\nrecentTyp"
    "e\030\010 \001(\r\022\022\n\nrecentTime\030\t \001(\004\"\277\001\n\030Characte"
    "rDetailProtoInfo\022\016\n\006charId\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\r\n\005fight\030\004 \001(\r\022\014\n\004"
    "prof\030\005 \001(\005\0221\n\004attr\030\006 \001(\0132#.ProtoBuf.Char"
    "acterDBAttrDetailInfo\022&\n\005equip\030\007 \003(\0132\027.P"
    "rotoBuf.ItemProtoInfo\"\?\n\022MailAttachmentL"
    "ist\022)\n\010itemInfo\030\001 \003(\0132\027.ProtoBuf.ItemPro"
    "toInfo\"\305\001\n\010MailHead\022\016\n\006mailId\030\001 \001(\r\022\014\n\004t"
    "ype\030\002 \001(\r\022\024\n\014sendPlayerId\030\003 \001(\r\022\026\n\016sendP"
    "layerName\030\004 \001(\014\022\024\n\014destPlayerId\030\005 \001(\r\022\r\n"
    "\005topic\030\006 \001(\014\022\022\n\ncreateTime\030\007 \001(\r\022\016\n\006stat"
    "us\030\010 \001(\r\022\025\n\rattachmentNum\030\t \001(\r\022\r\n\005fetch"
    "\030\n \001(\005\"\340\001\n\010MailInfo\022$\n\010mailHead\030\001 \001(\0132\022."
    "ProtoBuf.MailHead\022\017\n\007content\030\002 \001(\014\022\014\n\004go"
    "ld\030\003 \001(\r\022\017\n\007diamond\030\004 \001(\r\022\020\n\010bindGold\030\005 "
    "\001(\r\022\023\n\013bindDiamond\030\006 \001(\r\022\020\n\010sellType\030\007 \001"
    "(\r\022\017\n\007sellNum\030\010 \001(\r\0224\n\016attachmentList\030\t "
    "\001(\0132\034.ProtoBuf.MailAttachmentList\"}\n\014Min"
    "iMailInfo\022$\n\010mailHead\030\001 \001(\0132\022.ProtoBuf.M"
    "ailHead\022\021\n\tsellMoney\030\002 \001(\r\0224\n\016attachment"
    "List\030\003 \001(\0132\034.ProtoBuf.MailAttachmentList"
    "*\2124\n\nPlayerAttr\022\n\n\006P_NONE\020\000\022\013\n\007P_POWER\020\001"
    "\022\022\n\016P_INTELLIGENCE\020\002\022\r\n\tP_AGILITY\020\003\022\016\n\nP"
    "_PHYSIQUE\020\004\022\017\n\013P_ENDURANCE\020\005\022\017\n\013P_PRECIS"
    "ION\020\006\022\014\n\010P_MAX_HP\020\007\022\014\n\010P_MAX_MP\020\010\022\010\n\004P_A"
    "P\020\t\022\t\n\005P_MAT\020\n\022\010\n\004P_DP\020\013\022\t\n\005P_MDP\020\014\022\t\n\005P"
    "_HIT\020\r\022\013\n\007P_DODGE\020\016\022\n\n\006P_CRIT\020\017\022\017\n\013P_TOU"
    "GHNESS\020\020\022\017\n\013P_CRIT_RATE\020\021\022\026\n\022P_CRIT_EXTR"
    "ADAMAGE\020\022\022\027\n\023P_CRIT_REDUCEDAMAGE\020\023\022\022\n\016P_"
    "EXTRA_DAMAGE\020\024\022\023\n\017P_REDUCE_DAMAGE\020\025\022\022\n\016P"
    "_APDAMAGERATE\020\026\022\030\n\024P_APREDUCEDAMAGERATE\020"
    "\027\022\017\n\013P_FREEZERES\020\030\022\r\n\tP_BURNRES\020\031\022\r\n\tP_W"
    "EAKRES\020\032\022\020\n\014P_FASTINGRES\020\033\022\r\n\tP_FUNKRES\020"
    "\034\022\020\n\014P_RESTORE_HP\020\035\022\020\n\014P_RESTORE_MP\020\036\022\014\n"
    "\010P_MSPEED\020\037\022\014\n\010P_ASPEED\020 \022\n\n\006P_VIEW\020!\022\022\n"
    "\016P_MAX_ACCPOWER\020\"\022\023\n\017P_MATDAMAGERATE\020#\022\031"
    "\n\025P_MATREDUCEDAMAGERATE\020$\022\022\n\016P_CUREADDIT"
    "ION\020%\022\024\n\020P_CUREADDITIONBY\020&\022\020\n\014P_CUREEFF"
    "ECT\020\'\022\022\n\016P_CUREEFFECTBY\020(\022\010\n\004P_HP\020)\022\010\n\004P"
    "_MP\020*\022\014\n\010P_DIRECT\020+\022\014\n\010P_FREEZE\020,\022\n\n\006P_B"
    "RUN\020-\022\n\n\006P_WEAK\020.\022\r\n\tP_FASTING\020/\022\n\n\006P_FU"
    "NK\0200\022\020\n\014P_RESTART_HP\0201\022\017\n\013P_SILENTRES\0202\022"
    "\017\n\013P_REFDAMAGE\0203\022\016\n\nP_IMMUNITY\0204\022\014\n\010P_PA"
    "BODY\0205\022\r\n\tP_MIRACLE\0206\022\013\n\007P_LUCKY\0207\022\014\n\010P_"
    "SLIENT\0208\022\n\n\006P_RACE\0209\022\n\n\006P_PROF\020:\022\014\n\010P_GE"
    "NDER\020;\022\013\n\007P_LEVEL\020<\022\t\n\005P_VIP\020=\022\t\n\005P_EXP\020"
    ">\022\014\n\010P_EXPMAX\020\?\022\n\n\006P_CAMP\020@\022\016\n\nP_CAMP_LE"
    "V\020A\022\r\n\tP_MARRIED\020B\022\022\n\016P_CAMP_KILLING\020C\022\024"
    "\n\020P_HOSTILEKILLING\020D\022\r\n\tP_STAMINA\020E\022\023\n\017P"
    "_STAMINA_REPLY\020F\022\021\n\rP_MAX_STAMINA\020G\022\016\n\nP"
    "_ACCPOWER\020H\022\021\n\rP_FIGHT_POWER\020I\022\020\n\014P_ATTR"
    "_POINT\020J\022\n\n\006P_GOLD\020K\022\017\n\013P_GOLD_BIND\020L\022\r\n"
    "\tP_DIAMOND\020M\022\022\n\016P_DIAMOND_BIND\020N\022\022\n\016P_DU"
    "PLICATE_ID\020O\022\016\n\nP_OFFICIAL\020P\022\014\n\010P_KNIGHT"
    "\020Q\022\022\n\016P_UNION_CONTRI\020R\022\014\n\010P_ENERGY\020S\022\020\n\014"
    "P_CLIENT_END\020c\022\021\n\rP_VALUE_BEGIN\020d\022\021\n\rP_V"
    "ALUE_POWER\020e\022\030\n\024P_VALUE_INTELLIGENCE\020f\022\023"
    "\n\017P_VALUE_AGILITY\020g\022\024\n\020P_VALUE_PHYSIQUE\020"
    "h\022\025\n\021P_VALUE_ENDURANCE\020i\022\025\n\021P_VALUE_PREC"
    "ISION\020j\022\022\n\016P_VALUE_MAX_HP\020k\022\022\n\016P_VALUE_M"
    "AX_MP\020l\022\016\n\nP_VALUE_AP\020m\022\017\n\013P_VALUE_MAT\020n"
    "\022\016\n\nP_VALUE_DP\020o\022\017\n\013P_VALUE_MDP\020p\022\017\n\013P_V"
    "ALUE_HIT\020q\022\021\n\rP_VALUE_DODGE\020r\022\020\n\014P_VALUE"
    "_CRIT\020s\022\025\n\021P_VALUE_TOUGHNESS\020t\022\034\n\030P_VALU"
    "E_CRIT_EXTRADAMAGE\020u\022\035\n\031P_VALUE_CRIT_RED"
    "UCEDAMAGE\020v\022\030\n\024P_VALUE_EXTRA_DAMAGE\020w\022\031\n"
    "\025P_VALUE_REDUCE_DAMAGE\020x\022\020\n\013P_VALUE_END\020"
    "\203\001\022\024\n\017P_PERCENT_BEGIN\020\204\001\022\024\n\017P_PERCENT_PO"
    "WER\020\205\001\022\033\n\026P_PERCENT_INTELLIGENCE\020\206\001\022\026\n\021P"
    "_PERCENT_AGILITY\020\207\001\022\027\n\022P_PERCENT_PHYSIQU"
    "E\020\210\001\022\030\n\023P_PERCENT_ENDURANCE\020\211\001\022\030\n\023P_PERC"
    "ENT_PRECISION\020\212\001\022\025\n\020P_PERCENT_MAX_HP\020\213\001\022"
    "\025\n\020P_PERCENT_MAX_MP\020\214\001\022\021\n\014P_PERCENT_AP\020\215"
    "\001\022\022\n\rP_PERCENT_MAT\020\216\001\022\021\n\014P_PERCENT_DP\020\217\001"
    "\022\022\n\rP_PERCENT_MDP\020\220\001\022\022\n\rP_PERCENT_HIT\020\221\001"
    "\022\024\n\017P_PERCENT_DODGE\020\222\001\022\023\n\016P_PERCENT_CRIT"
    "\020\223\001\022\030\n\023P_PERCENT_TOUGHNESS\020\224\001\022\037\n\032P_PERCE"
    "NT_CRIT_EXTRADAMAGE\020\225\001\022 \n\033P_PERCENT_CRIT"
    "_REDUCEDAMAGE\020\226\001\022\033\n\026P_PERCENT_EXTRA_DAMA"
    "GE\020\227\001\022\034\n\027P_PERCENT_REDUCE_DAMAGE\020\230\001\022\033\n\026P"
    "_PERCENT_CUREEFFECTBY\020\231\001\022\033\n\026P_PERCENT_AP"
    "DAMAGERATE\020\232\001\022\034\n\027P_PERCENT_MATDAMAGERATE"
    "\020\233\001\022!\n\034P_PERCENT_APREDUCEDAMAGERATE\020\234\001\022\""
    "\n\035P_PERCENT_MATREDUCEDAMAGERATE\020\235\001\022\030\n\023P_"
    "PERCENT_CRIT_RATE\020\236\001\022\033\n\026P_PERCENT_CUREAD"
    "DITION\020\237\001\022\035\n\030P_PERCENT_CUREADDITIONBY\020\240\001"
    "\022\022\n\rP_PERCENT_END\020\264\001\022\026\n\021P_SKILL_FIX_BEGI"
    "N\020\265\001\022\023\n\016P_SKILL_FIX_AP\020\266\001\022\024\n\017P_SKILL_FIX"
    "_MAT\020\267\001\022\024\n\017P_SKILL_FIX_END\020\310\001\022\027\n\022P_ATTR_"
    "POINT_BEGIN\020\311\001\022\027\n\022P_ATTR_POINT_POWER\020\312\001\022"
    "\036\n\031P_ATTR_POINT_INTELLIGENCE\020\313\001\022\031\n\024P_ATT"
    "R_POINT_AGILITY\020\314\001\022\032\n\025P_ATTR_POINT_PHYSI"
    "QUE\020\315\001\022\033\n\026P_ATTR_POINT_ENDURANCE\020\316\001\022\033\n\026P"
    "_ATTR_POINT_PRECISION\020\317\001\022\025\n\020P_ATTR_POINT"
    "_END\020\320\001\022\032\n\025P_ADVANCED_ATTR_BEGIN\020\321\001\022\027\n\022P"
    "_ADVANCED_ATTR_AP\020\322\001\022\030\n\023P_ADVANCED_ATTR_"
    "MAT\020\323\001\022\027\n\022P_ADVANCED_ATTR_DP\020\324\001\022\030\n\023P_ADV"
    "ANCED_ATTR_MDP\020\325\001\022\030\n\023P_ADVANCED_ATTR_HIT"
    "\020\326\001\022\032\n\025P_ADVANCED_ATTR_DODGE\020\327\001\022\031\n\024P_ADV"
    "ANCED_ATTR_CRIT\020\330\001\022\036\n\031P_ADVANCED_ATTR_TO"
    "UGHNESS\020\331\001\022\033\n\026P_ADVANCED_ATTR_MP_MAX\020\332\001\022"
    "\033\n\026P_ADVANCED_ATTR_HP_MAX\020\333\001\022\030\n\023P_ADVANC"
    "ED_ATTR_END\020\334\001\022\022\n\rP_EQUIP_BEGIN\020\335\001\022\022\n\rP_"
    "EQUIP_POWER\020\336\001\022\031\n\024P_EQUIP_INTELLIGENCE\020\337"
    "\001\022\024\n\017P_EQUIP_AGILITY\020\340\001\022\025\n\020P_EQUIP_PHYSI"
    "QUE\020\341\001\022\026\n\021P_EQUIP_ENDURANCE\020\342\001\022\026\n\021P_EQUI"
    "P_PRECISION\020\343\001\022\023\n\016P_EQUIP_MAX_HP\020\344\001\022\023\n\016P"
    "_EQUIP_MAX_MP\020\345\001\022\017\n\nP_EQUIP_AP\020\346\001\022\020\n\013P_E"
    "QUIP_MAT\020\347\001\022\017\n\nP_EQUIP_DP\020\350\001\022\020\n\013P_EQUIP_"
    "MDP\020\351\001\022\020\n\013P_EQUIP_HIT\020\352\001\022\022\n\rP_EQUIP_DODG"
    "E\020\353\001\022\021\n\014P_EQUIP_CRIT\020\354\001\022\026\n\021P_EQUIP_TOUGH"
    "NESS\020\355\001\022\026\n\021P_EQUIP_CRIT_RATE\020\356\001\022\035\n\030P_EQU"
    "IP_CRIT_EXTRADAMAGE\020\357\001\022\036\n\031P_EQUIP_CRIT_R"
    "EDUCEDAMAGE\020\360\001\022\031\n\024P_EQUIP_EXTRA_DAMAGE\020\361"
    "\001\022\032\n\025P_EQUIP_REDUCE_DAMAGE\020\362\001\022\030\n\023P_EQUIP"
    "_DAMAGE_RATE\020\363\001\022\026\n\021P_EQUIP_FREEZERES\020\364\001\022"
    "\024\n\017P_EQUIP_BURNRES\020\365\001\022\024\n\017P_EQUIP_WEAKRES"
    "\020\366\001\022\027\n\022P_EQUIP_FASTINGRES\020\367\001\022\024\n\017P_EQUIP_"
    "FUNKRES\020\370\001\022\031\n\024P_EQUIP_APDAMAGERATE\020\371\001\022\032\n"
    "\025P_EQUIP_MATDAMAGERATE\020\372\001\022\037\n\032P_EQUIP_APR"
    "EDUCEDAMAGERATE\020\373\001\022 \n\033P_EQUIP_MATREDUCED"
    "AMAGERATE\020\374\001\022\020\n\013P_EQUIP_END\020\230\002\022\020\n\013P_LEV_"
    "BEGIN\020\231\002\022\020\n\013P_LEV_POWER\020\232\002\022\027\n\022P_LEV_INTE"
    "LLIGENCE\020\233\002\022\022\n\rP_LEV_AGILITY\020\234\002\022\023\n\016P_LEV"
    "_PHYSIQUE\020\235\002\022\024\n\017P_LEV_ENDURANCE\020\236\002\022\024\n\017P_"
    "LEV_PRECISION\020\237\002\022\021\n\014P_LEV_MAX_HP\020\240\002\022\021\n\014P"
    "_LEV_MAX_MP\020\241\002\022\r\n\010P_LEV_AP\020\242\002\022\016\n\tP_LEV_M"
    "AT\020\243\002\022\r\n\010P_LEV_DP\020\244\002\022\016\n\tP_LEV_MDP\020\245\002\022\016\n\t"
    "P_LEV_HIT\020\246\002\022\020\n\013P_LEV_DODGE\020\247\002\022\017\n\nP_LEV_"
    "CRIT\020\250\002\022\024\n\017P_LEV_TOUGHNESS\020\251\002\022\024\n\017P_LEV_C"
    "RIT_RATE\020\252\002\022\016\n\tP_LEV_END\020\300\002\022\032\n\025P_SKILL_P"
    "ERCENT_BEGIN\020\301\002\022\030\n\023P_SKILL_PERCENT_MAT\020\302"
    "\002\022\027\n\022P_SKILL_PERCENT_AP\020\303\002\022\030\n\023P_SKILL_PE"
    "RCENT_END\020\324\002\022\027\n\022P_AUTO_POINT_BEGIN\020\325\002\022\027\n"
    "\022P_AUTO_POINT_POWER\020\326\002\022\036\n\031P_AUTO_POINT_I"
    "NTELLIGENCE\020\327\002\022\031\n\024P_AUTO_POINT_AGILITY\020\330"
    "\002\022\032\n\025P_AUTO_POINT_PHYSIQUE\020\331\002\022\033\n\026P_AUTO_"
    "POINT_ENDURANCE\020\332\002\022\033\n\026P_AUTO_POINT_PRECI"
    "SION\020\333\002\022\021\n\014P_AUTO_POINT\020\334\002\022\025\n\020P_AUTO_POI"
    "NT_END\020\335\002\022\025\n\020P_BUFF_FIX_BEGIN\020\336\002\022\025\n\020P_BU"
    "FF_FIX_POWER\020\337\002\022\034\n\027P_BUFF_FIX_INTELLIGEN"
    "CE\020\340\002\022\027\n\022P_BUFF_FIX_AGILITY\020\341\002\022\030\n\023P_BUFF"
    "_FIX_PHYSIQUE\020\342\002\022\031\n\024P_BUFF_FIX_ENDURANCE"
    "\020\343\002\022\031\n\024P_BUFF_FIX_PRECISION\020\344\002\022\026\n\021P_BUFF"
    "_FIX_MAX_HP\020\345\002\022\026\n\021P_BUFF_FIX_MAX_MP\020\346\002\022\022"
    "\n\rP_BUFF_FIX_AP\020\347\002\022\023\n\016P_BUFF_FIX_MAT\020\350\002\022"
    "\022\n\rP_BUFF_FIX_DP\020\351\002\022\023\n\016P_BUFF_FIX_MDP\020\352\002"
    "\022\023\n\016P_BUFF_FIX_HIT\020\353\002\022\025\n\020P_BUFF_FIX_DODG"
    "E\020\354\002\022\024\n\017P_BUFF_FIX_CRIT\020\355\002\022\031\n\024P_BUFF_FIX"
    "_TOUGHNESS\020\356\002\022 \n\033P_BUFF_FIX_CRIT_EXTRADA"
    "MAGE\020\357\002\022!\n\034P_BUFF_FIX_CRIT_REDUCEDAMAGE\020"
    "\360\002\022\034\n\027P_BUFF_FIX_EXTRA_DAMAGE\020\361\002\022\035\n\030P_BU"
    "FF_FIX_REDUCE_DAMAGE\020\362\002\022\023\n\016P_BUFF_FIX_EN"
    "D\020\220\003\022\031\n\024P_BUFF_PERCENT_BEGIN\020\221\003\022\031\n\024P_BUF"
    "F_PERCENT_POWER\020\222\003\022 \n\033P_BUFF_PERCENT_INT"
    "ELLIGENCE\020\223\003\022\033\n\026P_BUFF_PERCENT_AGILITY\020\224"
    "\003\022\034\n\027P_BUFF_PERCENT_PHYSIQUE\020\225\003\022\035\n\030P_BUF"
    "F_PERCENT_ENDURANCE\020\226\003\022\035\n\030P_BUFF_PERCENT"
    "_PRECISION\020\227\003\022\032\n\025P_BUFF_PERCENT_MAX_HP\020\230"
    "\003\022\032\n\025P_BUFF_PERCENT_MAX_MP\020\231\003\022\026\n\021P_BUFF_"
    "PERCENT_AP\020\232\003\022\027\n\022P_BUFF_PERCENT_MAT\020\233\003\022\026"
    "\n\021P_BUFF_PERCENT_DP\020\234\003\022\027\n\022P_BUFF_PERCENT"
    "_MDP\020\235\003\022\027\n\022P_BUFF_PERCENT_HIT\020\236\003\022\031\n\024P_BU"
    "FF_PERCENT_DODGE\020\237\003\022\030\n\023P_BUFF_PERCENT_CR"
    "IT\020\240\003\022\035\n\030P_BUFF_PERCENT_TOUGHNESS\020\241\003\022$\n\037"
    "P_BUFF_PERCENT_CRIT_EXTRADAMAGE\020\242\003\022%\n P_"
    "BUFF_PERCENT_CRIT_REDUCEDAMAGE\020\243\003\022 \n\033P_B"
    "UFF_PERCENT_EXTRA_DAMAGE\020\244\003\022!\n\034P_BUFF_PE"
    "RCENT_REDUCE_DAMAGE\020\245\003\022 \n\033P_BUFF_PERCENT"
    "_CUREEFFECTBY\020\246\003\022 \n\033P_BUFF_PERCENT_APDAM"
    "AGERATE\020\247\003\022!\n\034P_BUFF_PERCENT_MATDAMAGERA"
    "TE\020\250\003\022&\n!P_BUFF_PERCENT_APREDUCEDAMAGERA"
    "TE\020\251\003\022\'\n\"P_BUFF_PERCENT_MATREDUCEDAMAGER"
    "ATE\020\252\003\022\035\n\030P_BUFF_PERCENT_CRIT_RATE\020\253\003\022 \n"
    "\033P_BUFF_PERCENT_CUREADDITION\020\254\003\022\"\n\035P_BUF"
    "F_PERCENT_CUREADDITIONBY\020\255\003\022\027\n\022P_BUFF_PE"
    "RCENT_END\020\302\003\022\020\n\013P_FIX_BEGIN\020\304\003\022\020\n\013P_FIX_"
    "POWER\020\305\003\022\027\n\022P_FIX_INTELLIGENCE\020\306\003\022\022\n\rP_F"
    "IX_AGILITY\020\307\003\022\023\n\016P_FIX_PHYSIQUE\020\310\003\022\024\n\017P_"
    "FIX_ENDURANCE\020\311\003\022\024\n\017P_FIX_PRECISION\020\312\003\022\021"
    "\n\014P_FIX_MAX_HP\020\313\003\022\021\n\014P_FIX_MAX_MP\020\314\003\022\r\n\010"
    "P_FIX_AP\020\315\003\022\016\n\tP_FIX_MAT\020\316\003\022\r\n\010P_FIX_DP\020"
    "\317\003\022\016\n\tP_FIX_MDP\020\320\003\022\016\n\tP_FIX_HIT\020\321\003\022\020\n\013P_"
    "FIX_DODGE\020\322\003\022\017\n\nP_FIX_CRIT\020\323\003\022\024\n\017P_FIX_T"
    "OUGHNESS\020\324\003\022\033\n\026P_FIX_CRIT_EXTRADAMAGE\020\325\003"
    "\022\034\n\027P_FIX_CRIT_REDUCEDAMAGE\020\326\003\022\027\n\022P_FIX_"
    "EXTRA_DAMAGE\020\327\003\022\030\n\023P_FIX_REDUCE_DAMAGE\020\330"
    "\003\022\016\n\tP_FIX_END\020\363\003\022\n\n\005P_MAX\020\364\003*\272\037\n\013Monste"
    "rAttr\022\n\n\006M_NONE\020\000\022\010\n\004M_HP\020\001\022\014\n\010M_MAX_HP\020"
    "\002\022\010\n\004M_ID\020\003\022\010\n\004M_MP\020\004\022\014\n\010M_MAX_MP\020\005\022\010\n\004M"
    "_AP\020\006\022\t\n\005M_MAT\020\007\022\010\n\004M_DP\020\010\022\t\n\005M_MDP\020\t\022\t\n"
    "\005M_HIT\020\n\022\013\n\007M_DODGE\020\013\022\n\n\006M_CRIT\020\014\022\017\n\013M_T"
    "OUGHNESS\020\r\022\017\n\013M_CRIT_RATE\020\016\022\026\n\022M_CRIT_EX"
    "TRADAMAGE\020\017\022\027\n\023M_CRIT_REDUCEDAMAGE\020\020\022\022\n\016"
    "M_EXTRA_DAMAGE\020\021\022\023\n\017M_REDUCE_DAMAGE\020\022\022\021\n"
    "\rM_DAMAGE_RATE\020\023\022\027\n\023M_REDUCE_DAMAGERATE\020"
    "\024\022\017\n\013M_FREEZERES\020\025\022\r\n\tM_BURNRES\020\026\022\r\n\tM_W"
    "EAKRES\020\027\022\020\n\014M_FASTINGRES\020\030\022\r\n\tM_FUNKRES\020"
    "\031\022\014\n\010M_MSPEED\020\032\022\014\n\010M_ASPEED\020\033\022\025\n\021M_SKILL"
    "_FIX_BEGIN\020\034\022\022\n\016M_SKILL_FIX_AP\020\035\022\023\n\017M_SK"
    "ILL_FIX_MAT\020\036\022\023\n\017M_SKILL_FIX_END\020\037\022\031\n\025M_"
    "SKILL_PERCENT_BEGIN\0202\022\026\n\022M_SKILL_PERCENT"
    "_AP\0203\022\027\n\023M_SKILL_PERCENT_MAT\0204\022\020\n\014M_CURE"
    "EFFECT\0205\022\022\n\016M_CUREADDITION\0206\022\022\n\016M_SKILLC"
    "FG_END\0207\022\024\n\020M_BUFF_FIX_BEGIN\020F\022\024\n\020M_BUFF"
    "_FIX_POWER\020G\022\033\n\027M_BUFF_FIX_INTELLIGENCE\020"
    "H\022\026\n\022M_BUFF_FIX_AGILITY\020I\022\027\n\023M_BUFF_FIX_"
    "PHYSIQUE\020J\022\030\n\024M_BUFF_FIX_ENDURANCE\020K\022\030\n\024"
    "M_BUFF_FIX_PRECISION\020L\022\025\n\021M_BUFF_FIX_MAX"
    "_HP\020M\022\025\n\021M_BUFF_FIX_MAX_MP\020N\022\021\n\rM_BUFF_F"
    "IX_AP\020O\022\022\n\016M_BUFF_FIX_MAT\020P\022\021\n\rM_BUFF_FI"
    "X_DP\020Q\022\022\n\016M_BUFF_FIX_MDP\020R\022\022\n\016M_BUFF_FIX"
    "_HIT\020S\022\024\n\020M_BUFF_FIX_DODGE\020T\022\023\n\017M_BUFF_F"
    "IX_CRIT\020U\022\030\n\024M_BUFF_FIX_TOUGHNESS\020V\022\037\n\033M"
    "_BUFF_FIX_CRIT_EXTRADAMAGE\020W\022 \n\034M_BUFF_F"
    "IX_CRIT_REDUCEDAMAGE\020X\022\033\n\027M_BUFF_FIX_EXT"
    "RA_DAMAGE\020Y\022\034\n\030M_BUFF_FIX_REDUCE_DAMAGE\020"
    "Z\022\022\n\016M_BUFF_FIX_END\020[\022\030\n\024M_BUFF_PERCENT_"
    "BEGIN\020d\022\030\n\024M_BUFF_PERCENT_POWER\020e\022\037\n\033M_B"
    "UFF_PERCENT_INTELLIGENCE\020f\022\032\n\026M_BUFF_PER"
    "CENT_AGILITY\020g\022\033\n\027M_BUFF_PERCENT_PHYSIQU"
    "E\020h\022\034\n\030M_BUFF_PERCENT_ENDURANCE\020i\022\034\n\030M_B"
    "UFF_PERCENT_PRECISION\020j\022\031\n\025M_BUFF_PERCEN"
    "T_MAX_HP\020k\022\031\n\025M_BUFF_PERCENT_MAX_MP\020l\022\025\n"
    "\021M_BUFF_PERCENT_AP\020m\022\026\n\022M_BUFF_PERCENT_M"
    "AT\020n\022\025\n\021M_BUFF_PERCENT_DP\020o\022\026\n\022M_BUFF_PE"
    "RCENT_MDP\020p\022\026\n\022M_BUFF_PERCENT_HIT\020q\022\030\n\024M"
    "_BUFF_PERCENT_DODGE\020r\022\027\n\023M_BUFF_PERCENT_"
    "CRIT\020s\022\034\n\030M_BUFF_PERCENT_TOUGHNESS\020t\022#\n\037"
    "M_BUFF_PERCENT_CRIT_EXTRADAMAGE\020u\022$\n M_B"
    "UFF_PERCENT_CRIT_REDUCEDAMAGE\020v\022\037\n\033M_BUF"
    "F_PERCENT_EXTRA_DAMAGE\020w\022 \n\034M_BUFF_PERCE"
    "NT_REDUCE_DAMAGE\020x\022\037\n\033M_BUFF_PERCENT_CUR"
    "EEFFECTBY\020y\022\037\n\033M_BUFF_PERCENT_APDAMAGERA"
    "TE\020z\022 \n\034M_BUFF_PERCENT_MATDAMAGERATE\020{\022%"
    "\n!M_BUFF_PERCENT_APREDUCEDAMAGERATE\020|\022&\n"
    "\"M_BUFF_PERCENT_MATREDUCEDAMAGERATE\020}\022\034\n"
    "\030M_BUFF_PERCENT_CRIT_RATE\020~\022\037\n\033M_BUFF_PE"
    "RCENT_CUREADDITION\020\177\022\"\n\035M_BUFF_PERCENT_C"
    "UREADDITIONBY\020\200\001\022\027\n\022M_BUFF_PERCENT_END\020\201"
    "\001\022\022\n\rM_VALUE_BEGIN\020\214\001\022\022\n\rM_VALUE_POWER\020\215"
    "\001\022\031\n\024M_VALUE_INTELLIGENCE\020\216\001\022\024\n\017M_VALUE_"
    "AGILITY\020\217\001\022\025\n\020M_VALUE_PHYSIQUE\020\220\001\022\026\n\021M_V"
    "ALUE_ENDURANCE\020\221\001\022\026\n\021M_VALUE_PRECISION\020\222"
    "\001\022\023\n\016M_VALUE_MAX_HP\020\223\001\022\023\n\016M_VALUE_MAX_MP"
    "\020\224\001\022\017\n\nM_VALUE_AP\020\225\001\022\020\n\013M_VALUE_MAT\020\226\001\022\017"
    "\n\nM_VALUE_DP\020\227\001\022\020\n\013M_VALUE_MDP\020\230\001\022\020\n\013M_V"
    "ALUE_HIT\020\231\001\022\022\n\rM_VALUE_DODGE\020\232\001\022\021\n\014M_VAL"
    "UE_CRIT\020\233\001\022\026\n\021M_VALUE_TOUGHNESS\020\234\001\022\035\n\030M_"
    "VALUE_CRIT_EXTRADAMAGE\020\235\001\022\036\n\031M_VALUE_CRI"
    "T_REDUCEDAMAGE\020\236\001\022\031\n\024M_VALUE_EXTRA_DAMAG"
    "E\020\237\001\022\032\n\025M_VALUE_REDUCE_DAMAGE\020\240\001\022\020\n\013M_VA"
    "LUE_END\020\252\001\022\024\n\017M_PERCENT_BEGIN\020\253\001\022\024\n\017M_PE"
    "RCENT_POWER\020\254\001\022\033\n\026M_PERCENT_INTELLIGENCE"
    "\020\255\001\022\026\n\021M_PERCENT_AGILITY\020\256\001\022\027\n\022M_PERCENT"
    "_PHYSIQUE\020\257\001\022\030\n\023M_PERCENT_ENDURANCE\020\260\001\022\030"
    "\n\023M_PERCENT_PRECISION\020\261\001\022\025\n\020M_PERCENT_MA"
    "X_HP\020\262\001\022\025\n\020M_PERCENT_MAX_MP\020\263\001\022\021\n\014M_PERC"
    "ENT_AP\020\264\001\022\022\n\rM_PERCENT_MAT\020\265\001\022\021\n\014M_PERCE"
    "NT_DP\020\266\001\022\022\n\rM_PERCENT_MDP\020\267\001\022\022\n\rM_PERCEN"
    "T_HIT\020\270\001\022\024\n\017M_PERCENT_DODGE\020\271\001\022\023\n\016M_PERC"
    "ENT_CRIT\020\272\001\022\030\n\023M_PERCENT_TOUGHNESS\020\273\001\022\037\n"
    "\032M_PERCENT_CRIT_EXTRADAMAGE\020\274\001\022 \n\033M_PERC"
    "ENT_CRIT_REDUCEDAMAGE\020\275\001\022\033\n\026M_PERCENT_EX"
    "TRA_DAMAGE\020\276\001\022\034\n\027M_PERCENT_REDUCE_DAMAGE"
    "\020\277\001\022\033\n\026M_PERCENT_CUREEFFECTBY\020\300\001\022\033\n\026M_PE"
    "RCENT_APDAMAGERATE\020\301\001\022\034\n\027M_PERCENT_MATDA"
    "MAGERATE\020\302\001\022!\n\034M_PERCENT_APREDUCEDAMAGER"
    "ATE\020\303\001\022\"\n\035M_PERCENT_MATREDUCEDAMAGERATE\020"
    "\304\001\022\030\n\023M_PERCENT_CRIT_RATE\020\305\001\022\033\n\026M_PERCEN"
    "T_CUREADDITION\020\306\001\022\035\n\030M_PERCENT_CUREADDIT"
    "IONBY\020\307\001\022\022\n\rM_PERCENT_END\020\322\001\022\020\n\013M_FIX_BE"
    "GIN\020\360\001\022\020\n\013M_FIX_POWER\020\361\001\022\027\n\022M_FIX_INTELL"
    "IGENCE\020\362\001\022\022\n\rM_FIX_AGILITY\020\363\001\022\023\n\016M_FIX_P"
    "HYSIQUE\020\364\001\022\024\n\017M_FIX_ENDURANCE\020\365\001\022\024\n\017M_FI"
    "X_PRECISION\020\366\001\022\021\n\014M_FIX_MAX_HP\020\367\001\022\021\n\014M_F"
    "IX_MAX_MP\020\370\001\022\r\n\010M_FIX_AP\020\371\001\022\016\n\tM_FIX_MAT"
    "\020\372\001\022\r\n\010M_FIX_DP\020\373\001\022\016\n\tM_FIX_MDP\020\374\001\022\016\n\tM_"
    "FIX_HIT\020\375\001\022\020\n\013M_FIX_DODGE\020\376\001\022\017\n\nM_FIX_CR"
    "IT\020\377\001\022\024\n\017M_FIX_TOUGHNESS\020\200\002\022\033\n\026M_FIX_CRI"
    "T_EXTRADAMAGE\020\201\002\022\034\n\027M_FIX_CRIT_REDUCEDAM"
    "AGE\020\202\002\022\027\n\022M_FIX_EXTRA_DAMAGE\020\203\002\022\030\n\023M_FIX"
    "_REDUCE_DAMAGE\020\204\002\022\027\n\022M_FIX_CUREEFFECTBY\020"
    "\205\002\022\027\n\022M_FIX_APDAMAGERATE\020\206\002\022\030\n\023M_FIX_MAT"
    "DAMAGERATE\020\207\002\022\035\n\030M_FIX_APREDUCEDAMAGERAT"
    "E\020\210\002\022\036\n\031M_FIX_MATREDUCEDAMAGERATE\020\211\002\022\024\n\017"
    "M_FIX_CRIT_RATE\020\212\002\022\027\n\022M_FIX_CUREADDITION"
    "\020\213\002\022\031\n\024M_FIX_CUREADDITIONBY\020\214\002\022\016\n\tM_FIX_"
    "END\020\215\002\022\n\n\005M_MAX\020\216\002*S\n\rCreatureState\022\016\n\nS"
    "tate_Init\020\000\022\020\n\014State_normal\020\001\022\016\n\nState_d"
    "ead\020\002\022\020\n\014state_relive\020\003", 20703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/ComProtocol.proto", &protobuf_RegisterTypes);
  EmptyMessage::default_instance_ = new EmptyMessage();
  RegisterServiceRequest::default_instance_ = new RegisterServiceRequest();
  ValueCurrency::default_instance_ = new ValueCurrency();
  CharacterDBPvpData::default_instance_ = new CharacterDBPvpData();
  CharacterDBBaseInfo::default_instance_ = new CharacterDBBaseInfo();
  CharacterDBTaskData::default_instance_ = new CharacterDBTaskData();
  CharacterDBEffPreCondition::default_instance_ = new CharacterDBEffPreCondition();
  CharacterDBSubmittedMission::default_instance_ = new CharacterDBSubmittedMission();
  CharacterDBWithoutPreComplete::default_instance_ = new CharacterDBWithoutPreComplete();
  CharacterDBMissionItemInfo::default_instance_ = new CharacterDBMissionItemInfo();
  CharacterDBMissionTrack::default_instance_ = new CharacterDBMissionTrack();
  CharacterDBSignleCampMission::default_instance_ = new CharacterDBSignleCampMission();
  CharacterDBCampMissionInfo::default_instance_ = new CharacterDBCampMissionInfo();
  CharacterDBLoopMissionInfo::default_instance_ = new CharacterDBLoopMissionInfo();
  CharacterDBSkillItem::default_instance_ = new CharacterDBSkillItem();
  CharacterDBSkillData::default_instance_ = new CharacterDBSkillData();
  CharacterDBAttrDetailInfo::default_instance_ = new CharacterDBAttrDetailInfo();
  CharacterDBExtendData::default_instance_ = new CharacterDBExtendData();
  CharacterDBInfo::default_instance_ = new CharacterDBInfo();
  CharacterDBSimpleInfo::default_instance_ = new CharacterDBSimpleInfo();
  ItemProtoInfo::default_instance_ = new ItemProtoInfo();
  FashionProtoInfo::default_instance_ = new FashionProtoInfo();
  CharacterDBPackageData::default_instance_ = new CharacterDBPackageData();
  CharacterDBEquipData::default_instance_ = new CharacterDBEquipData();
  CharacterDBFashionData::default_instance_ = new CharacterDBFashionData();
  DuplicateSingleProto::default_instance_ = new DuplicateSingleProto();
  CharacterDBDuplicateData::default_instance_ = new CharacterDBDuplicateData();
  CharacterDBMailData::default_instance_ = new CharacterDBMailData();
  SingleCampRankDBInfo::default_instance_ = new SingleCampRankDBInfo();
  CampRankDBData::default_instance_ = new CampRankDBData();
  SingleCampDBData::default_instance_ = new SingleCampDBData();
  AllCampDBData::default_instance_ = new AllCampDBData();
  GlobalDBData::default_instance_ = new GlobalDBData();
  CharacterCampDBData::default_instance_ = new CharacterCampDBData();
  MallInfo::default_instance_ = new MallInfo();
  AllMallDBData::default_instance_ = new AllMallDBData();
  SingleCharacterMallDB::default_instance_ = new SingleCharacterMallDB();
  SingleAchievementDBData::default_instance_ = new SingleAchievementDBData();
  GroupAchievementDBData::default_instance_ = new GroupAchievementDBData();
  CharacterAchievementDBData::default_instance_ = new CharacterAchievementDBData();
  SingleDeputyDBData::default_instance_ = new SingleDeputyDBData();
  CollectDeputyDBData::default_instance_ = new CollectDeputyDBData();
  MakeDeputyDBData::default_instance_ = new MakeDeputyDBData();
  CharacterDeputyDBData::default_instance_ = new CharacterDeputyDBData();
  Vector3PB::default_instance_ = new Vector3PB();
  ActorMove::default_instance_ = new ActorMove();
  ActorSkillMove::default_instance_ = new ActorSkillMove();
  ActorRockerMove::default_instance_ = new ActorRockerMove();
  ActorPosUpDate::default_instance_ = new ActorPosUpDate();
  CharSyncAttr::default_instance_ = new CharSyncAttr();
  SkillCell::default_instance_ = new SkillCell();
  Attr::default_instance_ = new Attr();
  DigPerfor::default_instance_ = new DigPerfor();
  IsCanTransSceneRouteReq::default_instance_ = new IsCanTransSceneRouteReq();
  IsCanTransSceneReq::default_instance_ = new IsCanTransSceneReq();
  ItemSellProto::default_instance_ = new ItemSellProto();
  OneKeyDressProto::default_instance_ = new OneKeyDressProto();
  RewardItemProto::default_instance_ = new RewardItemProto();
  DuplicateProto::default_instance_ = new DuplicateProto();
  RelationMember::default_instance_ = new RelationMember();
  RelationInfo::default_instance_ = new RelationInfo();
  RelationPhysicalTab::default_instance_ = new RelationPhysicalTab();
  RelationDBInfo::default_instance_ = new RelationDBInfo();
  CharacterPlayerMiniInfo::default_instance_ = new CharacterPlayerMiniInfo();
  CharacterDetailProtoInfo::default_instance_ = new CharacterDetailProtoInfo();
  MailAttachmentList::default_instance_ = new MailAttachmentList();
  MailHead::default_instance_ = new MailHead();
  MailInfo::default_instance_ = new MailInfo();
  MiniMailInfo::default_instance_ = new MiniMailInfo();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  RegisterServiceRequest::default_instance_->InitAsDefaultInstance();
  ValueCurrency::default_instance_->InitAsDefaultInstance();
  CharacterDBPvpData::default_instance_->InitAsDefaultInstance();
  CharacterDBBaseInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBTaskData::default_instance_->InitAsDefaultInstance();
  CharacterDBEffPreCondition::default_instance_->InitAsDefaultInstance();
  CharacterDBSubmittedMission::default_instance_->InitAsDefaultInstance();
  CharacterDBWithoutPreComplete::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionItemInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionTrack::default_instance_->InitAsDefaultInstance();
  CharacterDBSignleCampMission::default_instance_->InitAsDefaultInstance();
  CharacterDBCampMissionInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBLoopMissionInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBSkillItem::default_instance_->InitAsDefaultInstance();
  CharacterDBSkillData::default_instance_->InitAsDefaultInstance();
  CharacterDBAttrDetailInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBExtendData::default_instance_->InitAsDefaultInstance();
  CharacterDBInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBSimpleInfo::default_instance_->InitAsDefaultInstance();
  ItemProtoInfo::default_instance_->InitAsDefaultInstance();
  FashionProtoInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBPackageData::default_instance_->InitAsDefaultInstance();
  CharacterDBEquipData::default_instance_->InitAsDefaultInstance();
  CharacterDBFashionData::default_instance_->InitAsDefaultInstance();
  DuplicateSingleProto::default_instance_->InitAsDefaultInstance();
  CharacterDBDuplicateData::default_instance_->InitAsDefaultInstance();
  CharacterDBMailData::default_instance_->InitAsDefaultInstance();
  SingleCampRankDBInfo::default_instance_->InitAsDefaultInstance();
  CampRankDBData::default_instance_->InitAsDefaultInstance();
  SingleCampDBData::default_instance_->InitAsDefaultInstance();
  AllCampDBData::default_instance_->InitAsDefaultInstance();
  GlobalDBData::default_instance_->InitAsDefaultInstance();
  CharacterCampDBData::default_instance_->InitAsDefaultInstance();
  MallInfo::default_instance_->InitAsDefaultInstance();
  AllMallDBData::default_instance_->InitAsDefaultInstance();
  SingleCharacterMallDB::default_instance_->InitAsDefaultInstance();
  SingleAchievementDBData::default_instance_->InitAsDefaultInstance();
  GroupAchievementDBData::default_instance_->InitAsDefaultInstance();
  CharacterAchievementDBData::default_instance_->InitAsDefaultInstance();
  SingleDeputyDBData::default_instance_->InitAsDefaultInstance();
  CollectDeputyDBData::default_instance_->InitAsDefaultInstance();
  MakeDeputyDBData::default_instance_->InitAsDefaultInstance();
  CharacterDeputyDBData::default_instance_->InitAsDefaultInstance();
  Vector3PB::default_instance_->InitAsDefaultInstance();
  ActorMove::default_instance_->InitAsDefaultInstance();
  ActorSkillMove::default_instance_->InitAsDefaultInstance();
  ActorRockerMove::default_instance_->InitAsDefaultInstance();
  ActorPosUpDate::default_instance_->InitAsDefaultInstance();
  CharSyncAttr::default_instance_->InitAsDefaultInstance();
  SkillCell::default_instance_->InitAsDefaultInstance();
  Attr::default_instance_->InitAsDefaultInstance();
  DigPerfor::default_instance_->InitAsDefaultInstance();
  IsCanTransSceneRouteReq::default_instance_->InitAsDefaultInstance();
  IsCanTransSceneReq::default_instance_->InitAsDefaultInstance();
  ItemSellProto::default_instance_->InitAsDefaultInstance();
  OneKeyDressProto::default_instance_->InitAsDefaultInstance();
  RewardItemProto::default_instance_->InitAsDefaultInstance();
  DuplicateProto::default_instance_->InitAsDefaultInstance();
  RelationMember::default_instance_->InitAsDefaultInstance();
  RelationInfo::default_instance_->InitAsDefaultInstance();
  RelationPhysicalTab::default_instance_->InitAsDefaultInstance();
  RelationDBInfo::default_instance_->InitAsDefaultInstance();
  CharacterPlayerMiniInfo::default_instance_->InitAsDefaultInstance();
  CharacterDetailProtoInfo::default_instance_->InitAsDefaultInstance();
  MailAttachmentList::default_instance_->InitAsDefaultInstance();
  MailHead::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  MiniMailInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fComProtocol_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fComProtocol_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fComProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* PlayerAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAttr_descriptor_;
}
bool PlayerAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 180:
    case 181:
    case 182:
    case 183:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 320:
    case 321:
    case 322:
    case 323:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 450:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 471:
    case 472:
    case 499:
    case 500:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MonsterAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterAttr_descriptor_;
}
bool MonsterAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 210:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreatureState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureState_descriptor_;
}
bool CreatureState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New() const {
  return new EmptyMessage;
}

void EmptyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {

  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterServiceRequest::kServiceTypeFieldNumber;
const int RegisterServiceRequest::kGroupIdFieldNumber;
const int RegisterServiceRequest::kServiceIdFieldNumber;
const int RegisterServiceRequest::kListenIpFieldNumber;
const int RegisterServiceRequest::kListenPortFieldNumber;
#endif  // !_MSC_VER

RegisterServiceRequest::RegisterServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterServiceRequest::InitAsDefaultInstance() {
}

RegisterServiceRequest::RegisterServiceRequest(const RegisterServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = 0u;
  group_id_ = 0u;
  service_id_ = 0u;
  listen_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listen_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterServiceRequest::~RegisterServiceRequest() {
  SharedDtor();
}

void RegisterServiceRequest::SharedDtor() {
  if (listen_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete listen_ip_;
  }
  if (this != default_instance_) {
  }
}

void RegisterServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterServiceRequest_descriptor_;
}

const RegisterServiceRequest& RegisterServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

RegisterServiceRequest* RegisterServiceRequest::default_instance_ = NULL;

RegisterServiceRequest* RegisterServiceRequest::New() const {
  return new RegisterServiceRequest;
}

void RegisterServiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    service_type_ = 0u;
    group_id_ = 0u;
    service_id_ = 0u;
    if (has_listen_ip()) {
      if (listen_ip_ != &::google::protobuf::internal::kEmptyString) {
        listen_ip_->clear();
      }
    }
    listen_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_type_)));
          set_has_service_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_service_id;
        break;
      }

      // required uint32 service_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
          set_has_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_listen_ip;
        break;
      }

      // required string listen_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listen_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listen_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listen_ip().data(), this->listen_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_listen_port;
        break;
      }

      // required uint32 listen_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->service_type(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required uint32 service_id = 3;
  if (has_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->service_id(), output);
  }

  // required string listen_ip = 4;
  if (has_listen_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listen_ip().data(), this->listen_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->listen_ip(), output);
  }

  // required uint32 listen_port = 5;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->listen_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 service_type = 1;
  if (has_service_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->service_type(), target);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // required uint32 service_id = 3;
  if (has_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->service_id(), target);
  }

  // required string listen_ip = 4;
  if (has_listen_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listen_ip().data(), this->listen_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->listen_ip(), target);
  }

  // required uint32 listen_port = 5;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->listen_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterServiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_type());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 service_id = 3;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // required string listen_ip = 4;
    if (has_listen_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listen_ip());
    }

    // required uint32 listen_port = 5;
    if (has_listen_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterServiceRequest::MergeFrom(const RegisterServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_service_id()) {
      set_service_id(from.service_id());
    }
    if (from.has_listen_ip()) {
      set_listen_ip(from.listen_ip());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceRequest::CopyFrom(const RegisterServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RegisterServiceRequest::Swap(RegisterServiceRequest* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(service_id_, other->service_id_);
    std::swap(listen_ip_, other->listen_ip_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterServiceRequest_descriptor_;
  metadata.reflection = RegisterServiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValueCurrency::kCoinTypeFieldNumber;
const int ValueCurrency::kCoinValueFieldNumber;
#endif  // !_MSC_VER

ValueCurrency::ValueCurrency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ValueCurrency::InitAsDefaultInstance() {
}

ValueCurrency::ValueCurrency(const ValueCurrency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ValueCurrency::SharedCtor() {
  _cached_size_ = 0;
  cointype_ = 0;
  coinvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValueCurrency::~ValueCurrency() {
  SharedDtor();
}

void ValueCurrency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ValueCurrency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueCurrency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueCurrency_descriptor_;
}

const ValueCurrency& ValueCurrency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

ValueCurrency* ValueCurrency::default_instance_ = NULL;

ValueCurrency* ValueCurrency::New() const {
  return new ValueCurrency;
}

void ValueCurrency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cointype_ = 0;
    coinvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValueCurrency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 coinType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cointype_)));
          set_has_cointype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coinValue;
        break;
      }

      // required int32 coinValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coinValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coinvalue_)));
          set_has_coinvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValueCurrency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 coinType = 1;
  if (has_cointype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cointype(), output);
  }

  // required int32 coinValue = 2;
  if (has_coinvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coinvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValueCurrency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 coinType = 1;
  if (has_cointype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cointype(), target);
  }

  // required int32 coinValue = 2;
  if (has_coinvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coinvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValueCurrency::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 coinType = 1;
    if (has_cointype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cointype());
    }

    // required int32 coinValue = 2;
    if (has_coinvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coinvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueCurrency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValueCurrency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValueCurrency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValueCurrency::MergeFrom(const ValueCurrency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cointype()) {
      set_cointype(from.cointype());
    }
    if (from.has_coinvalue()) {
      set_coinvalue(from.coinvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValueCurrency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueCurrency::CopyFrom(const ValueCurrency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueCurrency::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ValueCurrency::Swap(ValueCurrency* other) {
  if (other != this) {
    std::swap(cointype_, other->cointype_);
    std::swap(coinvalue_, other->coinvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValueCurrency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValueCurrency_descriptor_;
  metadata.reflection = ValueCurrency_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBPvpData::kPkModeFieldNumber;
const int CharacterDBPvpData::kPkKillingValueFieldNumber;
#endif  // !_MSC_VER

CharacterDBPvpData::CharacterDBPvpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBPvpData::InitAsDefaultInstance() {
}

CharacterDBPvpData::CharacterDBPvpData(const CharacterDBPvpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBPvpData::SharedCtor() {
  _cached_size_ = 0;
  pk_mode_ = 0u;
  pk_killing_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBPvpData::~CharacterDBPvpData() {
  SharedDtor();
}

void CharacterDBPvpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBPvpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBPvpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBPvpData_descriptor_;
}

const CharacterDBPvpData& CharacterDBPvpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBPvpData* CharacterDBPvpData::default_instance_ = NULL;

CharacterDBPvpData* CharacterDBPvpData::New() const {
  return new CharacterDBPvpData;
}

void CharacterDBPvpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pk_mode_ = 0u;
    pk_killing_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBPvpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pk_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_mode_)));
          set_has_pk_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pk_killing_value;
        break;
      }

      // optional uint32 pk_killing_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_killing_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_killing_value_)));
          set_has_pk_killing_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBPvpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pk_mode = 1;
  if (has_pk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pk_mode(), output);
  }

  // optional uint32 pk_killing_value = 2;
  if (has_pk_killing_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pk_killing_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBPvpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pk_mode = 1;
  if (has_pk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pk_mode(), target);
  }

  // optional uint32 pk_killing_value = 2;
  if (has_pk_killing_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pk_killing_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBPvpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pk_mode = 1;
    if (has_pk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_mode());
    }

    // optional uint32 pk_killing_value = 2;
    if (has_pk_killing_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_killing_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBPvpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBPvpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBPvpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBPvpData::MergeFrom(const CharacterDBPvpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk_mode()) {
      set_pk_mode(from.pk_mode());
    }
    if (from.has_pk_killing_value()) {
      set_pk_killing_value(from.pk_killing_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBPvpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBPvpData::CopyFrom(const CharacterDBPvpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBPvpData::IsInitialized() const {

  return true;
}

void CharacterDBPvpData::Swap(CharacterDBPvpData* other) {
  if (other != this) {
    std::swap(pk_mode_, other->pk_mode_);
    std::swap(pk_killing_value_, other->pk_killing_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBPvpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBPvpData_descriptor_;
  metadata.reflection = CharacterDBPvpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBBaseInfo::kChannelIdFieldNumber;
const int CharacterDBBaseInfo::kUserIdFieldNumber;
const int CharacterDBBaseInfo::kUserNameFieldNumber;
const int CharacterDBBaseInfo::kCreateTimeFieldNumber;
const int CharacterDBBaseInfo::kLastSaveTimeFieldNumber;
const int CharacterDBBaseInfo::kOnlineTimeFieldNumber;
const int CharacterDBBaseInfo::kLoginTimeFieldNumber;
const int CharacterDBBaseInfo::kLogoutTimeFieldNumber;
const int CharacterDBBaseInfo::kCurrencyFieldNumber;
const int CharacterDBBaseInfo::kNameFieldNumber;
const int CharacterDBBaseInfo::kSexFieldNumber;
const int CharacterDBBaseInfo::kProfFieldNumber;
const int CharacterDBBaseInfo::kLevelFieldNumber;
const int CharacterDBBaseInfo::kExpFieldNumber;
const int CharacterDBBaseInfo::kHpFieldNumber;
const int CharacterDBBaseInfo::kFightPowerFieldNumber;
const int CharacterDBBaseInfo::kEnterSceneIdFieldNumber;
const int CharacterDBBaseInfo::kEnterPosXFieldNumber;
const int CharacterDBBaseInfo::kEnterPosYFieldNumber;
const int CharacterDBBaseInfo::kEnterPosZFieldNumber;
const int CharacterDBBaseInfo::kRaceFieldNumber;
const int CharacterDBBaseInfo::kEnterMapIdFieldNumber;
const int CharacterDBBaseInfo::kLastReviveTimeFieldNumber;
const int CharacterDBBaseInfo::kCurStateFieldNumber;
const int CharacterDBBaseInfo::kLastSceneIdFieldNumber;
const int CharacterDBBaseInfo::kLastMapIdFieldNumber;
const int CharacterDBBaseInfo::kLastPosXFieldNumber;
const int CharacterDBBaseInfo::kLastPosYFieldNumber;
const int CharacterDBBaseInfo::kLastPosZFieldNumber;
const int CharacterDBBaseInfo::kGoldFieldNumber;
const int CharacterDBBaseInfo::kBindgoldFieldNumber;
const int CharacterDBBaseInfo::kDiamondFieldNumber;
const int CharacterDBBaseInfo::kBinddiamondFieldNumber;
const int CharacterDBBaseInfo::kPowerFieldNumber;
const int CharacterDBBaseInfo::kIntelligenceFieldNumber;
const int CharacterDBBaseInfo::kAgilityFieldNumber;
const int CharacterDBBaseInfo::kPhysiqueFieldNumber;
const int CharacterDBBaseInfo::kEnduranceFieldNumber;
const int CharacterDBBaseInfo::kPrecisionFieldNumber;
const int CharacterDBBaseInfo::kMpFieldNumber;
const int CharacterDBBaseInfo::kVipFieldNumber;
const int CharacterDBBaseInfo::kCampFieldNumber;
const int CharacterDBBaseInfo::kCamplevFieldNumber;
const int CharacterDBBaseInfo::kMarriedFieldNumber;
const int CharacterDBBaseInfo::kCampkillingFieldNumber;
const int CharacterDBBaseInfo::kHostilekillingFieldNumber;
const int CharacterDBBaseInfo::kStaminaFieldNumber;
const int CharacterDBBaseInfo::kAttrPointFieldNumber;
const int CharacterDBBaseInfo::kPointPowerFieldNumber;
const int CharacterDBBaseInfo::kPointIntelligenceFieldNumber;
const int CharacterDBBaseInfo::kPointAgilityFieldNumber;
const int CharacterDBBaseInfo::kPointPhysiqueFieldNumber;
const int CharacterDBBaseInfo::kPointEnduranceFieldNumber;
const int CharacterDBBaseInfo::kPointPrecisionFieldNumber;
const int CharacterDBBaseInfo::kAutoPowerFieldNumber;
const int CharacterDBBaseInfo::kAutoIntelligenceFieldNumber;
const int CharacterDBBaseInfo::kAutoAgilityFieldNumber;
const int CharacterDBBaseInfo::kAutoPhysiqueFieldNumber;
const int CharacterDBBaseInfo::kAutoEnduranceFieldNumber;
const int CharacterDBBaseInfo::kAutoPrecisionFieldNumber;
const int CharacterDBBaseInfo::kAutoPointFieldNumber;
const int CharacterDBBaseInfo::kDuplicateIdFieldNumber;
const int CharacterDBBaseInfo::kOfficialFieldNumber;
const int CharacterDBBaseInfo::kKnightFieldNumber;
const int CharacterDBBaseInfo::kPvpDataFieldNumber;
#endif  // !_MSC_VER

CharacterDBBaseInfo::CharacterDBBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBBaseInfo::InitAsDefaultInstance() {
  pvpdata_ = const_cast< ::ProtoBuf::CharacterDBPvpData*>(&::ProtoBuf::CharacterDBPvpData::default_instance());
}

CharacterDBBaseInfo::CharacterDBBaseInfo(const CharacterDBBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = GOOGLE_ULONGLONG(0);
  lastsavetime_ = GOOGLE_ULONGLONG(0);
  onlinetime_ = GOOGLE_ULONGLONG(0);
  logintime_ = GOOGLE_ULONGLONG(0);
  logouttime_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  prof_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_LONGLONG(0);
  hp_ = 0u;
  fightpower_ = 0u;
  enter_scene_id_ = 0u;
  enterposx_ = 0;
  enterposy_ = 0;
  enterposz_ = 0;
  race_ = 0u;
  enter_map_id_ = 0u;
  lastrevivetime_ = GOOGLE_ULONGLONG(0);
  curstate_ = 0u;
  lastsceneid_ = 0u;
  lastmapid_ = 0u;
  lastposx_ = 0;
  lastposy_ = 0;
  lastposz_ = 0;
  gold_ = 0u;
  bindgold_ = 0u;
  diamond_ = 0u;
  binddiamond_ = 0u;
  power_ = 0u;
  intelligence_ = 0u;
  agility_ = 0u;
  physique_ = 0u;
  endurance_ = 0u;
  precision_ = 0u;
  mp_ = 0u;
  vip_ = 0u;
  camp_ = 0u;
  camplev_ = 0u;
  married_ = 0u;
  campkilling_ = 0u;
  hostilekilling_ = 0u;
  stamina_ = 0u;
  attr_point_ = 0u;
  pointpower_ = 0u;
  pointintelligence_ = 0u;
  pointagility_ = 0u;
  pointphysique_ = 0u;
  pointendurance_ = 0u;
  pointprecision_ = 0u;
  autopower_ = 0u;
  autointelligence_ = 0u;
  autoagility_ = 0u;
  autophysique_ = 0u;
  autoendurance_ = 0u;
  autoprecision_ = 0u;
  autopoint_ = 0u;
  duplicate_id_ = 0u;
  official_ = 0;
  knight_ = 0;
  pvpdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBBaseInfo::~CharacterDBBaseInfo() {
  SharedDtor();
}

void CharacterDBBaseInfo::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pvpdata_;
  }
}

void CharacterDBBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBBaseInfo_descriptor_;
}

const CharacterDBBaseInfo& CharacterDBBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBBaseInfo* CharacterDBBaseInfo::default_instance_ = NULL;

CharacterDBBaseInfo* CharacterDBBaseInfo::New() const {
  return new CharacterDBBaseInfo;
}

void CharacterDBBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    createtime_ = GOOGLE_ULONGLONG(0);
    lastsavetime_ = GOOGLE_ULONGLONG(0);
    onlinetime_ = GOOGLE_ULONGLONG(0);
    logintime_ = GOOGLE_ULONGLONG(0);
    logouttime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    prof_ = 0u;
    level_ = 0u;
    exp_ = GOOGLE_LONGLONG(0);
    hp_ = 0u;
    fightpower_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    enter_scene_id_ = 0u;
    enterposx_ = 0;
    enterposy_ = 0;
    enterposz_ = 0;
    race_ = 0u;
    enter_map_id_ = 0u;
    lastrevivetime_ = GOOGLE_ULONGLONG(0);
    curstate_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    lastsceneid_ = 0u;
    lastmapid_ = 0u;
    lastposx_ = 0;
    lastposy_ = 0;
    lastposz_ = 0;
    gold_ = 0u;
    bindgold_ = 0u;
    diamond_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    binddiamond_ = 0u;
    power_ = 0u;
    intelligence_ = 0u;
    agility_ = 0u;
    physique_ = 0u;
    endurance_ = 0u;
    precision_ = 0u;
    mp_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    vip_ = 0u;
    camp_ = 0u;
    camplev_ = 0u;
    married_ = 0u;
    campkilling_ = 0u;
    hostilekilling_ = 0u;
    stamina_ = 0u;
    attr_point_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    pointpower_ = 0u;
    pointintelligence_ = 0u;
    pointagility_ = 0u;
    pointphysique_ = 0u;
    pointendurance_ = 0u;
    pointprecision_ = 0u;
    autopower_ = 0u;
    autointelligence_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    autoagility_ = 0u;
    autophysique_ = 0u;
    autoendurance_ = 0u;
    autoprecision_ = 0u;
    autopoint_ = 0u;
    duplicate_id_ = 0u;
    official_ = 0;
    knight_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has_pvpdata()) {
      if (pvpdata_ != NULL) pvpdata_->::ProtoBuf::CharacterDBPvpData::Clear();
    }
  }
  currency_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userId;
        break;
      }

      // required string userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }

      // required string userName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createTime;
        break;
      }

      // required uint64 createTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastSaveTime;
        break;
      }

      // required uint64 lastSaveTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSaveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsavetime_)));
          set_has_lastsavetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_onlineTime;
        break;
      }

      // required uint64 onlineTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loginTime;
        break;
      }

      // required uint64 loginTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_logoutTime;
        break;
      }

      // required uint64 logoutTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logouttime_)));
          set_has_logouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_currency;
        break;
      }

      // repeated .ProtoBuf.ValueCurrency currency = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_currency;
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // required string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sex;
        break;
      }

      // required uint32 sex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prof;
        break;
      }

      // required uint32 prof = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_level;
        break;
      }

      // required uint32 level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_exp;
        break;
      }

      // required int64 exp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hp;
        break;
      }

      // required uint32 hp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fightPower;
        break;
      }

      // required uint32 fightPower = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_enter_scene_id;
        break;
      }

      // required uint32 enter_scene_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enter_scene_id_)));
          set_has_enter_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_enterPosX;
        break;
      }

      // required float enterPosX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposx_)));
          set_has_enterposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_enterPosY;
        break;
      }

      // required float enterPosY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposy_)));
          set_has_enterposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_enterPosZ;
        break;
      }

      // required float enterPosZ = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposz_)));
          set_has_enterposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_race;
        break;
      }

      // required uint32 race = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_enter_map_id;
        break;
      }

      // required uint32 enter_map_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enter_map_id_)));
          set_has_enter_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_lastReviveTime;
        break;
      }

      // optional uint64 lastReviveTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastReviveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrevivetime_)));
          set_has_lastrevivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_curState;
        break;
      }

      // optional uint32 curState = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_lastSceneId;
        break;
      }

      // optional uint32 lastSceneId = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_lastMapId;
        break;
      }

      // optional uint32 lastMapId = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_lastPosX;
        break;
      }

      // optional float lastPosX = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposx_)));
          set_has_lastposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_lastPosY;
        break;
      }

      // optional float lastPosY = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposy_)));
          set_has_lastposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_lastPosZ;
        break;
      }

      // optional float lastPosZ = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastPosZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposz_)));
          set_has_lastposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_bindgold;
        break;
      }

      // optional uint32 bindgold = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_binddiamond;
        break;
      }

      // optional uint32 binddiamond = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binddiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_power;
        break;
      }

      // optional uint32 power = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_intelligence;
        break;
      }

      // optional uint32 intelligence = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_agility;
        break;
      }

      // optional uint32 agility = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_physique;
        break;
      }

      // optional uint32 physique = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physique_)));
          set_has_physique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_endurance;
        break;
      }

      // optional uint32 endurance = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endurance_)));
          set_has_endurance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_precision;
        break;
      }

      // optional uint32 precision = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_mp;
        break;
      }

      // optional uint32 mp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_camp;
        break;
      }

      // optional uint32 camp = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_camplev;
        break;
      }

      // optional uint32 camplev = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camplev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camplev_)));
          set_has_camplev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_married;
        break;
      }

      // optional uint32 married = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_married:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &married_)));
          set_has_married();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_campkilling;
        break;
      }

      // optional uint32 campkilling = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campkilling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campkilling_)));
          set_has_campkilling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_hostilekilling;
        break;
      }

      // optional uint32 hostilekilling = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hostilekilling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hostilekilling_)));
          set_has_hostilekilling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_stamina;
        break;
      }

      // optional uint32 stamina = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_attr_point;
        break;
      }

      // optional uint32 attr_point = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_point_)));
          set_has_attr_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_pointPower;
        break;
      }

      // optional uint32 pointPower = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointpower_)));
          set_has_pointpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_pointIntelligence;
        break;
      }

      // optional uint32 pointIntelligence = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointIntelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointintelligence_)));
          set_has_pointintelligence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_pointAgility;
        break;
      }

      // optional uint32 pointAgility = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointAgility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointagility_)));
          set_has_pointagility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_pointPhysique;
        break;
      }

      // optional uint32 pointPhysique = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointPhysique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointphysique_)));
          set_has_pointphysique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_pointEndurance;
        break;
      }

      // optional uint32 pointEndurance = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointEndurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointendurance_)));
          set_has_pointendurance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_pointPrecision;
        break;
      }

      // optional uint32 pointPrecision = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointPrecision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointprecision_)));
          set_has_pointprecision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_autoPower;
        break;
      }

      // optional uint32 autoPower = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autopower_)));
          set_has_autopower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_autoIntelligence;
        break;
      }

      // optional uint32 autoIntelligence = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoIntelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autointelligence_)));
          set_has_autointelligence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_autoAgility;
        break;
      }

      // optional uint32 autoAgility = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoAgility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autoagility_)));
          set_has_autoagility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_autoPhysique;
        break;
      }

      // optional uint32 autoPhysique = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoPhysique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autophysique_)));
          set_has_autophysique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_autoEndurance;
        break;
      }

      // optional uint32 autoEndurance = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoEndurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autoendurance_)));
          set_has_autoendurance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_autoPrecision;
        break;
      }

      // optional uint32 autoPrecision = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoPrecision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autoprecision_)));
          set_has_autoprecision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_autoPoint;
        break;
      }

      // optional uint32 autoPoint = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autopoint_)));
          set_has_autopoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_duplicate_id;
        break;
      }

      // optional uint32 duplicate_id = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_official;
        break;
      }

      // optional int32 official = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_knight;
        break;
      }

      // optional int32 knight = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knight_)));
          set_has_knight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_pvpData;
        break;
      }

      // optional .ProtoBuf.CharacterDBPvpData pvpData = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvpData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvpdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channelid(), output);
  }

  // required string userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }

  // required uint64 createTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->createtime(), output);
  }

  // required uint64 lastSaveTime = 5;
  if (has_lastsavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastsavetime(), output);
  }

  // required uint64 onlineTime = 6;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->onlinetime(), output);
  }

  // required uint64 loginTime = 7;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->logintime(), output);
  }

  // required uint64 logoutTime = 8;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->logouttime(), output);
  }

  // repeated .ProtoBuf.ValueCurrency currency = 9;
  for (int i = 0; i < this->currency_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->currency(i), output);
  }

  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // required uint32 sex = 11;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sex(), output);
  }

  // required uint32 prof = 12;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->prof(), output);
  }

  // required uint32 level = 13;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->level(), output);
  }

  // required int64 exp = 14;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->exp(), output);
  }

  // required uint32 hp = 15;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->hp(), output);
  }

  // required uint32 fightPower = 16;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fightpower(), output);
  }

  // required uint32 enter_scene_id = 17;
  if (has_enter_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->enter_scene_id(), output);
  }

  // required float enterPosX = 18;
  if (has_enterposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->enterposx(), output);
  }

  // required float enterPosY = 19;
  if (has_enterposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->enterposy(), output);
  }

  // required float enterPosZ = 20;
  if (has_enterposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->enterposz(), output);
  }

  // required uint32 race = 21;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->race(), output);
  }

  // required uint32 enter_map_id = 22;
  if (has_enter_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->enter_map_id(), output);
  }

  // optional uint64 lastReviveTime = 23;
  if (has_lastrevivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->lastrevivetime(), output);
  }

  // optional uint32 curState = 24;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->curstate(), output);
  }

  // optional uint32 lastSceneId = 25;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->lastsceneid(), output);
  }

  // optional uint32 lastMapId = 26;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->lastmapid(), output);
  }

  // optional float lastPosX = 27;
  if (has_lastposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->lastposx(), output);
  }

  // optional float lastPosY = 28;
  if (has_lastposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->lastposy(), output);
  }

  // optional float lastPosZ = 29;
  if (has_lastposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->lastposz(), output);
  }

  // optional uint32 gold = 30;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->gold(), output);
  }

  // optional uint32 bindgold = 31;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->bindgold(), output);
  }

  // optional uint32 diamond = 32;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->diamond(), output);
  }

  // optional uint32 binddiamond = 33;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->binddiamond(), output);
  }

  // optional uint32 power = 34;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->power(), output);
  }

  // optional uint32 intelligence = 35;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->intelligence(), output);
  }

  // optional uint32 agility = 36;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->agility(), output);
  }

  // optional uint32 physique = 37;
  if (has_physique()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->physique(), output);
  }

  // optional uint32 endurance = 38;
  if (has_endurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->endurance(), output);
  }

  // optional uint32 precision = 39;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->precision(), output);
  }

  // optional uint32 mp = 40;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->mp(), output);
  }

  // optional uint32 vip = 41;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->vip(), output);
  }

  // optional uint32 camp = 42;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->camp(), output);
  }

  // optional uint32 camplev = 43;
  if (has_camplev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->camplev(), output);
  }

  // optional uint32 married = 44;
  if (has_married()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->married(), output);
  }

  // optional uint32 campkilling = 45;
  if (has_campkilling()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->campkilling(), output);
  }

  // optional uint32 hostilekilling = 46;
  if (has_hostilekilling()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->hostilekilling(), output);
  }

  // optional uint32 stamina = 47;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->stamina(), output);
  }

  // optional uint32 attr_point = 48;
  if (has_attr_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->attr_point(), output);
  }

  // optional uint32 pointPower = 49;
  if (has_pointpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->pointpower(), output);
  }

  // optional uint32 pointIntelligence = 50;
  if (has_pointintelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->pointintelligence(), output);
  }

  // optional uint32 pointAgility = 51;
  if (has_pointagility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->pointagility(), output);
  }

  // optional uint32 pointPhysique = 52;
  if (has_pointphysique()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->pointphysique(), output);
  }

  // optional uint32 pointEndurance = 53;
  if (has_pointendurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->pointendurance(), output);
  }

  // optional uint32 pointPrecision = 54;
  if (has_pointprecision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->pointprecision(), output);
  }

  // optional uint32 autoPower = 55;
  if (has_autopower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->autopower(), output);
  }

  // optional uint32 autoIntelligence = 56;
  if (has_autointelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->autointelligence(), output);
  }

  // optional uint32 autoAgility = 57;
  if (has_autoagility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->autoagility(), output);
  }

  // optional uint32 autoPhysique = 58;
  if (has_autophysique()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->autophysique(), output);
  }

  // optional uint32 autoEndurance = 59;
  if (has_autoendurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->autoendurance(), output);
  }

  // optional uint32 autoPrecision = 60;
  if (has_autoprecision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->autoprecision(), output);
  }

  // optional uint32 autoPoint = 61;
  if (has_autopoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->autopoint(), output);
  }

  // optional uint32 duplicate_id = 62;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->duplicate_id(), output);
  }

  // optional int32 official = 63;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->official(), output);
  }

  // optional int32 knight = 64;
  if (has_knight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->knight(), output);
  }

  // optional .ProtoBuf.CharacterDBPvpData pvpData = 65;
  if (has_pvpdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->pvpdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channelid(), target);
  }

  // required string userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // required uint64 createTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->createtime(), target);
  }

  // required uint64 lastSaveTime = 5;
  if (has_lastsavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lastsavetime(), target);
  }

  // required uint64 onlineTime = 6;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->onlinetime(), target);
  }

  // required uint64 loginTime = 7;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->logintime(), target);
  }

  // required uint64 logoutTime = 8;
  if (has_logouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->logouttime(), target);
  }

  // repeated .ProtoBuf.ValueCurrency currency = 9;
  for (int i = 0; i < this->currency_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->currency(i), target);
  }

  // required string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // required uint32 sex = 11;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sex(), target);
  }

  // required uint32 prof = 12;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->prof(), target);
  }

  // required uint32 level = 13;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->level(), target);
  }

  // required int64 exp = 14;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->exp(), target);
  }

  // required uint32 hp = 15;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->hp(), target);
  }

  // required uint32 fightPower = 16;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fightpower(), target);
  }

  // required uint32 enter_scene_id = 17;
  if (has_enter_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->enter_scene_id(), target);
  }

  // required float enterPosX = 18;
  if (has_enterposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->enterposx(), target);
  }

  // required float enterPosY = 19;
  if (has_enterposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->enterposy(), target);
  }

  // required float enterPosZ = 20;
  if (has_enterposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->enterposz(), target);
  }

  // required uint32 race = 21;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->race(), target);
  }

  // required uint32 enter_map_id = 22;
  if (has_enter_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->enter_map_id(), target);
  }

  // optional uint64 lastReviveTime = 23;
  if (has_lastrevivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->lastrevivetime(), target);
  }

  // optional uint32 curState = 24;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->curstate(), target);
  }

  // optional uint32 lastSceneId = 25;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->lastsceneid(), target);
  }

  // optional uint32 lastMapId = 26;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->lastmapid(), target);
  }

  // optional float lastPosX = 27;
  if (has_lastposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->lastposx(), target);
  }

  // optional float lastPosY = 28;
  if (has_lastposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->lastposy(), target);
  }

  // optional float lastPosZ = 29;
  if (has_lastposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->lastposz(), target);
  }

  // optional uint32 gold = 30;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->gold(), target);
  }

  // optional uint32 bindgold = 31;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->bindgold(), target);
  }

  // optional uint32 diamond = 32;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->diamond(), target);
  }

  // optional uint32 binddiamond = 33;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->binddiamond(), target);
  }

  // optional uint32 power = 34;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->power(), target);
  }

  // optional uint32 intelligence = 35;
  if (has_intelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->intelligence(), target);
  }

  // optional uint32 agility = 36;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->agility(), target);
  }

  // optional uint32 physique = 37;
  if (has_physique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->physique(), target);
  }

  // optional uint32 endurance = 38;
  if (has_endurance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->endurance(), target);
  }

  // optional uint32 precision = 39;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->precision(), target);
  }

  // optional uint32 mp = 40;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->mp(), target);
  }

  // optional uint32 vip = 41;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->vip(), target);
  }

  // optional uint32 camp = 42;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->camp(), target);
  }

  // optional uint32 camplev = 43;
  if (has_camplev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->camplev(), target);
  }

  // optional uint32 married = 44;
  if (has_married()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->married(), target);
  }

  // optional uint32 campkilling = 45;
  if (has_campkilling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->campkilling(), target);
  }

  // optional uint32 hostilekilling = 46;
  if (has_hostilekilling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->hostilekilling(), target);
  }

  // optional uint32 stamina = 47;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->stamina(), target);
  }

  // optional uint32 attr_point = 48;
  if (has_attr_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->attr_point(), target);
  }

  // optional uint32 pointPower = 49;
  if (has_pointpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->pointpower(), target);
  }

  // optional uint32 pointIntelligence = 50;
  if (has_pointintelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->pointintelligence(), target);
  }

  // optional uint32 pointAgility = 51;
  if (has_pointagility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->pointagility(), target);
  }

  // optional uint32 pointPhysique = 52;
  if (has_pointphysique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->pointphysique(), target);
  }

  // optional uint32 pointEndurance = 53;
  if (has_pointendurance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->pointendurance(), target);
  }

  // optional uint32 pointPrecision = 54;
  if (has_pointprecision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->pointprecision(), target);
  }

  // optional uint32 autoPower = 55;
  if (has_autopower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->autopower(), target);
  }

  // optional uint32 autoIntelligence = 56;
  if (has_autointelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->autointelligence(), target);
  }

  // optional uint32 autoAgility = 57;
  if (has_autoagility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->autoagility(), target);
  }

  // optional uint32 autoPhysique = 58;
  if (has_autophysique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->autophysique(), target);
  }

  // optional uint32 autoEndurance = 59;
  if (has_autoendurance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->autoendurance(), target);
  }

  // optional uint32 autoPrecision = 60;
  if (has_autoprecision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->autoprecision(), target);
  }

  // optional uint32 autoPoint = 61;
  if (has_autopoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->autopoint(), target);
  }

  // optional uint32 duplicate_id = 62;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->duplicate_id(), target);
  }

  // optional int32 official = 63;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->official(), target);
  }

  // optional int32 knight = 64;
  if (has_knight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->knight(), target);
  }

  // optional .ProtoBuf.CharacterDBPvpData pvpData = 65;
  if (has_pvpdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->pvpdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channelId = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string userName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required uint64 createTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // required uint64 lastSaveTime = 5;
    if (has_lastsavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsavetime());
    }

    // required uint64 onlineTime = 6;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->onlinetime());
    }

    // required uint64 loginTime = 7;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintime());
    }

    // required uint64 logoutTime = 8;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logouttime());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 sex = 11;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 prof = 12;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required int64 exp = 14;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required uint32 hp = 15;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 fightPower = 16;
    if (has_fightpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 enter_scene_id = 17;
    if (has_enter_scene_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enter_scene_id());
    }

    // required float enterPosX = 18;
    if (has_enterposx()) {
      total_size += 2 + 4;
    }

    // required float enterPosY = 19;
    if (has_enterposy()) {
      total_size += 2 + 4;
    }

    // required float enterPosZ = 20;
    if (has_enterposz()) {
      total_size += 2 + 4;
    }

    // required uint32 race = 21;
    if (has_race()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->race());
    }

    // required uint32 enter_map_id = 22;
    if (has_enter_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enter_map_id());
    }

    // optional uint64 lastReviveTime = 23;
    if (has_lastrevivetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrevivetime());
    }

    // optional uint32 curState = 24;
    if (has_curstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 lastSceneId = 25;
    if (has_lastsceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastsceneid());
    }

    // optional uint32 lastMapId = 26;
    if (has_lastmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmapid());
    }

    // optional float lastPosX = 27;
    if (has_lastposx()) {
      total_size += 2 + 4;
    }

    // optional float lastPosY = 28;
    if (has_lastposy()) {
      total_size += 2 + 4;
    }

    // optional float lastPosZ = 29;
    if (has_lastposz()) {
      total_size += 2 + 4;
    }

    // optional uint32 gold = 30;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 bindgold = 31;
    if (has_bindgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindgold());
    }

    // optional uint32 diamond = 32;
    if (has_diamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 binddiamond = 33;
    if (has_binddiamond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binddiamond());
    }

    // optional uint32 power = 34;
    if (has_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 intelligence = 35;
    if (has_intelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional uint32 agility = 36;
    if (has_agility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional uint32 physique = 37;
    if (has_physique()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physique());
    }

    // optional uint32 endurance = 38;
    if (has_endurance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endurance());
    }

    // optional uint32 precision = 39;
    if (has_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precision());
    }

    // optional uint32 mp = 40;
    if (has_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 vip = 41;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional uint32 camp = 42;
    if (has_camp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp());
    }

    // optional uint32 camplev = 43;
    if (has_camplev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camplev());
    }

    // optional uint32 married = 44;
    if (has_married()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->married());
    }

    // optional uint32 campkilling = 45;
    if (has_campkilling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campkilling());
    }

    // optional uint32 hostilekilling = 46;
    if (has_hostilekilling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hostilekilling());
    }

    // optional uint32 stamina = 47;
    if (has_stamina()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamina());
    }

    // optional uint32 attr_point = 48;
    if (has_attr_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_point());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 pointPower = 49;
    if (has_pointpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointpower());
    }

    // optional uint32 pointIntelligence = 50;
    if (has_pointintelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointintelligence());
    }

    // optional uint32 pointAgility = 51;
    if (has_pointagility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointagility());
    }

    // optional uint32 pointPhysique = 52;
    if (has_pointphysique()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointphysique());
    }

    // optional uint32 pointEndurance = 53;
    if (has_pointendurance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointendurance());
    }

    // optional uint32 pointPrecision = 54;
    if (has_pointprecision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointprecision());
    }

    // optional uint32 autoPower = 55;
    if (has_autopower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autopower());
    }

    // optional uint32 autoIntelligence = 56;
    if (has_autointelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autointelligence());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 autoAgility = 57;
    if (has_autoagility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autoagility());
    }

    // optional uint32 autoPhysique = 58;
    if (has_autophysique()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autophysique());
    }

    // optional uint32 autoEndurance = 59;
    if (has_autoendurance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autoendurance());
    }

    // optional uint32 autoPrecision = 60;
    if (has_autoprecision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autoprecision());
    }

    // optional uint32 autoPoint = 61;
    if (has_autopoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autopoint());
    }

    // optional uint32 duplicate_id = 62;
    if (has_duplicate_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // optional int32 official = 63;
    if (has_official()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // optional int32 knight = 64;
    if (has_knight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knight());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .ProtoBuf.CharacterDBPvpData pvpData = 65;
    if (has_pvpdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvpdata());
    }

  }
  // repeated .ProtoBuf.ValueCurrency currency = 9;
  total_size += 1 * this->currency_size();
  for (int i = 0; i < this->currency_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currency(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBBaseInfo::MergeFrom(const CharacterDBBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  currency_.MergeFrom(from.currency_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_lastsavetime()) {
      set_lastsavetime(from.lastsavetime());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_enter_scene_id()) {
      set_enter_scene_id(from.enter_scene_id());
    }
    if (from.has_enterposx()) {
      set_enterposx(from.enterposx());
    }
    if (from.has_enterposy()) {
      set_enterposy(from.enterposy());
    }
    if (from.has_enterposz()) {
      set_enterposz(from.enterposz());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_enter_map_id()) {
      set_enter_map_id(from.enter_map_id());
    }
    if (from.has_lastrevivetime()) {
      set_lastrevivetime(from.lastrevivetime());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_lastposx()) {
      set_lastposx(from.lastposx());
    }
    if (from.has_lastposy()) {
      set_lastposy(from.lastposy());
    }
    if (from.has_lastposz()) {
      set_lastposz(from.lastposz());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_physique()) {
      set_physique(from.physique());
    }
    if (from.has_endurance()) {
      set_endurance(from.endurance());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_camplev()) {
      set_camplev(from.camplev());
    }
    if (from.has_married()) {
      set_married(from.married());
    }
    if (from.has_campkilling()) {
      set_campkilling(from.campkilling());
    }
    if (from.has_hostilekilling()) {
      set_hostilekilling(from.hostilekilling());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_attr_point()) {
      set_attr_point(from.attr_point());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_pointpower()) {
      set_pointpower(from.pointpower());
    }
    if (from.has_pointintelligence()) {
      set_pointintelligence(from.pointintelligence());
    }
    if (from.has_pointagility()) {
      set_pointagility(from.pointagility());
    }
    if (from.has_pointphysique()) {
      set_pointphysique(from.pointphysique());
    }
    if (from.has_pointendurance()) {
      set_pointendurance(from.pointendurance());
    }
    if (from.has_pointprecision()) {
      set_pointprecision(from.pointprecision());
    }
    if (from.has_autopower()) {
      set_autopower(from.autopower());
    }
    if (from.has_autointelligence()) {
      set_autointelligence(from.autointelligence());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_autoagility()) {
      set_autoagility(from.autoagility());
    }
    if (from.has_autophysique()) {
      set_autophysique(from.autophysique());
    }
    if (from.has_autoendurance()) {
      set_autoendurance(from.autoendurance());
    }
    if (from.has_autoprecision()) {
      set_autoprecision(from.autoprecision());
    }
    if (from.has_autopoint()) {
      set_autopoint(from.autopoint());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_knight()) {
      set_knight(from.knight());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_pvpdata()) {
      mutable_pvpdata()->::ProtoBuf::CharacterDBPvpData::MergeFrom(from.pvpdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBBaseInfo::CopyFrom(const CharacterDBBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x003ffeff) != 0x003ffeff) return false;

  for (int i = 0; i < currency_size(); i++) {
    if (!this->currency(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDBBaseInfo::Swap(CharacterDBBaseInfo* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(createtime_, other->createtime_);
    std::swap(lastsavetime_, other->lastsavetime_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(logintime_, other->logintime_);
    std::swap(logouttime_, other->logouttime_);
    currency_.Swap(&other->currency_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(enter_scene_id_, other->enter_scene_id_);
    std::swap(enterposx_, other->enterposx_);
    std::swap(enterposy_, other->enterposy_);
    std::swap(enterposz_, other->enterposz_);
    std::swap(race_, other->race_);
    std::swap(enter_map_id_, other->enter_map_id_);
    std::swap(lastrevivetime_, other->lastrevivetime_);
    std::swap(curstate_, other->curstate_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastposx_, other->lastposx_);
    std::swap(lastposy_, other->lastposy_);
    std::swap(lastposz_, other->lastposz_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(power_, other->power_);
    std::swap(intelligence_, other->intelligence_);
    std::swap(agility_, other->agility_);
    std::swap(physique_, other->physique_);
    std::swap(endurance_, other->endurance_);
    std::swap(precision_, other->precision_);
    std::swap(mp_, other->mp_);
    std::swap(vip_, other->vip_);
    std::swap(camp_, other->camp_);
    std::swap(camplev_, other->camplev_);
    std::swap(married_, other->married_);
    std::swap(campkilling_, other->campkilling_);
    std::swap(hostilekilling_, other->hostilekilling_);
    std::swap(stamina_, other->stamina_);
    std::swap(attr_point_, other->attr_point_);
    std::swap(pointpower_, other->pointpower_);
    std::swap(pointintelligence_, other->pointintelligence_);
    std::swap(pointagility_, other->pointagility_);
    std::swap(pointphysique_, other->pointphysique_);
    std::swap(pointendurance_, other->pointendurance_);
    std::swap(pointprecision_, other->pointprecision_);
    std::swap(autopower_, other->autopower_);
    std::swap(autointelligence_, other->autointelligence_);
    std::swap(autoagility_, other->autoagility_);
    std::swap(autophysique_, other->autophysique_);
    std::swap(autoendurance_, other->autoendurance_);
    std::swap(autoprecision_, other->autoprecision_);
    std::swap(autopoint_, other->autopoint_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(official_, other->official_);
    std::swap(knight_, other->knight_);
    std::swap(pvpdata_, other->pvpdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBBaseInfo_descriptor_;
  metadata.reflection = CharacterDBBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBTaskData::kEffPreConditionFieldNumber;
const int CharacterDBTaskData::kSubmitMissionFieldNumber;
const int CharacterDBTaskData::kWithoutPreCompleteFieldNumber;
const int CharacterDBTaskData::kMissionTrackFieldNumber;
const int CharacterDBTaskData::kAssignListFieldNumber;
const int CharacterDBTaskData::kCampMissionInfoFieldNumber;
const int CharacterDBTaskData::kLoopMissionInfoFieldNumber;
#endif  // !_MSC_VER

CharacterDBTaskData::CharacterDBTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBTaskData::InitAsDefaultInstance() {
  campmissioninfo_ = const_cast< ::ProtoBuf::CharacterDBCampMissionInfo*>(&::ProtoBuf::CharacterDBCampMissionInfo::default_instance());
  loopmissioninfo_ = const_cast< ::ProtoBuf::CharacterDBLoopMissionInfo*>(&::ProtoBuf::CharacterDBLoopMissionInfo::default_instance());
}

CharacterDBTaskData::CharacterDBTaskData(const CharacterDBTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBTaskData::SharedCtor() {
  _cached_size_ = 0;
  campmissioninfo_ = NULL;
  loopmissioninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBTaskData::~CharacterDBTaskData() {
  SharedDtor();
}

void CharacterDBTaskData::SharedDtor() {
  if (this != default_instance_) {
    delete campmissioninfo_;
    delete loopmissioninfo_;
  }
}

void CharacterDBTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBTaskData_descriptor_;
}

const CharacterDBTaskData& CharacterDBTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBTaskData* CharacterDBTaskData::default_instance_ = NULL;

CharacterDBTaskData* CharacterDBTaskData::New() const {
  return new CharacterDBTaskData;
}

void CharacterDBTaskData::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (has_campmissioninfo()) {
      if (campmissioninfo_ != NULL) campmissioninfo_->::ProtoBuf::CharacterDBCampMissionInfo::Clear();
    }
    if (has_loopmissioninfo()) {
      if (loopmissioninfo_ != NULL) loopmissioninfo_->::ProtoBuf::CharacterDBLoopMissionInfo::Clear();
    }
  }
  effprecondition_.Clear();
  submitmission_.Clear();
  withoutprecomplete_.Clear();
  missiontrack_.Clear();
  assignlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterDBEffPreCondition effPreCondition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effPreCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effprecondition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effPreCondition;
        if (input->ExpectTag(18)) goto parse_submitMission;
        break;
      }

      // repeated .ProtoBuf.CharacterDBSubmittedMission submitMission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submitMission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_submitmission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_submitMission;
        if (input->ExpectTag(26)) goto parse_withoutPreComplete;
        break;
      }

      // repeated .ProtoBuf.CharacterDBWithoutPreComplete withoutPreComplete = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_withoutPreComplete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_withoutprecomplete()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_withoutPreComplete;
        if (input->ExpectTag(34)) goto parse_missionTrack;
        break;
      }

      // repeated .ProtoBuf.CharacterDBMissionTrack missionTrack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missiontrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_missionTrack;
        if (input->ExpectTag(40)) goto parse_assignList;
        break;
      }

      // repeated uint32 assignList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assignList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_assignlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_assignlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_assignList;
        if (input->ExpectTag(50)) goto parse_campMissionInfo;
        break;
      }

      // optional .ProtoBuf.CharacterDBCampMissionInfo campMissionInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campMissionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_campmissioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_loopMissionInfo;
        break;
      }

      // optional .ProtoBuf.CharacterDBLoopMissionInfo loopMissionInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loopMissionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loopmissioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterDBEffPreCondition effPreCondition = 1;
  for (int i = 0; i < this->effprecondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->effprecondition(i), output);
  }

  // repeated .ProtoBuf.CharacterDBSubmittedMission submitMission = 2;
  for (int i = 0; i < this->submitmission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->submitmission(i), output);
  }

  // repeated .ProtoBuf.CharacterDBWithoutPreComplete withoutPreComplete = 3;
  for (int i = 0; i < this->withoutprecomplete_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->withoutprecomplete(i), output);
  }

  // repeated .ProtoBuf.CharacterDBMissionTrack missionTrack = 4;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->missiontrack(i), output);
  }

  // repeated uint32 assignList = 5;
  for (int i = 0; i < this->assignlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->assignlist(i), output);
  }

  // optional .ProtoBuf.CharacterDBCampMissionInfo campMissionInfo = 6;
  if (has_campmissioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->campmissioninfo(), output);
  }

  // optional .ProtoBuf.CharacterDBLoopMissionInfo loopMissionInfo = 7;
  if (has_loopmissioninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->loopmissioninfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterDBEffPreCondition effPreCondition = 1;
  for (int i = 0; i < this->effprecondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->effprecondition(i), target);
  }

  // repeated .ProtoBuf.CharacterDBSubmittedMission submitMission = 2;
  for (int i = 0; i < this->submitmission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->submitmission(i), target);
  }

  // repeated .ProtoBuf.CharacterDBWithoutPreComplete withoutPreComplete = 3;
  for (int i = 0; i < this->withoutprecomplete_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->withoutprecomplete(i), target);
  }

  // repeated .ProtoBuf.CharacterDBMissionTrack missionTrack = 4;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->missiontrack(i), target);
  }

  // repeated uint32 assignList = 5;
  for (int i = 0; i < this->assignlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->assignlist(i), target);
  }

  // optional .ProtoBuf.CharacterDBCampMissionInfo campMissionInfo = 6;
  if (has_campmissioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->campmissioninfo(), target);
  }

  // optional .ProtoBuf.CharacterDBLoopMissionInfo loopMissionInfo = 7;
  if (has_loopmissioninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->loopmissioninfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional .ProtoBuf.CharacterDBCampMissionInfo campMissionInfo = 6;
    if (has_campmissioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->campmissioninfo());
    }

    // optional .ProtoBuf.CharacterDBLoopMissionInfo loopMissionInfo = 7;
    if (has_loopmissioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loopmissioninfo());
    }

  }
  // repeated .ProtoBuf.CharacterDBEffPreCondition effPreCondition = 1;
  total_size += 1 * this->effprecondition_size();
  for (int i = 0; i < this->effprecondition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effprecondition(i));
  }

  // repeated .ProtoBuf.CharacterDBSubmittedMission submitMission = 2;
  total_size += 1 * this->submitmission_size();
  for (int i = 0; i < this->submitmission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->submitmission(i));
  }

  // repeated .ProtoBuf.CharacterDBWithoutPreComplete withoutPreComplete = 3;
  total_size += 1 * this->withoutprecomplete_size();
  for (int i = 0; i < this->withoutprecomplete_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->withoutprecomplete(i));
  }

  // repeated .ProtoBuf.CharacterDBMissionTrack missionTrack = 4;
  total_size += 1 * this->missiontrack_size();
  for (int i = 0; i < this->missiontrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missiontrack(i));
  }

  // repeated uint32 assignList = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->assignlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->assignlist(i));
    }
    total_size += 1 * this->assignlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBTaskData::MergeFrom(const CharacterDBTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  effprecondition_.MergeFrom(from.effprecondition_);
  submitmission_.MergeFrom(from.submitmission_);
  withoutprecomplete_.MergeFrom(from.withoutprecomplete_);
  missiontrack_.MergeFrom(from.missiontrack_);
  assignlist_.MergeFrom(from.assignlist_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_campmissioninfo()) {
      mutable_campmissioninfo()->::ProtoBuf::CharacterDBCampMissionInfo::MergeFrom(from.campmissioninfo());
    }
    if (from.has_loopmissioninfo()) {
      mutable_loopmissioninfo()->::ProtoBuf::CharacterDBLoopMissionInfo::MergeFrom(from.loopmissioninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBTaskData::CopyFrom(const CharacterDBTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBTaskData::IsInitialized() const {

  return true;
}

void CharacterDBTaskData::Swap(CharacterDBTaskData* other) {
  if (other != this) {
    effprecondition_.Swap(&other->effprecondition_);
    submitmission_.Swap(&other->submitmission_);
    withoutprecomplete_.Swap(&other->withoutprecomplete_);
    missiontrack_.Swap(&other->missiontrack_);
    assignlist_.Swap(&other->assignlist_);
    std::swap(campmissioninfo_, other->campmissioninfo_);
    std::swap(loopmissioninfo_, other->loopmissioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBTaskData_descriptor_;
  metadata.reflection = CharacterDBTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBEffPreCondition::kMissionIdFieldNumber;
const int CharacterDBEffPreCondition::kTimeFieldNumber;
#endif  // !_MSC_VER

CharacterDBEffPreCondition::CharacterDBEffPreCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBEffPreCondition::InitAsDefaultInstance() {
}

CharacterDBEffPreCondition::CharacterDBEffPreCondition(const CharacterDBEffPreCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBEffPreCondition::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBEffPreCondition::~CharacterDBEffPreCondition() {
  SharedDtor();
}

void CharacterDBEffPreCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBEffPreCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBEffPreCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBEffPreCondition_descriptor_;
}

const CharacterDBEffPreCondition& CharacterDBEffPreCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBEffPreCondition* CharacterDBEffPreCondition::default_instance_ = NULL;

CharacterDBEffPreCondition* CharacterDBEffPreCondition::New() const {
  return new CharacterDBEffPreCondition;
}

void CharacterDBEffPreCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBEffPreCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBEffPreCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBEffPreCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBEffPreCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBEffPreCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBEffPreCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBEffPreCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBEffPreCondition::MergeFrom(const CharacterDBEffPreCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBEffPreCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBEffPreCondition::CopyFrom(const CharacterDBEffPreCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBEffPreCondition::IsInitialized() const {

  return true;
}

void CharacterDBEffPreCondition::Swap(CharacterDBEffPreCondition* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBEffPreCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBEffPreCondition_descriptor_;
  metadata.reflection = CharacterDBEffPreCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSubmittedMission::kMissionIdFieldNumber;
const int CharacterDBSubmittedMission::kTimesFieldNumber;
#endif  // !_MSC_VER

CharacterDBSubmittedMission::CharacterDBSubmittedMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSubmittedMission::InitAsDefaultInstance() {
}

CharacterDBSubmittedMission::CharacterDBSubmittedMission(const CharacterDBSubmittedMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSubmittedMission::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSubmittedMission::~CharacterDBSubmittedMission() {
  SharedDtor();
}

void CharacterDBSubmittedMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSubmittedMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSubmittedMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSubmittedMission_descriptor_;
}

const CharacterDBSubmittedMission& CharacterDBSubmittedMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBSubmittedMission* CharacterDBSubmittedMission::default_instance_ = NULL;

CharacterDBSubmittedMission* CharacterDBSubmittedMission::New() const {
  return new CharacterDBSubmittedMission;
}

void CharacterDBSubmittedMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSubmittedMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSubmittedMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSubmittedMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSubmittedMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSubmittedMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSubmittedMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSubmittedMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSubmittedMission::MergeFrom(const CharacterDBSubmittedMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSubmittedMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSubmittedMission::CopyFrom(const CharacterDBSubmittedMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSubmittedMission::IsInitialized() const {

  return true;
}

void CharacterDBSubmittedMission::Swap(CharacterDBSubmittedMission* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSubmittedMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSubmittedMission_descriptor_;
  metadata.reflection = CharacterDBSubmittedMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBWithoutPreComplete::kMissionIdFieldNumber;
const int CharacterDBWithoutPreComplete::kFinishYearDayFieldNumber;
const int CharacterDBWithoutPreComplete::kCountFieldNumber;
const int CharacterDBWithoutPreComplete::kAcceptableFieldNumber;
#endif  // !_MSC_VER

CharacterDBWithoutPreComplete::CharacterDBWithoutPreComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBWithoutPreComplete::InitAsDefaultInstance() {
}

CharacterDBWithoutPreComplete::CharacterDBWithoutPreComplete(const CharacterDBWithoutPreComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBWithoutPreComplete::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  finishyearday_ = 0u;
  count_ = 0u;
  acceptable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBWithoutPreComplete::~CharacterDBWithoutPreComplete() {
  SharedDtor();
}

void CharacterDBWithoutPreComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBWithoutPreComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBWithoutPreComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBWithoutPreComplete_descriptor_;
}

const CharacterDBWithoutPreComplete& CharacterDBWithoutPreComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBWithoutPreComplete* CharacterDBWithoutPreComplete::default_instance_ = NULL;

CharacterDBWithoutPreComplete* CharacterDBWithoutPreComplete::New() const {
  return new CharacterDBWithoutPreComplete;
}

void CharacterDBWithoutPreComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    finishyearday_ = 0u;
    count_ = 0u;
    acceptable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBWithoutPreComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finishYearDay;
        break;
      }

      // optional uint32 finishYearDay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishYearDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishyearday_)));
          set_has_finishyearday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_acceptable;
        break;
      }

      // optional bool acceptable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceptable_)));
          set_has_acceptable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBWithoutPreComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 finishYearDay = 2;
  if (has_finishyearday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishyearday(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional bool acceptable = 4;
  if (has_acceptable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->acceptable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBWithoutPreComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 finishYearDay = 2;
  if (has_finishyearday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishyearday(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional bool acceptable = 4;
  if (has_acceptable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->acceptable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBWithoutPreComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 finishYearDay = 2;
    if (has_finishyearday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishyearday());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional bool acceptable = 4;
    if (has_acceptable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBWithoutPreComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBWithoutPreComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBWithoutPreComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBWithoutPreComplete::MergeFrom(const CharacterDBWithoutPreComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_finishyearday()) {
      set_finishyearday(from.finishyearday());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_acceptable()) {
      set_acceptable(from.acceptable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBWithoutPreComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBWithoutPreComplete::CopyFrom(const CharacterDBWithoutPreComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBWithoutPreComplete::IsInitialized() const {

  return true;
}

void CharacterDBWithoutPreComplete::Swap(CharacterDBWithoutPreComplete* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(finishyearday_, other->finishyearday_);
    std::swap(count_, other->count_);
    std::swap(acceptable_, other->acceptable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBWithoutPreComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBWithoutPreComplete_descriptor_;
  metadata.reflection = CharacterDBWithoutPreComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionItemInfo::kTypeFieldNumber;
const int CharacterDBMissionItemInfo::kIdFieldNumber;
const int CharacterDBMissionItemInfo::kCurrentValueFieldNumber;
const int CharacterDBMissionItemInfo::kFinalValueFieldNumber;
const int CharacterDBMissionItemInfo::kCompletedFlagFieldNumber;
const int CharacterDBMissionItemInfo::kParma1FieldNumber;
const int CharacterDBMissionItemInfo::kParma2FieldNumber;
const int CharacterDBMissionItemInfo::kParma3FieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionItemInfo::InitAsDefaultInstance() {
}

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo(const CharacterDBMissionItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  currentvalue_ = 0u;
  finalvalue_ = 0u;
  completedflag_ = false;
  parma1_ = 0u;
  parma2_ = 0u;
  parma3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionItemInfo::~CharacterDBMissionItemInfo() {
  SharedDtor();
}

void CharacterDBMissionItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMissionItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionItemInfo_descriptor_;
}

const CharacterDBMissionItemInfo& CharacterDBMissionItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::default_instance_ = NULL;

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::New() const {
  return new CharacterDBMissionItemInfo;
}

void CharacterDBMissionItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    currentvalue_ = 0u;
    finalvalue_ = 0u;
    completedflag_ = false;
    parma1_ = 0u;
    parma2_ = 0u;
    parma3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentValue;
        break;
      }

      // optional uint32 currentValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentvalue_)));
          set_has_currentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finalValue;
        break;
      }

      // optional uint32 finalValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finalvalue_)));
          set_has_finalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_completedFlag;
        break;
      }

      // optional bool completedFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completedFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completedflag_)));
          set_has_completedflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parma1;
        break;
      }

      // optional uint32 parma1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parma1_)));
          set_has_parma1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_parma2;
        break;
      }

      // optional uint32 parma2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parma2_)));
          set_has_parma2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_parma3;
        break;
      }

      // optional uint32 parma3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parma3_)));
          set_has_parma3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentvalue(), output);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finalvalue(), output);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->completedflag(), output);
  }

  // optional uint32 parma1 = 6;
  if (has_parma1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->parma1(), output);
  }

  // optional uint32 parma2 = 7;
  if (has_parma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->parma2(), output);
  }

  // optional uint32 parma3 = 8;
  if (has_parma3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->parma3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentvalue(), target);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finalvalue(), target);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->completedflag(), target);
  }

  // optional uint32 parma1 = 6;
  if (has_parma1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->parma1(), target);
  }

  // optional uint32 parma2 = 7;
  if (has_parma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->parma2(), target);
  }

  // optional uint32 parma3 = 8;
  if (has_parma3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->parma3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 currentValue = 3;
    if (has_currentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentvalue());
    }

    // optional uint32 finalValue = 4;
    if (has_finalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finalvalue());
    }

    // optional bool completedFlag = 5;
    if (has_completedflag()) {
      total_size += 1 + 1;
    }

    // optional uint32 parma1 = 6;
    if (has_parma1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parma1());
    }

    // optional uint32 parma2 = 7;
    if (has_parma2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parma2());
    }

    // optional uint32 parma3 = 8;
    if (has_parma3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parma3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionItemInfo::MergeFrom(const CharacterDBMissionItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentvalue()) {
      set_currentvalue(from.currentvalue());
    }
    if (from.has_finalvalue()) {
      set_finalvalue(from.finalvalue());
    }
    if (from.has_completedflag()) {
      set_completedflag(from.completedflag());
    }
    if (from.has_parma1()) {
      set_parma1(from.parma1());
    }
    if (from.has_parma2()) {
      set_parma2(from.parma2());
    }
    if (from.has_parma3()) {
      set_parma3(from.parma3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::CopyFrom(const CharacterDBMissionItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionItemInfo::IsInitialized() const {

  return true;
}

void CharacterDBMissionItemInfo::Swap(CharacterDBMissionItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(currentvalue_, other->currentvalue_);
    std::swap(finalvalue_, other->finalvalue_);
    std::swap(completedflag_, other->completedflag_);
    std::swap(parma1_, other->parma1_);
    std::swap(parma2_, other->parma2_);
    std::swap(parma3_, other->parma3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionItemInfo_descriptor_;
  metadata.reflection = CharacterDBMissionItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionTrack::kMissionIdFieldNumber;
const int CharacterDBMissionTrack::kStatusFieldNumber;
const int CharacterDBMissionTrack::kVersionFieldNumber;
const int CharacterDBMissionTrack::kAcceptMissionTimeFieldNumber;
const int CharacterDBMissionTrack::kSubmittedMissionTimeFieldNumber;
const int CharacterDBMissionTrack::kItemInfoFieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionTrack::CharacterDBMissionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionTrack::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::ProtoBuf::CharacterDBMissionItemInfo*>(&::ProtoBuf::CharacterDBMissionItemInfo::default_instance());
}

CharacterDBMissionTrack::CharacterDBMissionTrack(const CharacterDBMissionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionTrack::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  status_ = 0u;
  version_ = 0u;
  acceptmissiontime_ = 0u;
  submittedmissiontime_ = 0u;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionTrack::~CharacterDBMissionTrack() {
  SharedDtor();
}

void CharacterDBMissionTrack::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void CharacterDBMissionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionTrack_descriptor_;
}

const CharacterDBMissionTrack& CharacterDBMissionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBMissionTrack* CharacterDBMissionTrack::default_instance_ = NULL;

CharacterDBMissionTrack* CharacterDBMissionTrack::New() const {
  return new CharacterDBMissionTrack;
}

void CharacterDBMissionTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    status_ = 0u;
    version_ = 0u;
    acceptmissiontime_ = 0u;
    submittedmissiontime_ = 0u;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::ProtoBuf::CharacterDBMissionItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_acceptMissionTime;
        break;
      }

      // optional uint32 acceptMissionTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptMissionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acceptmissiontime_)));
          set_has_acceptmissiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_submittedMissionTime;
        break;
      }

      // optional uint32 submittedMissionTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submittedMissionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submittedmissiontime_)));
          set_has_submittedmissiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemInfo;
        break;
      }

      // optional .ProtoBuf.CharacterDBMissionItemInfo itemInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint32 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->acceptmissiontime(), output);
  }

  // optional uint32 submittedMissionTime = 5;
  if (has_submittedmissiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->submittedmissiontime(), output);
  }

  // optional .ProtoBuf.CharacterDBMissionItemInfo itemInfo = 6;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // optional uint32 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->acceptmissiontime(), target);
  }

  // optional uint32 submittedMissionTime = 5;
  if (has_submittedmissiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->submittedmissiontime(), target);
  }

  // optional .ProtoBuf.CharacterDBMissionItemInfo itemInfo = 6;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 acceptMissionTime = 4;
    if (has_acceptmissiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acceptmissiontime());
    }

    // optional uint32 submittedMissionTime = 5;
    if (has_submittedmissiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submittedmissiontime());
    }

    // optional .ProtoBuf.CharacterDBMissionItemInfo itemInfo = 6;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionTrack::MergeFrom(const CharacterDBMissionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_acceptmissiontime()) {
      set_acceptmissiontime(from.acceptmissiontime());
    }
    if (from.has_submittedmissiontime()) {
      set_submittedmissiontime(from.submittedmissiontime());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::ProtoBuf::CharacterDBMissionItemInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionTrack::CopyFrom(const CharacterDBMissionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionTrack::IsInitialized() const {

  return true;
}

void CharacterDBMissionTrack::Swap(CharacterDBMissionTrack* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(status_, other->status_);
    std::swap(version_, other->version_);
    std::swap(acceptmissiontime_, other->acceptmissiontime_);
    std::swap(submittedmissiontime_, other->submittedmissiontime_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionTrack_descriptor_;
  metadata.reflection = CharacterDBMissionTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSignleCampMission::kMissionIdFieldNumber;
const int CharacterDBSignleCampMission::kQualityFieldNumber;
const int CharacterDBSignleCampMission::kIsAcceptFieldNumber;
#endif  // !_MSC_VER

CharacterDBSignleCampMission::CharacterDBSignleCampMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSignleCampMission::InitAsDefaultInstance() {
}

CharacterDBSignleCampMission::CharacterDBSignleCampMission(const CharacterDBSignleCampMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSignleCampMission::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  quality_ = 0u;
  isaccept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSignleCampMission::~CharacterDBSignleCampMission() {
  SharedDtor();
}

void CharacterDBSignleCampMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSignleCampMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSignleCampMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSignleCampMission_descriptor_;
}

const CharacterDBSignleCampMission& CharacterDBSignleCampMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBSignleCampMission* CharacterDBSignleCampMission::default_instance_ = NULL;

CharacterDBSignleCampMission* CharacterDBSignleCampMission::New() const {
  return new CharacterDBSignleCampMission;
}

void CharacterDBSignleCampMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0u;
    quality_ = 0u;
    isaccept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSignleCampMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isAccept;
        break;
      }

      // optional bool isAccept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAccept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaccept_)));
          set_has_isaccept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSignleCampMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  // optional bool isAccept = 3;
  if (has_isaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isaccept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSignleCampMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  // optional bool isAccept = 3;
  if (has_isaccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isaccept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSignleCampMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional bool isAccept = 3;
    if (has_isaccept()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSignleCampMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSignleCampMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSignleCampMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSignleCampMission::MergeFrom(const CharacterDBSignleCampMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_isaccept()) {
      set_isaccept(from.isaccept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSignleCampMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSignleCampMission::CopyFrom(const CharacterDBSignleCampMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSignleCampMission::IsInitialized() const {

  return true;
}

void CharacterDBSignleCampMission::Swap(CharacterDBSignleCampMission* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(quality_, other->quality_);
    std::swap(isaccept_, other->isaccept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSignleCampMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSignleCampMission_descriptor_;
  metadata.reflection = CharacterDBSignleCampMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBCampMissionInfo::kCampSingleMissionFieldNumber;
const int CharacterDBCampMissionInfo::kCampRefreshTimeFieldNumber;
const int CharacterDBCampMissionInfo::kCampTimesFieldNumber;
const int CharacterDBCampMissionInfo::kBoxProgressFieldNumber;
const int CharacterDBCampMissionInfo::kCampOpenFieldNumber;
#endif  // !_MSC_VER

CharacterDBCampMissionInfo::CharacterDBCampMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBCampMissionInfo::InitAsDefaultInstance() {
}

CharacterDBCampMissionInfo::CharacterDBCampMissionInfo(const CharacterDBCampMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBCampMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  camprefreshtime_ = 0u;
  camptimes_ = 0u;
  boxprogress_ = 0u;
  campopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBCampMissionInfo::~CharacterDBCampMissionInfo() {
  SharedDtor();
}

void CharacterDBCampMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBCampMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBCampMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBCampMissionInfo_descriptor_;
}

const CharacterDBCampMissionInfo& CharacterDBCampMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBCampMissionInfo* CharacterDBCampMissionInfo::default_instance_ = NULL;

CharacterDBCampMissionInfo* CharacterDBCampMissionInfo::New() const {
  return new CharacterDBCampMissionInfo;
}

void CharacterDBCampMissionInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    camprefreshtime_ = 0u;
    camptimes_ = 0u;
    boxprogress_ = 0u;
    campopen_ = false;
  }
  campsinglemission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBCampMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterDBSignleCampMission campSingleMission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campSingleMission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_campsinglemission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_campSingleMission;
        if (input->ExpectTag(16)) goto parse_campRefreshTime;
        break;
      }

      // optional uint32 campRefreshTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camprefreshtime_)));
          set_has_camprefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campTimes;
        break;
      }

      // optional uint32 campTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camptimes_)));
          set_has_camptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxProgress;
        break;
      }

      // optional uint32 boxProgress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxprogress_)));
          set_has_boxprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_campOpen;
        break;
      }

      // optional bool campOpen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &campopen_)));
          set_has_campopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBCampMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterDBSignleCampMission campSingleMission = 1;
  for (int i = 0; i < this->campsinglemission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->campsinglemission(i), output);
  }

  // optional uint32 campRefreshTime = 2;
  if (has_camprefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->camprefreshtime(), output);
  }

  // optional uint32 campTimes = 3;
  if (has_camptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->camptimes(), output);
  }

  // optional uint32 boxProgress = 4;
  if (has_boxprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->boxprogress(), output);
  }

  // optional bool campOpen = 5;
  if (has_campopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->campopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBCampMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterDBSignleCampMission campSingleMission = 1;
  for (int i = 0; i < this->campsinglemission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->campsinglemission(i), target);
  }

  // optional uint32 campRefreshTime = 2;
  if (has_camprefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->camprefreshtime(), target);
  }

  // optional uint32 campTimes = 3;
  if (has_camptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->camptimes(), target);
  }

  // optional uint32 boxProgress = 4;
  if (has_boxprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->boxprogress(), target);
  }

  // optional bool campOpen = 5;
  if (has_campopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->campopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBCampMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 campRefreshTime = 2;
    if (has_camprefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camprefreshtime());
    }

    // optional uint32 campTimes = 3;
    if (has_camptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camptimes());
    }

    // optional uint32 boxProgress = 4;
    if (has_boxprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxprogress());
    }

    // optional bool campOpen = 5;
    if (has_campopen()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoBuf.CharacterDBSignleCampMission campSingleMission = 1;
  total_size += 1 * this->campsinglemission_size();
  for (int i = 0; i < this->campsinglemission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->campsinglemission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBCampMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBCampMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBCampMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBCampMissionInfo::MergeFrom(const CharacterDBCampMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  campsinglemission_.MergeFrom(from.campsinglemission_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_camprefreshtime()) {
      set_camprefreshtime(from.camprefreshtime());
    }
    if (from.has_camptimes()) {
      set_camptimes(from.camptimes());
    }
    if (from.has_boxprogress()) {
      set_boxprogress(from.boxprogress());
    }
    if (from.has_campopen()) {
      set_campopen(from.campopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBCampMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBCampMissionInfo::CopyFrom(const CharacterDBCampMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBCampMissionInfo::IsInitialized() const {

  return true;
}

void CharacterDBCampMissionInfo::Swap(CharacterDBCampMissionInfo* other) {
  if (other != this) {
    campsinglemission_.Swap(&other->campsinglemission_);
    std::swap(camprefreshtime_, other->camprefreshtime_);
    std::swap(camptimes_, other->camptimes_);
    std::swap(boxprogress_, other->boxprogress_);
    std::swap(campopen_, other->campopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBCampMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBCampMissionInfo_descriptor_;
  metadata.reflection = CharacterDBCampMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBLoopMissionInfo::kLoopCountFieldNumber;
const int CharacterDBLoopMissionInfo::kLoopFinishCountFieldNumber;
const int CharacterDBLoopMissionInfo::kLoopOpenFieldNumber;
const int CharacterDBLoopMissionInfo::kLoopMissionIdFieldNumber;
#endif  // !_MSC_VER

CharacterDBLoopMissionInfo::CharacterDBLoopMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBLoopMissionInfo::InitAsDefaultInstance() {
}

CharacterDBLoopMissionInfo::CharacterDBLoopMissionInfo(const CharacterDBLoopMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBLoopMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  loopcount_ = 0u;
  loopfinishcount_ = 0u;
  loopopen_ = false;
  loopmissionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBLoopMissionInfo::~CharacterDBLoopMissionInfo() {
  SharedDtor();
}

void CharacterDBLoopMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBLoopMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBLoopMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBLoopMissionInfo_descriptor_;
}

const CharacterDBLoopMissionInfo& CharacterDBLoopMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBLoopMissionInfo* CharacterDBLoopMissionInfo::default_instance_ = NULL;

CharacterDBLoopMissionInfo* CharacterDBLoopMissionInfo::New() const {
  return new CharacterDBLoopMissionInfo;
}

void CharacterDBLoopMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loopcount_ = 0u;
    loopfinishcount_ = 0u;
    loopopen_ = false;
    loopmissionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBLoopMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 loopCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopcount_)));
          set_has_loopcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loopFinishCount;
        break;
      }

      // optional uint32 loopFinishCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loopFinishCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopfinishcount_)));
          set_has_loopfinishcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loopOpen;
        break;
      }

      // optional bool loopOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loopOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loopopen_)));
          set_has_loopopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loopMissionId;
        break;
      }

      // optional uint32 loopMissionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loopMissionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopmissionid_)));
          set_has_loopmissionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBLoopMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 loopCount = 1;
  if (has_loopcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->loopcount(), output);
  }

  // optional uint32 loopFinishCount = 2;
  if (has_loopfinishcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->loopfinishcount(), output);
  }

  // optional bool loopOpen = 3;
  if (has_loopopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->loopopen(), output);
  }

  // optional uint32 loopMissionId = 4;
  if (has_loopmissionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->loopmissionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBLoopMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 loopCount = 1;
  if (has_loopcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->loopcount(), target);
  }

  // optional uint32 loopFinishCount = 2;
  if (has_loopfinishcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->loopfinishcount(), target);
  }

  // optional bool loopOpen = 3;
  if (has_loopopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->loopopen(), target);
  }

  // optional uint32 loopMissionId = 4;
  if (has_loopmissionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->loopmissionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBLoopMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 loopCount = 1;
    if (has_loopcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopcount());
    }

    // optional uint32 loopFinishCount = 2;
    if (has_loopfinishcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopfinishcount());
    }

    // optional bool loopOpen = 3;
    if (has_loopopen()) {
      total_size += 1 + 1;
    }

    // optional uint32 loopMissionId = 4;
    if (has_loopmissionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopmissionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBLoopMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBLoopMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBLoopMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBLoopMissionInfo::MergeFrom(const CharacterDBLoopMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loopcount()) {
      set_loopcount(from.loopcount());
    }
    if (from.has_loopfinishcount()) {
      set_loopfinishcount(from.loopfinishcount());
    }
    if (from.has_loopopen()) {
      set_loopopen(from.loopopen());
    }
    if (from.has_loopmissionid()) {
      set_loopmissionid(from.loopmissionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBLoopMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBLoopMissionInfo::CopyFrom(const CharacterDBLoopMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBLoopMissionInfo::IsInitialized() const {

  return true;
}

void CharacterDBLoopMissionInfo::Swap(CharacterDBLoopMissionInfo* other) {
  if (other != this) {
    std::swap(loopcount_, other->loopcount_);
    std::swap(loopfinishcount_, other->loopfinishcount_);
    std::swap(loopopen_, other->loopopen_);
    std::swap(loopmissionid_, other->loopmissionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBLoopMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBLoopMissionInfo_descriptor_;
  metadata.reflection = CharacterDBLoopMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSkillItem::kSkillIDFieldNumber;
const int CharacterDBSkillItem::kSkillLevelFieldNumber;
const int CharacterDBSkillItem::kCdFieldNumber;
#endif  // !_MSC_VER

CharacterDBSkillItem::CharacterDBSkillItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSkillItem::InitAsDefaultInstance() {
}

CharacterDBSkillItem::CharacterDBSkillItem(const CharacterDBSkillItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSkillItem::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  skilllevel_ = 0;
  cd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSkillItem::~CharacterDBSkillItem() {
  SharedDtor();
}

void CharacterDBSkillItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSkillItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSkillItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSkillItem_descriptor_;
}

const CharacterDBSkillItem& CharacterDBSkillItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBSkillItem* CharacterDBSkillItem::default_instance_ = NULL;

CharacterDBSkillItem* CharacterDBSkillItem::New() const {
  return new CharacterDBSkillItem;
}

void CharacterDBSkillItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    skilllevel_ = 0;
    cd_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSkillItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLevel;
        break;
      }

      // required int32 skillLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional uint64 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSkillItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // required int32 skillLevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilllevel(), output);
  }

  // optional uint64 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSkillItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // required int32 skillLevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilllevel(), target);
  }

  // optional uint64 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSkillItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // required int32 skillLevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

    // optional uint64 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSkillItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSkillItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSkillItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSkillItem::MergeFrom(const CharacterDBSkillItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSkillItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSkillItem::CopyFrom(const CharacterDBSkillItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSkillItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharacterDBSkillItem::Swap(CharacterDBSkillItem* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSkillItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSkillItem_descriptor_;
  metadata.reflection = CharacterDBSkillItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSkillData::kSkillListFieldNumber;
const int CharacterDBSkillData::kSkillAttrsFieldNumber;
#endif  // !_MSC_VER

CharacterDBSkillData::CharacterDBSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSkillData::InitAsDefaultInstance() {
}

CharacterDBSkillData::CharacterDBSkillData(const CharacterDBSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSkillData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSkillData::~CharacterDBSkillData() {
  SharedDtor();
}

void CharacterDBSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSkillData_descriptor_;
}

const CharacterDBSkillData& CharacterDBSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBSkillData* CharacterDBSkillData::default_instance_ = NULL;

CharacterDBSkillData* CharacterDBSkillData::New() const {
  return new CharacterDBSkillData;
}

void CharacterDBSkillData::Clear() {
  skilllist_.Clear();
  skillattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterDBSkillItem skillList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillList;
        if (input->ExpectTag(16)) goto parse_skillAttrs;
        break;
      }

      // repeated uint32 skillAttrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillAttrs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_skillattrs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skillattrs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillAttrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterDBSkillItem skillList = 1;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skilllist(i), output);
  }

  // repeated uint32 skillAttrs = 2;
  for (int i = 0; i < this->skillattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->skillattrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterDBSkillItem skillList = 1;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skilllist(i), target);
  }

  // repeated uint32 skillAttrs = 2;
  for (int i = 0; i < this->skillattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->skillattrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSkillData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CharacterDBSkillItem skillList = 1;
  total_size += 1 * this->skilllist_size();
  for (int i = 0; i < this->skilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilllist(i));
  }

  // repeated uint32 skillAttrs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillattrs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skillattrs(i));
    }
    total_size += 1 * this->skillattrs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSkillData::MergeFrom(const CharacterDBSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  skillattrs_.MergeFrom(from.skillattrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSkillData::CopyFrom(const CharacterDBSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSkillData::IsInitialized() const {

  for (int i = 0; i < skilllist_size(); i++) {
    if (!this->skilllist(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDBSkillData::Swap(CharacterDBSkillData* other) {
  if (other != this) {
    skilllist_.Swap(&other->skilllist_);
    skillattrs_.Swap(&other->skillattrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSkillData_descriptor_;
  metadata.reflection = CharacterDBSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBAttrDetailInfo::kMaxHpFieldNumber;
const int CharacterDBAttrDetailInfo::kIntelligenceFieldNumber;
const int CharacterDBAttrDetailInfo::kAgilityFieldNumber;
const int CharacterDBAttrDetailInfo::kPhysiqueFieldNumber;
const int CharacterDBAttrDetailInfo::kEnduranceFieldNumber;
const int CharacterDBAttrDetailInfo::kPrecisionFieldNumber;
const int CharacterDBAttrDetailInfo::kMaxMpFieldNumber;
const int CharacterDBAttrDetailInfo::kApFieldNumber;
const int CharacterDBAttrDetailInfo::kMatFieldNumber;
const int CharacterDBAttrDetailInfo::kDpFieldNumber;
const int CharacterDBAttrDetailInfo::kMdpFieldNumber;
const int CharacterDBAttrDetailInfo::kHitFieldNumber;
const int CharacterDBAttrDetailInfo::kDodgeFieldNumber;
const int CharacterDBAttrDetailInfo::kCritFieldNumber;
const int CharacterDBAttrDetailInfo::kToughnessFieldNumber;
const int CharacterDBAttrDetailInfo::kCritRateFieldNumber;
const int CharacterDBAttrDetailInfo::kCritExtradamageFieldNumber;
const int CharacterDBAttrDetailInfo::kCritReducedamageFieldNumber;
const int CharacterDBAttrDetailInfo::kExtraDamageFieldNumber;
const int CharacterDBAttrDetailInfo::kReduceDamageFieldNumber;
const int CharacterDBAttrDetailInfo::kApdamagerateFieldNumber;
const int CharacterDBAttrDetailInfo::kApreducedamageFieldNumber;
const int CharacterDBAttrDetailInfo::kFreezeresFieldNumber;
const int CharacterDBAttrDetailInfo::kBurnersFieldNumber;
const int CharacterDBAttrDetailInfo::kWeakresFieldNumber;
const int CharacterDBAttrDetailInfo::kFastingresFieldNumber;
const int CharacterDBAttrDetailInfo::kFunkresFieldNumber;
#endif  // !_MSC_VER

CharacterDBAttrDetailInfo::CharacterDBAttrDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBAttrDetailInfo::InitAsDefaultInstance() {
}

CharacterDBAttrDetailInfo::CharacterDBAttrDetailInfo(const CharacterDBAttrDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBAttrDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  max_hp_ = 0u;
  intelligence_ = 0u;
  agility_ = 0u;
  physique_ = 0u;
  endurance_ = 0u;
  precision_ = 0u;
  max_mp_ = 0u;
  ap_ = 0u;
  mat_ = 0u;
  dp_ = 0u;
  mdp_ = 0u;
  hit_ = 0u;
  dodge_ = 0u;
  crit_ = 0u;
  toughness_ = 0u;
  crit_rate_ = 0u;
  crit_extradamage_ = 0u;
  crit_reducedamage_ = 0u;
  extra_damage_ = 0u;
  reduce_damage_ = 0u;
  apdamagerate_ = 0u;
  apreducedamage_ = 0u;
  freezeres_ = 0u;
  burners_ = 0u;
  weakres_ = 0u;
  fastingres_ = 0u;
  funkres_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBAttrDetailInfo::~CharacterDBAttrDetailInfo() {
  SharedDtor();
}

void CharacterDBAttrDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBAttrDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBAttrDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBAttrDetailInfo_descriptor_;
}

const CharacterDBAttrDetailInfo& CharacterDBAttrDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBAttrDetailInfo* CharacterDBAttrDetailInfo::default_instance_ = NULL;

CharacterDBAttrDetailInfo* CharacterDBAttrDetailInfo::New() const {
  return new CharacterDBAttrDetailInfo;
}

void CharacterDBAttrDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_hp_ = 0u;
    intelligence_ = 0u;
    agility_ = 0u;
    physique_ = 0u;
    endurance_ = 0u;
    precision_ = 0u;
    max_mp_ = 0u;
    ap_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mat_ = 0u;
    dp_ = 0u;
    mdp_ = 0u;
    hit_ = 0u;
    dodge_ = 0u;
    crit_ = 0u;
    toughness_ = 0u;
    crit_rate_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    crit_extradamage_ = 0u;
    crit_reducedamage_ = 0u;
    extra_damage_ = 0u;
    reduce_damage_ = 0u;
    apdamagerate_ = 0u;
    apreducedamage_ = 0u;
    freezeres_ = 0u;
    burners_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    weakres_ = 0u;
    fastingres_ = 0u;
    funkres_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBAttrDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intelligence;
        break;
      }

      // optional uint32 intelligence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_agility;
        break;
      }

      // optional uint32 agility = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_physique;
        break;
      }

      // optional uint32 physique = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physique:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physique_)));
          set_has_physique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endurance;
        break;
      }

      // optional uint32 endurance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endurance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endurance_)));
          set_has_endurance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_precision;
        break;
      }

      // optional uint32 precision = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_mp;
        break;
      }

      // optional uint32 max_mp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_mp_)));
          set_has_max_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ap;
        break;
      }

      // optional uint32 ap = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ap_)));
          set_has_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mat;
        break;
      }

      // optional uint32 mat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mat_)));
          set_has_mat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dp;
        break;
      }

      // optional uint32 dp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dp_)));
          set_has_dp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mdp;
        break;
      }

      // optional uint32 mdp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mdp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdp_)));
          set_has_mdp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hit;
        break;
      }

      // optional uint32 hit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dodge;
        break;
      }

      // optional uint32 dodge = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_crit;
        break;
      }

      // optional uint32 crit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_toughness;
        break;
      }

      // optional uint32 toughness = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toughness_)));
          set_has_toughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_crit_rate;
        break;
      }

      // optional uint32 crit_rate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_rate_)));
          set_has_crit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_crit_extradamage;
        break;
      }

      // optional uint32 crit_extradamage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_extradamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_extradamage_)));
          set_has_crit_extradamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_crit_reducedamage;
        break;
      }

      // optional uint32 crit_reducedamage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_reducedamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_reducedamage_)));
          set_has_crit_reducedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_extra_damage;
        break;
      }

      // optional uint32 extra_damage = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extra_damage_)));
          set_has_extra_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_reduce_damage;
        break;
      }

      // optional uint32 reduce_damage = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduce_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reduce_damage_)));
          set_has_reduce_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_apdamagerate;
        break;
      }

      // optional uint32 apdamagerate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apdamagerate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apdamagerate_)));
          set_has_apdamagerate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_apreducedamage;
        break;
      }

      // optional uint32 apreducedamage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apreducedamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apreducedamage_)));
          set_has_apreducedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_freezeres;
        break;
      }

      // optional uint32 freezeres = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freezeres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freezeres_)));
          set_has_freezeres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_burners;
        break;
      }

      // optional uint32 burners = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burners:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &burners_)));
          set_has_burners();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_weakres;
        break;
      }

      // optional uint32 weakres = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weakres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weakres_)));
          set_has_weakres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_fastingres;
        break;
      }

      // optional uint32 fastingres = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fastingres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fastingres_)));
          set_has_fastingres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_funkres;
        break;
      }

      // optional uint32 funkres = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funkres:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funkres_)));
          set_has_funkres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBAttrDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_hp = 1;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_hp(), output);
  }

  // optional uint32 intelligence = 2;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intelligence(), output);
  }

  // optional uint32 agility = 3;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->agility(), output);
  }

  // optional uint32 physique = 4;
  if (has_physique()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->physique(), output);
  }

  // optional uint32 endurance = 5;
  if (has_endurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endurance(), output);
  }

  // optional uint32 precision = 6;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->precision(), output);
  }

  // optional uint32 max_mp = 7;
  if (has_max_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_mp(), output);
  }

  // optional uint32 ap = 8;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ap(), output);
  }

  // optional uint32 mat = 9;
  if (has_mat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mat(), output);
  }

  // optional uint32 dp = 10;
  if (has_dp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dp(), output);
  }

  // optional uint32 mdp = 11;
  if (has_mdp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mdp(), output);
  }

  // optional uint32 hit = 12;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->hit(), output);
  }

  // optional uint32 dodge = 13;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dodge(), output);
  }

  // optional uint32 crit = 14;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->crit(), output);
  }

  // optional uint32 toughness = 15;
  if (has_toughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->toughness(), output);
  }

  // optional uint32 crit_rate = 16;
  if (has_crit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->crit_rate(), output);
  }

  // optional uint32 crit_extradamage = 17;
  if (has_crit_extradamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->crit_extradamage(), output);
  }

  // optional uint32 crit_reducedamage = 18;
  if (has_crit_reducedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->crit_reducedamage(), output);
  }

  // optional uint32 extra_damage = 19;
  if (has_extra_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->extra_damage(), output);
  }

  // optional uint32 reduce_damage = 20;
  if (has_reduce_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->reduce_damage(), output);
  }

  // optional uint32 apdamagerate = 21;
  if (has_apdamagerate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->apdamagerate(), output);
  }

  // optional uint32 apreducedamage = 22;
  if (has_apreducedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->apreducedamage(), output);
  }

  // optional uint32 freezeres = 23;
  if (has_freezeres()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->freezeres(), output);
  }

  // optional uint32 burners = 24;
  if (has_burners()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->burners(), output);
  }

  // optional uint32 weakres = 25;
  if (has_weakres()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->weakres(), output);
  }

  // optional uint32 fastingres = 26;
  if (has_fastingres()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->fastingres(), output);
  }

  // optional uint32 funkres = 27;
  if (has_funkres()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->funkres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBAttrDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 max_hp = 1;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_hp(), target);
  }

  // optional uint32 intelligence = 2;
  if (has_intelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intelligence(), target);
  }

  // optional uint32 agility = 3;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->agility(), target);
  }

  // optional uint32 physique = 4;
  if (has_physique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->physique(), target);
  }

  // optional uint32 endurance = 5;
  if (has_endurance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endurance(), target);
  }

  // optional uint32 precision = 6;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->precision(), target);
  }

  // optional uint32 max_mp = 7;
  if (has_max_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_mp(), target);
  }

  // optional uint32 ap = 8;
  if (has_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ap(), target);
  }

  // optional uint32 mat = 9;
  if (has_mat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mat(), target);
  }

  // optional uint32 dp = 10;
  if (has_dp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dp(), target);
  }

  // optional uint32 mdp = 11;
  if (has_mdp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mdp(), target);
  }

  // optional uint32 hit = 12;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->hit(), target);
  }

  // optional uint32 dodge = 13;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dodge(), target);
  }

  // optional uint32 crit = 14;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->crit(), target);
  }

  // optional uint32 toughness = 15;
  if (has_toughness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->toughness(), target);
  }

  // optional uint32 crit_rate = 16;
  if (has_crit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->crit_rate(), target);
  }

  // optional uint32 crit_extradamage = 17;
  if (has_crit_extradamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->crit_extradamage(), target);
  }

  // optional uint32 crit_reducedamage = 18;
  if (has_crit_reducedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->crit_reducedamage(), target);
  }

  // optional uint32 extra_damage = 19;
  if (has_extra_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->extra_damage(), target);
  }

  // optional uint32 reduce_damage = 20;
  if (has_reduce_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->reduce_damage(), target);
  }

  // optional uint32 apdamagerate = 21;
  if (has_apdamagerate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->apdamagerate(), target);
  }

  // optional uint32 apreducedamage = 22;
  if (has_apreducedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->apreducedamage(), target);
  }

  // optional uint32 freezeres = 23;
  if (has_freezeres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->freezeres(), target);
  }

  // optional uint32 burners = 24;
  if (has_burners()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->burners(), target);
  }

  // optional uint32 weakres = 25;
  if (has_weakres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->weakres(), target);
  }

  // optional uint32 fastingres = 26;
  if (has_fastingres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->fastingres(), target);
  }

  // optional uint32 funkres = 27;
  if (has_funkres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->funkres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBAttrDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_hp = 1;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hp());
    }

    // optional uint32 intelligence = 2;
    if (has_intelligence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional uint32 agility = 3;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional uint32 physique = 4;
    if (has_physique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physique());
    }

    // optional uint32 endurance = 5;
    if (has_endurance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endurance());
    }

    // optional uint32 precision = 6;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precision());
    }

    // optional uint32 max_mp = 7;
    if (has_max_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_mp());
    }

    // optional uint32 ap = 8;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ap());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mat = 9;
    if (has_mat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mat());
    }

    // optional uint32 dp = 10;
    if (has_dp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dp());
    }

    // optional uint32 mdp = 11;
    if (has_mdp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mdp());
    }

    // optional uint32 hit = 12;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

    // optional uint32 dodge = 13;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // optional uint32 crit = 14;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit());
    }

    // optional uint32 toughness = 15;
    if (has_toughness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toughness());
    }

    // optional uint32 crit_rate = 16;
    if (has_crit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit_rate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 crit_extradamage = 17;
    if (has_crit_extradamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit_extradamage());
    }

    // optional uint32 crit_reducedamage = 18;
    if (has_crit_reducedamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit_reducedamage());
    }

    // optional uint32 extra_damage = 19;
    if (has_extra_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extra_damage());
    }

    // optional uint32 reduce_damage = 20;
    if (has_reduce_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reduce_damage());
    }

    // optional uint32 apdamagerate = 21;
    if (has_apdamagerate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apdamagerate());
    }

    // optional uint32 apreducedamage = 22;
    if (has_apreducedamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apreducedamage());
    }

    // optional uint32 freezeres = 23;
    if (has_freezeres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freezeres());
    }

    // optional uint32 burners = 24;
    if (has_burners()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->burners());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 weakres = 25;
    if (has_weakres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weakres());
    }

    // optional uint32 fastingres = 26;
    if (has_fastingres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fastingres());
    }

    // optional uint32 funkres = 27;
    if (has_funkres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funkres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBAttrDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBAttrDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBAttrDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBAttrDetailInfo::MergeFrom(const CharacterDBAttrDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_physique()) {
      set_physique(from.physique());
    }
    if (from.has_endurance()) {
      set_endurance(from.endurance());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_max_mp()) {
      set_max_mp(from.max_mp());
    }
    if (from.has_ap()) {
      set_ap(from.ap());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mat()) {
      set_mat(from.mat());
    }
    if (from.has_dp()) {
      set_dp(from.dp());
    }
    if (from.has_mdp()) {
      set_mdp(from.mdp());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_toughness()) {
      set_toughness(from.toughness());
    }
    if (from.has_crit_rate()) {
      set_crit_rate(from.crit_rate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_crit_extradamage()) {
      set_crit_extradamage(from.crit_extradamage());
    }
    if (from.has_crit_reducedamage()) {
      set_crit_reducedamage(from.crit_reducedamage());
    }
    if (from.has_extra_damage()) {
      set_extra_damage(from.extra_damage());
    }
    if (from.has_reduce_damage()) {
      set_reduce_damage(from.reduce_damage());
    }
    if (from.has_apdamagerate()) {
      set_apdamagerate(from.apdamagerate());
    }
    if (from.has_apreducedamage()) {
      set_apreducedamage(from.apreducedamage());
    }
    if (from.has_freezeres()) {
      set_freezeres(from.freezeres());
    }
    if (from.has_burners()) {
      set_burners(from.burners());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_weakres()) {
      set_weakres(from.weakres());
    }
    if (from.has_fastingres()) {
      set_fastingres(from.fastingres());
    }
    if (from.has_funkres()) {
      set_funkres(from.funkres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBAttrDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBAttrDetailInfo::CopyFrom(const CharacterDBAttrDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBAttrDetailInfo::IsInitialized() const {

  return true;
}

void CharacterDBAttrDetailInfo::Swap(CharacterDBAttrDetailInfo* other) {
  if (other != this) {
    std::swap(max_hp_, other->max_hp_);
    std::swap(intelligence_, other->intelligence_);
    std::swap(agility_, other->agility_);
    std::swap(physique_, other->physique_);
    std::swap(endurance_, other->endurance_);
    std::swap(precision_, other->precision_);
    std::swap(max_mp_, other->max_mp_);
    std::swap(ap_, other->ap_);
    std::swap(mat_, other->mat_);
    std::swap(dp_, other->dp_);
    std::swap(mdp_, other->mdp_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(crit_, other->crit_);
    std::swap(toughness_, other->toughness_);
    std::swap(crit_rate_, other->crit_rate_);
    std::swap(crit_extradamage_, other->crit_extradamage_);
    std::swap(crit_reducedamage_, other->crit_reducedamage_);
    std::swap(extra_damage_, other->extra_damage_);
    std::swap(reduce_damage_, other->reduce_damage_);
    std::swap(apdamagerate_, other->apdamagerate_);
    std::swap(apreducedamage_, other->apreducedamage_);
    std::swap(freezeres_, other->freezeres_);
    std::swap(burners_, other->burners_);
    std::swap(weakres_, other->weakres_);
    std::swap(fastingres_, other->fastingres_);
    std::swap(funkres_, other->funkres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBAttrDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBAttrDetailInfo_descriptor_;
  metadata.reflection = CharacterDBAttrDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBExtendData::kAttrDetailFieldNumber;
#endif  // !_MSC_VER

CharacterDBExtendData::CharacterDBExtendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBExtendData::InitAsDefaultInstance() {
  attr_detail_ = const_cast< ::ProtoBuf::CharacterDBAttrDetailInfo*>(&::ProtoBuf::CharacterDBAttrDetailInfo::default_instance());
}

CharacterDBExtendData::CharacterDBExtendData(const CharacterDBExtendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBExtendData::SharedCtor() {
  _cached_size_ = 0;
  attr_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBExtendData::~CharacterDBExtendData() {
  SharedDtor();
}

void CharacterDBExtendData::SharedDtor() {
  if (this != default_instance_) {
    delete attr_detail_;
  }
}

void CharacterDBExtendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBExtendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBExtendData_descriptor_;
}

const CharacterDBExtendData& CharacterDBExtendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBExtendData* CharacterDBExtendData::default_instance_ = NULL;

CharacterDBExtendData* CharacterDBExtendData::New() const {
  return new CharacterDBExtendData;
}

void CharacterDBExtendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attr_detail()) {
      if (attr_detail_ != NULL) attr_detail_->::ProtoBuf::CharacterDBAttrDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBExtendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.CharacterDBAttrDetailInfo attr_detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBExtendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr_detail = 1;
  if (has_attr_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBExtendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr_detail = 1;
  if (has_attr_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBExtendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.CharacterDBAttrDetailInfo attr_detail = 1;
    if (has_attr_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBExtendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBExtendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBExtendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBExtendData::MergeFrom(const CharacterDBExtendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_detail()) {
      mutable_attr_detail()->::ProtoBuf::CharacterDBAttrDetailInfo::MergeFrom(from.attr_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBExtendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBExtendData::CopyFrom(const CharacterDBExtendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBExtendData::IsInitialized() const {

  return true;
}

void CharacterDBExtendData::Swap(CharacterDBExtendData* other) {
  if (other != this) {
    std::swap(attr_detail_, other->attr_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBExtendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBExtendData_descriptor_;
  metadata.reflection = CharacterDBExtendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBInfo::kCharIdFieldNumber;
const int CharacterDBInfo::kGroupIdFieldNumber;
const int CharacterDBInfo::kBaseDataFieldNumber;
const int CharacterDBInfo::kItemDataFieldNumber;
const int CharacterDBInfo::kTaskDataFieldNumber;
const int CharacterDBInfo::kSkillDataFieldNumber;
const int CharacterDBInfo::kExtendDataFieldNumber;
const int CharacterDBInfo::kEquipDataFieldNumber;
const int CharacterDBInfo::kDuplicateDataFieldNumber;
const int CharacterDBInfo::kAchievementDataFieldNumber;
const int CharacterDBInfo::kDeputyDataFieldNumber;
#endif  // !_MSC_VER

CharacterDBInfo::CharacterDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBInfo::InitAsDefaultInstance() {
  basedata_ = const_cast< ::ProtoBuf::CharacterDBBaseInfo*>(&::ProtoBuf::CharacterDBBaseInfo::default_instance());
  itemdata_ = const_cast< ::ProtoBuf::CharacterDBPackageData*>(&::ProtoBuf::CharacterDBPackageData::default_instance());
  taskdata_ = const_cast< ::ProtoBuf::CharacterDBTaskData*>(&::ProtoBuf::CharacterDBTaskData::default_instance());
  skilldata_ = const_cast< ::ProtoBuf::CharacterDBSkillData*>(&::ProtoBuf::CharacterDBSkillData::default_instance());
  extenddata_ = const_cast< ::ProtoBuf::CharacterDBExtendData*>(&::ProtoBuf::CharacterDBExtendData::default_instance());
  equipdata_ = const_cast< ::ProtoBuf::CharacterDBEquipData*>(&::ProtoBuf::CharacterDBEquipData::default_instance());
  duplicatedata_ = const_cast< ::ProtoBuf::CharacterDBDuplicateData*>(&::ProtoBuf::CharacterDBDuplicateData::default_instance());
  achievementdata_ = const_cast< ::ProtoBuf::CharacterAchievementDBData*>(&::ProtoBuf::CharacterAchievementDBData::default_instance());
  deputydata_ = const_cast< ::ProtoBuf::CharacterDeputyDBData*>(&::ProtoBuf::CharacterDeputyDBData::default_instance());
}

CharacterDBInfo::CharacterDBInfo(const CharacterDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  groupid_ = 0u;
  basedata_ = NULL;
  itemdata_ = NULL;
  taskdata_ = NULL;
  skilldata_ = NULL;
  extenddata_ = NULL;
  equipdata_ = NULL;
  duplicatedata_ = NULL;
  achievementdata_ = NULL;
  deputydata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBInfo::~CharacterDBInfo() {
  SharedDtor();
}

void CharacterDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete basedata_;
    delete itemdata_;
    delete taskdata_;
    delete skilldata_;
    delete extenddata_;
    delete equipdata_;
    delete duplicatedata_;
    delete achievementdata_;
    delete deputydata_;
  }
}

void CharacterDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBInfo_descriptor_;
}

const CharacterDBInfo& CharacterDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBInfo* CharacterDBInfo::default_instance_ = NULL;

CharacterDBInfo* CharacterDBInfo::New() const {
  return new CharacterDBInfo;
}

void CharacterDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    groupid_ = 0u;
    if (has_basedata()) {
      if (basedata_ != NULL) basedata_->::ProtoBuf::CharacterDBBaseInfo::Clear();
    }
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::ProtoBuf::CharacterDBPackageData::Clear();
    }
    if (has_taskdata()) {
      if (taskdata_ != NULL) taskdata_->::ProtoBuf::CharacterDBTaskData::Clear();
    }
    if (has_skilldata()) {
      if (skilldata_ != NULL) skilldata_->::ProtoBuf::CharacterDBSkillData::Clear();
    }
    if (has_extenddata()) {
      if (extenddata_ != NULL) extenddata_->::ProtoBuf::CharacterDBExtendData::Clear();
    }
    if (has_equipdata()) {
      if (equipdata_ != NULL) equipdata_->::ProtoBuf::CharacterDBEquipData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_duplicatedata()) {
      if (duplicatedata_ != NULL) duplicatedata_->::ProtoBuf::CharacterDBDuplicateData::Clear();
    }
    if (has_achievementdata()) {
      if (achievementdata_ != NULL) achievementdata_->::ProtoBuf::CharacterAchievementDBData::Clear();
    }
    if (has_deputydata()) {
      if (deputydata_ != NULL) deputydata_->::ProtoBuf::CharacterDeputyDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupId;
        break;
      }

      // required uint32 groupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseData;
        break;
      }

      // required .ProtoBuf.CharacterDBBaseInfo baseData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemData;
        break;
      }

      // optional .ProtoBuf.CharacterDBPackageData itemData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taskData;
        break;
      }

      // optional .ProtoBuf.CharacterDBTaskData taskData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skillData;
        break;
      }

      // optional .ProtoBuf.CharacterDBSkillData skillData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extendData;
        break;
      }

      // optional .ProtoBuf.CharacterDBExtendData extendData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extenddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equipData;
        break;
      }

      // optional .ProtoBuf.CharacterDBEquipData equipData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_duplicateData;
        break;
      }

      // optional .ProtoBuf.CharacterDBDuplicateData duplicateData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicateData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duplicatedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_achievementData;
        break;
      }

      // optional .ProtoBuf.CharacterAchievementDBData achievementData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievementdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_deputyData;
        break;
      }

      // optional .ProtoBuf.CharacterDeputyDBData deputyData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deputyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deputydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 groupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // required .ProtoBuf.CharacterDBBaseInfo baseData = 3;
  if (has_basedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basedata(), output);
  }

  // optional .ProtoBuf.CharacterDBPackageData itemData = 4;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemdata(), output);
  }

  // optional .ProtoBuf.CharacterDBTaskData taskData = 5;
  if (has_taskdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->taskdata(), output);
  }

  // optional .ProtoBuf.CharacterDBSkillData skillData = 6;
  if (has_skilldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skilldata(), output);
  }

  // optional .ProtoBuf.CharacterDBExtendData extendData = 7;
  if (has_extenddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extenddata(), output);
  }

  // optional .ProtoBuf.CharacterDBEquipData equipData = 8;
  if (has_equipdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equipdata(), output);
  }

  // optional .ProtoBuf.CharacterDBDuplicateData duplicateData = 9;
  if (has_duplicatedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->duplicatedata(), output);
  }

  // optional .ProtoBuf.CharacterAchievementDBData achievementData = 10;
  if (has_achievementdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->achievementdata(), output);
  }

  // optional .ProtoBuf.CharacterDeputyDBData deputyData = 11;
  if (has_deputydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->deputydata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 groupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // required .ProtoBuf.CharacterDBBaseInfo baseData = 3;
  if (has_basedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basedata(), target);
  }

  // optional .ProtoBuf.CharacterDBPackageData itemData = 4;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemdata(), target);
  }

  // optional .ProtoBuf.CharacterDBTaskData taskData = 5;
  if (has_taskdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->taskdata(), target);
  }

  // optional .ProtoBuf.CharacterDBSkillData skillData = 6;
  if (has_skilldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skilldata(), target);
  }

  // optional .ProtoBuf.CharacterDBExtendData extendData = 7;
  if (has_extenddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extenddata(), target);
  }

  // optional .ProtoBuf.CharacterDBEquipData equipData = 8;
  if (has_equipdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equipdata(), target);
  }

  // optional .ProtoBuf.CharacterDBDuplicateData duplicateData = 9;
  if (has_duplicatedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->duplicatedata(), target);
  }

  // optional .ProtoBuf.CharacterAchievementDBData achievementData = 10;
  if (has_achievementdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->achievementdata(), target);
  }

  // optional .ProtoBuf.CharacterDeputyDBData deputyData = 11;
  if (has_deputydata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->deputydata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 groupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required .ProtoBuf.CharacterDBBaseInfo baseData = 3;
    if (has_basedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedata());
    }

    // optional .ProtoBuf.CharacterDBPackageData itemData = 4;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional .ProtoBuf.CharacterDBTaskData taskData = 5;
    if (has_taskdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskdata());
    }

    // optional .ProtoBuf.CharacterDBSkillData skillData = 6;
    if (has_skilldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skilldata());
    }

    // optional .ProtoBuf.CharacterDBExtendData extendData = 7;
    if (has_extenddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extenddata());
    }

    // optional .ProtoBuf.CharacterDBEquipData equipData = 8;
    if (has_equipdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipdata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoBuf.CharacterDBDuplicateData duplicateData = 9;
    if (has_duplicatedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duplicatedata());
    }

    // optional .ProtoBuf.CharacterAchievementDBData achievementData = 10;
    if (has_achievementdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievementdata());
    }

    // optional .ProtoBuf.CharacterDeputyDBData deputyData = 11;
    if (has_deputydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deputydata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBInfo::MergeFrom(const CharacterDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_basedata()) {
      mutable_basedata()->::ProtoBuf::CharacterDBBaseInfo::MergeFrom(from.basedata());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::ProtoBuf::CharacterDBPackageData::MergeFrom(from.itemdata());
    }
    if (from.has_taskdata()) {
      mutable_taskdata()->::ProtoBuf::CharacterDBTaskData::MergeFrom(from.taskdata());
    }
    if (from.has_skilldata()) {
      mutable_skilldata()->::ProtoBuf::CharacterDBSkillData::MergeFrom(from.skilldata());
    }
    if (from.has_extenddata()) {
      mutable_extenddata()->::ProtoBuf::CharacterDBExtendData::MergeFrom(from.extenddata());
    }
    if (from.has_equipdata()) {
      mutable_equipdata()->::ProtoBuf::CharacterDBEquipData::MergeFrom(from.equipdata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duplicatedata()) {
      mutable_duplicatedata()->::ProtoBuf::CharacterDBDuplicateData::MergeFrom(from.duplicatedata());
    }
    if (from.has_achievementdata()) {
      mutable_achievementdata()->::ProtoBuf::CharacterAchievementDBData::MergeFrom(from.achievementdata());
    }
    if (from.has_deputydata()) {
      mutable_deputydata()->::ProtoBuf::CharacterDeputyDBData::MergeFrom(from.deputydata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBInfo::CopyFrom(const CharacterDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_basedata()) {
    if (!this->basedata().IsInitialized()) return false;
  }
  if (has_itemdata()) {
    if (!this->itemdata().IsInitialized()) return false;
  }
  if (has_skilldata()) {
    if (!this->skilldata().IsInitialized()) return false;
  }
  if (has_equipdata()) {
    if (!this->equipdata().IsInitialized()) return false;
  }
  if (has_duplicatedata()) {
    if (!this->duplicatedata().IsInitialized()) return false;
  }
  if (has_deputydata()) {
    if (!this->deputydata().IsInitialized()) return false;
  }
  return true;
}

void CharacterDBInfo::Swap(CharacterDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(groupid_, other->groupid_);
    std::swap(basedata_, other->basedata_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(taskdata_, other->taskdata_);
    std::swap(skilldata_, other->skilldata_);
    std::swap(extenddata_, other->extenddata_);
    std::swap(equipdata_, other->equipdata_);
    std::swap(duplicatedata_, other->duplicatedata_);
    std::swap(achievementdata_, other->achievementdata_);
    std::swap(deputydata_, other->deputydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBInfo_descriptor_;
  metadata.reflection = CharacterDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBSimpleInfo::kCharIdFieldNumber;
const int CharacterDBSimpleInfo::kNameFieldNumber;
const int CharacterDBSimpleInfo::kSexFieldNumber;
const int CharacterDBSimpleInfo::kProfFieldNumber;
const int CharacterDBSimpleInfo::kLevelFieldNumber;
const int CharacterDBSimpleInfo::kRaceFieldNumber;
const int CharacterDBSimpleInfo::kExpFieldNumber;
const int CharacterDBSimpleInfo::kHpFieldNumber;
const int CharacterDBSimpleInfo::kFightPowerFieldNumber;
const int CharacterDBSimpleInfo::kWeaponIdFieldNumber;
const int CharacterDBSimpleInfo::kClothesIdFieldNumber;
const int CharacterDBSimpleInfo::kWingIdFieldNumber;
const int CharacterDBSimpleInfo::kFashionIdFieldNumber;
const int CharacterDBSimpleInfo::kCampFieldNumber;
const int CharacterDBSimpleInfo::kOfficialFieldNumber;
const int CharacterDBSimpleInfo::kKnightFieldNumber;
#endif  // !_MSC_VER

CharacterDBSimpleInfo::CharacterDBSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBSimpleInfo::InitAsDefaultInstance() {
}

CharacterDBSimpleInfo::CharacterDBSimpleInfo(const CharacterDBSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  prof_ = 0u;
  level_ = 0u;
  race_ = 0u;
  exp_ = GOOGLE_LONGLONG(0);
  hp_ = 0u;
  fightpower_ = 0u;
  weapon_id_ = 0u;
  clothes_id_ = 0u;
  wing_id_ = 0u;
  camp_ = 0;
  official_ = 0;
  knight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBSimpleInfo::~CharacterDBSimpleInfo() {
  SharedDtor();
}

void CharacterDBSimpleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CharacterDBSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBSimpleInfo_descriptor_;
}

const CharacterDBSimpleInfo& CharacterDBSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBSimpleInfo* CharacterDBSimpleInfo::default_instance_ = NULL;

CharacterDBSimpleInfo* CharacterDBSimpleInfo::New() const {
  return new CharacterDBSimpleInfo;
}

void CharacterDBSimpleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    prof_ = 0u;
    level_ = 0u;
    race_ = 0u;
    exp_ = GOOGLE_LONGLONG(0);
    hp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fightpower_ = 0u;
    weapon_id_ = 0u;
    clothes_id_ = 0u;
    wing_id_ = 0u;
    camp_ = 0;
    official_ = 0;
    knight_ = 0;
  }
  fashion_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // required uint32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_race;
        break;
      }

      // required uint32 race = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int64 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fightPower;
        break;
      }

      // optional uint32 fightPower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weapon_id;
        break;
      }

      // optional uint32 weapon_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_clothes_id;
        break;
      }

      // optional uint32 clothes_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothes_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothes_id_)));
          set_has_clothes_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wing_id;
        break;
      }

      // optional uint32 wing_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wing_id_)));
          set_has_wing_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fashion_id;
        break;
      }

      // repeated uint32 fashion_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_fashion_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fashion_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fashion_id;
        if (input->ExpectTag(112)) goto parse_camp;
        break;
      }

      // optional int32 camp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_official;
        break;
      }

      // optional int32 official = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_knight;
        break;
      }

      // optional int32 knight = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knight_)));
          set_has_knight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // required uint32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // required uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // required uint32 race = 6;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->race(), output);
  }

  // optional int64 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->exp(), output);
  }

  // optional uint32 hp = 8;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hp(), output);
  }

  // optional uint32 fightPower = 9;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fightpower(), output);
  }

  // optional uint32 weapon_id = 10;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weapon_id(), output);
  }

  // optional uint32 clothes_id = 11;
  if (has_clothes_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->clothes_id(), output);
  }

  // optional uint32 wing_id = 12;
  if (has_wing_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wing_id(), output);
  }

  // repeated uint32 fashion_id = 13;
  for (int i = 0; i < this->fashion_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->fashion_id(i), output);
  }

  // optional int32 camp = 14;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->camp(), output);
  }

  // optional int32 official = 15;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->official(), output);
  }

  // optional int32 knight = 16;
  if (has_knight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->knight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // required uint32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // required uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // required uint32 race = 6;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->race(), target);
  }

  // optional int64 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->exp(), target);
  }

  // optional uint32 hp = 8;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hp(), target);
  }

  // optional uint32 fightPower = 9;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fightpower(), target);
  }

  // optional uint32 weapon_id = 10;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weapon_id(), target);
  }

  // optional uint32 clothes_id = 11;
  if (has_clothes_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->clothes_id(), target);
  }

  // optional uint32 wing_id = 12;
  if (has_wing_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wing_id(), target);
  }

  // repeated uint32 fashion_id = 13;
  for (int i = 0; i < this->fashion_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->fashion_id(i), target);
  }

  // optional int32 camp = 14;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->camp(), target);
  }

  // optional int32 official = 15;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->official(), target);
  }

  // optional int32 knight = 16;
  if (has_knight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->knight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 race = 6;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->race());
    }

    // optional int64 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional uint32 hp = 8;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 fightPower = 9;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }

    // optional uint32 weapon_id = 10;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // optional uint32 clothes_id = 11;
    if (has_clothes_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothes_id());
    }

    // optional uint32 wing_id = 12;
    if (has_wing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wing_id());
    }

    // optional int32 camp = 14;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 official = 15;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // optional int32 knight = 16;
    if (has_knight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knight());
    }

  }
  // repeated uint32 fashion_id = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->fashion_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fashion_id(i));
    }
    total_size += 1 * this->fashion_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBSimpleInfo::MergeFrom(const CharacterDBSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashion_id_.MergeFrom(from.fashion_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_clothes_id()) {
      set_clothes_id(from.clothes_id());
    }
    if (from.has_wing_id()) {
      set_wing_id(from.wing_id());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_knight()) {
      set_knight(from.knight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBSimpleInfo::CopyFrom(const CharacterDBSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBSimpleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CharacterDBSimpleInfo::Swap(CharacterDBSimpleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(race_, other->race_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(clothes_id_, other->clothes_id_);
    std::swap(wing_id_, other->wing_id_);
    fashion_id_.Swap(&other->fashion_id_);
    std::swap(camp_, other->camp_);
    std::swap(official_, other->official_);
    std::swap(knight_, other->knight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBSimpleInfo_descriptor_;
  metadata.reflection = CharacterDBSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemProtoInfo::kItemIdFieldNumber;
const int ItemProtoInfo::kItemNumFieldNumber;
const int ItemProtoInfo::kBindFieldNumber;
const int ItemProtoInfo::kStrenlevFieldNumber;
const int ItemProtoInfo::kRefinelevFieldNumber;
const int ItemProtoInfo::kHolyFieldNumber;
const int ItemProtoInfo::kRefineexFieldNumber;
const int ItemProtoInfo::kBaseattrFieldNumber;
const int ItemProtoInfo::kInlayFieldNumber;
const int ItemProtoInfo::kIndexFieldNumber;
const int ItemProtoInfo::kFightFieldNumber;
const int ItemProtoInfo::kMakerFieldNumber;
#endif  // !_MSC_VER

ItemProtoInfo::ItemProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemProtoInfo::InitAsDefaultInstance() {
}

ItemProtoInfo::ItemProtoInfo(const ItemProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0;
  bind_ = 0;
  strenlev_ = 0;
  refinelev_ = 0;
  holy_ = 0;
  index_ = 0;
  fight_ = 0;
  maker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemProtoInfo::~ItemProtoInfo() {
  SharedDtor();
}

void ItemProtoInfo::SharedDtor() {
  if (maker_ != &::google::protobuf::internal::kEmptyString) {
    delete maker_;
  }
  if (this != default_instance_) {
  }
}

void ItemProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemProtoInfo_descriptor_;
}

const ItemProtoInfo& ItemProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

ItemProtoInfo* ItemProtoInfo::default_instance_ = NULL;

ItemProtoInfo* ItemProtoInfo::New() const {
  return new ItemProtoInfo;
}

void ItemProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0;
    bind_ = 0;
    strenlev_ = 0;
    refinelev_ = 0;
    holy_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    index_ = 0;
    fight_ = 0;
    if (has_maker()) {
      if (maker_ != &::google::protobuf::internal::kEmptyString) {
        maker_->clear();
      }
    }
  }
  refineex_.Clear();
  baseattr_.Clear();
  inlay_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // required int32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strenlev;
        break;
      }

      // optional int32 strenlev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strenlev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenlev_)));
          set_has_strenlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refinelev;
        break;
      }

      // optional int32 refinelev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refinelev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelev_)));
          set_has_refinelev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_holy;
        break;
      }

      // optional int32 holy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holy_)));
          set_has_holy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refineex;
        break;
      }

      // repeated .ProtoBuf.Attr refineex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refineex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refineex;
        if (input->ExpectTag(66)) goto parse_baseattr;
        break;
      }

      // repeated .ProtoBuf.Attr baseattr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_baseattr;
        if (input->ExpectTag(72)) goto parse_inlay;
        break;
      }

      // repeated uint32 inlay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_inlay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inlay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inlay;
        if (input->ExpectTag(80)) goto parse_index;
        break;
      }

      // optional int32 index = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fight;
        break;
      }

      // optional int32 fight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_maker;
        break;
      }

      // optional string maker = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maker().data(), this->maker().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  // optional int32 strenlev = 4;
  if (has_strenlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->strenlev(), output);
  }

  // optional int32 refinelev = 5;
  if (has_refinelev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refinelev(), output);
  }

  // optional int32 holy = 6;
  if (has_holy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->holy(), output);
  }

  // repeated .ProtoBuf.Attr refineex = 7;
  for (int i = 0; i < this->refineex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->refineex(i), output);
  }

  // repeated .ProtoBuf.Attr baseattr = 8;
  for (int i = 0; i < this->baseattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->baseattr(i), output);
  }

  // repeated uint32 inlay = 9;
  for (int i = 0; i < this->inlay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->inlay(i), output);
  }

  // optional int32 index = 10;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->index(), output);
  }

  // optional int32 fight = 11;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fight(), output);
  }

  // optional string maker = 12;
  if (has_maker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maker().data(), this->maker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->maker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  // optional int32 strenlev = 4;
  if (has_strenlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->strenlev(), target);
  }

  // optional int32 refinelev = 5;
  if (has_refinelev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refinelev(), target);
  }

  // optional int32 holy = 6;
  if (has_holy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->holy(), target);
  }

  // repeated .ProtoBuf.Attr refineex = 7;
  for (int i = 0; i < this->refineex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->refineex(i), target);
  }

  // repeated .ProtoBuf.Attr baseattr = 8;
  for (int i = 0; i < this->baseattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->baseattr(i), target);
  }

  // repeated uint32 inlay = 9;
  for (int i = 0; i < this->inlay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->inlay(i), target);
  }

  // optional int32 index = 10;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->index(), target);
  }

  // optional int32 fight = 11;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fight(), target);
  }

  // optional string maker = 12;
  if (has_maker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maker().data(), this->maker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->maker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int32 strenlev = 4;
    if (has_strenlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenlev());
    }

    // optional int32 refinelev = 5;
    if (has_refinelev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelev());
    }

    // optional int32 holy = 6;
    if (has_holy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holy());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 index = 10;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 fight = 11;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional string maker = 12;
    if (has_maker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maker());
    }

  }
  // repeated .ProtoBuf.Attr refineex = 7;
  total_size += 1 * this->refineex_size();
  for (int i = 0; i < this->refineex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refineex(i));
  }

  // repeated .ProtoBuf.Attr baseattr = 8;
  total_size += 1 * this->baseattr_size();
  for (int i = 0; i < this->baseattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseattr(i));
  }

  // repeated uint32 inlay = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->inlay_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->inlay(i));
    }
    total_size += 1 * this->inlay_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemProtoInfo::MergeFrom(const ItemProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  refineex_.MergeFrom(from.refineex_);
  baseattr_.MergeFrom(from.baseattr_);
  inlay_.MergeFrom(from.inlay_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_strenlev()) {
      set_strenlev(from.strenlev());
    }
    if (from.has_refinelev()) {
      set_refinelev(from.refinelev());
    }
    if (from.has_holy()) {
      set_holy(from.holy());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_maker()) {
      set_maker(from.maker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemProtoInfo::CopyFrom(const ItemProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemProtoInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < refineex_size(); i++) {
    if (!this->refineex(i).IsInitialized()) return false;
  }
  for (int i = 0; i < baseattr_size(); i++) {
    if (!this->baseattr(i).IsInitialized()) return false;
  }
  return true;
}

void ItemProtoInfo::Swap(ItemProtoInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(bind_, other->bind_);
    std::swap(strenlev_, other->strenlev_);
    std::swap(refinelev_, other->refinelev_);
    std::swap(holy_, other->holy_);
    refineex_.Swap(&other->refineex_);
    baseattr_.Swap(&other->baseattr_);
    inlay_.Swap(&other->inlay_);
    std::swap(index_, other->index_);
    std::swap(fight_, other->fight_);
    std::swap(maker_, other->maker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemProtoInfo_descriptor_;
  metadata.reflection = ItemProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FashionProtoInfo::kFashionIdFieldNumber;
const int FashionProtoInfo::kLeftSecFieldNumber;
#endif  // !_MSC_VER

FashionProtoInfo::FashionProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FashionProtoInfo::InitAsDefaultInstance() {
}

FashionProtoInfo::FashionProtoInfo(const FashionProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FashionProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  fashion_id_ = 0u;
  left_sec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FashionProtoInfo::~FashionProtoInfo() {
  SharedDtor();
}

void FashionProtoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FashionProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FashionProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FashionProtoInfo_descriptor_;
}

const FashionProtoInfo& FashionProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

FashionProtoInfo* FashionProtoInfo::default_instance_ = NULL;

FashionProtoInfo* FashionProtoInfo::New() const {
  return new FashionProtoInfo;
}

void FashionProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fashion_id_ = 0u;
    left_sec_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FashionProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fashion_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashion_id_)));
          set_has_fashion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_sec;
        break;
      }

      // optional uint64 left_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_sec_)));
          set_has_left_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FashionProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fashion_id = 1;
  if (has_fashion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fashion_id(), output);
  }

  // optional uint64 left_sec = 2;
  if (has_left_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->left_sec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FashionProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fashion_id = 1;
  if (has_fashion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fashion_id(), target);
  }

  // optional uint64 left_sec = 2;
  if (has_left_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->left_sec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FashionProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fashion_id = 1;
    if (has_fashion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashion_id());
    }

    // optional uint64 left_sec = 2;
    if (has_left_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->left_sec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FashionProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FashionProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FashionProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FashionProtoInfo::MergeFrom(const FashionProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fashion_id()) {
      set_fashion_id(from.fashion_id());
    }
    if (from.has_left_sec()) {
      set_left_sec(from.left_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FashionProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FashionProtoInfo::CopyFrom(const FashionProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FashionProtoInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FashionProtoInfo::Swap(FashionProtoInfo* other) {
  if (other != this) {
    std::swap(fashion_id_, other->fashion_id_);
    std::swap(left_sec_, other->left_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FashionProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FashionProtoInfo_descriptor_;
  metadata.reflection = FashionProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBPackageData::kExpandNumFieldNumber;
const int CharacterDBPackageData::kEquipFieldNumber;
const int CharacterDBPackageData::kDailyFieldNumber;
const int CharacterDBPackageData::kMaterialFieldNumber;
const int CharacterDBPackageData::kTaskFieldNumber;
#endif  // !_MSC_VER

CharacterDBPackageData::CharacterDBPackageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBPackageData::InitAsDefaultInstance() {
}

CharacterDBPackageData::CharacterDBPackageData(const CharacterDBPackageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBPackageData::SharedCtor() {
  _cached_size_ = 0;
  expand_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBPackageData::~CharacterDBPackageData() {
  SharedDtor();
}

void CharacterDBPackageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBPackageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBPackageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBPackageData_descriptor_;
}

const CharacterDBPackageData& CharacterDBPackageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBPackageData* CharacterDBPackageData::default_instance_ = NULL;

CharacterDBPackageData* CharacterDBPackageData::New() const {
  return new CharacterDBPackageData;
}

void CharacterDBPackageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expand_num_ = 0;
  }
  equip_.Clear();
  daily_.Clear();
  material_.Clear();
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBPackageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 expand_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_num_)));
          set_has_expand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        if (input->ExpectTag(26)) goto parse_daily;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo daily = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_daily;
        if (input->ExpectTag(34)) goto parse_material;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo material = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_material;
        if (input->ExpectTag(42)) goto parse_task;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo task = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBPackageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 expand_num = 1;
  if (has_expand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->expand_num(), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 2;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(i), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo daily = 3;
  for (int i = 0; i < this->daily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->daily(i), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo material = 4;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->material(i), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo task = 5;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBPackageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 expand_num = 1;
  if (has_expand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->expand_num(), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 2;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(i), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo daily = 3;
  for (int i = 0; i < this->daily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->daily(i), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo material = 4;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->material(i), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo task = 5;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBPackageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 expand_num = 1;
    if (has_expand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_num());
    }

  }
  // repeated .ProtoBuf.ItemProtoInfo equip = 2;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .ProtoBuf.ItemProtoInfo daily = 3;
  total_size += 1 * this->daily_size();
  for (int i = 0; i < this->daily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily(i));
  }

  // repeated .ProtoBuf.ItemProtoInfo material = 4;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  // repeated .ProtoBuf.ItemProtoInfo task = 5;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBPackageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBPackageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBPackageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBPackageData::MergeFrom(const CharacterDBPackageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  daily_.MergeFrom(from.daily_);
  material_.MergeFrom(from.material_);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expand_num()) {
      set_expand_num(from.expand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBPackageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBPackageData::CopyFrom(const CharacterDBPackageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBPackageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  for (int i = 0; i < daily_size(); i++) {
    if (!this->daily(i).IsInitialized()) return false;
  }
  for (int i = 0; i < material_size(); i++) {
    if (!this->material(i).IsInitialized()) return false;
  }
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDBPackageData::Swap(CharacterDBPackageData* other) {
  if (other != this) {
    std::swap(expand_num_, other->expand_num_);
    equip_.Swap(&other->equip_);
    daily_.Swap(&other->daily_);
    material_.Swap(&other->material_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBPackageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBPackageData_descriptor_;
  metadata.reflection = CharacterDBPackageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBEquipData::kEquipFieldNumber;
#endif  // !_MSC_VER

CharacterDBEquipData::CharacterDBEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBEquipData::InitAsDefaultInstance() {
}

CharacterDBEquipData::CharacterDBEquipData(const CharacterDBEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBEquipData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBEquipData::~CharacterDBEquipData() {
  SharedDtor();
}

void CharacterDBEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBEquipData_descriptor_;
}

const CharacterDBEquipData& CharacterDBEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBEquipData* CharacterDBEquipData::default_instance_ = NULL;

CharacterDBEquipData* CharacterDBEquipData::New() const {
  return new CharacterDBEquipData;
}

void CharacterDBEquipData::Clear() {
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemProtoInfo equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBEquipData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemProtoInfo equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBEquipData::MergeFrom(const CharacterDBEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBEquipData::CopyFrom(const CharacterDBEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBEquipData::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDBEquipData::Swap(CharacterDBEquipData* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBEquipData_descriptor_;
  metadata.reflection = CharacterDBEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBFashionData::kDataFieldNumber;
const int CharacterDBFashionData::kDressFieldNumber;
const int CharacterDBFashionData::kOpenFieldNumber;
#endif  // !_MSC_VER

CharacterDBFashionData::CharacterDBFashionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBFashionData::InitAsDefaultInstance() {
}

CharacterDBFashionData::CharacterDBFashionData(const CharacterDBFashionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBFashionData::SharedCtor() {
  _cached_size_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBFashionData::~CharacterDBFashionData() {
  SharedDtor();
}

void CharacterDBFashionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBFashionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBFashionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBFashionData_descriptor_;
}

const CharacterDBFashionData& CharacterDBFashionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBFashionData* CharacterDBFashionData::default_instance_ = NULL;

CharacterDBFashionData* CharacterDBFashionData::New() const {
  return new CharacterDBFashionData;
}

void CharacterDBFashionData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    open_ = 0;
  }
  data_.Clear();
  dress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBFashionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.FashionProtoInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_dress;
        break;
      }

      // repeated .ProtoBuf.FashionProtoInfo dress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dress;
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional int32 open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBFashionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.FashionProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated .ProtoBuf.FashionProtoInfo dress = 2;
  for (int i = 0; i < this->dress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dress(i), output);
  }

  // optional int32 open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBFashionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.FashionProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // repeated .ProtoBuf.FashionProtoInfo dress = 2;
  for (int i = 0; i < this->dress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dress(i), target);
  }

  // optional int32 open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBFashionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 open = 3;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  // repeated .ProtoBuf.FashionProtoInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .ProtoBuf.FashionProtoInfo dress = 2;
  total_size += 1 * this->dress_size();
  for (int i = 0; i < this->dress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBFashionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBFashionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBFashionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBFashionData::MergeFrom(const CharacterDBFashionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  dress_.MergeFrom(from.dress_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBFashionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBFashionData::CopyFrom(const CharacterDBFashionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBFashionData::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dress_size(); i++) {
    if (!this->dress(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDBFashionData::Swap(CharacterDBFashionData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    dress_.Swap(&other->dress_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBFashionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBFashionData_descriptor_;
  metadata.reflection = CharacterDBFashionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplicateSingleProto::kDupliateIdFieldNumber;
const int DuplicateSingleProto::kStarFieldNumber;
const int DuplicateSingleProto::kRewardCountFieldNumber;
const int DuplicateSingleProto::kLastFreshFieldNumber;
const int DuplicateSingleProto::kBuyCountFieldNumber;
#endif  // !_MSC_VER

DuplicateSingleProto::DuplicateSingleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateSingleProto::InitAsDefaultInstance() {
}

DuplicateSingleProto::DuplicateSingleProto(const DuplicateSingleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateSingleProto::SharedCtor() {
  _cached_size_ = 0;
  dupliate_id_ = 0;
  star_ = 0;
  reward_count_ = 0;
  last_fresh_ = GOOGLE_ULONGLONG(0);
  buy_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateSingleProto::~DuplicateSingleProto() {
  SharedDtor();
}

void DuplicateSingleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateSingleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateSingleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateSingleProto_descriptor_;
}

const DuplicateSingleProto& DuplicateSingleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

DuplicateSingleProto* DuplicateSingleProto::default_instance_ = NULL;

DuplicateSingleProto* DuplicateSingleProto::New() const {
  return new DuplicateSingleProto;
}

void DuplicateSingleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupliate_id_ = 0;
    star_ = 0;
    reward_count_ = 0;
    last_fresh_ = GOOGLE_ULONGLONG(0);
    buy_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateSingleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dupliate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupliate_id_)));
          set_has_dupliate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_count;
        break;
      }

      // optional int32 reward_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_fresh;
        break;
      }

      // optional uint64 last_fresh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_fresh_)));
          set_has_last_fresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_count;
        break;
      }

      // optional int32 buy_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplicateSingleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dupliate_id = 1;
  if (has_dupliate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupliate_id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 reward_count = 3;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_count(), output);
  }

  // optional uint64 last_fresh = 4;
  if (has_last_fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_fresh(), output);
  }

  // optional int32 buy_count = 5;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateSingleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dupliate_id = 1;
  if (has_dupliate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupliate_id(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int32 reward_count = 3;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_count(), target);
  }

  // optional uint64 last_fresh = 4;
  if (has_last_fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_fresh(), target);
  }

  // optional int32 buy_count = 5;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateSingleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dupliate_id = 1;
    if (has_dupliate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupliate_id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 reward_count = 3;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

    // optional uint64 last_fresh = 4;
    if (has_last_fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_fresh());
    }

    // optional int32 buy_count = 5;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateSingleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateSingleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateSingleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateSingleProto::MergeFrom(const DuplicateSingleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupliate_id()) {
      set_dupliate_id(from.dupliate_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_last_fresh()) {
      set_last_fresh(from.last_fresh());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateSingleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateSingleProto::CopyFrom(const DuplicateSingleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateSingleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DuplicateSingleProto::Swap(DuplicateSingleProto* other) {
  if (other != this) {
    std::swap(dupliate_id_, other->dupliate_id_);
    std::swap(star_, other->star_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(last_fresh_, other->last_fresh_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateSingleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateSingleProto_descriptor_;
  metadata.reflection = DuplicateSingleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDuplicateData::kDuplicateFieldNumber;
#endif  // !_MSC_VER

CharacterDBDuplicateData::CharacterDBDuplicateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDuplicateData::InitAsDefaultInstance() {
}

CharacterDBDuplicateData::CharacterDBDuplicateData(const CharacterDBDuplicateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDuplicateData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDuplicateData::~CharacterDBDuplicateData() {
  SharedDtor();
}

void CharacterDBDuplicateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBDuplicateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDuplicateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDuplicateData_descriptor_;
}

const CharacterDBDuplicateData& CharacterDBDuplicateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBDuplicateData* CharacterDBDuplicateData::default_instance_ = NULL;

CharacterDBDuplicateData* CharacterDBDuplicateData::New() const {
  return new CharacterDBDuplicateData;
}

void CharacterDBDuplicateData::Clear() {
  duplicate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDuplicateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.DuplicateSingleProto duplicate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duplicate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_duplicate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_duplicate;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDuplicateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.DuplicateSingleProto duplicate = 1;
  for (int i = 0; i < this->duplicate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->duplicate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDuplicateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.DuplicateSingleProto duplicate = 1;
  for (int i = 0; i < this->duplicate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->duplicate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDuplicateData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.DuplicateSingleProto duplicate = 1;
  total_size += 1 * this->duplicate_size();
  for (int i = 0; i < this->duplicate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->duplicate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDuplicateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDuplicateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDuplicateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDuplicateData::MergeFrom(const CharacterDBDuplicateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  duplicate_.MergeFrom(from.duplicate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDuplicateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDuplicateData::CopyFrom(const CharacterDBDuplicateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDuplicateData::IsInitialized() const {

  for (int i = 0; i < duplicate_size(); i++) {
    if (!this->duplicate(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDBDuplicateData::Swap(CharacterDBDuplicateData* other) {
  if (other != this) {
    duplicate_.Swap(&other->duplicate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDuplicateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDuplicateData_descriptor_;
  metadata.reflection = CharacterDBDuplicateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMailData::kMailListFieldNumber;
#endif  // !_MSC_VER

CharacterDBMailData::CharacterDBMailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMailData::InitAsDefaultInstance() {
}

CharacterDBMailData::CharacterDBMailData(const CharacterDBMailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMailData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMailData::~CharacterDBMailData() {
  SharedDtor();
}

void CharacterDBMailData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMailData_descriptor_;
}

const CharacterDBMailData& CharacterDBMailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDBMailData* CharacterDBMailData::default_instance_ = NULL;

CharacterDBMailData* CharacterDBMailData::New() const {
  return new CharacterDBMailData;
}

void CharacterDBMailData::Clear() {
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.MailInfo mailList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mailList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.MailInfo mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maillist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.MailInfo mailList = 1;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maillist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMailData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.MailInfo mailList = 1;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMailData::MergeFrom(const CharacterDBMailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMailData::CopyFrom(const CharacterDBMailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMailData::IsInitialized() const {

  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDBMailData::Swap(CharacterDBMailData* other) {
  if (other != this) {
    maillist_.Swap(&other->maillist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMailData_descriptor_;
  metadata.reflection = CharacterDBMailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleCampRankDBInfo::kCharidFieldNumber;
const int SingleCampRankDBInfo::kLevelFieldNumber;
const int SingleCampRankDBInfo::kFightFieldNumber;
const int SingleCampRankDBInfo::kOfficialFieldNumber;
const int SingleCampRankDBInfo::kKnightFieldNumber;
#endif  // !_MSC_VER

SingleCampRankDBInfo::SingleCampRankDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleCampRankDBInfo::InitAsDefaultInstance() {
}

SingleCampRankDBInfo::SingleCampRankDBInfo(const SingleCampRankDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleCampRankDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  level_ = 0;
  fight_ = 0;
  official_ = 0;
  knight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleCampRankDBInfo::~SingleCampRankDBInfo() {
  SharedDtor();
}

void SingleCampRankDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleCampRankDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleCampRankDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleCampRankDBInfo_descriptor_;
}

const SingleCampRankDBInfo& SingleCampRankDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

SingleCampRankDBInfo* SingleCampRankDBInfo::default_instance_ = NULL;

SingleCampRankDBInfo* SingleCampRankDBInfo::New() const {
  return new SingleCampRankDBInfo;
}

void SingleCampRankDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    level_ = 0;
    fight_ = 0;
    official_ = 0;
    knight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleCampRankDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional int32 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_official;
        break;
      }

      // optional int32 official = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_knight;
        break;
      }

      // optional int32 knight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knight_)));
          set_has_knight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleCampRankDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fight(), output);
  }

  // optional int32 official = 4;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->official(), output);
  }

  // optional int32 knight = 5;
  if (has_knight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->knight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleCampRankDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fight(), target);
  }

  // optional int32 official = 4;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->official(), target);
  }

  // optional int32 knight = 5;
  if (has_knight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->knight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleCampRankDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 official = 4;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // optional int32 knight = 5;
    if (has_knight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleCampRankDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleCampRankDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleCampRankDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleCampRankDBInfo::MergeFrom(const SingleCampRankDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_knight()) {
      set_knight(from.knight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleCampRankDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCampRankDBInfo::CopyFrom(const SingleCampRankDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCampRankDBInfo::IsInitialized() const {

  return true;
}

void SingleCampRankDBInfo::Swap(SingleCampRankDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(official_, other->official_);
    std::swap(knight_, other->knight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleCampRankDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleCampRankDBInfo_descriptor_;
  metadata.reflection = SingleCampRankDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampRankDBData::kRankFieldNumber;
#endif  // !_MSC_VER

CampRankDBData::CampRankDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampRankDBData::InitAsDefaultInstance() {
}

CampRankDBData::CampRankDBData(const CampRankDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampRankDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampRankDBData::~CampRankDBData() {
  SharedDtor();
}

void CampRankDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampRankDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampRankDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampRankDBData_descriptor_;
}

const CampRankDBData& CampRankDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CampRankDBData* CampRankDBData::default_instance_ = NULL;

CampRankDBData* CampRankDBData::New() const {
  return new CampRankDBData;
}

void CampRankDBData::Clear() {
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampRankDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.SingleCampRankDBInfo rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampRankDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.SingleCampRankDBInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampRankDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.SingleCampRankDBInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampRankDBData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.SingleCampRankDBInfo rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampRankDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampRankDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampRankDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampRankDBData::MergeFrom(const CampRankDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampRankDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampRankDBData::CopyFrom(const CampRankDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampRankDBData::IsInitialized() const {

  return true;
}

void CampRankDBData::Swap(CampRankDBData* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampRankDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampRankDBData_descriptor_;
  metadata.reflection = CampRankDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleCampDBData::kCampIdFieldNumber;
const int SingleCampDBData::kLeaderIdFieldNumber;
const int SingleCampDBData::kNoticeFieldNumber;
const int SingleCampDBData::kLastNoticeFieldNumber;
const int SingleCampDBData::kLastFreshFieldNumber;
const int SingleCampDBData::kActiveNumFieldNumber;
const int SingleCampDBData::kTotalFightFieldNumber;
const int SingleCampDBData::kLevRankFieldNumber;
const int SingleCampDBData::kFightRankFieldNumber;
const int SingleCampDBData::kOfficialRankFieldNumber;
const int SingleCampDBData::kKnightRankFieldNumber;
#endif  // !_MSC_VER

SingleCampDBData::SingleCampDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleCampDBData::InitAsDefaultInstance() {
  lev_rank_ = const_cast< ::ProtoBuf::CampRankDBData*>(&::ProtoBuf::CampRankDBData::default_instance());
  fight_rank_ = const_cast< ::ProtoBuf::CampRankDBData*>(&::ProtoBuf::CampRankDBData::default_instance());
  official_rank_ = const_cast< ::ProtoBuf::CampRankDBData*>(&::ProtoBuf::CampRankDBData::default_instance());
  knight_rank_ = const_cast< ::ProtoBuf::CampRankDBData*>(&::ProtoBuf::CampRankDBData::default_instance());
}

SingleCampDBData::SingleCampDBData(const SingleCampDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleCampDBData::SharedCtor() {
  _cached_size_ = 0;
  camp_id_ = 0;
  leader_id_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_notice_ = GOOGLE_ULONGLONG(0);
  last_fresh_ = GOOGLE_ULONGLONG(0);
  active_num_ = 0u;
  total_fight_ = GOOGLE_ULONGLONG(0);
  lev_rank_ = NULL;
  fight_rank_ = NULL;
  official_rank_ = NULL;
  knight_rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleCampDBData::~SingleCampDBData() {
  SharedDtor();
}

void SingleCampDBData::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete lev_rank_;
    delete fight_rank_;
    delete official_rank_;
    delete knight_rank_;
  }
}

void SingleCampDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleCampDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleCampDBData_descriptor_;
}

const SingleCampDBData& SingleCampDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

SingleCampDBData* SingleCampDBData::default_instance_ = NULL;

SingleCampDBData* SingleCampDBData::New() const {
  return new SingleCampDBData;
}

void SingleCampDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_id_ = 0;
    leader_id_ = 0u;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    last_notice_ = GOOGLE_ULONGLONG(0);
    last_fresh_ = GOOGLE_ULONGLONG(0);
    active_num_ = 0u;
    total_fight_ = GOOGLE_ULONGLONG(0);
    if (has_lev_rank()) {
      if (lev_rank_ != NULL) lev_rank_->::ProtoBuf::CampRankDBData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fight_rank()) {
      if (fight_rank_ != NULL) fight_rank_->::ProtoBuf::CampRankDBData::Clear();
    }
    if (has_official_rank()) {
      if (official_rank_ != NULL) official_rank_->::ProtoBuf::CampRankDBData::Clear();
    }
    if (has_knight_rank()) {
      if (knight_rank_ != NULL) knight_rank_->::ProtoBuf::CampRankDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleCampDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 camp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leader_id;
        break;
      }

      // optional uint32 leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // optional string notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_notice;
        break;
      }

      // optional uint64 last_notice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_notice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_notice_)));
          set_has_last_notice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_fresh;
        break;
      }

      // optional uint64 last_fresh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_fresh_)));
          set_has_last_fresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_active_num;
        break;
      }

      // optional uint32 active_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_num_)));
          set_has_active_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_fight;
        break;
      }

      // optional uint64 total_fight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_fight_)));
          set_has_total_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lev_rank;
        break;
      }

      // optional .ProtoBuf.CampRankDBData lev_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lev_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lev_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fight_rank;
        break;
      }

      // optional .ProtoBuf.CampRankDBData fight_rank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_official_rank;
        break;
      }

      // optional .ProtoBuf.CampRankDBData official_rank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_official_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_official_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_knight_rank;
        break;
      }

      // optional .ProtoBuf.CampRankDBData knight_rank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_knight_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_knight_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleCampDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 camp_id = 1;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp_id(), output);
  }

  // optional uint32 leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leader_id(), output);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notice(), output);
  }

  // optional uint64 last_notice = 4;
  if (has_last_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_notice(), output);
  }

  // optional uint64 last_fresh = 5;
  if (has_last_fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_fresh(), output);
  }

  // optional uint32 active_num = 6;
  if (has_active_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->active_num(), output);
  }

  // optional uint64 total_fight = 7;
  if (has_total_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total_fight(), output);
  }

  // optional .ProtoBuf.CampRankDBData lev_rank = 8;
  if (has_lev_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lev_rank(), output);
  }

  // optional .ProtoBuf.CampRankDBData fight_rank = 9;
  if (has_fight_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fight_rank(), output);
  }

  // optional .ProtoBuf.CampRankDBData official_rank = 10;
  if (has_official_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->official_rank(), output);
  }

  // optional .ProtoBuf.CampRankDBData knight_rank = 11;
  if (has_knight_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->knight_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleCampDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 camp_id = 1;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp_id(), target);
  }

  // optional uint32 leader_id = 2;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leader_id(), target);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }

  // optional uint64 last_notice = 4;
  if (has_last_notice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_notice(), target);
  }

  // optional uint64 last_fresh = 5;
  if (has_last_fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_fresh(), target);
  }

  // optional uint32 active_num = 6;
  if (has_active_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->active_num(), target);
  }

  // optional uint64 total_fight = 7;
  if (has_total_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_fight(), target);
  }

  // optional .ProtoBuf.CampRankDBData lev_rank = 8;
  if (has_lev_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lev_rank(), target);
  }

  // optional .ProtoBuf.CampRankDBData fight_rank = 9;
  if (has_fight_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fight_rank(), target);
  }

  // optional .ProtoBuf.CampRankDBData official_rank = 10;
  if (has_official_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->official_rank(), target);
  }

  // optional .ProtoBuf.CampRankDBData knight_rank = 11;
  if (has_knight_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->knight_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleCampDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 camp_id = 1;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

    // optional uint32 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_id());
    }

    // optional string notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint64 last_notice = 4;
    if (has_last_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_notice());
    }

    // optional uint64 last_fresh = 5;
    if (has_last_fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_fresh());
    }

    // optional uint32 active_num = 6;
    if (has_active_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_num());
    }

    // optional uint64 total_fight = 7;
    if (has_total_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_fight());
    }

    // optional .ProtoBuf.CampRankDBData lev_rank = 8;
    if (has_lev_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lev_rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoBuf.CampRankDBData fight_rank = 9;
    if (has_fight_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_rank());
    }

    // optional .ProtoBuf.CampRankDBData official_rank = 10;
    if (has_official_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->official_rank());
    }

    // optional .ProtoBuf.CampRankDBData knight_rank = 11;
    if (has_knight_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knight_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleCampDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleCampDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleCampDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleCampDBData::MergeFrom(const SingleCampDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_last_notice()) {
      set_last_notice(from.last_notice());
    }
    if (from.has_last_fresh()) {
      set_last_fresh(from.last_fresh());
    }
    if (from.has_active_num()) {
      set_active_num(from.active_num());
    }
    if (from.has_total_fight()) {
      set_total_fight(from.total_fight());
    }
    if (from.has_lev_rank()) {
      mutable_lev_rank()->::ProtoBuf::CampRankDBData::MergeFrom(from.lev_rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fight_rank()) {
      mutable_fight_rank()->::ProtoBuf::CampRankDBData::MergeFrom(from.fight_rank());
    }
    if (from.has_official_rank()) {
      mutable_official_rank()->::ProtoBuf::CampRankDBData::MergeFrom(from.official_rank());
    }
    if (from.has_knight_rank()) {
      mutable_knight_rank()->::ProtoBuf::CampRankDBData::MergeFrom(from.knight_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleCampDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCampDBData::CopyFrom(const SingleCampDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCampDBData::IsInitialized() const {

  return true;
}

void SingleCampDBData::Swap(SingleCampDBData* other) {
  if (other != this) {
    std::swap(camp_id_, other->camp_id_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(notice_, other->notice_);
    std::swap(last_notice_, other->last_notice_);
    std::swap(last_fresh_, other->last_fresh_);
    std::swap(active_num_, other->active_num_);
    std::swap(total_fight_, other->total_fight_);
    std::swap(lev_rank_, other->lev_rank_);
    std::swap(fight_rank_, other->fight_rank_);
    std::swap(official_rank_, other->official_rank_);
    std::swap(knight_rank_, other->knight_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleCampDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleCampDBData_descriptor_;
  metadata.reflection = SingleCampDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllCampDBData::kAllCampDataFieldNumber;
#endif  // !_MSC_VER

AllCampDBData::AllCampDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllCampDBData::InitAsDefaultInstance() {
}

AllCampDBData::AllCampDBData(const AllCampDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllCampDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllCampDBData::~AllCampDBData() {
  SharedDtor();
}

void AllCampDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllCampDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllCampDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllCampDBData_descriptor_;
}

const AllCampDBData& AllCampDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

AllCampDBData* AllCampDBData::default_instance_ = NULL;

AllCampDBData* AllCampDBData::New() const {
  return new AllCampDBData;
}

void AllCampDBData::Clear() {
  all_camp_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllCampDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.SingleCampDBData all_camp_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_camp_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_camp_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_all_camp_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllCampDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.SingleCampDBData all_camp_data = 1;
  for (int i = 0; i < this->all_camp_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_camp_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllCampDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.SingleCampDBData all_camp_data = 1;
  for (int i = 0; i < this->all_camp_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_camp_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllCampDBData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.SingleCampDBData all_camp_data = 1;
  total_size += 1 * this->all_camp_data_size();
  for (int i = 0; i < this->all_camp_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_camp_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllCampDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllCampDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllCampDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllCampDBData::MergeFrom(const AllCampDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_camp_data_.MergeFrom(from.all_camp_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllCampDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllCampDBData::CopyFrom(const AllCampDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllCampDBData::IsInitialized() const {

  return true;
}

void AllCampDBData::Swap(AllCampDBData* other) {
  if (other != this) {
    all_camp_data_.Swap(&other->all_camp_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllCampDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllCampDBData_descriptor_;
  metadata.reflection = AllCampDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBData::kTypeIdFieldNumber;
const int GlobalDBData::kGlobalDataFieldNumber;
#endif  // !_MSC_VER

GlobalDBData::GlobalDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBData::InitAsDefaultInstance() {
}

GlobalDBData::GlobalDBData(const GlobalDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBData::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  global_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBData::~GlobalDBData() {
  SharedDtor();
}

void GlobalDBData::SharedDtor() {
  if (global_data_ != &::google::protobuf::internal::kEmptyString) {
    delete global_data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBData_descriptor_;
}

const GlobalDBData& GlobalDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

GlobalDBData* GlobalDBData::default_instance_ = NULL;

GlobalDBData* GlobalDBData::New() const {
  return new GlobalDBData;
}

void GlobalDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_global_data()) {
      if (global_data_ != &::google::protobuf::internal::kEmptyString) {
        global_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_global_data;
        break;
      }

      // optional bytes global_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_global_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes global_data = 2;
  if (has_global_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->global_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes global_data = 2;
  if (has_global_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->global_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes global_data = 2;
    if (has_global_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->global_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBData::MergeFrom(const GlobalDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_global_data()) {
      set_global_data(from.global_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBData::CopyFrom(const GlobalDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GlobalDBData::Swap(GlobalDBData* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(global_data_, other->global_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBData_descriptor_;
  metadata.reflection = GlobalDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterCampDBData::kContributeFieldNumber;
const int CharacterCampDBData::kTotalContributeFieldNumber;
const int CharacterCampDBData::kPrestigeFieldNumber;
const int CharacterCampDBData::kLastJoinFieldNumber;
const int CharacterCampDBData::kCharidFieldNumber;
#endif  // !_MSC_VER

CharacterCampDBData::CharacterCampDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterCampDBData::InitAsDefaultInstance() {
}

CharacterCampDBData::CharacterCampDBData(const CharacterCampDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterCampDBData::SharedCtor() {
  _cached_size_ = 0;
  contribute_ = 0u;
  total_contribute_ = 0u;
  prestige_ = 0u;
  last_join_ = GOOGLE_ULONGLONG(0);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterCampDBData::~CharacterCampDBData() {
  SharedDtor();
}

void CharacterCampDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterCampDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterCampDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterCampDBData_descriptor_;
}

const CharacterCampDBData& CharacterCampDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterCampDBData* CharacterCampDBData::default_instance_ = NULL;

CharacterCampDBData* CharacterCampDBData::New() const {
  return new CharacterCampDBData;
}

void CharacterCampDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contribute_ = 0u;
    total_contribute_ = 0u;
    prestige_ = 0u;
    last_join_ = GOOGLE_ULONGLONG(0);
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterCampDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 contribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_contribute;
        break;
      }

      // optional uint32 total_contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contribute_)));
          set_has_total_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prestige;
        break;
      }

      // optional uint32 prestige = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_join;
        break;
      }

      // optional uint64 last_join = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_join:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_join_)));
          set_has_last_join();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterCampDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 contribute = 1;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contribute(), output);
  }

  // optional uint32 total_contribute = 2;
  if (has_total_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_contribute(), output);
  }

  // optional uint32 prestige = 3;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prestige(), output);
  }

  // optional uint64 last_join = 4;
  if (has_last_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_join(), output);
  }

  // optional uint32 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterCampDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 contribute = 1;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contribute(), target);
  }

  // optional uint32 total_contribute = 2;
  if (has_total_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_contribute(), target);
  }

  // optional uint32 prestige = 3;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prestige(), target);
  }

  // optional uint64 last_join = 4;
  if (has_last_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_join(), target);
  }

  // optional uint32 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterCampDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 contribute = 1;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

    // optional uint32 total_contribute = 2;
    if (has_total_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_contribute());
    }

    // optional uint32 prestige = 3;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

    // optional uint64 last_join = 4;
    if (has_last_join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_join());
    }

    // optional uint32 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterCampDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterCampDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterCampDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterCampDBData::MergeFrom(const CharacterCampDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_total_contribute()) {
      set_total_contribute(from.total_contribute());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_last_join()) {
      set_last_join(from.last_join());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterCampDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterCampDBData::CopyFrom(const CharacterCampDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterCampDBData::IsInitialized() const {

  return true;
}

void CharacterCampDBData::Swap(CharacterCampDBData* other) {
  if (other != this) {
    std::swap(contribute_, other->contribute_);
    std::swap(total_contribute_, other->total_contribute_);
    std::swap(prestige_, other->prestige_);
    std::swap(last_join_, other->last_join_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterCampDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterCampDBData_descriptor_;
  metadata.reflection = CharacterCampDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallInfo::kMallIdFieldNumber;
const int MallInfo::kBuyAmountFieldNumber;
const int MallInfo::kGoodsAmountFieldNumber;
const int MallInfo::kGoodsTimeFieldNumber;
const int MallInfo::kBuyTimeFieldNumber;
const int MallInfo::kOpenTimeFieldNumber;
const int MallInfo::kOpenCoolTimeFieldNumber;
#endif  // !_MSC_VER

MallInfo::MallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallInfo::InitAsDefaultInstance() {
}

MallInfo::MallInfo(const MallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallInfo::SharedCtor() {
  _cached_size_ = 0;
  mall_id_ = 0u;
  buy_amount_ = 0u;
  goods_amount_ = 0u;
  goods_time_ = GOOGLE_ULONGLONG(0);
  buy_time_ = GOOGLE_ULONGLONG(0);
  open_time_ = GOOGLE_ULONGLONG(0);
  open_cool_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallInfo::~MallInfo() {
  SharedDtor();
}

void MallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallInfo_descriptor_;
}

const MallInfo& MallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

MallInfo* MallInfo::default_instance_ = NULL;

MallInfo* MallInfo::New() const {
  return new MallInfo;
}

void MallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mall_id_ = 0u;
    buy_amount_ = 0u;
    goods_amount_ = 0u;
    goods_time_ = GOOGLE_ULONGLONG(0);
    buy_time_ = GOOGLE_ULONGLONG(0);
    open_time_ = GOOGLE_ULONGLONG(0);
    open_cool_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_amount;
        break;
      }

      // optional uint32 buy_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_amount_)));
          set_has_buy_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goods_amount;
        break;
      }

      // optional uint32 goods_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_amount_)));
          set_has_goods_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goods_time;
        break;
      }

      // optional uint64 goods_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goods_time_)));
          set_has_goods_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_time;
        break;
      }

      // optional uint64 buy_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buy_time_)));
          set_has_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_open_time;
        break;
      }

      // optional uint64 open_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_open_cool_time;
        break;
      }

      // optional uint64 open_cool_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_cool_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_cool_time_)));
          set_has_open_cool_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mall_id = 1;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mall_id(), output);
  }

  // optional uint32 buy_amount = 2;
  if (has_buy_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_amount(), output);
  }

  // optional uint32 goods_amount = 3;
  if (has_goods_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goods_amount(), output);
  }

  // optional uint64 goods_time = 4;
  if (has_goods_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->goods_time(), output);
  }

  // optional uint64 buy_time = 5;
  if (has_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->buy_time(), output);
  }

  // optional uint64 open_time = 6;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->open_time(), output);
  }

  // optional uint64 open_cool_time = 7;
  if (has_open_cool_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->open_cool_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mall_id = 1;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mall_id(), target);
  }

  // optional uint32 buy_amount = 2;
  if (has_buy_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_amount(), target);
  }

  // optional uint32 goods_amount = 3;
  if (has_goods_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->goods_amount(), target);
  }

  // optional uint64 goods_time = 4;
  if (has_goods_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->goods_time(), target);
  }

  // optional uint64 buy_time = 5;
  if (has_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->buy_time(), target);
  }

  // optional uint64 open_time = 6;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->open_time(), target);
  }

  // optional uint64 open_cool_time = 7;
  if (has_open_cool_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->open_cool_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mall_id = 1;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

    // optional uint32 buy_amount = 2;
    if (has_buy_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_amount());
    }

    // optional uint32 goods_amount = 3;
    if (has_goods_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_amount());
    }

    // optional uint64 goods_time = 4;
    if (has_goods_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goods_time());
    }

    // optional uint64 buy_time = 5;
    if (has_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buy_time());
    }

    // optional uint64 open_time = 6;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_time());
    }

    // optional uint64 open_cool_time = 7;
    if (has_open_cool_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_cool_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallInfo::MergeFrom(const MallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
    if (from.has_buy_amount()) {
      set_buy_amount(from.buy_amount());
    }
    if (from.has_goods_amount()) {
      set_goods_amount(from.goods_amount());
    }
    if (from.has_goods_time()) {
      set_goods_time(from.goods_time());
    }
    if (from.has_buy_time()) {
      set_buy_time(from.buy_time());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_open_cool_time()) {
      set_open_cool_time(from.open_cool_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallInfo::CopyFrom(const MallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallInfo::IsInitialized() const {

  return true;
}

void MallInfo::Swap(MallInfo* other) {
  if (other != this) {
    std::swap(mall_id_, other->mall_id_);
    std::swap(buy_amount_, other->buy_amount_);
    std::swap(goods_amount_, other->goods_amount_);
    std::swap(goods_time_, other->goods_time_);
    std::swap(buy_time_, other->buy_time_);
    std::swap(open_time_, other->open_time_);
    std::swap(open_cool_time_, other->open_cool_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallInfo_descriptor_;
  metadata.reflection = MallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllMallDBData::kLastLogoutFieldNumber;
const int AllMallDBData::kAllMallDataFieldNumber;
#endif  // !_MSC_VER

AllMallDBData::AllMallDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllMallDBData::InitAsDefaultInstance() {
}

AllMallDBData::AllMallDBData(const AllMallDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllMallDBData::SharedCtor() {
  _cached_size_ = 0;
  last_logout_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllMallDBData::~AllMallDBData() {
  SharedDtor();
}

void AllMallDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllMallDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllMallDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllMallDBData_descriptor_;
}

const AllMallDBData& AllMallDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

AllMallDBData* AllMallDBData::default_instance_ = NULL;

AllMallDBData* AllMallDBData::New() const {
  return new AllMallDBData;
}

void AllMallDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_logout_ = GOOGLE_ULONGLONG(0);
  }
  all_mall_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllMallDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_logout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_)));
          set_has_last_logout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_mall_data;
        break;
      }

      // repeated .ProtoBuf.MallInfo all_mall_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_mall_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_mall_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_mall_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllMallDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_logout = 1;
  if (has_last_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_logout(), output);
  }

  // repeated .ProtoBuf.MallInfo all_mall_data = 2;
  for (int i = 0; i < this->all_mall_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_mall_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllMallDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 last_logout = 1;
  if (has_last_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_logout(), target);
  }

  // repeated .ProtoBuf.MallInfo all_mall_data = 2;
  for (int i = 0; i < this->all_mall_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_mall_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllMallDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_logout = 1;
    if (has_last_logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout());
    }

  }
  // repeated .ProtoBuf.MallInfo all_mall_data = 2;
  total_size += 1 * this->all_mall_data_size();
  for (int i = 0; i < this->all_mall_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_mall_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllMallDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllMallDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllMallDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllMallDBData::MergeFrom(const AllMallDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_mall_data_.MergeFrom(from.all_mall_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_logout()) {
      set_last_logout(from.last_logout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllMallDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllMallDBData::CopyFrom(const AllMallDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllMallDBData::IsInitialized() const {

  return true;
}

void AllMallDBData::Swap(AllMallDBData* other) {
  if (other != this) {
    std::swap(last_logout_, other->last_logout_);
    all_mall_data_.Swap(&other->all_mall_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllMallDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllMallDBData_descriptor_;
  metadata.reflection = AllMallDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleCharacterMallDB::kCharidFieldNumber;
const int SingleCharacterMallDB::kInfoFieldNumber;
#endif  // !_MSC_VER

SingleCharacterMallDB::SingleCharacterMallDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleCharacterMallDB::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::AllMallDBData*>(&::ProtoBuf::AllMallDBData::default_instance());
}

SingleCharacterMallDB::SingleCharacterMallDB(const SingleCharacterMallDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleCharacterMallDB::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleCharacterMallDB::~SingleCharacterMallDB() {
  SharedDtor();
}

void SingleCharacterMallDB::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SingleCharacterMallDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleCharacterMallDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleCharacterMallDB_descriptor_;
}

const SingleCharacterMallDB& SingleCharacterMallDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

SingleCharacterMallDB* SingleCharacterMallDB::default_instance_ = NULL;

SingleCharacterMallDB* SingleCharacterMallDB::New() const {
  return new SingleCharacterMallDB;
}

void SingleCharacterMallDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::AllMallDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleCharacterMallDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.AllMallDBData info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleCharacterMallDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional .ProtoBuf.AllMallDBData info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleCharacterMallDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional .ProtoBuf.AllMallDBData info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleCharacterMallDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .ProtoBuf.AllMallDBData info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleCharacterMallDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleCharacterMallDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleCharacterMallDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleCharacterMallDB::MergeFrom(const SingleCharacterMallDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::AllMallDBData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleCharacterMallDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCharacterMallDB::CopyFrom(const SingleCharacterMallDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCharacterMallDB::IsInitialized() const {

  return true;
}

void SingleCharacterMallDB::Swap(SingleCharacterMallDB* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleCharacterMallDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleCharacterMallDB_descriptor_;
  metadata.reflection = SingleCharacterMallDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleAchievementDBData::kIdFieldNumber;
const int SingleAchievementDBData::kStatusFieldNumber;
const int SingleAchievementDBData::kCompleteCountFieldNumber;
#endif  // !_MSC_VER

SingleAchievementDBData::SingleAchievementDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleAchievementDBData::InitAsDefaultInstance() {
}

SingleAchievementDBData::SingleAchievementDBData(const SingleAchievementDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleAchievementDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  completecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleAchievementDBData::~SingleAchievementDBData() {
  SharedDtor();
}

void SingleAchievementDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleAchievementDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleAchievementDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleAchievementDBData_descriptor_;
}

const SingleAchievementDBData& SingleAchievementDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

SingleAchievementDBData* SingleAchievementDBData::default_instance_ = NULL;

SingleAchievementDBData* SingleAchievementDBData::New() const {
  return new SingleAchievementDBData;
}

void SingleAchievementDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    status_ = 0u;
    completecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleAchievementDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_completeCount;
        break;
      }

      // optional uint32 completeCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completecount_)));
          set_has_completecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleAchievementDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 completeCount = 3;
  if (has_completecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleAchievementDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 completeCount = 3;
  if (has_completecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleAchievementDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 completeCount = 3;
    if (has_completecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleAchievementDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleAchievementDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleAchievementDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleAchievementDBData::MergeFrom(const SingleAchievementDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_completecount()) {
      set_completecount(from.completecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleAchievementDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAchievementDBData::CopyFrom(const SingleAchievementDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAchievementDBData::IsInitialized() const {

  return true;
}

void SingleAchievementDBData::Swap(SingleAchievementDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(completecount_, other->completecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleAchievementDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleAchievementDBData_descriptor_;
  metadata.reflection = SingleAchievementDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupAchievementDBData::kSortTypeFieldNumber;
const int GroupAchievementDBData::kAchievementInfoListFieldNumber;
const int GroupAchievementDBData::kAchievementRewardFieldNumber;
#endif  // !_MSC_VER

GroupAchievementDBData::GroupAchievementDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupAchievementDBData::InitAsDefaultInstance() {
}

GroupAchievementDBData::GroupAchievementDBData(const GroupAchievementDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupAchievementDBData::SharedCtor() {
  _cached_size_ = 0;
  sorttype_ = 0u;
  achievementreward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupAchievementDBData::~GroupAchievementDBData() {
  SharedDtor();
}

void GroupAchievementDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupAchievementDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAchievementDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAchievementDBData_descriptor_;
}

const GroupAchievementDBData& GroupAchievementDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

GroupAchievementDBData* GroupAchievementDBData::default_instance_ = NULL;

GroupAchievementDBData* GroupAchievementDBData::New() const {
  return new GroupAchievementDBData;
}

void GroupAchievementDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sorttype_ = 0u;
    achievementreward_ = 0u;
  }
  achievementinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupAchievementDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sortType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sorttype_)));
          set_has_sorttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievementInfoList;
        break;
      }

      // repeated .ProtoBuf.SingleAchievementDBData achievementInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievementInfoList;
        if (input->ExpectTag(24)) goto parse_achievementReward;
        break;
      }

      // optional uint32 achievementReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementreward_)));
          set_has_achievementreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupAchievementDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sorttype(), output);
  }

  // repeated .ProtoBuf.SingleAchievementDBData achievementInfoList = 2;
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achievementinfolist(i), output);
  }

  // optional uint32 achievementReward = 3;
  if (has_achievementreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->achievementreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupAchievementDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sorttype(), target);
  }

  // repeated .ProtoBuf.SingleAchievementDBData achievementInfoList = 2;
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achievementinfolist(i), target);
  }

  // optional uint32 achievementReward = 3;
  if (has_achievementreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->achievementreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupAchievementDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sortType = 1;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sorttype());
    }

    // optional uint32 achievementReward = 3;
    if (has_achievementreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementreward());
    }

  }
  // repeated .ProtoBuf.SingleAchievementDBData achievementInfoList = 2;
  total_size += 1 * this->achievementinfolist_size();
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAchievementDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupAchievementDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupAchievementDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupAchievementDBData::MergeFrom(const GroupAchievementDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementinfolist_.MergeFrom(from.achievementinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttype()) {
      set_sorttype(from.sorttype());
    }
    if (from.has_achievementreward()) {
      set_achievementreward(from.achievementreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupAchievementDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAchievementDBData::CopyFrom(const GroupAchievementDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAchievementDBData::IsInitialized() const {

  return true;
}

void GroupAchievementDBData::Swap(GroupAchievementDBData* other) {
  if (other != this) {
    std::swap(sorttype_, other->sorttype_);
    achievementinfolist_.Swap(&other->achievementinfolist_);
    std::swap(achievementreward_, other->achievementreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupAchievementDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAchievementDBData_descriptor_;
  metadata.reflection = GroupAchievementDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterAchievementDBData::kGroupAchievementDataFieldNumber;
#endif  // !_MSC_VER

CharacterAchievementDBData::CharacterAchievementDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterAchievementDBData::InitAsDefaultInstance() {
}

CharacterAchievementDBData::CharacterAchievementDBData(const CharacterAchievementDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterAchievementDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterAchievementDBData::~CharacterAchievementDBData() {
  SharedDtor();
}

void CharacterAchievementDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterAchievementDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterAchievementDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterAchievementDBData_descriptor_;
}

const CharacterAchievementDBData& CharacterAchievementDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterAchievementDBData* CharacterAchievementDBData::default_instance_ = NULL;

CharacterAchievementDBData* CharacterAchievementDBData::New() const {
  return new CharacterAchievementDBData;
}

void CharacterAchievementDBData::Clear() {
  groupachievementdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterAchievementDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.GroupAchievementDBData groupAchievementData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupAchievementData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupachievementdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groupAchievementData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterAchievementDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.GroupAchievementDBData groupAchievementData = 1;
  for (int i = 0; i < this->groupachievementdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groupachievementdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterAchievementDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.GroupAchievementDBData groupAchievementData = 1;
  for (int i = 0; i < this->groupachievementdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groupachievementdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterAchievementDBData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.GroupAchievementDBData groupAchievementData = 1;
  total_size += 1 * this->groupachievementdata_size();
  for (int i = 0; i < this->groupachievementdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupachievementdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterAchievementDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterAchievementDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterAchievementDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterAchievementDBData::MergeFrom(const CharacterAchievementDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupachievementdata_.MergeFrom(from.groupachievementdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterAchievementDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterAchievementDBData::CopyFrom(const CharacterAchievementDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterAchievementDBData::IsInitialized() const {

  return true;
}

void CharacterAchievementDBData::Swap(CharacterAchievementDBData* other) {
  if (other != this) {
    groupachievementdata_.Swap(&other->groupachievementdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterAchievementDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterAchievementDBData_descriptor_;
  metadata.reflection = CharacterAchievementDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleDeputyDBData::kTypeFieldNumber;
const int SingleDeputyDBData::kSkillLvlFieldNumber;
const int SingleDeputyDBData::kLvlValFieldNumber;
#endif  // !_MSC_VER

SingleDeputyDBData::SingleDeputyDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleDeputyDBData::InitAsDefaultInstance() {
}

SingleDeputyDBData::SingleDeputyDBData(const SingleDeputyDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleDeputyDBData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  skill_lvl_ = 0;
  lvl_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleDeputyDBData::~SingleDeputyDBData() {
  SharedDtor();
}

void SingleDeputyDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleDeputyDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleDeputyDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleDeputyDBData_descriptor_;
}

const SingleDeputyDBData& SingleDeputyDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

SingleDeputyDBData* SingleDeputyDBData::default_instance_ = NULL;

SingleDeputyDBData* SingleDeputyDBData::New() const {
  return new SingleDeputyDBData;
}

void SingleDeputyDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    skill_lvl_ = 0;
    lvl_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleDeputyDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_lvl;
        break;
      }

      // required int32 skill_lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_lvl_)));
          set_has_skill_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lvl_val;
        break;
      }

      // optional int32 lvl_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvl_val_)));
          set_has_lvl_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleDeputyDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 skill_lvl = 2;
  if (has_skill_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_lvl(), output);
  }

  // optional int32 lvl_val = 3;
  if (has_lvl_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lvl_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleDeputyDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 skill_lvl = 2;
  if (has_skill_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_lvl(), target);
  }

  // optional int32 lvl_val = 3;
  if (has_lvl_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lvl_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleDeputyDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 skill_lvl = 2;
    if (has_skill_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_lvl());
    }

    // optional int32 lvl_val = 3;
    if (has_lvl_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvl_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleDeputyDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleDeputyDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleDeputyDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleDeputyDBData::MergeFrom(const SingleDeputyDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_skill_lvl()) {
      set_skill_lvl(from.skill_lvl());
    }
    if (from.has_lvl_val()) {
      set_lvl_val(from.lvl_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleDeputyDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleDeputyDBData::CopyFrom(const SingleDeputyDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDeputyDBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SingleDeputyDBData::Swap(SingleDeputyDBData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(skill_lvl_, other->skill_lvl_);
    std::swap(lvl_val_, other->lvl_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleDeputyDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleDeputyDBData_descriptor_;
  metadata.reflection = SingleDeputyDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectDeputyDBData::kDataFieldNumber;
#endif  // !_MSC_VER

CollectDeputyDBData::CollectDeputyDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectDeputyDBData::InitAsDefaultInstance() {
}

CollectDeputyDBData::CollectDeputyDBData(const CollectDeputyDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectDeputyDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectDeputyDBData::~CollectDeputyDBData() {
  SharedDtor();
}

void CollectDeputyDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectDeputyDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectDeputyDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectDeputyDBData_descriptor_;
}

const CollectDeputyDBData& CollectDeputyDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CollectDeputyDBData* CollectDeputyDBData::default_instance_ = NULL;

CollectDeputyDBData* CollectDeputyDBData::New() const {
  return new CollectDeputyDBData;
}

void CollectDeputyDBData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectDeputyDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.SingleDeputyDBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectDeputyDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectDeputyDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectDeputyDBData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectDeputyDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectDeputyDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectDeputyDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectDeputyDBData::MergeFrom(const CollectDeputyDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectDeputyDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectDeputyDBData::CopyFrom(const CollectDeputyDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectDeputyDBData::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void CollectDeputyDBData::Swap(CollectDeputyDBData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectDeputyDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectDeputyDBData_descriptor_;
  metadata.reflection = CollectDeputyDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeDeputyDBData::kDataFieldNumber;
#endif  // !_MSC_VER

MakeDeputyDBData::MakeDeputyDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakeDeputyDBData::InitAsDefaultInstance() {
}

MakeDeputyDBData::MakeDeputyDBData(const MakeDeputyDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakeDeputyDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeDeputyDBData::~MakeDeputyDBData() {
  SharedDtor();
}

void MakeDeputyDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeDeputyDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeDeputyDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeDeputyDBData_descriptor_;
}

const MakeDeputyDBData& MakeDeputyDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

MakeDeputyDBData* MakeDeputyDBData::default_instance_ = NULL;

MakeDeputyDBData* MakeDeputyDBData::New() const {
  return new MakeDeputyDBData;
}

void MakeDeputyDBData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeDeputyDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.SingleDeputyDBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakeDeputyDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakeDeputyDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakeDeputyDBData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeDeputyDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeDeputyDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeDeputyDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeDeputyDBData::MergeFrom(const MakeDeputyDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeDeputyDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeDeputyDBData::CopyFrom(const MakeDeputyDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeDeputyDBData::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void MakeDeputyDBData::Swap(MakeDeputyDBData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeDeputyDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeDeputyDBData_descriptor_;
  metadata.reflection = MakeDeputyDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDeputyDBData::kCollectFieldNumber;
const int CharacterDeputyDBData::kMakeFieldNumber;
#endif  // !_MSC_VER

CharacterDeputyDBData::CharacterDeputyDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDeputyDBData::InitAsDefaultInstance() {
  collect_ = const_cast< ::ProtoBuf::CollectDeputyDBData*>(&::ProtoBuf::CollectDeputyDBData::default_instance());
  make_ = const_cast< ::ProtoBuf::MakeDeputyDBData*>(&::ProtoBuf::MakeDeputyDBData::default_instance());
}

CharacterDeputyDBData::CharacterDeputyDBData(const CharacterDeputyDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDeputyDBData::SharedCtor() {
  _cached_size_ = 0;
  collect_ = NULL;
  make_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDeputyDBData::~CharacterDeputyDBData() {
  SharedDtor();
}

void CharacterDeputyDBData::SharedDtor() {
  if (this != default_instance_) {
    delete collect_;
    delete make_;
  }
}

void CharacterDeputyDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDeputyDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDeputyDBData_descriptor_;
}

const CharacterDeputyDBData& CharacterDeputyDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDeputyDBData* CharacterDeputyDBData::default_instance_ = NULL;

CharacterDeputyDBData* CharacterDeputyDBData::New() const {
  return new CharacterDeputyDBData;
}

void CharacterDeputyDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collect()) {
      if (collect_ != NULL) collect_->::ProtoBuf::CollectDeputyDBData::Clear();
    }
    if (has_make()) {
      if (make_ != NULL) make_->::ProtoBuf::MakeDeputyDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDeputyDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.CollectDeputyDBData collect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_make;
        break;
      }

      // optional .ProtoBuf.MakeDeputyDBData make = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDeputyDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.CollectDeputyDBData collect = 1;
  if (has_collect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collect(), output);
  }

  // optional .ProtoBuf.MakeDeputyDBData make = 2;
  if (has_make()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->make(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDeputyDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.CollectDeputyDBData collect = 1;
  if (has_collect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->collect(), target);
  }

  // optional .ProtoBuf.MakeDeputyDBData make = 2;
  if (has_make()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->make(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDeputyDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.CollectDeputyDBData collect = 1;
    if (has_collect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect());
    }

    // optional .ProtoBuf.MakeDeputyDBData make = 2;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDeputyDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDeputyDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDeputyDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDeputyDBData::MergeFrom(const CharacterDeputyDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collect()) {
      mutable_collect()->::ProtoBuf::CollectDeputyDBData::MergeFrom(from.collect());
    }
    if (from.has_make()) {
      mutable_make()->::ProtoBuf::MakeDeputyDBData::MergeFrom(from.make());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDeputyDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDeputyDBData::CopyFrom(const CharacterDeputyDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDeputyDBData::IsInitialized() const {

  if (has_collect()) {
    if (!this->collect().IsInitialized()) return false;
  }
  if (has_make()) {
    if (!this->make().IsInitialized()) return false;
  }
  return true;
}

void CharacterDeputyDBData::Swap(CharacterDeputyDBData* other) {
  if (other != this) {
    std::swap(collect_, other->collect_);
    std::swap(make_, other->make_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDeputyDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDeputyDBData_descriptor_;
  metadata.reflection = CharacterDeputyDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3PB::kXFieldNumber;
const int Vector3PB::kYFieldNumber;
const int Vector3PB::kZFieldNumber;
#endif  // !_MSC_VER

Vector3PB::Vector3PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3PB::InitAsDefaultInstance() {
}

Vector3PB::Vector3PB(const Vector3PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3PB::~Vector3PB() {
  SharedDtor();
}

void Vector3PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3PB_descriptor_;
}

const Vector3PB& Vector3PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

Vector3PB* Vector3PB::default_instance_ = NULL;

Vector3PB* Vector3PB::New() const {
  return new Vector3PB;
}

void Vector3PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3PB::MergeFrom(const Vector3PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3PB::CopyFrom(const Vector3PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3PB::Swap(Vector3PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3PB_descriptor_;
  metadata.reflection = Vector3PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorMove::kCidFieldNumber;
const int ActorMove::kCurrentPosFieldNumber;
const int ActorMove::kPathFieldNumber;
#endif  // !_MSC_VER

ActorMove::ActorMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorMove::InitAsDefaultInstance() {
  currentpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

ActorMove::ActorMove(const ActorMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorMove::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  currentpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorMove::~ActorMove() {
  SharedDtor();
}

void ActorMove::SharedDtor() {
  if (this != default_instance_) {
    delete currentpos_;
  }
}

void ActorMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorMove_descriptor_;
}

const ActorMove& ActorMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

ActorMove* ActorMove::default_instance_ = NULL;

ActorMove* ActorMove::New() const {
  return new ActorMove;
}

void ActorMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_currentpos()) {
      if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
    }
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currentPos;
        break;
      }

      // required .ProtoBuf.Vector3PB currentPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // repeated .ProtoBuf.Vector3PB path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActorMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentpos(), output);
  }

  // repeated .ProtoBuf.Vector3PB path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentpos(), target);
  }

  // repeated .ProtoBuf.Vector3PB path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required .ProtoBuf.Vector3PB currentPos = 2;
    if (has_currentpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentpos());
    }

  }
  // repeated .ProtoBuf.Vector3PB path = 3;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorMove::MergeFrom(const ActorMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_currentpos()) {
      mutable_currentpos()->::ProtoBuf::Vector3PB::MergeFrom(from.currentpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorMove::CopyFrom(const ActorMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_currentpos()) {
    if (!this->currentpos().IsInitialized()) return false;
  }
  for (int i = 0; i < path_size(); i++) {
    if (!this->path(i).IsInitialized()) return false;
  }
  return true;
}

void ActorMove::Swap(ActorMove* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(currentpos_, other->currentpos_);
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorMove_descriptor_;
  metadata.reflection = ActorMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorSkillMove::kCidFieldNumber;
const int ActorSkillMove::kCurrentPosFieldNumber;
const int ActorSkillMove::kPathFieldNumber;
const int ActorSkillMove::kSpeedFieldNumber;
#endif  // !_MSC_VER

ActorSkillMove::ActorSkillMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorSkillMove::InitAsDefaultInstance() {
  currentpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

ActorSkillMove::ActorSkillMove(const ActorSkillMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorSkillMove::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  currentpos_ = NULL;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorSkillMove::~ActorSkillMove() {
  SharedDtor();
}

void ActorSkillMove::SharedDtor() {
  if (this != default_instance_) {
    delete currentpos_;
  }
}

void ActorSkillMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorSkillMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorSkillMove_descriptor_;
}

const ActorSkillMove& ActorSkillMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

ActorSkillMove* ActorSkillMove::default_instance_ = NULL;

ActorSkillMove* ActorSkillMove::New() const {
  return new ActorSkillMove;
}

void ActorSkillMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_currentpos()) {
      if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
    }
    speed_ = 0;
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorSkillMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currentPos;
        break;
      }

      // required .ProtoBuf.Vector3PB currentPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // repeated .ProtoBuf.Vector3PB path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        if (input->ExpectTag(37)) goto parse_speed;
        break;
      }

      // required float speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActorSkillMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentpos(), output);
  }

  // repeated .ProtoBuf.Vector3PB path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(i), output);
  }

  // required float speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorSkillMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentpos(), target);
  }

  // repeated .ProtoBuf.Vector3PB path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path(i), target);
  }

  // required float speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorSkillMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required .ProtoBuf.Vector3PB currentPos = 2;
    if (has_currentpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentpos());
    }

    // required float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  // repeated .ProtoBuf.Vector3PB path = 3;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorSkillMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorSkillMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorSkillMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorSkillMove::MergeFrom(const ActorSkillMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_currentpos()) {
      mutable_currentpos()->::ProtoBuf::Vector3PB::MergeFrom(from.currentpos());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorSkillMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorSkillMove::CopyFrom(const ActorSkillMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorSkillMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_currentpos()) {
    if (!this->currentpos().IsInitialized()) return false;
  }
  for (int i = 0; i < path_size(); i++) {
    if (!this->path(i).IsInitialized()) return false;
  }
  return true;
}

void ActorSkillMove::Swap(ActorSkillMove* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(currentpos_, other->currentpos_);
    path_.Swap(&other->path_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorSkillMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorSkillMove_descriptor_;
  metadata.reflection = ActorSkillMove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ActorRockerMove_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorRockerMove_Type_descriptor_;
}
bool ActorRockerMove_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ActorRockerMove_Type ActorRockerMove::Up;
const ActorRockerMove_Type ActorRockerMove::Down;
const ActorRockerMove_Type ActorRockerMove::Stop;
const ActorRockerMove_Type ActorRockerMove::Block;
const ActorRockerMove_Type ActorRockerMove::UpRoll;
const ActorRockerMove_Type ActorRockerMove::DownRoll;
const ActorRockerMove_Type ActorRockerMove::Type_MIN;
const ActorRockerMove_Type ActorRockerMove::Type_MAX;
const int ActorRockerMove::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ActorRockerMove::kCidFieldNumber;
const int ActorRockerMove::kCurrentPosFieldNumber;
const int ActorRockerMove::kCurrentRangeFieldNumber;
const int ActorRockerMove::kMoveTypeFieldNumber;
#endif  // !_MSC_VER

ActorRockerMove::ActorRockerMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorRockerMove::InitAsDefaultInstance() {
  currentpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

ActorRockerMove::ActorRockerMove(const ActorRockerMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorRockerMove::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  currentpos_ = NULL;
  currentrange_ = 0;
  movetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorRockerMove::~ActorRockerMove() {
  SharedDtor();
}

void ActorRockerMove::SharedDtor() {
  if (this != default_instance_) {
    delete currentpos_;
  }
}

void ActorRockerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorRockerMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorRockerMove_descriptor_;
}

const ActorRockerMove& ActorRockerMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

ActorRockerMove* ActorRockerMove::default_instance_ = NULL;

ActorRockerMove* ActorRockerMove::New() const {
  return new ActorRockerMove;
}

void ActorRockerMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_currentpos()) {
      if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
    }
    currentrange_ = 0;
    movetype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorRockerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currentPos;
        break;
      }

      // required .ProtoBuf.Vector3PB currentPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_currentRange;
        break;
      }

      // required float currentRange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_currentRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentrange_)));
          set_has_currentrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moveType;
        break;
      }

      // required .ProtoBuf.ActorRockerMove.Type moveType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::ActorRockerMove_Type_IsValid(value)) {
            set_movetype(static_cast< ::ProtoBuf::ActorRockerMove_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActorRockerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentpos(), output);
  }

  // required float currentRange = 3;
  if (has_currentrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->currentrange(), output);
  }

  // required .ProtoBuf.ActorRockerMove.Type moveType = 4;
  if (has_movetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->movetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorRockerMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentpos(), target);
  }

  // required float currentRange = 3;
  if (has_currentrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->currentrange(), target);
  }

  // required .ProtoBuf.ActorRockerMove.Type moveType = 4;
  if (has_movetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->movetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorRockerMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required .ProtoBuf.Vector3PB currentPos = 2;
    if (has_currentpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentpos());
    }

    // required float currentRange = 3;
    if (has_currentrange()) {
      total_size += 1 + 4;
    }

    // required .ProtoBuf.ActorRockerMove.Type moveType = 4;
    if (has_movetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->movetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorRockerMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorRockerMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorRockerMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorRockerMove::MergeFrom(const ActorRockerMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_currentpos()) {
      mutable_currentpos()->::ProtoBuf::Vector3PB::MergeFrom(from.currentpos());
    }
    if (from.has_currentrange()) {
      set_currentrange(from.currentrange());
    }
    if (from.has_movetype()) {
      set_movetype(from.movetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorRockerMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorRockerMove::CopyFrom(const ActorRockerMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorRockerMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_currentpos()) {
    if (!this->currentpos().IsInitialized()) return false;
  }
  return true;
}

void ActorRockerMove::Swap(ActorRockerMove* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(currentpos_, other->currentpos_);
    std::swap(currentrange_, other->currentrange_);
    std::swap(movetype_, other->movetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorRockerMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorRockerMove_descriptor_;
  metadata.reflection = ActorRockerMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorPosUpDate::kCidFieldNumber;
const int ActorPosUpDate::kCurrentPosFieldNumber;
const int ActorPosUpDate::kCurrentDirFieldNumber;
const int ActorPosUpDate::kIsendFieldNumber;
#endif  // !_MSC_VER

ActorPosUpDate::ActorPosUpDate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorPosUpDate::InitAsDefaultInstance() {
  currentpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
  currentdir_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

ActorPosUpDate::ActorPosUpDate(const ActorPosUpDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorPosUpDate::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  currentpos_ = NULL;
  currentdir_ = NULL;
  isend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorPosUpDate::~ActorPosUpDate() {
  SharedDtor();
}

void ActorPosUpDate::SharedDtor() {
  if (this != default_instance_) {
    delete currentpos_;
    delete currentdir_;
  }
}

void ActorPosUpDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorPosUpDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorPosUpDate_descriptor_;
}

const ActorPosUpDate& ActorPosUpDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

ActorPosUpDate* ActorPosUpDate::default_instance_ = NULL;

ActorPosUpDate* ActorPosUpDate::New() const {
  return new ActorPosUpDate;
}

void ActorPosUpDate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_currentpos()) {
      if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
    }
    if (has_currentdir()) {
      if (currentdir_ != NULL) currentdir_->::ProtoBuf::Vector3PB::Clear();
    }
    isend_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorPosUpDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currentPos;
        break;
      }

      // required .ProtoBuf.Vector3PB currentPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_currentDir;
        break;
      }

      // required .ProtoBuf.Vector3PB currentDir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentdir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isend;
        break;
      }

      // optional uint32 isend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActorPosUpDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentpos(), output);
  }

  // required .ProtoBuf.Vector3PB currentDir = 3;
  if (has_currentdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->currentdir(), output);
  }

  // optional uint32 isend = 4;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorPosUpDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentpos(), target);
  }

  // required .ProtoBuf.Vector3PB currentDir = 3;
  if (has_currentdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->currentdir(), target);
  }

  // optional uint32 isend = 4;
  if (has_isend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorPosUpDate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required .ProtoBuf.Vector3PB currentPos = 2;
    if (has_currentpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentpos());
    }

    // required .ProtoBuf.Vector3PB currentDir = 3;
    if (has_currentdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentdir());
    }

    // optional uint32 isend = 4;
    if (has_isend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorPosUpDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorPosUpDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorPosUpDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorPosUpDate::MergeFrom(const ActorPosUpDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_currentpos()) {
      mutable_currentpos()->::ProtoBuf::Vector3PB::MergeFrom(from.currentpos());
    }
    if (from.has_currentdir()) {
      mutable_currentdir()->::ProtoBuf::Vector3PB::MergeFrom(from.currentdir());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorPosUpDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorPosUpDate::CopyFrom(const ActorPosUpDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorPosUpDate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_currentpos()) {
    if (!this->currentpos().IsInitialized()) return false;
  }
  if (has_currentdir()) {
    if (!this->currentdir().IsInitialized()) return false;
  }
  return true;
}

void ActorPosUpDate::Swap(ActorPosUpDate* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(currentpos_, other->currentpos_);
    std::swap(currentdir_, other->currentdir_);
    std::swap(isend_, other->isend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorPosUpDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorPosUpDate_descriptor_;
  metadata.reflection = ActorPosUpDate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharSyncAttr::kAttridFieldNumber;
const int CharSyncAttr::kAttrvalFieldNumber;
#endif  // !_MSC_VER

CharSyncAttr::CharSyncAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharSyncAttr::InitAsDefaultInstance() {
}

CharSyncAttr::CharSyncAttr(const CharSyncAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharSyncAttr::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0u;
  attrval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharSyncAttr::~CharSyncAttr() {
  SharedDtor();
}

void CharSyncAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharSyncAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharSyncAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharSyncAttr_descriptor_;
}

const CharSyncAttr& CharSyncAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharSyncAttr* CharSyncAttr::default_instance_ = NULL;

CharSyncAttr* CharSyncAttr::New() const {
  return new CharSyncAttr;
}

void CharSyncAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrid_ = 0u;
    attrval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharSyncAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attrval;
        break;
      }

      // required uint32 attrval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrval_)));
          set_has_attrval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharSyncAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attrid = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrid(), output);
  }

  // required uint32 attrval = 2;
  if (has_attrval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharSyncAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attrid = 1;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrid(), target);
  }

  // required uint32 attrval = 2;
  if (has_attrval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attrval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharSyncAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attrid = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // required uint32 attrval = 2;
    if (has_attrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharSyncAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharSyncAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharSyncAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharSyncAttr::MergeFrom(const CharSyncAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_attrval()) {
      set_attrval(from.attrval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharSyncAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharSyncAttr::CopyFrom(const CharSyncAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharSyncAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharSyncAttr::Swap(CharSyncAttr* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(attrval_, other->attrval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharSyncAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharSyncAttr_descriptor_;
  metadata.reflection = CharSyncAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCell::kSkillIdFieldNumber;
const int SkillCell::kSkillLevFieldNumber;
const int SkillCell::kCdFieldNumber;
#endif  // !_MSC_VER

SkillCell::SkillCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillCell::InitAsDefaultInstance() {
}

SkillCell::SkillCell(const SkillCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillCell::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllev_ = 0u;
  cd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCell::~SkillCell() {
  SharedDtor();
}

void SkillCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCell_descriptor_;
}

const SkillCell& SkillCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

SkillCell* SkillCell::default_instance_ = NULL;

SkillCell* SkillCell::New() const {
  return new SkillCell;
}

void SkillCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllev_ = 0u;
    cd_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLev;
        break;
      }

      // required uint32 skillLev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllev_)));
          set_has_skilllev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional uint64 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 skillLev = 2;
  if (has_skilllev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllev(), output);
  }

  // optional uint64 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 skillLev = 2;
  if (has_skilllev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllev(), target);
  }

  // optional uint64 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 skillLev = 2;
    if (has_skilllev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllev());
    }

    // optional uint64 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCell::MergeFrom(const SkillCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllev()) {
      set_skilllev(from.skilllev());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCell::CopyFrom(const SkillCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillCell::Swap(SkillCell* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllev_, other->skilllev_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCell_descriptor_;
  metadata.reflection = SkillCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr::kAttrNumFieldNumber;
const int Attr::kAttrvalueFieldNumber;
#endif  // !_MSC_VER

Attr::Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr::InitAsDefaultInstance() {
}

Attr::Attr(const Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr::SharedCtor() {
  _cached_size_ = 0;
  attrnum_ = 0u;
  attrvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr::~Attr() {
  SharedDtor();
}

void Attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr_descriptor_;
}

const Attr& Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

Attr* Attr::default_instance_ = NULL;

Attr* Attr::New() const {
  return new Attr;
}

void Attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrnum_ = 0u;
    attrvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AttrNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrnum_)));
          set_has_attrnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Attrvalue;
        break;
      }

      // required uint32 Attrvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AttrNum = 1;
  if (has_attrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrnum(), output);
  }

  // required uint32 Attrvalue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 AttrNum = 1;
  if (has_attrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrnum(), target);
  }

  // required uint32 Attrvalue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attrvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AttrNum = 1;
    if (has_attrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrnum());
    }

    // required uint32 Attrvalue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr::MergeFrom(const Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrnum()) {
      set_attrnum(from.attrnum());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr::CopyFrom(const Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Attr::Swap(Attr* other) {
  if (other != this) {
    std::swap(attrnum_, other->attrnum_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr_descriptor_;
  metadata.reflection = Attr_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DigPerfor_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigPerfor_Type_descriptor_;
}
bool DigPerfor_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DigPerfor_Type DigPerfor::addHp;
const DigPerfor_Type DigPerfor::reduceHp;
const DigPerfor_Type DigPerfor::cirit;
const DigPerfor_Type DigPerfor::doge;
const DigPerfor_Type DigPerfor::Type_MIN;
const DigPerfor_Type DigPerfor::Type_MAX;
const int DigPerfor::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DigPerfor::kTypeFieldNumber;
const int DigPerfor::kValueFieldNumber;
#endif  // !_MSC_VER

DigPerfor::DigPerfor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DigPerfor::InitAsDefaultInstance() {
}

DigPerfor::DigPerfor(const DigPerfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DigPerfor::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DigPerfor::~DigPerfor() {
  SharedDtor();
}

void DigPerfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DigPerfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigPerfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigPerfor_descriptor_;
}

const DigPerfor& DigPerfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

DigPerfor* DigPerfor::default_instance_ = NULL;

DigPerfor* DigPerfor::New() const {
  return new DigPerfor;
}

void DigPerfor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DigPerfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DigPerfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DigPerfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DigPerfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigPerfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DigPerfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DigPerfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DigPerfor::MergeFrom(const DigPerfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DigPerfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigPerfor::CopyFrom(const DigPerfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigPerfor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DigPerfor::Swap(DigPerfor* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DigPerfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DigPerfor_descriptor_;
  metadata.reflection = DigPerfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsCanTransSceneRouteReq::kDstMapIdFieldNumber;
const int IsCanTransSceneRouteReq::kSceneRouteIdFieldNumber;
#endif  // !_MSC_VER

IsCanTransSceneRouteReq::IsCanTransSceneRouteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsCanTransSceneRouteReq::InitAsDefaultInstance() {
}

IsCanTransSceneRouteReq::IsCanTransSceneRouteReq(const IsCanTransSceneRouteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsCanTransSceneRouteReq::SharedCtor() {
  _cached_size_ = 0;
  dstmapid_ = 0u;
  scenerouteid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsCanTransSceneRouteReq::~IsCanTransSceneRouteReq() {
  SharedDtor();
}

void IsCanTransSceneRouteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsCanTransSceneRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsCanTransSceneRouteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsCanTransSceneRouteReq_descriptor_;
}

const IsCanTransSceneRouteReq& IsCanTransSceneRouteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

IsCanTransSceneRouteReq* IsCanTransSceneRouteReq::default_instance_ = NULL;

IsCanTransSceneRouteReq* IsCanTransSceneRouteReq::New() const {
  return new IsCanTransSceneRouteReq;
}

void IsCanTransSceneRouteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dstmapid_ = 0u;
    scenerouteid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsCanTransSceneRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dstMapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstmapid_)));
          set_has_dstmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneRouteId;
        break;
      }

      // required uint32 sceneRouteId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneRouteId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenerouteid_)));
          set_has_scenerouteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsCanTransSceneRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dstMapId = 1;
  if (has_dstmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dstmapid(), output);
  }

  // required uint32 sceneRouteId = 2;
  if (has_scenerouteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenerouteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsCanTransSceneRouteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dstMapId = 1;
  if (has_dstmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dstmapid(), target);
  }

  // required uint32 sceneRouteId = 2;
  if (has_scenerouteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scenerouteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsCanTransSceneRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dstMapId = 1;
    if (has_dstmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstmapid());
    }

    // required uint32 sceneRouteId = 2;
    if (has_scenerouteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenerouteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsCanTransSceneRouteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsCanTransSceneRouteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsCanTransSceneRouteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsCanTransSceneRouteReq::MergeFrom(const IsCanTransSceneRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dstmapid()) {
      set_dstmapid(from.dstmapid());
    }
    if (from.has_scenerouteid()) {
      set_scenerouteid(from.scenerouteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsCanTransSceneRouteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCanTransSceneRouteReq::CopyFrom(const IsCanTransSceneRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCanTransSceneRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IsCanTransSceneRouteReq::Swap(IsCanTransSceneRouteReq* other) {
  if (other != this) {
    std::swap(dstmapid_, other->dstmapid_);
    std::swap(scenerouteid_, other->scenerouteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsCanTransSceneRouteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsCanTransSceneRouteReq_descriptor_;
  metadata.reflection = IsCanTransSceneRouteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsCanTransSceneReq::kDstMapIdFieldNumber;
#endif  // !_MSC_VER

IsCanTransSceneReq::IsCanTransSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsCanTransSceneReq::InitAsDefaultInstance() {
}

IsCanTransSceneReq::IsCanTransSceneReq(const IsCanTransSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsCanTransSceneReq::SharedCtor() {
  _cached_size_ = 0;
  dstmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsCanTransSceneReq::~IsCanTransSceneReq() {
  SharedDtor();
}

void IsCanTransSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsCanTransSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsCanTransSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsCanTransSceneReq_descriptor_;
}

const IsCanTransSceneReq& IsCanTransSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

IsCanTransSceneReq* IsCanTransSceneReq::default_instance_ = NULL;

IsCanTransSceneReq* IsCanTransSceneReq::New() const {
  return new IsCanTransSceneReq;
}

void IsCanTransSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dstmapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsCanTransSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dstMapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstmapid_)));
          set_has_dstmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsCanTransSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dstMapId = 1;
  if (has_dstmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dstmapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsCanTransSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dstMapId = 1;
  if (has_dstmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dstmapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsCanTransSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dstMapId = 1;
    if (has_dstmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstmapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsCanTransSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsCanTransSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsCanTransSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsCanTransSceneReq::MergeFrom(const IsCanTransSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dstmapid()) {
      set_dstmapid(from.dstmapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsCanTransSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCanTransSceneReq::CopyFrom(const IsCanTransSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCanTransSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsCanTransSceneReq::Swap(IsCanTransSceneReq* other) {
  if (other != this) {
    std::swap(dstmapid_, other->dstmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsCanTransSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsCanTransSceneReq_descriptor_;
  metadata.reflection = IsCanTransSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSellProto::kIndexFieldNumber;
const int ItemSellProto::kNumFieldNumber;
#endif  // !_MSC_VER

ItemSellProto::ItemSellProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSellProto::InitAsDefaultInstance() {
}

ItemSellProto::ItemSellProto(const ItemSellProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSellProto::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSellProto::~ItemSellProto() {
  SharedDtor();
}

void ItemSellProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSellProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSellProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSellProto_descriptor_;
}

const ItemSellProto& ItemSellProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

ItemSellProto* ItemSellProto::default_instance_ = NULL;

ItemSellProto* ItemSellProto::New() const {
  return new ItemSellProto;
}

void ItemSellProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSellProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSellProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSellProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSellProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSellProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSellProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSellProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSellProto::MergeFrom(const ItemSellProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSellProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSellProto::CopyFrom(const ItemSellProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSellProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemSellProto::Swap(ItemSellProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSellProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSellProto_descriptor_;
  metadata.reflection = ItemSellProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyDressProto::kIndexFieldNumber;
const int OneKeyDressProto::kPosFieldNumber;
#endif  // !_MSC_VER

OneKeyDressProto::OneKeyDressProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneKeyDressProto::InitAsDefaultInstance() {
}

OneKeyDressProto::OneKeyDressProto(const OneKeyDressProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyDressProto::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyDressProto::~OneKeyDressProto() {
  SharedDtor();
}

void OneKeyDressProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneKeyDressProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyDressProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyDressProto_descriptor_;
}

const OneKeyDressProto& OneKeyDressProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

OneKeyDressProto* OneKeyDressProto::default_instance_ = NULL;

OneKeyDressProto* OneKeyDressProto::New() const {
  return new OneKeyDressProto;
}

void OneKeyDressProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneKeyDressProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneKeyDressProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneKeyDressProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneKeyDressProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyDressProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyDressProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyDressProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneKeyDressProto::MergeFrom(const OneKeyDressProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneKeyDressProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneKeyDressProto::CopyFrom(const OneKeyDressProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneKeyDressProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OneKeyDressProto::Swap(OneKeyDressProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneKeyDressProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyDressProto_descriptor_;
  metadata.reflection = OneKeyDressProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardItemProto::kInfoFieldNumber;
#endif  // !_MSC_VER

RewardItemProto::RewardItemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardItemProto::InitAsDefaultInstance() {
}

RewardItemProto::RewardItemProto(const RewardItemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardItemProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItemProto::~RewardItemProto() {
  SharedDtor();
}

void RewardItemProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItemProto_descriptor_;
}

const RewardItemProto& RewardItemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

RewardItemProto* RewardItemProto::default_instance_ = NULL;

RewardItemProto* RewardItemProto::New() const {
  return new RewardItemProto;
}

void RewardItemProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemProtoInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemProtoInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardItemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemProtoInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardItemProto::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemProtoInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItemProto::MergeFrom(const RewardItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItemProto::CopyFrom(const RewardItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItemProto::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void RewardItemProto::Swap(RewardItemProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItemProto_descriptor_;
  metadata.reflection = RewardItemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplicateProto::kDupliateIdFieldNumber;
const int DuplicateProto::kStarFieldNumber;
const int DuplicateProto::kRewardCountFieldNumber;
const int DuplicateProto::kBuyCountFieldNumber;
#endif  // !_MSC_VER

DuplicateProto::DuplicateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateProto::InitAsDefaultInstance() {
}

DuplicateProto::DuplicateProto(const DuplicateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateProto::SharedCtor() {
  _cached_size_ = 0;
  dupliate_id_ = 0;
  star_ = 0;
  reward_count_ = 0;
  buy_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateProto::~DuplicateProto() {
  SharedDtor();
}

void DuplicateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateProto_descriptor_;
}

const DuplicateProto& DuplicateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

DuplicateProto* DuplicateProto::default_instance_ = NULL;

DuplicateProto* DuplicateProto::New() const {
  return new DuplicateProto;
}

void DuplicateProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupliate_id_ = 0;
    star_ = 0;
    reward_count_ = 0;
    buy_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dupliate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupliate_id_)));
          set_has_dupliate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_count;
        break;
      }

      // optional int32 reward_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_count;
        break;
      }

      // optional int32 buy_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplicateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dupliate_id = 1;
  if (has_dupliate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupliate_id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 reward_count = 3;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_count(), output);
  }

  // optional int32 buy_count = 4;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dupliate_id = 1;
  if (has_dupliate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupliate_id(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int32 reward_count = 3;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_count(), target);
  }

  // optional int32 buy_count = 4;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dupliate_id = 1;
    if (has_dupliate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupliate_id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 reward_count = 3;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

    // optional int32 buy_count = 4;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateProto::MergeFrom(const DuplicateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupliate_id()) {
      set_dupliate_id(from.dupliate_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateProto::CopyFrom(const DuplicateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DuplicateProto::Swap(DuplicateProto* other) {
  if (other != this) {
    std::swap(dupliate_id_, other->dupliate_id_);
    std::swap(star_, other->star_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateProto_descriptor_;
  metadata.reflection = DuplicateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationMember::kIdFieldNumber;
#endif  // !_MSC_VER

RelationMember::RelationMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationMember::InitAsDefaultInstance() {
}

RelationMember::RelationMember(const RelationMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationMember::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationMember::~RelationMember() {
  SharedDtor();
}

void RelationMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationMember_descriptor_;
}

const RelationMember& RelationMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

RelationMember* RelationMember::default_instance_ = NULL;

RelationMember* RelationMember::New() const {
  return new RelationMember;
}

void RelationMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationMember::MergeFrom(const RelationMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationMember::CopyFrom(const RelationMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationMember::IsInitialized() const {

  return true;
}

void RelationMember::Swap(RelationMember* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationMember_descriptor_;
  metadata.reflection = RelationMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationInfo::kGroupIndexFieldNumber;
const int RelationInfo::kMembersFieldNumber;
#endif  // !_MSC_VER

RelationInfo::RelationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationInfo::InitAsDefaultInstance() {
}

RelationInfo::RelationInfo(const RelationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationInfo::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationInfo::~RelationInfo() {
  SharedDtor();
}

void RelationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationInfo_descriptor_;
}

const RelationInfo& RelationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

RelationInfo* RelationInfo::default_instance_ = NULL;

RelationInfo* RelationInfo::New() const {
  return new RelationInfo;
}

void RelationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .ProtoBuf.RelationMember members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  // repeated .ProtoBuf.RelationMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  // repeated .ProtoBuf.RelationMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  // repeated .ProtoBuf.RelationMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationInfo::MergeFrom(const RelationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationInfo::CopyFrom(const RelationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfo::IsInitialized() const {

  return true;
}

void RelationInfo::Swap(RelationInfo* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationInfo_descriptor_;
  metadata.reflection = RelationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationPhysicalTab::kIdFieldNumber;
const int RelationPhysicalTab::kLastGivePlyTimeFieldNumber;
const int RelationPhysicalTab::kLastGetPhyTimeFieldNumber;
const int RelationPhysicalTab::kGetPlyStatusFieldNumber;
#endif  // !_MSC_VER

RelationPhysicalTab::RelationPhysicalTab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationPhysicalTab::InitAsDefaultInstance() {
}

RelationPhysicalTab::RelationPhysicalTab(const RelationPhysicalTab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationPhysicalTab::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lastgiveplytime_ = GOOGLE_ULONGLONG(0);
  lastgetphytime_ = 0u;
  getplystatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationPhysicalTab::~RelationPhysicalTab() {
  SharedDtor();
}

void RelationPhysicalTab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationPhysicalTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationPhysicalTab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationPhysicalTab_descriptor_;
}

const RelationPhysicalTab& RelationPhysicalTab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

RelationPhysicalTab* RelationPhysicalTab::default_instance_ = NULL;

RelationPhysicalTab* RelationPhysicalTab::New() const {
  return new RelationPhysicalTab;
}

void RelationPhysicalTab::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    lastgiveplytime_ = GOOGLE_ULONGLONG(0);
    lastgetphytime_ = 0u;
    getplystatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationPhysicalTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastGivePlyTime;
        break;
      }

      // optional uint64 lastGivePlyTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastGivePlyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastgiveplytime_)));
          set_has_lastgiveplytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastGetPhyTime;
        break;
      }

      // optional uint32 lastGetPhyTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastGetPhyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastgetphytime_)));
          set_has_lastgetphytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getPlyStatus;
        break;
      }

      // optional uint32 getPlyStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getPlyStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getplystatus_)));
          set_has_getplystatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationPhysicalTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 lastGivePlyTime = 2;
  if (has_lastgiveplytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastgiveplytime(), output);
  }

  // optional uint32 lastGetPhyTime = 3;
  if (has_lastgetphytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastgetphytime(), output);
  }

  // optional uint32 getPlyStatus = 4;
  if (has_getplystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->getplystatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationPhysicalTab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 lastGivePlyTime = 2;
  if (has_lastgiveplytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastgiveplytime(), target);
  }

  // optional uint32 lastGetPhyTime = 3;
  if (has_lastgetphytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lastgetphytime(), target);
  }

  // optional uint32 getPlyStatus = 4;
  if (has_getplystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->getplystatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationPhysicalTab::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 lastGivePlyTime = 2;
    if (has_lastgiveplytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastgiveplytime());
    }

    // optional uint32 lastGetPhyTime = 3;
    if (has_lastgetphytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastgetphytime());
    }

    // optional uint32 getPlyStatus = 4;
    if (has_getplystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getplystatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationPhysicalTab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationPhysicalTab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationPhysicalTab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationPhysicalTab::MergeFrom(const RelationPhysicalTab& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lastgiveplytime()) {
      set_lastgiveplytime(from.lastgiveplytime());
    }
    if (from.has_lastgetphytime()) {
      set_lastgetphytime(from.lastgetphytime());
    }
    if (from.has_getplystatus()) {
      set_getplystatus(from.getplystatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationPhysicalTab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationPhysicalTab::CopyFrom(const RelationPhysicalTab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationPhysicalTab::IsInitialized() const {

  return true;
}

void RelationPhysicalTab::Swap(RelationPhysicalTab* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lastgiveplytime_, other->lastgiveplytime_);
    std::swap(lastgetphytime_, other->lastgetphytime_);
    std::swap(getplystatus_, other->getplystatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationPhysicalTab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationPhysicalTab_descriptor_;
  metadata.reflection = RelationPhysicalTab_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationDBInfo::kInfoFieldNumber;
const int RelationDBInfo::kPhysicalTabFieldNumber;
const int RelationDBInfo::kApplyListFieldNumber;
const int RelationDBInfo::kGiveTimesFieldNumber;
const int RelationDBInfo::kLastGivePlyTimeFieldNumber;
const int RelationDBInfo::kProgressFieldNumber;
#endif  // !_MSC_VER

RelationDBInfo::RelationDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationDBInfo::InitAsDefaultInstance() {
}

RelationDBInfo::RelationDBInfo(const RelationDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationDBInfo::SharedCtor() {
  _cached_size_ = 0;
  givetimes_ = 0u;
  lastgiveplytime_ = GOOGLE_ULONGLONG(0);
  progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationDBInfo::~RelationDBInfo() {
  SharedDtor();
}

void RelationDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationDBInfo_descriptor_;
}

const RelationDBInfo& RelationDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

RelationDBInfo* RelationDBInfo::default_instance_ = NULL;

RelationDBInfo* RelationDBInfo::New() const {
  return new RelationDBInfo;
}

void RelationDBInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    givetimes_ = 0u;
    lastgiveplytime_ = GOOGLE_ULONGLONG(0);
    progress_ = 0u;
  }
  info_.Clear();
  physicaltab_.Clear();
  applylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.RelationInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_physicalTab;
        break;
      }

      // repeated .ProtoBuf.RelationPhysicalTab physicalTab = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physicalTab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physicaltab()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_physicalTab;
        if (input->ExpectTag(24)) goto parse_applyList;
        break;
      }

      // repeated uint32 applyList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_applylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_applylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyList;
        if (input->ExpectTag(32)) goto parse_giveTimes;
        break;
      }

      // optional uint32 giveTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givetimes_)));
          set_has_givetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastGivePlyTime;
        break;
      }

      // optional uint64 lastGivePlyTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastGivePlyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastgiveplytime_)));
          set_has_lastgiveplytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.RelationInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // repeated .ProtoBuf.RelationPhysicalTab physicalTab = 2;
  for (int i = 0; i < this->physicaltab_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->physicaltab(i), output);
  }

  // repeated uint32 applyList = 3;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->applylist(i), output);
  }

  // optional uint32 giveTimes = 4;
  if (has_givetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->givetimes(), output);
  }

  // optional uint64 lastGivePlyTime = 5;
  if (has_lastgiveplytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastgiveplytime(), output);
  }

  // optional uint32 progress = 6;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.RelationInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // repeated .ProtoBuf.RelationPhysicalTab physicalTab = 2;
  for (int i = 0; i < this->physicaltab_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->physicaltab(i), target);
  }

  // repeated uint32 applyList = 3;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->applylist(i), target);
  }

  // optional uint32 giveTimes = 4;
  if (has_givetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->givetimes(), target);
  }

  // optional uint64 lastGivePlyTime = 5;
  if (has_lastgiveplytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lastgiveplytime(), target);
  }

  // optional uint32 progress = 6;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 giveTimes = 4;
    if (has_givetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givetimes());
    }

    // optional uint64 lastGivePlyTime = 5;
    if (has_lastgiveplytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastgiveplytime());
    }

    // optional uint32 progress = 6;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

  }
  // repeated .ProtoBuf.RelationInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .ProtoBuf.RelationPhysicalTab physicalTab = 2;
  total_size += 1 * this->physicaltab_size();
  for (int i = 0; i < this->physicaltab_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physicaltab(i));
  }

  // repeated uint32 applyList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->applylist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->applylist(i));
    }
    total_size += 1 * this->applylist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationDBInfo::MergeFrom(const RelationDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  physicaltab_.MergeFrom(from.physicaltab_);
  applylist_.MergeFrom(from.applylist_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_givetimes()) {
      set_givetimes(from.givetimes());
    }
    if (from.has_lastgiveplytime()) {
      set_lastgiveplytime(from.lastgiveplytime());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationDBInfo::CopyFrom(const RelationDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationDBInfo::IsInitialized() const {

  return true;
}

void RelationDBInfo::Swap(RelationDBInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    physicaltab_.Swap(&other->physicaltab_);
    applylist_.Swap(&other->applylist_);
    std::swap(givetimes_, other->givetimes_);
    std::swap(lastgiveplytime_, other->lastgiveplytime_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationDBInfo_descriptor_;
  metadata.reflection = RelationDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterPlayerMiniInfo::kPlayerIdFieldNumber;
const int CharacterPlayerMiniInfo::kPlayerNameFieldNumber;
const int CharacterPlayerMiniInfo::kSexFieldNumber;
const int CharacterPlayerMiniInfo::kLevelFieldNumber;
const int CharacterPlayerMiniInfo::kClosenessFieldNumber;
const int CharacterPlayerMiniInfo::kGivePlysicalFieldNumber;
const int CharacterPlayerMiniInfo::kGetPlyStatusFieldNumber;
const int CharacterPlayerMiniInfo::kRecentTypeFieldNumber;
const int CharacterPlayerMiniInfo::kRecentTimeFieldNumber;
#endif  // !_MSC_VER

CharacterPlayerMiniInfo::CharacterPlayerMiniInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterPlayerMiniInfo::InitAsDefaultInstance() {
}

CharacterPlayerMiniInfo::CharacterPlayerMiniInfo(const CharacterPlayerMiniInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterPlayerMiniInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  level_ = 0u;
  closeness_ = 0u;
  giveplysical_ = false;
  getplystatus_ = 0u;
  recenttype_ = 0u;
  recenttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterPlayerMiniInfo::~CharacterPlayerMiniInfo() {
  SharedDtor();
}

void CharacterPlayerMiniInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void CharacterPlayerMiniInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterPlayerMiniInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterPlayerMiniInfo_descriptor_;
}

const CharacterPlayerMiniInfo& CharacterPlayerMiniInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterPlayerMiniInfo* CharacterPlayerMiniInfo::default_instance_ = NULL;

CharacterPlayerMiniInfo* CharacterPlayerMiniInfo::New() const {
  return new CharacterPlayerMiniInfo;
}

void CharacterPlayerMiniInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    sex_ = 0u;
    level_ = 0u;
    closeness_ = 0u;
    giveplysical_ = false;
    getplystatus_ = 0u;
    recenttype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    recenttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterPlayerMiniInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_closeness;
        break;
      }

      // optional uint32 closeness = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closeness_)));
          set_has_closeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_givePlysical;
        break;
      }

      // optional bool givePlysical = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_givePlysical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &giveplysical_)));
          set_has_giveplysical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_getPlyStatus;
        break;
      }

      // optional uint32 getPlyStatus = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getPlyStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getplystatus_)));
          set_has_getplystatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_recentType;
        break;
      }

      // optional uint32 recentType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recenttype_)));
          set_has_recenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_recentTime;
        break;
      }

      // optional uint64 recentTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recenttime_)));
          set_has_recenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterPlayerMiniInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 closeness = 5;
  if (has_closeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->closeness(), output);
  }

  // optional bool givePlysical = 6 [default = false];
  if (has_giveplysical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->giveplysical(), output);
  }

  // optional uint32 getPlyStatus = 7 [default = 0];
  if (has_getplystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->getplystatus(), output);
  }

  // optional uint32 recentType = 8;
  if (has_recenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->recenttype(), output);
  }

  // optional uint64 recentTime = 9;
  if (has_recenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->recenttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterPlayerMiniInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 closeness = 5;
  if (has_closeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->closeness(), target);
  }

  // optional bool givePlysical = 6 [default = false];
  if (has_giveplysical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->giveplysical(), target);
  }

  // optional uint32 getPlyStatus = 7 [default = 0];
  if (has_getplystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->getplystatus(), target);
  }

  // optional uint32 recentType = 8;
  if (has_recenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->recenttype(), target);
  }

  // optional uint64 recentTime = 9;
  if (has_recenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->recenttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterPlayerMiniInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 closeness = 5;
    if (has_closeness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closeness());
    }

    // optional bool givePlysical = 6 [default = false];
    if (has_giveplysical()) {
      total_size += 1 + 1;
    }

    // optional uint32 getPlyStatus = 7 [default = 0];
    if (has_getplystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getplystatus());
    }

    // optional uint32 recentType = 8;
    if (has_recenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recenttype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 recentTime = 9;
    if (has_recenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recenttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterPlayerMiniInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterPlayerMiniInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterPlayerMiniInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterPlayerMiniInfo::MergeFrom(const CharacterPlayerMiniInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_closeness()) {
      set_closeness(from.closeness());
    }
    if (from.has_giveplysical()) {
      set_giveplysical(from.giveplysical());
    }
    if (from.has_getplystatus()) {
      set_getplystatus(from.getplystatus());
    }
    if (from.has_recenttype()) {
      set_recenttype(from.recenttype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recenttime()) {
      set_recenttime(from.recenttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterPlayerMiniInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterPlayerMiniInfo::CopyFrom(const CharacterPlayerMiniInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterPlayerMiniInfo::IsInitialized() const {

  return true;
}

void CharacterPlayerMiniInfo::Swap(CharacterPlayerMiniInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(closeness_, other->closeness_);
    std::swap(giveplysical_, other->giveplysical_);
    std::swap(getplystatus_, other->getplystatus_);
    std::swap(recenttype_, other->recenttype_);
    std::swap(recenttime_, other->recenttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterPlayerMiniInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterPlayerMiniInfo_descriptor_;
  metadata.reflection = CharacterPlayerMiniInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDetailProtoInfo::kCharIdFieldNumber;
const int CharacterDetailProtoInfo::kNameFieldNumber;
const int CharacterDetailProtoInfo::kLevelFieldNumber;
const int CharacterDetailProtoInfo::kFightFieldNumber;
const int CharacterDetailProtoInfo::kProfFieldNumber;
const int CharacterDetailProtoInfo::kAttrFieldNumber;
const int CharacterDetailProtoInfo::kEquipFieldNumber;
#endif  // !_MSC_VER

CharacterDetailProtoInfo::CharacterDetailProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDetailProtoInfo::InitAsDefaultInstance() {
  attr_ = const_cast< ::ProtoBuf::CharacterDBAttrDetailInfo*>(&::ProtoBuf::CharacterDBAttrDetailInfo::default_instance());
}

CharacterDetailProtoInfo::CharacterDetailProtoInfo(const CharacterDetailProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDetailProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  fight_ = 0u;
  prof_ = 0;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDetailProtoInfo::~CharacterDetailProtoInfo() {
  SharedDtor();
}

void CharacterDetailProtoInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete attr_;
  }
}

void CharacterDetailProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDetailProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDetailProtoInfo_descriptor_;
}

const CharacterDetailProtoInfo& CharacterDetailProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

CharacterDetailProtoInfo* CharacterDetailProtoInfo::default_instance_ = NULL;

CharacterDetailProtoInfo* CharacterDetailProtoInfo::New() const {
  return new CharacterDetailProtoInfo;
}

void CharacterDetailProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    fight_ = 0u;
    prof_ = 0;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::ProtoBuf::CharacterDBAttrDetailInfo::Clear();
    }
  }
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDetailProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint32 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prof;
        break;
      }

      // optional int32 prof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo equip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDetailProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint32 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fight(), output);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prof(), output);
  }

  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 6;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 7;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDetailProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint32 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fight(), target);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prof(), target);
  }

  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 6;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attr(), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 7;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDetailProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight());
    }

    // optional int32 prof = 5;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 6;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  // repeated .ProtoBuf.ItemProtoInfo equip = 7;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDetailProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDetailProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDetailProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDetailProtoInfo::MergeFrom(const CharacterDetailProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_attr()) {
      mutable_attr()->::ProtoBuf::CharacterDBAttrDetailInfo::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDetailProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDetailProtoInfo::CopyFrom(const CharacterDetailProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDetailProtoInfo::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterDetailProtoInfo::Swap(CharacterDetailProtoInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(prof_, other->prof_);
    std::swap(attr_, other->attr_);
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDetailProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDetailProtoInfo_descriptor_;
  metadata.reflection = CharacterDetailProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailAttachmentList::kItemInfoFieldNumber;
#endif  // !_MSC_VER

MailAttachmentList::MailAttachmentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailAttachmentList::InitAsDefaultInstance() {
}

MailAttachmentList::MailAttachmentList(const MailAttachmentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailAttachmentList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailAttachmentList::~MailAttachmentList() {
  SharedDtor();
}

void MailAttachmentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailAttachmentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailAttachmentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailAttachmentList_descriptor_;
}

const MailAttachmentList& MailAttachmentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

MailAttachmentList* MailAttachmentList::default_instance_ = NULL;

MailAttachmentList* MailAttachmentList::New() const {
  return new MailAttachmentList;
}

void MailAttachmentList::Clear() {
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailAttachmentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemProtoInfo itemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailAttachmentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemProtoInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailAttachmentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemProtoInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailAttachmentList::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemProtoInfo itemInfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailAttachmentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailAttachmentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailAttachmentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailAttachmentList::MergeFrom(const MailAttachmentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailAttachmentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailAttachmentList::CopyFrom(const MailAttachmentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailAttachmentList::IsInitialized() const {

  for (int i = 0; i < iteminfo_size(); i++) {
    if (!this->iteminfo(i).IsInitialized()) return false;
  }
  return true;
}

void MailAttachmentList::Swap(MailAttachmentList* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailAttachmentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailAttachmentList_descriptor_;
  metadata.reflection = MailAttachmentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailHead::kMailIdFieldNumber;
const int MailHead::kTypeFieldNumber;
const int MailHead::kSendPlayerIdFieldNumber;
const int MailHead::kSendPlayerNameFieldNumber;
const int MailHead::kDestPlayerIdFieldNumber;
const int MailHead::kTopicFieldNumber;
const int MailHead::kCreateTimeFieldNumber;
const int MailHead::kStatusFieldNumber;
const int MailHead::kAttachmentNumFieldNumber;
const int MailHead::kFetchFieldNumber;
#endif  // !_MSC_VER

MailHead::MailHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailHead::InitAsDefaultInstance() {
}

MailHead::MailHead(const MailHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailHead::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  type_ = 0u;
  sendplayerid_ = 0u;
  sendplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destplayerid_ = 0u;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = 0u;
  status_ = 0u;
  attachmentnum_ = 0u;
  fetch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailHead::~MailHead() {
  SharedDtor();
}

void MailHead::SharedDtor() {
  if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendplayername_;
  }
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void MailHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailHead_descriptor_;
}

const MailHead& MailHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

MailHead* MailHead::default_instance_ = NULL;

MailHead* MailHead::New() const {
  return new MailHead;
}

void MailHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    type_ = 0u;
    sendplayerid_ = 0u;
    if (has_sendplayername()) {
      if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
        sendplayername_->clear();
      }
    }
    destplayerid_ = 0u;
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
    createtime_ = 0u;
    status_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attachmentnum_ = 0u;
    fetch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendPlayerId;
        break;
      }

      // optional uint32 sendPlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendplayerid_)));
          set_has_sendplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendPlayerName;
        break;
      }

      // optional bytes sendPlayerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sendplayername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_destPlayerId;
        break;
      }

      // optional uint32 destPlayerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destplayerid_)));
          set_has_destplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_topic;
        break;
      }

      // optional bytes topic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attachmentNum;
        break;
      }

      // optional uint32 attachmentNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attachmentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachmentnum_)));
          set_has_attachmentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 sendPlayerId = 3;
  if (has_sendplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sendplayerid(), output);
  }

  // optional bytes sendPlayerName = 4;
  if (has_sendplayername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sendplayername(), output);
  }

  // optional uint32 destPlayerId = 5;
  if (has_destplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->destplayerid(), output);
  }

  // optional bytes topic = 6;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->topic(), output);
  }

  // optional uint32 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->createtime(), output);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional uint32 attachmentNum = 9;
  if (has_attachmentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->attachmentnum(), output);
  }

  // optional int32 fetch = 10;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 sendPlayerId = 3;
  if (has_sendplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sendplayerid(), target);
  }

  // optional bytes sendPlayerName = 4;
  if (has_sendplayername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sendplayername(), target);
  }

  // optional uint32 destPlayerId = 5;
  if (has_destplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->destplayerid(), target);
  }

  // optional bytes topic = 6;
  if (has_topic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->topic(), target);
  }

  // optional uint32 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->createtime(), target);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  // optional uint32 attachmentNum = 9;
  if (has_attachmentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->attachmentnum(), target);
  }

  // optional int32 fetch = 10;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 sendPlayerId = 3;
    if (has_sendplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendplayerid());
    }

    // optional bytes sendPlayerName = 4;
    if (has_sendplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sendplayername());
    }

    // optional uint32 destPlayerId = 5;
    if (has_destplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destplayerid());
    }

    // optional bytes topic = 6;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->topic());
    }

    // optional uint32 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 attachmentNum = 9;
    if (has_attachmentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attachmentnum());
    }

    // optional int32 fetch = 10;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailHead::MergeFrom(const MailHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sendplayerid()) {
      set_sendplayerid(from.sendplayerid());
    }
    if (from.has_sendplayername()) {
      set_sendplayername(from.sendplayername());
    }
    if (from.has_destplayerid()) {
      set_destplayerid(from.destplayerid());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attachmentnum()) {
      set_attachmentnum(from.attachmentnum());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailHead::CopyFrom(const MailHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailHead::IsInitialized() const {

  return true;
}

void MailHead::Swap(MailHead* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(type_, other->type_);
    std::swap(sendplayerid_, other->sendplayerid_);
    std::swap(sendplayername_, other->sendplayername_);
    std::swap(destplayerid_, other->destplayerid_);
    std::swap(topic_, other->topic_);
    std::swap(createtime_, other->createtime_);
    std::swap(status_, other->status_);
    std::swap(attachmentnum_, other->attachmentnum_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailHead_descriptor_;
  metadata.reflection = MailHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMailHeadFieldNumber;
const int MailInfo::kContentFieldNumber;
const int MailInfo::kGoldFieldNumber;
const int MailInfo::kDiamondFieldNumber;
const int MailInfo::kBindGoldFieldNumber;
const int MailInfo::kBindDiamondFieldNumber;
const int MailInfo::kSellTypeFieldNumber;
const int MailInfo::kSellNumFieldNumber;
const int MailInfo::kAttachmentListFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailInfo::InitAsDefaultInstance() {
  mailhead_ = const_cast< ::ProtoBuf::MailHead*>(&::ProtoBuf::MailHead::default_instance());
  attachmentlist_ = const_cast< ::ProtoBuf::MailAttachmentList*>(&::ProtoBuf::MailAttachmentList::default_instance());
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailhead_ = NULL;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0u;
  diamond_ = 0u;
  bindgold_ = 0u;
  binddiamond_ = 0u;
  selltype_ = 0u;
  sellnum_ = 0u;
  attachmentlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete mailhead_;
    delete attachmentlist_;
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailhead()) {
      if (mailhead_ != NULL) mailhead_->::ProtoBuf::MailHead::Clear();
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gold_ = 0u;
    diamond_ = 0u;
    bindgold_ = 0u;
    binddiamond_ = 0u;
    selltype_ = 0u;
    sellnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_attachmentlist()) {
      if (attachmentlist_ != NULL) attachmentlist_->::ProtoBuf::MailAttachmentList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.MailHead mailHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindGold;
        break;
      }

      // optional uint32 bindGold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bindDiamond;
        break;
      }

      // optional uint32 bindDiamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sellType;
        break;
      }

      // optional uint32 sellType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sellNum;
        break;
      }

      // optional uint32 sellNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellnum_)));
          set_has_sellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attachmentList;
        break;
      }

      // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachmentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.MailHead mailHead = 1;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailhead(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  // optional uint32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold(), output);
  }

  // optional uint32 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->diamond(), output);
  }

  // optional uint32 bindGold = 5;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bindgold(), output);
  }

  // optional uint32 bindDiamond = 6;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->binddiamond(), output);
  }

  // optional uint32 sellType = 7;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->selltype(), output);
  }

  // optional uint32 sellNum = 8;
  if (has_sellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sellnum(), output);
  }

  // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
  if (has_attachmentlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attachmentlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.MailHead mailHead = 1;
  if (has_mailhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailhead(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // optional uint32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gold(), target);
  }

  // optional uint32 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->diamond(), target);
  }

  // optional uint32 bindGold = 5;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bindgold(), target);
  }

  // optional uint32 bindDiamond = 6;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->binddiamond(), target);
  }

  // optional uint32 sellType = 7;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->selltype(), target);
  }

  // optional uint32 sellNum = 8;
  if (has_sellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sellnum(), target);
  }

  // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
  if (has_attachmentlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attachmentlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.MailHead mailHead = 1;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailhead());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 bindGold = 5;
    if (has_bindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindgold());
    }

    // optional uint32 bindDiamond = 6;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binddiamond());
    }

    // optional uint32 sellType = 7;
    if (has_selltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selltype());
    }

    // optional uint32 sellNum = 8;
    if (has_sellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sellnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
    if (has_attachmentlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachmentlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailhead()) {
      mutable_mailhead()->::ProtoBuf::MailHead::MergeFrom(from.mailhead());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
    if (from.has_sellnum()) {
      set_sellnum(from.sellnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attachmentlist()) {
      mutable_attachmentlist()->::ProtoBuf::MailAttachmentList::MergeFrom(from.attachmentlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {

  if (has_attachmentlist()) {
    if (!this->attachmentlist().IsInitialized()) return false;
  }
  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(mailhead_, other->mailhead_);
    std::swap(content_, other->content_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(selltype_, other->selltype_);
    std::swap(sellnum_, other->sellnum_);
    std::swap(attachmentlist_, other->attachmentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiniMailInfo::kMailHeadFieldNumber;
const int MiniMailInfo::kSellMoneyFieldNumber;
const int MiniMailInfo::kAttachmentListFieldNumber;
#endif  // !_MSC_VER

MiniMailInfo::MiniMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiniMailInfo::InitAsDefaultInstance() {
  mailhead_ = const_cast< ::ProtoBuf::MailHead*>(&::ProtoBuf::MailHead::default_instance());
  attachmentlist_ = const_cast< ::ProtoBuf::MailAttachmentList*>(&::ProtoBuf::MailAttachmentList::default_instance());
}

MiniMailInfo::MiniMailInfo(const MiniMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiniMailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailhead_ = NULL;
  sellmoney_ = 0u;
  attachmentlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiniMailInfo::~MiniMailInfo() {
  SharedDtor();
}

void MiniMailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mailhead_;
    delete attachmentlist_;
  }
}

void MiniMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiniMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiniMailInfo_descriptor_;
}

const MiniMailInfo& MiniMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  return *default_instance_;
}

MiniMailInfo* MiniMailInfo::default_instance_ = NULL;

MiniMailInfo* MiniMailInfo::New() const {
  return new MiniMailInfo;
}

void MiniMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailhead()) {
      if (mailhead_ != NULL) mailhead_->::ProtoBuf::MailHead::Clear();
    }
    sellmoney_ = 0u;
    if (has_attachmentlist()) {
      if (attachmentlist_ != NULL) attachmentlist_->::ProtoBuf::MailAttachmentList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiniMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.MailHead mailHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sellMoney;
        break;
      }

      // optional uint32 sellMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellmoney_)));
          set_has_sellmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attachmentList;
        break;
      }

      // optional .ProtoBuf.MailAttachmentList attachmentList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachmentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiniMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.MailHead mailHead = 1;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailhead(), output);
  }

  // optional uint32 sellMoney = 2;
  if (has_sellmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sellmoney(), output);
  }

  // optional .ProtoBuf.MailAttachmentList attachmentList = 3;
  if (has_attachmentlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attachmentlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiniMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.MailHead mailHead = 1;
  if (has_mailhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailhead(), target);
  }

  // optional uint32 sellMoney = 2;
  if (has_sellmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sellmoney(), target);
  }

  // optional .ProtoBuf.MailAttachmentList attachmentList = 3;
  if (has_attachmentlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attachmentlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiniMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.MailHead mailHead = 1;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailhead());
    }

    // optional uint32 sellMoney = 2;
    if (has_sellmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sellmoney());
    }

    // optional .ProtoBuf.MailAttachmentList attachmentList = 3;
    if (has_attachmentlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachmentlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiniMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiniMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiniMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiniMailInfo::MergeFrom(const MiniMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailhead()) {
      mutable_mailhead()->::ProtoBuf::MailHead::MergeFrom(from.mailhead());
    }
    if (from.has_sellmoney()) {
      set_sellmoney(from.sellmoney());
    }
    if (from.has_attachmentlist()) {
      mutable_attachmentlist()->::ProtoBuf::MailAttachmentList::MergeFrom(from.attachmentlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiniMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniMailInfo::CopyFrom(const MiniMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniMailInfo::IsInitialized() const {

  if (has_attachmentlist()) {
    if (!this->attachmentlist().IsInitialized()) return false;
  }
  return true;
}

void MiniMailInfo::Swap(MiniMailInfo* other) {
  if (other != this) {
    std::swap(mailhead_, other->mailhead_);
    std::swap(sellmoney_, other->sellmoney_);
    std::swap(attachmentlist_, other->attachmentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiniMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiniMailInfo_descriptor_;
  metadata.reflection = MiniMailInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
