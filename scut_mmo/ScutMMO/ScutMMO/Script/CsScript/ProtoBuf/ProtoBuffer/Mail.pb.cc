// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* CWGetMailItemListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGetMailItemListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCGetMailItemListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCGetMailItemListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAskMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAskMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCAskMailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCAskMailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCUnReadMailNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCUnReadMailNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWSendMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWSendMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCSendMailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCSendMailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWDeleteMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWDeleteMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCDeleteMailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCDeleteMailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCNewMailNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCNewMailNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWGetMailAttachmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGetMailAttachmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetMailAttachmentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetMailAttachmentRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWGetAllMailAttachmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGetAllMailAttachmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAllMailAttachmentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAllMailAttachmentRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWNdrMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWNdrMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWNdrMailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWNdrMailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGSendMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGSendMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWSendMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWSendMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGGetMailAttachmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGGetMailAttachmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWUpdateMailNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWUpdateMailNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneMailAttachmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneMailAttachmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGGetAllMailAttachmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGGetAllMailAttachmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWSendSystemMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWSendSystemMailReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fMail_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Mail.proto");
  GOOGLE_CHECK(file != NULL);
  CWGetMailItemListReq_descriptor_ = file->message_type(0);
  static const int CWGetMailItemListReq_offsets_[1] = {
  };
  CWGetMailItemListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGetMailItemListReq_descriptor_,
      CWGetMailItemListReq::default_instance_,
      CWGetMailItemListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetMailItemListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetMailItemListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGetMailItemListReq));
  WCGetMailItemListRsp_descriptor_ = file->message_type(1);
  static const int WCGetMailItemListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetMailItemListRsp, mailhead_),
  };
  WCGetMailItemListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCGetMailItemListRsp_descriptor_,
      WCGetMailItemListRsp::default_instance_,
      WCGetMailItemListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetMailItemListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetMailItemListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCGetMailItemListRsp));
  CWAskMailReq_descriptor_ = file->message_type(2);
  static const int CWAskMailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAskMailReq, mailid_),
  };
  CWAskMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAskMailReq_descriptor_,
      CWAskMailReq::default_instance_,
      CWAskMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAskMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAskMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAskMailReq));
  WCAskMailRsp_descriptor_ = file->message_type(3);
  static const int WCAskMailRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, sellnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, attachmentlist_),
  };
  WCAskMailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCAskMailRsp_descriptor_,
      WCAskMailRsp::default_instance_,
      WCAskMailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskMailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCAskMailRsp));
  WCUnReadMailNotify_descriptor_ = file->message_type(4);
  static const int WCUnReadMailNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCUnReadMailNotify, hasnew_),
  };
  WCUnReadMailNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCUnReadMailNotify_descriptor_,
      WCUnReadMailNotify::default_instance_,
      WCUnReadMailNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCUnReadMailNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCUnReadMailNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCUnReadMailNotify));
  MailAttachment_descriptor_ = file->message_type(5);
  static const int MailAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachment, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachment, gridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachment, num_),
  };
  MailAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailAttachment_descriptor_,
      MailAttachment::default_instance_,
      MailAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailAttachment));
  CWSendMailReq_descriptor_ = file->message_type(6);
  static const int CWSendMailReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, sellnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, mailattachment_),
  };
  CWSendMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWSendMailReq_descriptor_,
      CWSendMailReq::default_instance_,
      CWSendMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSendMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWSendMailReq));
  WCSendMailRsp_descriptor_ = file->message_type(7);
  static const int WCSendMailRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCSendMailRsp, ret_),
  };
  WCSendMailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCSendMailRsp_descriptor_,
      WCSendMailRsp::default_instance_,
      WCSendMailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCSendMailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCSendMailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCSendMailRsp));
  CWDeleteMailReq_descriptor_ = file->message_type(8);
  static const int CWDeleteMailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteMailReq, idlist_),
  };
  CWDeleteMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWDeleteMailReq_descriptor_,
      CWDeleteMailReq::default_instance_,
      CWDeleteMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWDeleteMailReq));
  WCDeleteMailRsp_descriptor_ = file->message_type(9);
  static const int WCDeleteMailRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCDeleteMailRsp, idlist_),
  };
  WCDeleteMailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCDeleteMailRsp_descriptor_,
      WCDeleteMailRsp::default_instance_,
      WCDeleteMailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCDeleteMailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCDeleteMailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCDeleteMailRsp));
  WCNewMailNotify_descriptor_ = file->message_type(10);
  static const int WCNewMailNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNewMailNotify, mailhead_),
  };
  WCNewMailNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCNewMailNotify_descriptor_,
      WCNewMailNotify::default_instance_,
      WCNewMailNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNewMailNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNewMailNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCNewMailNotify));
  CWGetMailAttachmentReq_descriptor_ = file->message_type(11);
  static const int CWGetMailAttachmentReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetMailAttachmentReq, mailid_),
  };
  CWGetMailAttachmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGetMailAttachmentReq_descriptor_,
      CWGetMailAttachmentReq::default_instance_,
      CWGetMailAttachmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetMailAttachmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetMailAttachmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGetMailAttachmentReq));
  GCGetMailAttachmentRsp_descriptor_ = file->message_type(12);
  static const int GCGetMailAttachmentRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetMailAttachmentRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetMailAttachmentRsp, mailid_),
  };
  GCGetMailAttachmentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetMailAttachmentRsp_descriptor_,
      GCGetMailAttachmentRsp::default_instance_,
      GCGetMailAttachmentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetMailAttachmentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetMailAttachmentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetMailAttachmentRsp));
  CWGetAllMailAttachmentReq_descriptor_ = file->message_type(13);
  static const int CWGetAllMailAttachmentReq_offsets_[1] = {
  };
  CWGetAllMailAttachmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGetAllMailAttachmentReq_descriptor_,
      CWGetAllMailAttachmentReq::default_instance_,
      CWGetAllMailAttachmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetAllMailAttachmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetAllMailAttachmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGetAllMailAttachmentReq));
  GCGetAllMailAttachmentRsp_descriptor_ = file->message_type(14);
  static const int GCGetAllMailAttachmentRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllMailAttachmentRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllMailAttachmentRsp, idlist_),
  };
  GCGetAllMailAttachmentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAllMailAttachmentRsp_descriptor_,
      GCGetAllMailAttachmentRsp::default_instance_,
      GCGetAllMailAttachmentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllMailAttachmentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllMailAttachmentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAllMailAttachmentRsp));
  CWNdrMailReq_descriptor_ = file->message_type(15);
  static const int CWNdrMailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWNdrMailReq, mailid_),
  };
  CWNdrMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWNdrMailReq_descriptor_,
      CWNdrMailReq::default_instance_,
      CWNdrMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWNdrMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWNdrMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWNdrMailReq));
  CWNdrMailRsp_descriptor_ = file->message_type(16);
  static const int CWNdrMailRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWNdrMailRsp, ret_),
  };
  CWNdrMailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWNdrMailRsp_descriptor_,
      CWNdrMailRsp::default_instance_,
      CWNdrMailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWNdrMailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWNdrMailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWNdrMailRsp));
  WGSendMailReq_descriptor_ = file->message_type(17);
  static const int WGSendMailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGSendMailReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGSendMailReq, req_),
  };
  WGSendMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGSendMailReq_descriptor_,
      WGSendMailReq::default_instance_,
      WGSendMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGSendMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGSendMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGSendMailReq));
  GWSendMailReq_descriptor_ = file->message_type(18);
  static const int GWSendMailReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, sendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, sellnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, attachment_),
  };
  GWSendMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWSendMailReq_descriptor_,
      GWSendMailReq::default_instance_,
      GWSendMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWSendMailReq));
  WGGetMailAttachmentReq_descriptor_ = file->message_type(19);
  static const int WGGetMailAttachmentReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, sellnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, attachment_),
  };
  WGGetMailAttachmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGGetMailAttachmentReq_descriptor_,
      WGGetMailAttachmentReq::default_instance_,
      WGGetMailAttachmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetMailAttachmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGGetMailAttachmentReq));
  GWUpdateMailNotify_descriptor_ = file->message_type(20);
  static const int GWUpdateMailNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateMailNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateMailNotify, idlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateMailNotify, ret_),
  };
  GWUpdateMailNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWUpdateMailNotify_descriptor_,
      GWUpdateMailNotify::default_instance_,
      GWUpdateMailNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateMailNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateMailNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWUpdateMailNotify));
  OneMailAttachmentData_descriptor_ = file->message_type(21);
  static const int OneMailAttachmentData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, attachment_),
  };
  OneMailAttachmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneMailAttachmentData_descriptor_,
      OneMailAttachmentData::default_instance_,
      OneMailAttachmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailAttachmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneMailAttachmentData));
  WGGetAllMailAttachmentReq_descriptor_ = file->message_type(22);
  static const int WGGetAllMailAttachmentReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetAllMailAttachmentReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetAllMailAttachmentReq, attachmentdatalist_),
  };
  WGGetAllMailAttachmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGGetAllMailAttachmentReq_descriptor_,
      WGGetAllMailAttachmentReq::default_instance_,
      WGGetAllMailAttachmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetAllMailAttachmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGetAllMailAttachmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGGetAllMailAttachmentReq));
  GWSendSystemMailReq_descriptor_ = file->message_type(23);
  static const int GWSendSystemMailReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, destid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, bindgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, attachment_),
  };
  GWSendSystemMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWSendSystemMailReq_descriptor_,
      GWSendSystemMailReq::default_instance_,
      GWSendSystemMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSendSystemMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWSendSystemMailReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fMail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGetMailItemListReq_descriptor_, &CWGetMailItemListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCGetMailItemListRsp_descriptor_, &WCGetMailItemListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAskMailReq_descriptor_, &CWAskMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCAskMailRsp_descriptor_, &WCAskMailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCUnReadMailNotify_descriptor_, &WCUnReadMailNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailAttachment_descriptor_, &MailAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWSendMailReq_descriptor_, &CWSendMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCSendMailRsp_descriptor_, &WCSendMailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWDeleteMailReq_descriptor_, &CWDeleteMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCDeleteMailRsp_descriptor_, &WCDeleteMailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCNewMailNotify_descriptor_, &WCNewMailNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGetMailAttachmentReq_descriptor_, &CWGetMailAttachmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetMailAttachmentRsp_descriptor_, &GCGetMailAttachmentRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGetAllMailAttachmentReq_descriptor_, &CWGetAllMailAttachmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAllMailAttachmentRsp_descriptor_, &GCGetAllMailAttachmentRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWNdrMailReq_descriptor_, &CWNdrMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWNdrMailRsp_descriptor_, &CWNdrMailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGSendMailReq_descriptor_, &WGSendMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWSendMailReq_descriptor_, &GWSendMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGGetMailAttachmentReq_descriptor_, &WGGetMailAttachmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWUpdateMailNotify_descriptor_, &GWUpdateMailNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneMailAttachmentData_descriptor_, &OneMailAttachmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGGetAllMailAttachmentReq_descriptor_, &WGGetAllMailAttachmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWSendSystemMailReq_descriptor_, &GWSendSystemMailReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fMail_2eproto() {
  delete CWGetMailItemListReq::default_instance_;
  delete CWGetMailItemListReq_reflection_;
  delete WCGetMailItemListRsp::default_instance_;
  delete WCGetMailItemListRsp_reflection_;
  delete CWAskMailReq::default_instance_;
  delete CWAskMailReq_reflection_;
  delete WCAskMailRsp::default_instance_;
  delete WCAskMailRsp_reflection_;
  delete WCUnReadMailNotify::default_instance_;
  delete WCUnReadMailNotify_reflection_;
  delete MailAttachment::default_instance_;
  delete MailAttachment_reflection_;
  delete CWSendMailReq::default_instance_;
  delete CWSendMailReq_reflection_;
  delete WCSendMailRsp::default_instance_;
  delete WCSendMailRsp_reflection_;
  delete CWDeleteMailReq::default_instance_;
  delete CWDeleteMailReq_reflection_;
  delete WCDeleteMailRsp::default_instance_;
  delete WCDeleteMailRsp_reflection_;
  delete WCNewMailNotify::default_instance_;
  delete WCNewMailNotify_reflection_;
  delete CWGetMailAttachmentReq::default_instance_;
  delete CWGetMailAttachmentReq_reflection_;
  delete GCGetMailAttachmentRsp::default_instance_;
  delete GCGetMailAttachmentRsp_reflection_;
  delete CWGetAllMailAttachmentReq::default_instance_;
  delete CWGetAllMailAttachmentReq_reflection_;
  delete GCGetAllMailAttachmentRsp::default_instance_;
  delete GCGetAllMailAttachmentRsp_reflection_;
  delete CWNdrMailReq::default_instance_;
  delete CWNdrMailReq_reflection_;
  delete CWNdrMailRsp::default_instance_;
  delete CWNdrMailRsp_reflection_;
  delete WGSendMailReq::default_instance_;
  delete WGSendMailReq_reflection_;
  delete GWSendMailReq::default_instance_;
  delete GWSendMailReq_reflection_;
  delete WGGetMailAttachmentReq::default_instance_;
  delete WGGetMailAttachmentReq_reflection_;
  delete GWUpdateMailNotify::default_instance_;
  delete GWUpdateMailNotify_reflection_;
  delete OneMailAttachmentData::default_instance_;
  delete OneMailAttachmentData_reflection_;
  delete WGGetAllMailAttachmentReq::default_instance_;
  delete WGGetAllMailAttachmentReq_reflection_;
  delete GWSendSystemMailReq::default_instance_;
  delete GWSendSystemMailReq_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fMail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoBuffer/Mail.proto\022\010ProtoBuf\032\035Prot"
    "oBuffer/ComProtocol.proto\032#ProtoBuffer/C"
    "lientToServerCmd.proto\032\026Common/ComDefine"
    ".proto\"\026\n\024CWGetMailItemListReq\"<\n\024WCGetM"
    "ailItemListRsp\022$\n\010mailHead\030\001 \003(\0132\022.Proto"
    "Buf.MailHead\"\036\n\014CWAskMailReq\022\016\n\006mailId\030\001"
    " \001(\r\"\316\001\n\014WCAskMailRsp\022\016\n\006mailId\030\001 \001(\r\022\017\n"
    "\007content\030\002 \001(\014\022\014\n\004gold\030\003 \001(\005\022\017\n\007diamond\030"
    "\004 \001(\005\022\020\n\010bindGold\030\005 \001(\005\022\023\n\013bindDiamond\030\006"
    " \001(\005\022\020\n\010sellType\030\007 \001(\r\022\017\n\007sellNum\030\010 \001(\r\022"
    "4\n\016attachmentList\030\t \001(\0132\034.ProtoBuf.MailA"
    "ttachmentList\"$\n\022WCUnReadMailNotify\022\016\n\006h"
    "asNew\030\001 \001(\010\">\n\016MailAttachment\022\014\n\004type\030\001 "
    "\001(\r\022\021\n\tgridIndex\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\"\274\001\n\r"
    "CWSendMailReq\022\020\n\010mailType\030\001 \001(\r\022\022\n\ntarge"
    "tName\030\002 \001(\014\022\020\n\010targetId\030\003 \001(\r\022\r\n\005title\030\004"
    " \001(\014\022\017\n\007content\030\005 \001(\014\022\020\n\010sellType\030\006 \001(\r\022"
    "\017\n\007sellNum\030\007 \001(\r\0220\n\016mailAttachment\030\010 \001(\013"
    "2\030.ProtoBuf.MailAttachment\"\034\n\rWCSendMail"
    "Rsp\022\013\n\003ret\030\001 \001(\r\"!\n\017CWDeleteMailReq\022\016\n\006i"
    "dList\030\001 \003(\r\"!\n\017WCDeleteMailRsp\022\016\n\006idList"
    "\030\001 \003(\r\"7\n\017WCNewMailNotify\022$\n\010mailHead\030\001 "
    "\001(\0132\022.ProtoBuf.MailHead\"(\n\026CWGetMailAtta"
    "chmentReq\022\016\n\006mailId\030\001 \001(\r\"5\n\026GCGetMailAt"
    "tachmentRsp\022\013\n\003ret\030\001 \001(\r\022\016\n\006mailId\030\002 \001(\r"
    "\"\033\n\031CWGetAllMailAttachmentReq\"8\n\031GCGetAl"
    "lMailAttachmentRsp\022\013\n\003ret\030\001 \001(\r\022\016\n\006idLis"
    "t\030\002 \003(\r\"\036\n\014CWNdrMailReq\022\016\n\006mailId\030\001 \001(\r\""
    "\033\n\014CWNdrMailRsp\022\013\n\003ret\030\001 \001(\r\"E\n\rWGSendMa"
    "ilReq\022\016\n\006charId\030\001 \001(\r\022$\n\003req\030\002 \001(\0132\027.Pro"
    "toBuf.CWSendMailReq\"\314\001\n\rGWSendMailReq\022\020\n"
    "\010mailType\030\001 \001(\r\022\016\n\006sendId\030\002 \001(\r\022\022\n\ntarge"
    "tName\030\003 \001(\014\022\020\n\010targetId\030\004 \001(\r\022\r\n\005title\030\005"
    " \001(\014\022\017\n\007content\030\006 \001(\014\022\020\n\010sellType\030\007 \001(\r\022"
    "\017\n\007sellNum\030\010 \001(\005\0220\n\nattachment\030\t \001(\0132\034.P"
    "rotoBuf.MailAttachmentList\"\345\001\n\026WGGetMail"
    "AttachmentReq\022\016\n\006charId\030\001 \001(\r\022\016\n\006mailId\030"
    "\002 \001(\r\022\020\n\010mailType\030\003 \001(\r\022\014\n\004gold\030\004 \001(\005\022\020\n"
    "\010bindGold\030\005 \001(\005\022\017\n\007diamond\030\006 \001(\005\022\023\n\013bind"
    "Diamond\030\007 \001(\005\022\020\n\010sellType\030\010 \001(\r\022\017\n\007sellN"
    "um\030\t \001(\005\0220\n\nattachment\030\n \001(\0132\034.ProtoBuf."
    "MailAttachmentList\"A\n\022GWUpdateMailNotify"
    "\022\016\n\006charId\030\001 \001(\r\022\016\n\006idList\030\002 \003(\r\022\013\n\003ret\030"
    "\003 \001(\r\"\237\001\n\025OneMailAttachmentData\022\016\n\006mailI"
    "d\030\001 \001(\r\022\014\n\004gold\030\002 \001(\005\022\020\n\010bindGold\030\003 \001(\005\022"
    "\017\n\007diamond\030\004 \001(\005\022\023\n\013bindDiamond\030\005 \001(\005\0220\n"
    "\nattachment\030\006 \001(\0132\034.ProtoBuf.MailAttachm"
    "entList\"h\n\031WGGetAllMailAttachmentReq\022\016\n\006"
    "charId\030\001 \001(\r\022;\n\022attachmentDataList\030\002 \003(\013"
    "2\037.ProtoBuf.OneMailAttachmentData\"\275\001\n\023GW"
    "SendSystemMailReq\022\016\n\006destId\030\001 \001(\r\022\r\n\005tit"
    "le\030\002 \001(\014\022\017\n\007content\030\003 \001(\014\022\014\n\004gold\030\004 \001(\005\022"
    "\020\n\010bindGold\030\005 \001(\005\022\017\n\007diamond\030\006 \001(\005\022\023\n\013bi"
    "ndDiamond\030\007 \001(\005\0220\n\nattachment\030\010 \001(\0132\034.Pr"
    "otoBuf.MailAttachmentList", 2185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Mail.proto", &protobuf_RegisterTypes);
  CWGetMailItemListReq::default_instance_ = new CWGetMailItemListReq();
  WCGetMailItemListRsp::default_instance_ = new WCGetMailItemListRsp();
  CWAskMailReq::default_instance_ = new CWAskMailReq();
  WCAskMailRsp::default_instance_ = new WCAskMailRsp();
  WCUnReadMailNotify::default_instance_ = new WCUnReadMailNotify();
  MailAttachment::default_instance_ = new MailAttachment();
  CWSendMailReq::default_instance_ = new CWSendMailReq();
  WCSendMailRsp::default_instance_ = new WCSendMailRsp();
  CWDeleteMailReq::default_instance_ = new CWDeleteMailReq();
  WCDeleteMailRsp::default_instance_ = new WCDeleteMailRsp();
  WCNewMailNotify::default_instance_ = new WCNewMailNotify();
  CWGetMailAttachmentReq::default_instance_ = new CWGetMailAttachmentReq();
  GCGetMailAttachmentRsp::default_instance_ = new GCGetMailAttachmentRsp();
  CWGetAllMailAttachmentReq::default_instance_ = new CWGetAllMailAttachmentReq();
  GCGetAllMailAttachmentRsp::default_instance_ = new GCGetAllMailAttachmentRsp();
  CWNdrMailReq::default_instance_ = new CWNdrMailReq();
  CWNdrMailRsp::default_instance_ = new CWNdrMailRsp();
  WGSendMailReq::default_instance_ = new WGSendMailReq();
  GWSendMailReq::default_instance_ = new GWSendMailReq();
  WGGetMailAttachmentReq::default_instance_ = new WGGetMailAttachmentReq();
  GWUpdateMailNotify::default_instance_ = new GWUpdateMailNotify();
  OneMailAttachmentData::default_instance_ = new OneMailAttachmentData();
  WGGetAllMailAttachmentReq::default_instance_ = new WGGetAllMailAttachmentReq();
  GWSendSystemMailReq::default_instance_ = new GWSendSystemMailReq();
  CWGetMailItemListReq::default_instance_->InitAsDefaultInstance();
  WCGetMailItemListRsp::default_instance_->InitAsDefaultInstance();
  CWAskMailReq::default_instance_->InitAsDefaultInstance();
  WCAskMailRsp::default_instance_->InitAsDefaultInstance();
  WCUnReadMailNotify::default_instance_->InitAsDefaultInstance();
  MailAttachment::default_instance_->InitAsDefaultInstance();
  CWSendMailReq::default_instance_->InitAsDefaultInstance();
  WCSendMailRsp::default_instance_->InitAsDefaultInstance();
  CWDeleteMailReq::default_instance_->InitAsDefaultInstance();
  WCDeleteMailRsp::default_instance_->InitAsDefaultInstance();
  WCNewMailNotify::default_instance_->InitAsDefaultInstance();
  CWGetMailAttachmentReq::default_instance_->InitAsDefaultInstance();
  GCGetMailAttachmentRsp::default_instance_->InitAsDefaultInstance();
  CWGetAllMailAttachmentReq::default_instance_->InitAsDefaultInstance();
  GCGetAllMailAttachmentRsp::default_instance_->InitAsDefaultInstance();
  CWNdrMailReq::default_instance_->InitAsDefaultInstance();
  CWNdrMailRsp::default_instance_->InitAsDefaultInstance();
  WGSendMailReq::default_instance_->InitAsDefaultInstance();
  GWSendMailReq::default_instance_->InitAsDefaultInstance();
  WGGetMailAttachmentReq::default_instance_->InitAsDefaultInstance();
  GWUpdateMailNotify::default_instance_->InitAsDefaultInstance();
  OneMailAttachmentData::default_instance_->InitAsDefaultInstance();
  WGGetAllMailAttachmentReq::default_instance_->InitAsDefaultInstance();
  GWSendSystemMailReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fMail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fMail_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fMail_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fMail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWGetMailItemListReq::CWGetMailItemListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGetMailItemListReq::InitAsDefaultInstance() {
}

CWGetMailItemListReq::CWGetMailItemListReq(const CWGetMailItemListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGetMailItemListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGetMailItemListReq::~CWGetMailItemListReq() {
  SharedDtor();
}

void CWGetMailItemListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGetMailItemListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGetMailItemListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGetMailItemListReq_descriptor_;
}

const CWGetMailItemListReq& CWGetMailItemListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWGetMailItemListReq* CWGetMailItemListReq::default_instance_ = NULL;

CWGetMailItemListReq* CWGetMailItemListReq::New() const {
  return new CWGetMailItemListReq;
}

void CWGetMailItemListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGetMailItemListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWGetMailItemListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGetMailItemListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGetMailItemListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGetMailItemListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGetMailItemListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGetMailItemListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGetMailItemListReq::MergeFrom(const CWGetMailItemListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGetMailItemListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGetMailItemListReq::CopyFrom(const CWGetMailItemListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGetMailItemListReq::IsInitialized() const {

  return true;
}

void CWGetMailItemListReq::Swap(CWGetMailItemListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGetMailItemListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGetMailItemListReq_descriptor_;
  metadata.reflection = CWGetMailItemListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCGetMailItemListRsp::kMailHeadFieldNumber;
#endif  // !_MSC_VER

WCGetMailItemListRsp::WCGetMailItemListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCGetMailItemListRsp::InitAsDefaultInstance() {
}

WCGetMailItemListRsp::WCGetMailItemListRsp(const WCGetMailItemListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCGetMailItemListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCGetMailItemListRsp::~WCGetMailItemListRsp() {
  SharedDtor();
}

void WCGetMailItemListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCGetMailItemListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCGetMailItemListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCGetMailItemListRsp_descriptor_;
}

const WCGetMailItemListRsp& WCGetMailItemListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WCGetMailItemListRsp* WCGetMailItemListRsp::default_instance_ = NULL;

WCGetMailItemListRsp* WCGetMailItemListRsp::New() const {
  return new WCGetMailItemListRsp;
}

void WCGetMailItemListRsp::Clear() {
  mailhead_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCGetMailItemListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.MailHead mailHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mailHead;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCGetMailItemListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.MailHead mailHead = 1;
  for (int i = 0; i < this->mailhead_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailhead(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCGetMailItemListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.MailHead mailHead = 1;
  for (int i = 0; i < this->mailhead_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailhead(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCGetMailItemListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.MailHead mailHead = 1;
  total_size += 1 * this->mailhead_size();
  for (int i = 0; i < this->mailhead_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailhead(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCGetMailItemListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCGetMailItemListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCGetMailItemListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCGetMailItemListRsp::MergeFrom(const WCGetMailItemListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailhead_.MergeFrom(from.mailhead_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCGetMailItemListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCGetMailItemListRsp::CopyFrom(const WCGetMailItemListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCGetMailItemListRsp::IsInitialized() const {

  return true;
}

void WCGetMailItemListRsp::Swap(WCGetMailItemListRsp* other) {
  if (other != this) {
    mailhead_.Swap(&other->mailhead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCGetMailItemListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCGetMailItemListRsp_descriptor_;
  metadata.reflection = WCGetMailItemListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAskMailReq::kMailIdFieldNumber;
#endif  // !_MSC_VER

CWAskMailReq::CWAskMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAskMailReq::InitAsDefaultInstance() {
}

CWAskMailReq::CWAskMailReq(const CWAskMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAskMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAskMailReq::~CWAskMailReq() {
  SharedDtor();
}

void CWAskMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAskMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAskMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAskMailReq_descriptor_;
}

const CWAskMailReq& CWAskMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWAskMailReq* CWAskMailReq::default_instance_ = NULL;

CWAskMailReq* CWAskMailReq::New() const {
  return new CWAskMailReq;
}

void CWAskMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAskMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAskMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAskMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAskMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAskMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAskMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAskMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAskMailReq::MergeFrom(const CWAskMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAskMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAskMailReq::CopyFrom(const CWAskMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAskMailReq::IsInitialized() const {

  return true;
}

void CWAskMailReq::Swap(CWAskMailReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAskMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAskMailReq_descriptor_;
  metadata.reflection = CWAskMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCAskMailRsp::kMailIdFieldNumber;
const int WCAskMailRsp::kContentFieldNumber;
const int WCAskMailRsp::kGoldFieldNumber;
const int WCAskMailRsp::kDiamondFieldNumber;
const int WCAskMailRsp::kBindGoldFieldNumber;
const int WCAskMailRsp::kBindDiamondFieldNumber;
const int WCAskMailRsp::kSellTypeFieldNumber;
const int WCAskMailRsp::kSellNumFieldNumber;
const int WCAskMailRsp::kAttachmentListFieldNumber;
#endif  // !_MSC_VER

WCAskMailRsp::WCAskMailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCAskMailRsp::InitAsDefaultInstance() {
  attachmentlist_ = const_cast< ::ProtoBuf::MailAttachmentList*>(&::ProtoBuf::MailAttachmentList::default_instance());
}

WCAskMailRsp::WCAskMailRsp(const WCAskMailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCAskMailRsp::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0;
  diamond_ = 0;
  bindgold_ = 0;
  binddiamond_ = 0;
  selltype_ = 0u;
  sellnum_ = 0u;
  attachmentlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCAskMailRsp::~WCAskMailRsp() {
  SharedDtor();
}

void WCAskMailRsp::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete attachmentlist_;
  }
}

void WCAskMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCAskMailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCAskMailRsp_descriptor_;
}

const WCAskMailRsp& WCAskMailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WCAskMailRsp* WCAskMailRsp::default_instance_ = NULL;

WCAskMailRsp* WCAskMailRsp::New() const {
  return new WCAskMailRsp;
}

void WCAskMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gold_ = 0;
    diamond_ = 0;
    bindgold_ = 0;
    binddiamond_ = 0;
    selltype_ = 0u;
    sellnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_attachmentlist()) {
      if (attachmentlist_ != NULL) attachmentlist_->::ProtoBuf::MailAttachmentList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCAskMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindGold;
        break;
      }

      // optional int32 bindGold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bindDiamond;
        break;
      }

      // optional int32 bindDiamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sellType;
        break;
      }

      // optional uint32 sellType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sellNum;
        break;
      }

      // optional uint32 sellNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellnum_)));
          set_has_sellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attachmentList;
        break;
      }

      // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachmentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCAskMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diamond(), output);
  }

  // optional int32 bindGold = 5;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bindgold(), output);
  }

  // optional int32 bindDiamond = 6;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->binddiamond(), output);
  }

  // optional uint32 sellType = 7;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->selltype(), output);
  }

  // optional uint32 sellNum = 8;
  if (has_sellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sellnum(), output);
  }

  // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
  if (has_attachmentlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attachmentlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCAskMailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diamond(), target);
  }

  // optional int32 bindGold = 5;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bindgold(), target);
  }

  // optional int32 bindDiamond = 6;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->binddiamond(), target);
  }

  // optional uint32 sellType = 7;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->selltype(), target);
  }

  // optional uint32 sellNum = 8;
  if (has_sellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sellnum(), target);
  }

  // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
  if (has_attachmentlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attachmentlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCAskMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 bindGold = 5;
    if (has_bindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindgold());
    }

    // optional int32 bindDiamond = 6;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binddiamond());
    }

    // optional uint32 sellType = 7;
    if (has_selltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selltype());
    }

    // optional uint32 sellNum = 8;
    if (has_sellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sellnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
    if (has_attachmentlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachmentlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCAskMailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCAskMailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCAskMailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCAskMailRsp::MergeFrom(const WCAskMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
    if (from.has_sellnum()) {
      set_sellnum(from.sellnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attachmentlist()) {
      mutable_attachmentlist()->::ProtoBuf::MailAttachmentList::MergeFrom(from.attachmentlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCAskMailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCAskMailRsp::CopyFrom(const WCAskMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCAskMailRsp::IsInitialized() const {

  if (has_attachmentlist()) {
    if (!this->attachmentlist().IsInitialized()) return false;
  }
  return true;
}

void WCAskMailRsp::Swap(WCAskMailRsp* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(content_, other->content_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(selltype_, other->selltype_);
    std::swap(sellnum_, other->sellnum_);
    std::swap(attachmentlist_, other->attachmentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCAskMailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCAskMailRsp_descriptor_;
  metadata.reflection = WCAskMailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCUnReadMailNotify::kHasNewFieldNumber;
#endif  // !_MSC_VER

WCUnReadMailNotify::WCUnReadMailNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCUnReadMailNotify::InitAsDefaultInstance() {
}

WCUnReadMailNotify::WCUnReadMailNotify(const WCUnReadMailNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCUnReadMailNotify::SharedCtor() {
  _cached_size_ = 0;
  hasnew_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCUnReadMailNotify::~WCUnReadMailNotify() {
  SharedDtor();
}

void WCUnReadMailNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCUnReadMailNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCUnReadMailNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCUnReadMailNotify_descriptor_;
}

const WCUnReadMailNotify& WCUnReadMailNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WCUnReadMailNotify* WCUnReadMailNotify::default_instance_ = NULL;

WCUnReadMailNotify* WCUnReadMailNotify::New() const {
  return new WCUnReadMailNotify;
}

void WCUnReadMailNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasnew_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCUnReadMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasNew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasnew_)));
          set_has_hasnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCUnReadMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hasNew = 1;
  if (has_hasnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasnew(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCUnReadMailNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hasNew = 1;
  if (has_hasnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasnew(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCUnReadMailNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hasNew = 1;
    if (has_hasnew()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCUnReadMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCUnReadMailNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCUnReadMailNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCUnReadMailNotify::MergeFrom(const WCUnReadMailNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasnew()) {
      set_hasnew(from.hasnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCUnReadMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCUnReadMailNotify::CopyFrom(const WCUnReadMailNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCUnReadMailNotify::IsInitialized() const {

  return true;
}

void WCUnReadMailNotify::Swap(WCUnReadMailNotify* other) {
  if (other != this) {
    std::swap(hasnew_, other->hasnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCUnReadMailNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCUnReadMailNotify_descriptor_;
  metadata.reflection = WCUnReadMailNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailAttachment::kTypeFieldNumber;
const int MailAttachment::kGridIndexFieldNumber;
const int MailAttachment::kNumFieldNumber;
#endif  // !_MSC_VER

MailAttachment::MailAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailAttachment::InitAsDefaultInstance() {
}

MailAttachment::MailAttachment(const MailAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailAttachment::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  gridindex_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailAttachment::~MailAttachment() {
  SharedDtor();
}

void MailAttachment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailAttachment_descriptor_;
}

const MailAttachment& MailAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

MailAttachment* MailAttachment::default_instance_ = NULL;

MailAttachment* MailAttachment::New() const {
  return new MailAttachment;
}

void MailAttachment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    gridindex_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gridIndex;
        break;
      }

      // optional uint32 gridIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 gridIndex = 2;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridindex(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 gridIndex = 2;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridindex(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 gridIndex = 2;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailAttachment::MergeFrom(const MailAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailAttachment::CopyFrom(const MailAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailAttachment::IsInitialized() const {

  return true;
}

void MailAttachment::Swap(MailAttachment* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gridindex_, other->gridindex_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailAttachment_descriptor_;
  metadata.reflection = MailAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWSendMailReq::kMailTypeFieldNumber;
const int CWSendMailReq::kTargetNameFieldNumber;
const int CWSendMailReq::kTargetIdFieldNumber;
const int CWSendMailReq::kTitleFieldNumber;
const int CWSendMailReq::kContentFieldNumber;
const int CWSendMailReq::kSellTypeFieldNumber;
const int CWSendMailReq::kSellNumFieldNumber;
const int CWSendMailReq::kMailAttachmentFieldNumber;
#endif  // !_MSC_VER

CWSendMailReq::CWSendMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWSendMailReq::InitAsDefaultInstance() {
  mailattachment_ = const_cast< ::ProtoBuf::MailAttachment*>(&::ProtoBuf::MailAttachment::default_instance());
}

CWSendMailReq::CWSendMailReq(const CWSendMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWSendMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailtype_ = 0u;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selltype_ = 0u;
  sellnum_ = 0u;
  mailattachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWSendMailReq::~CWSendMailReq() {
  SharedDtor();
}

void CWSendMailReq::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete mailattachment_;
  }
}

void CWSendMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWSendMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWSendMailReq_descriptor_;
}

const CWSendMailReq& CWSendMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWSendMailReq* CWSendMailReq::default_instance_ = NULL;

CWSendMailReq* CWSendMailReq::New() const {
  return new CWSendMailReq;
}

void CWSendMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailtype_ = 0u;
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::kEmptyString) {
        targetname_->clear();
      }
    }
    targetid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    selltype_ = 0u;
    sellnum_ = 0u;
    if (has_mailattachment()) {
      if (mailattachment_ != NULL) mailattachment_->::ProtoBuf::MailAttachment::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWSendMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetName;
        break;
      }

      // optional bytes targetName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetId;
        break;
      }

      // optional uint32 targetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional bytes title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional bytes content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sellType;
        break;
      }

      // optional uint32 sellType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sellNum;
        break;
      }

      // optional uint32 sellNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellnum_)));
          set_has_sellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mailAttachment;
        break;
      }

      // optional .ProtoBuf.MailAttachment mailAttachment = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailAttachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailattachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWSendMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailType = 1;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailtype(), output);
  }

  // optional bytes targetName = 2;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->targetname(), output);
  }

  // optional uint32 targetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetid(), output);
  }

  // optional bytes title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->title(), output);
  }

  // optional bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->content(), output);
  }

  // optional uint32 sellType = 6;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->selltype(), output);
  }

  // optional uint32 sellNum = 7;
  if (has_sellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sellnum(), output);
  }

  // optional .ProtoBuf.MailAttachment mailAttachment = 8;
  if (has_mailattachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mailattachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWSendMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailType = 1;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailtype(), target);
  }

  // optional bytes targetName = 2;
  if (has_targetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->targetname(), target);
  }

  // optional uint32 targetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetid(), target);
  }

  // optional bytes title = 4;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->title(), target);
  }

  // optional bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  // optional uint32 sellType = 6;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->selltype(), target);
  }

  // optional uint32 sellNum = 7;
  if (has_sellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sellnum(), target);
  }

  // optional .ProtoBuf.MailAttachment mailAttachment = 8;
  if (has_mailattachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mailattachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWSendMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailType = 1;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // optional bytes targetName = 2;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetname());
    }

    // optional uint32 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // optional bytes title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional bytes content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint32 sellType = 6;
    if (has_selltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selltype());
    }

    // optional uint32 sellNum = 7;
    if (has_sellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sellnum());
    }

    // optional .ProtoBuf.MailAttachment mailAttachment = 8;
    if (has_mailattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailattachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWSendMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWSendMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWSendMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWSendMailReq::MergeFrom(const CWSendMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
    if (from.has_sellnum()) {
      set_sellnum(from.sellnum());
    }
    if (from.has_mailattachment()) {
      mutable_mailattachment()->::ProtoBuf::MailAttachment::MergeFrom(from.mailattachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWSendMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWSendMailReq::CopyFrom(const CWSendMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWSendMailReq::IsInitialized() const {

  return true;
}

void CWSendMailReq::Swap(CWSendMailReq* other) {
  if (other != this) {
    std::swap(mailtype_, other->mailtype_);
    std::swap(targetname_, other->targetname_);
    std::swap(targetid_, other->targetid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(selltype_, other->selltype_);
    std::swap(sellnum_, other->sellnum_);
    std::swap(mailattachment_, other->mailattachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWSendMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWSendMailReq_descriptor_;
  metadata.reflection = CWSendMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCSendMailRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCSendMailRsp::WCSendMailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCSendMailRsp::InitAsDefaultInstance() {
}

WCSendMailRsp::WCSendMailRsp(const WCSendMailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCSendMailRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCSendMailRsp::~WCSendMailRsp() {
  SharedDtor();
}

void WCSendMailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCSendMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCSendMailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCSendMailRsp_descriptor_;
}

const WCSendMailRsp& WCSendMailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WCSendMailRsp* WCSendMailRsp::default_instance_ = NULL;

WCSendMailRsp* WCSendMailRsp::New() const {
  return new WCSendMailRsp;
}

void WCSendMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCSendMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCSendMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCSendMailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCSendMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCSendMailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCSendMailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCSendMailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCSendMailRsp::MergeFrom(const WCSendMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCSendMailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCSendMailRsp::CopyFrom(const WCSendMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCSendMailRsp::IsInitialized() const {

  return true;
}

void WCSendMailRsp::Swap(WCSendMailRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCSendMailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCSendMailRsp_descriptor_;
  metadata.reflection = WCSendMailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWDeleteMailReq::kIdListFieldNumber;
#endif  // !_MSC_VER

CWDeleteMailReq::CWDeleteMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWDeleteMailReq::InitAsDefaultInstance() {
}

CWDeleteMailReq::CWDeleteMailReq(const CWDeleteMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWDeleteMailReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWDeleteMailReq::~CWDeleteMailReq() {
  SharedDtor();
}

void CWDeleteMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWDeleteMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWDeleteMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWDeleteMailReq_descriptor_;
}

const CWDeleteMailReq& CWDeleteMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWDeleteMailReq* CWDeleteMailReq::default_instance_ = NULL;

CWDeleteMailReq* CWDeleteMailReq::New() const {
  return new CWDeleteMailReq;
}

void CWDeleteMailReq::Clear() {
  idlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWDeleteMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 idList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_idlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_idlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_idList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWDeleteMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 idList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->idlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWDeleteMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 idList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->idlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWDeleteMailReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 idList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->idlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->idlist(i));
    }
    total_size += 1 * this->idlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWDeleteMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWDeleteMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWDeleteMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWDeleteMailReq::MergeFrom(const CWDeleteMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  idlist_.MergeFrom(from.idlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWDeleteMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWDeleteMailReq::CopyFrom(const CWDeleteMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWDeleteMailReq::IsInitialized() const {

  return true;
}

void CWDeleteMailReq::Swap(CWDeleteMailReq* other) {
  if (other != this) {
    idlist_.Swap(&other->idlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWDeleteMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWDeleteMailReq_descriptor_;
  metadata.reflection = CWDeleteMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCDeleteMailRsp::kIdListFieldNumber;
#endif  // !_MSC_VER

WCDeleteMailRsp::WCDeleteMailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCDeleteMailRsp::InitAsDefaultInstance() {
}

WCDeleteMailRsp::WCDeleteMailRsp(const WCDeleteMailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCDeleteMailRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCDeleteMailRsp::~WCDeleteMailRsp() {
  SharedDtor();
}

void WCDeleteMailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCDeleteMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCDeleteMailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCDeleteMailRsp_descriptor_;
}

const WCDeleteMailRsp& WCDeleteMailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WCDeleteMailRsp* WCDeleteMailRsp::default_instance_ = NULL;

WCDeleteMailRsp* WCDeleteMailRsp::New() const {
  return new WCDeleteMailRsp;
}

void WCDeleteMailRsp::Clear() {
  idlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCDeleteMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 idList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_idlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_idlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_idList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCDeleteMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 idList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->idlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCDeleteMailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 idList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->idlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCDeleteMailRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 idList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->idlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->idlist(i));
    }
    total_size += 1 * this->idlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCDeleteMailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCDeleteMailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCDeleteMailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCDeleteMailRsp::MergeFrom(const WCDeleteMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  idlist_.MergeFrom(from.idlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCDeleteMailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCDeleteMailRsp::CopyFrom(const WCDeleteMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCDeleteMailRsp::IsInitialized() const {

  return true;
}

void WCDeleteMailRsp::Swap(WCDeleteMailRsp* other) {
  if (other != this) {
    idlist_.Swap(&other->idlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCDeleteMailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCDeleteMailRsp_descriptor_;
  metadata.reflection = WCDeleteMailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCNewMailNotify::kMailHeadFieldNumber;
#endif  // !_MSC_VER

WCNewMailNotify::WCNewMailNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCNewMailNotify::InitAsDefaultInstance() {
  mailhead_ = const_cast< ::ProtoBuf::MailHead*>(&::ProtoBuf::MailHead::default_instance());
}

WCNewMailNotify::WCNewMailNotify(const WCNewMailNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCNewMailNotify::SharedCtor() {
  _cached_size_ = 0;
  mailhead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCNewMailNotify::~WCNewMailNotify() {
  SharedDtor();
}

void WCNewMailNotify::SharedDtor() {
  if (this != default_instance_) {
    delete mailhead_;
  }
}

void WCNewMailNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCNewMailNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCNewMailNotify_descriptor_;
}

const WCNewMailNotify& WCNewMailNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WCNewMailNotify* WCNewMailNotify::default_instance_ = NULL;

WCNewMailNotify* WCNewMailNotify::New() const {
  return new WCNewMailNotify;
}

void WCNewMailNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailhead()) {
      if (mailhead_ != NULL) mailhead_->::ProtoBuf::MailHead::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCNewMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.MailHead mailHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCNewMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.MailHead mailHead = 1;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailhead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCNewMailNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.MailHead mailHead = 1;
  if (has_mailhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailhead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCNewMailNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.MailHead mailHead = 1;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailhead());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCNewMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCNewMailNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCNewMailNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCNewMailNotify::MergeFrom(const WCNewMailNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailhead()) {
      mutable_mailhead()->::ProtoBuf::MailHead::MergeFrom(from.mailhead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCNewMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCNewMailNotify::CopyFrom(const WCNewMailNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCNewMailNotify::IsInitialized() const {

  return true;
}

void WCNewMailNotify::Swap(WCNewMailNotify* other) {
  if (other != this) {
    std::swap(mailhead_, other->mailhead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCNewMailNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCNewMailNotify_descriptor_;
  metadata.reflection = WCNewMailNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWGetMailAttachmentReq::kMailIdFieldNumber;
#endif  // !_MSC_VER

CWGetMailAttachmentReq::CWGetMailAttachmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGetMailAttachmentReq::InitAsDefaultInstance() {
}

CWGetMailAttachmentReq::CWGetMailAttachmentReq(const CWGetMailAttachmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGetMailAttachmentReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGetMailAttachmentReq::~CWGetMailAttachmentReq() {
  SharedDtor();
}

void CWGetMailAttachmentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGetMailAttachmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGetMailAttachmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGetMailAttachmentReq_descriptor_;
}

const CWGetMailAttachmentReq& CWGetMailAttachmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWGetMailAttachmentReq* CWGetMailAttachmentReq::default_instance_ = NULL;

CWGetMailAttachmentReq* CWGetMailAttachmentReq::New() const {
  return new CWGetMailAttachmentReq;
}

void CWGetMailAttachmentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGetMailAttachmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWGetMailAttachmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGetMailAttachmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGetMailAttachmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGetMailAttachmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGetMailAttachmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGetMailAttachmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGetMailAttachmentReq::MergeFrom(const CWGetMailAttachmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGetMailAttachmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGetMailAttachmentReq::CopyFrom(const CWGetMailAttachmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGetMailAttachmentReq::IsInitialized() const {

  return true;
}

void CWGetMailAttachmentReq::Swap(CWGetMailAttachmentReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGetMailAttachmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGetMailAttachmentReq_descriptor_;
  metadata.reflection = CWGetMailAttachmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetMailAttachmentRsp::kRetFieldNumber;
const int GCGetMailAttachmentRsp::kMailIdFieldNumber;
#endif  // !_MSC_VER

GCGetMailAttachmentRsp::GCGetMailAttachmentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCGetMailAttachmentRsp::InitAsDefaultInstance() {
}

GCGetMailAttachmentRsp::GCGetMailAttachmentRsp(const GCGetMailAttachmentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCGetMailAttachmentRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetMailAttachmentRsp::~GCGetMailAttachmentRsp() {
  SharedDtor();
}

void GCGetMailAttachmentRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetMailAttachmentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetMailAttachmentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetMailAttachmentRsp_descriptor_;
}

const GCGetMailAttachmentRsp& GCGetMailAttachmentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

GCGetMailAttachmentRsp* GCGetMailAttachmentRsp::default_instance_ = NULL;

GCGetMailAttachmentRsp* GCGetMailAttachmentRsp::New() const {
  return new GCGetMailAttachmentRsp;
}

void GCGetMailAttachmentRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetMailAttachmentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailId;
        break;
      }

      // optional uint32 mailId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCGetMailAttachmentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCGetMailAttachmentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 mailId = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCGetMailAttachmentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetMailAttachmentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetMailAttachmentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetMailAttachmentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetMailAttachmentRsp::MergeFrom(const GCGetMailAttachmentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetMailAttachmentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetMailAttachmentRsp::CopyFrom(const GCGetMailAttachmentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetMailAttachmentRsp::IsInitialized() const {

  return true;
}

void GCGetMailAttachmentRsp::Swap(GCGetMailAttachmentRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetMailAttachmentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetMailAttachmentRsp_descriptor_;
  metadata.reflection = GCGetMailAttachmentRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWGetAllMailAttachmentReq::CWGetAllMailAttachmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGetAllMailAttachmentReq::InitAsDefaultInstance() {
}

CWGetAllMailAttachmentReq::CWGetAllMailAttachmentReq(const CWGetAllMailAttachmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGetAllMailAttachmentReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGetAllMailAttachmentReq::~CWGetAllMailAttachmentReq() {
  SharedDtor();
}

void CWGetAllMailAttachmentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGetAllMailAttachmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGetAllMailAttachmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGetAllMailAttachmentReq_descriptor_;
}

const CWGetAllMailAttachmentReq& CWGetAllMailAttachmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWGetAllMailAttachmentReq* CWGetAllMailAttachmentReq::default_instance_ = NULL;

CWGetAllMailAttachmentReq* CWGetAllMailAttachmentReq::New() const {
  return new CWGetAllMailAttachmentReq;
}

void CWGetAllMailAttachmentReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGetAllMailAttachmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWGetAllMailAttachmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGetAllMailAttachmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGetAllMailAttachmentReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGetAllMailAttachmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGetAllMailAttachmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGetAllMailAttachmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGetAllMailAttachmentReq::MergeFrom(const CWGetAllMailAttachmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGetAllMailAttachmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGetAllMailAttachmentReq::CopyFrom(const CWGetAllMailAttachmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGetAllMailAttachmentReq::IsInitialized() const {

  return true;
}

void CWGetAllMailAttachmentReq::Swap(CWGetAllMailAttachmentReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGetAllMailAttachmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGetAllMailAttachmentReq_descriptor_;
  metadata.reflection = CWGetAllMailAttachmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAllMailAttachmentRsp::kRetFieldNumber;
const int GCGetAllMailAttachmentRsp::kIdListFieldNumber;
#endif  // !_MSC_VER

GCGetAllMailAttachmentRsp::GCGetAllMailAttachmentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCGetAllMailAttachmentRsp::InitAsDefaultInstance() {
}

GCGetAllMailAttachmentRsp::GCGetAllMailAttachmentRsp(const GCGetAllMailAttachmentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCGetAllMailAttachmentRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAllMailAttachmentRsp::~GCGetAllMailAttachmentRsp() {
  SharedDtor();
}

void GCGetAllMailAttachmentRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetAllMailAttachmentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAllMailAttachmentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAllMailAttachmentRsp_descriptor_;
}

const GCGetAllMailAttachmentRsp& GCGetAllMailAttachmentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

GCGetAllMailAttachmentRsp* GCGetAllMailAttachmentRsp::default_instance_ = NULL;

GCGetAllMailAttachmentRsp* GCGetAllMailAttachmentRsp::New() const {
  return new GCGetAllMailAttachmentRsp;
}

void GCGetAllMailAttachmentRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  idlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAllMailAttachmentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idList;
        break;
      }

      // repeated uint32 idList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_idlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_idlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCGetAllMailAttachmentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated uint32 idList = 2;
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->idlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCGetAllMailAttachmentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated uint32 idList = 2;
  for (int i = 0; i < this->idlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->idlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCGetAllMailAttachmentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated uint32 idList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->idlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->idlist(i));
    }
    total_size += 1 * this->idlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAllMailAttachmentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAllMailAttachmentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAllMailAttachmentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAllMailAttachmentRsp::MergeFrom(const GCGetAllMailAttachmentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  idlist_.MergeFrom(from.idlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAllMailAttachmentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAllMailAttachmentRsp::CopyFrom(const GCGetAllMailAttachmentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAllMailAttachmentRsp::IsInitialized() const {

  return true;
}

void GCGetAllMailAttachmentRsp::Swap(GCGetAllMailAttachmentRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    idlist_.Swap(&other->idlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAllMailAttachmentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAllMailAttachmentRsp_descriptor_;
  metadata.reflection = GCGetAllMailAttachmentRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWNdrMailReq::kMailIdFieldNumber;
#endif  // !_MSC_VER

CWNdrMailReq::CWNdrMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWNdrMailReq::InitAsDefaultInstance() {
}

CWNdrMailReq::CWNdrMailReq(const CWNdrMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWNdrMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWNdrMailReq::~CWNdrMailReq() {
  SharedDtor();
}

void CWNdrMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWNdrMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWNdrMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWNdrMailReq_descriptor_;
}

const CWNdrMailReq& CWNdrMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWNdrMailReq* CWNdrMailReq::default_instance_ = NULL;

CWNdrMailReq* CWNdrMailReq::New() const {
  return new CWNdrMailReq;
}

void CWNdrMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWNdrMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWNdrMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWNdrMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWNdrMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWNdrMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWNdrMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWNdrMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWNdrMailReq::MergeFrom(const CWNdrMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWNdrMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWNdrMailReq::CopyFrom(const CWNdrMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWNdrMailReq::IsInitialized() const {

  return true;
}

void CWNdrMailReq::Swap(CWNdrMailReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWNdrMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWNdrMailReq_descriptor_;
  metadata.reflection = CWNdrMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWNdrMailRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CWNdrMailRsp::CWNdrMailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWNdrMailRsp::InitAsDefaultInstance() {
}

CWNdrMailRsp::CWNdrMailRsp(const CWNdrMailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWNdrMailRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWNdrMailRsp::~CWNdrMailRsp() {
  SharedDtor();
}

void CWNdrMailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWNdrMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWNdrMailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWNdrMailRsp_descriptor_;
}

const CWNdrMailRsp& CWNdrMailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

CWNdrMailRsp* CWNdrMailRsp::default_instance_ = NULL;

CWNdrMailRsp* CWNdrMailRsp::New() const {
  return new CWNdrMailRsp;
}

void CWNdrMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWNdrMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWNdrMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWNdrMailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWNdrMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWNdrMailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWNdrMailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWNdrMailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWNdrMailRsp::MergeFrom(const CWNdrMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWNdrMailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWNdrMailRsp::CopyFrom(const CWNdrMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWNdrMailRsp::IsInitialized() const {

  return true;
}

void CWNdrMailRsp::Swap(CWNdrMailRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWNdrMailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWNdrMailRsp_descriptor_;
  metadata.reflection = CWNdrMailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGSendMailReq::kCharIdFieldNumber;
const int WGSendMailReq::kReqFieldNumber;
#endif  // !_MSC_VER

WGSendMailReq::WGSendMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGSendMailReq::InitAsDefaultInstance() {
  req_ = const_cast< ::ProtoBuf::CWSendMailReq*>(&::ProtoBuf::CWSendMailReq::default_instance());
}

WGSendMailReq::WGSendMailReq(const WGSendMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGSendMailReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGSendMailReq::~WGSendMailReq() {
  SharedDtor();
}

void WGSendMailReq::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void WGSendMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGSendMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGSendMailReq_descriptor_;
}

const WGSendMailReq& WGSendMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WGSendMailReq* WGSendMailReq::default_instance_ = NULL;

WGSendMailReq* WGSendMailReq::New() const {
  return new WGSendMailReq;
}

void WGSendMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_req()) {
      if (req_ != NULL) req_->::ProtoBuf::CWSendMailReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGSendMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_req;
        break;
      }

      // optional .ProtoBuf.CWSendMailReq req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGSendMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional .ProtoBuf.CWSendMailReq req = 2;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGSendMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional .ProtoBuf.CWSendMailReq req = 2;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGSendMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .ProtoBuf.CWSendMailReq req = 2;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGSendMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGSendMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGSendMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGSendMailReq::MergeFrom(const WGSendMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_req()) {
      mutable_req()->::ProtoBuf::CWSendMailReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGSendMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGSendMailReq::CopyFrom(const WGSendMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGSendMailReq::IsInitialized() const {

  return true;
}

void WGSendMailReq::Swap(WGSendMailReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGSendMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGSendMailReq_descriptor_;
  metadata.reflection = WGSendMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWSendMailReq::kMailTypeFieldNumber;
const int GWSendMailReq::kSendIdFieldNumber;
const int GWSendMailReq::kTargetNameFieldNumber;
const int GWSendMailReq::kTargetIdFieldNumber;
const int GWSendMailReq::kTitleFieldNumber;
const int GWSendMailReq::kContentFieldNumber;
const int GWSendMailReq::kSellTypeFieldNumber;
const int GWSendMailReq::kSellNumFieldNumber;
const int GWSendMailReq::kAttachmentFieldNumber;
#endif  // !_MSC_VER

GWSendMailReq::GWSendMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWSendMailReq::InitAsDefaultInstance() {
  attachment_ = const_cast< ::ProtoBuf::MailAttachmentList*>(&::ProtoBuf::MailAttachmentList::default_instance());
}

GWSendMailReq::GWSendMailReq(const GWSendMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWSendMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailtype_ = 0u;
  sendid_ = 0u;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selltype_ = 0u;
  sellnum_ = 0;
  attachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWSendMailReq::~GWSendMailReq() {
  SharedDtor();
}

void GWSendMailReq::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete attachment_;
  }
}

void GWSendMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWSendMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWSendMailReq_descriptor_;
}

const GWSendMailReq& GWSendMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

GWSendMailReq* GWSendMailReq::default_instance_ = NULL;

GWSendMailReq* GWSendMailReq::New() const {
  return new GWSendMailReq;
}

void GWSendMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailtype_ = 0u;
    sendid_ = 0u;
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::kEmptyString) {
        targetname_->clear();
      }
    }
    targetid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    selltype_ = 0u;
    sellnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::ProtoBuf::MailAttachmentList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWSendMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendId;
        break;
      }

      // optional uint32 sendId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendid_)));
          set_has_sendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targetName;
        break;
      }

      // optional bytes targetName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetId;
        break;
      }

      // optional uint32 targetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional bytes title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional bytes content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sellType;
        break;
      }

      // optional uint32 sellType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sellNum;
        break;
      }

      // optional int32 sellNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellnum_)));
          set_has_sellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attachment;
        break;
      }

      // optional .ProtoBuf.MailAttachmentList attachment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWSendMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailType = 1;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailtype(), output);
  }

  // optional uint32 sendId = 2;
  if (has_sendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sendid(), output);
  }

  // optional bytes targetName = 3;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->targetname(), output);
  }

  // optional uint32 targetId = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->targetid(), output);
  }

  // optional bytes title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->title(), output);
  }

  // optional bytes content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->content(), output);
  }

  // optional uint32 sellType = 7;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->selltype(), output);
  }

  // optional int32 sellNum = 8;
  if (has_sellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sellnum(), output);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 9;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWSendMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailType = 1;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailtype(), target);
  }

  // optional uint32 sendId = 2;
  if (has_sendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sendid(), target);
  }

  // optional bytes targetName = 3;
  if (has_targetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->targetname(), target);
  }

  // optional uint32 targetId = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->targetid(), target);
  }

  // optional bytes title = 5;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->title(), target);
  }

  // optional bytes content = 6;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->content(), target);
  }

  // optional uint32 sellType = 7;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->selltype(), target);
  }

  // optional int32 sellNum = 8;
  if (has_sellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sellnum(), target);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 9;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWSendMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailType = 1;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // optional uint32 sendId = 2;
    if (has_sendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendid());
    }

    // optional bytes targetName = 3;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetname());
    }

    // optional uint32 targetId = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // optional bytes title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional bytes content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint32 sellType = 7;
    if (has_selltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selltype());
    }

    // optional int32 sellNum = 8;
    if (has_sellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoBuf.MailAttachmentList attachment = 9;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWSendMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWSendMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWSendMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWSendMailReq::MergeFrom(const GWSendMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_sendid()) {
      set_sendid(from.sendid());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
    if (from.has_sellnum()) {
      set_sellnum(from.sellnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attachment()) {
      mutable_attachment()->::ProtoBuf::MailAttachmentList::MergeFrom(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWSendMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWSendMailReq::CopyFrom(const GWSendMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWSendMailReq::IsInitialized() const {

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  return true;
}

void GWSendMailReq::Swap(GWSendMailReq* other) {
  if (other != this) {
    std::swap(mailtype_, other->mailtype_);
    std::swap(sendid_, other->sendid_);
    std::swap(targetname_, other->targetname_);
    std::swap(targetid_, other->targetid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(selltype_, other->selltype_);
    std::swap(sellnum_, other->sellnum_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWSendMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWSendMailReq_descriptor_;
  metadata.reflection = GWSendMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGGetMailAttachmentReq::kCharIdFieldNumber;
const int WGGetMailAttachmentReq::kMailIdFieldNumber;
const int WGGetMailAttachmentReq::kMailTypeFieldNumber;
const int WGGetMailAttachmentReq::kGoldFieldNumber;
const int WGGetMailAttachmentReq::kBindGoldFieldNumber;
const int WGGetMailAttachmentReq::kDiamondFieldNumber;
const int WGGetMailAttachmentReq::kBindDiamondFieldNumber;
const int WGGetMailAttachmentReq::kSellTypeFieldNumber;
const int WGGetMailAttachmentReq::kSellNumFieldNumber;
const int WGGetMailAttachmentReq::kAttachmentFieldNumber;
#endif  // !_MSC_VER

WGGetMailAttachmentReq::WGGetMailAttachmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGGetMailAttachmentReq::InitAsDefaultInstance() {
  attachment_ = const_cast< ::ProtoBuf::MailAttachmentList*>(&::ProtoBuf::MailAttachmentList::default_instance());
}

WGGetMailAttachmentReq::WGGetMailAttachmentReq(const WGGetMailAttachmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGGetMailAttachmentReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  mailid_ = 0u;
  mailtype_ = 0u;
  gold_ = 0;
  bindgold_ = 0;
  diamond_ = 0;
  binddiamond_ = 0;
  selltype_ = 0u;
  sellnum_ = 0;
  attachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGGetMailAttachmentReq::~WGGetMailAttachmentReq() {
  SharedDtor();
}

void WGGetMailAttachmentReq::SharedDtor() {
  if (this != default_instance_) {
    delete attachment_;
  }
}

void WGGetMailAttachmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGGetMailAttachmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGGetMailAttachmentReq_descriptor_;
}

const WGGetMailAttachmentReq& WGGetMailAttachmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WGGetMailAttachmentReq* WGGetMailAttachmentReq::default_instance_ = NULL;

WGGetMailAttachmentReq* WGGetMailAttachmentReq::New() const {
  return new WGGetMailAttachmentReq;
}

void WGGetMailAttachmentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    mailid_ = 0u;
    mailtype_ = 0u;
    gold_ = 0;
    bindgold_ = 0;
    diamond_ = 0;
    binddiamond_ = 0;
    selltype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sellnum_ = 0;
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::ProtoBuf::MailAttachmentList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGGetMailAttachmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailId;
        break;
      }

      // optional uint32 mailId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailType;
        break;
      }

      // optional uint32 mailType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindGold;
        break;
      }

      // optional int32 bindGold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bindDiamond;
        break;
      }

      // optional int32 bindDiamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sellType;
        break;
      }

      // optional uint32 sellType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sellNum;
        break;
      }

      // optional int32 sellNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellnum_)));
          set_has_sellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attachment;
        break;
      }

      // optional .ProtoBuf.MailAttachmentList attachment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGGetMailAttachmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mailid(), output);
  }

  // optional uint32 mailType = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailtype(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 bindGold = 5;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bindgold(), output);
  }

  // optional int32 diamond = 6;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->diamond(), output);
  }

  // optional int32 bindDiamond = 7;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->binddiamond(), output);
  }

  // optional uint32 sellType = 8;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->selltype(), output);
  }

  // optional int32 sellNum = 9;
  if (has_sellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sellnum(), output);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 10;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGGetMailAttachmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 mailId = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mailid(), target);
  }

  // optional uint32 mailType = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailtype(), target);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold(), target);
  }

  // optional int32 bindGold = 5;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bindgold(), target);
  }

  // optional int32 diamond = 6;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->diamond(), target);
  }

  // optional int32 bindDiamond = 7;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->binddiamond(), target);
  }

  // optional uint32 sellType = 8;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->selltype(), target);
  }

  // optional int32 sellNum = 9;
  if (has_sellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sellnum(), target);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 10;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGGetMailAttachmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // optional uint32 mailType = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 bindGold = 5;
    if (has_bindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindgold());
    }

    // optional int32 diamond = 6;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 bindDiamond = 7;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binddiamond());
    }

    // optional uint32 sellType = 8;
    if (has_selltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selltype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sellNum = 9;
    if (has_sellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellnum());
    }

    // optional .ProtoBuf.MailAttachmentList attachment = 10;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGGetMailAttachmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGGetMailAttachmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGGetMailAttachmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGGetMailAttachmentReq::MergeFrom(const WGGetMailAttachmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sellnum()) {
      set_sellnum(from.sellnum());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::ProtoBuf::MailAttachmentList::MergeFrom(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGGetMailAttachmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGGetMailAttachmentReq::CopyFrom(const WGGetMailAttachmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGGetMailAttachmentReq::IsInitialized() const {

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  return true;
}

void WGGetMailAttachmentReq::Swap(WGGetMailAttachmentReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mailid_, other->mailid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(selltype_, other->selltype_);
    std::swap(sellnum_, other->sellnum_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGGetMailAttachmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGGetMailAttachmentReq_descriptor_;
  metadata.reflection = WGGetMailAttachmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWUpdateMailNotify::kCharIdFieldNumber;
const int GWUpdateMailNotify::kIdListFieldNumber;
const int GWUpdateMailNotify::kRetFieldNumber;
#endif  // !_MSC_VER

GWUpdateMailNotify::GWUpdateMailNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWUpdateMailNotify::InitAsDefaultInstance() {
}

GWUpdateMailNotify::GWUpdateMailNotify(const GWUpdateMailNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWUpdateMailNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWUpdateMailNotify::~GWUpdateMailNotify() {
  SharedDtor();
}

void GWUpdateMailNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWUpdateMailNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWUpdateMailNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWUpdateMailNotify_descriptor_;
}

const GWUpdateMailNotify& GWUpdateMailNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

GWUpdateMailNotify* GWUpdateMailNotify::default_instance_ = NULL;

GWUpdateMailNotify* GWUpdateMailNotify::New() const {
  return new GWUpdateMailNotify;
}

void GWUpdateMailNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    ret_ = 0u;
  }
  idlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWUpdateMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idList;
        break;
      }

      // repeated uint32 idList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_idlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_idlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idList;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWUpdateMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated uint32 idList = 2;
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->idlist(i), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWUpdateMailNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated uint32 idList = 2;
  for (int i = 0; i < this->idlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->idlist(i), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWUpdateMailNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated uint32 idList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->idlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->idlist(i));
    }
    total_size += 1 * this->idlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWUpdateMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWUpdateMailNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWUpdateMailNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWUpdateMailNotify::MergeFrom(const GWUpdateMailNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  idlist_.MergeFrom(from.idlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWUpdateMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWUpdateMailNotify::CopyFrom(const GWUpdateMailNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWUpdateMailNotify::IsInitialized() const {

  return true;
}

void GWUpdateMailNotify::Swap(GWUpdateMailNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    idlist_.Swap(&other->idlist_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWUpdateMailNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWUpdateMailNotify_descriptor_;
  metadata.reflection = GWUpdateMailNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneMailAttachmentData::kMailIdFieldNumber;
const int OneMailAttachmentData::kGoldFieldNumber;
const int OneMailAttachmentData::kBindGoldFieldNumber;
const int OneMailAttachmentData::kDiamondFieldNumber;
const int OneMailAttachmentData::kBindDiamondFieldNumber;
const int OneMailAttachmentData::kAttachmentFieldNumber;
#endif  // !_MSC_VER

OneMailAttachmentData::OneMailAttachmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneMailAttachmentData::InitAsDefaultInstance() {
  attachment_ = const_cast< ::ProtoBuf::MailAttachmentList*>(&::ProtoBuf::MailAttachmentList::default_instance());
}

OneMailAttachmentData::OneMailAttachmentData(const OneMailAttachmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneMailAttachmentData::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  gold_ = 0;
  bindgold_ = 0;
  diamond_ = 0;
  binddiamond_ = 0;
  attachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneMailAttachmentData::~OneMailAttachmentData() {
  SharedDtor();
}

void OneMailAttachmentData::SharedDtor() {
  if (this != default_instance_) {
    delete attachment_;
  }
}

void OneMailAttachmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneMailAttachmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneMailAttachmentData_descriptor_;
}

const OneMailAttachmentData& OneMailAttachmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

OneMailAttachmentData* OneMailAttachmentData::default_instance_ = NULL;

OneMailAttachmentData* OneMailAttachmentData::New() const {
  return new OneMailAttachmentData;
}

void OneMailAttachmentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    gold_ = 0;
    bindgold_ = 0;
    diamond_ = 0;
    binddiamond_ = 0;
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::ProtoBuf::MailAttachmentList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneMailAttachmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bindGold;
        break;
      }

      // optional int32 bindGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindDiamond;
        break;
      }

      // optional int32 bindDiamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attachment;
        break;
      }

      // optional .ProtoBuf.MailAttachmentList attachment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneMailAttachmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // optional int32 bindGold = 3;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bindgold(), output);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diamond(), output);
  }

  // optional int32 bindDiamond = 5;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->binddiamond(), output);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 6;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneMailAttachmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // optional int32 bindGold = 3;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bindgold(), target);
  }

  // optional int32 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diamond(), target);
  }

  // optional int32 bindDiamond = 5;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->binddiamond(), target);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 6;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneMailAttachmentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 bindGold = 3;
    if (has_bindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindgold());
    }

    // optional int32 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 bindDiamond = 5;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binddiamond());
    }

    // optional .ProtoBuf.MailAttachmentList attachment = 6;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneMailAttachmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneMailAttachmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneMailAttachmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneMailAttachmentData::MergeFrom(const OneMailAttachmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::ProtoBuf::MailAttachmentList::MergeFrom(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneMailAttachmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneMailAttachmentData::CopyFrom(const OneMailAttachmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneMailAttachmentData::IsInitialized() const {

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  return true;
}

void OneMailAttachmentData::Swap(OneMailAttachmentData* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneMailAttachmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneMailAttachmentData_descriptor_;
  metadata.reflection = OneMailAttachmentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGGetAllMailAttachmentReq::kCharIdFieldNumber;
const int WGGetAllMailAttachmentReq::kAttachmentDataListFieldNumber;
#endif  // !_MSC_VER

WGGetAllMailAttachmentReq::WGGetAllMailAttachmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGGetAllMailAttachmentReq::InitAsDefaultInstance() {
}

WGGetAllMailAttachmentReq::WGGetAllMailAttachmentReq(const WGGetAllMailAttachmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGGetAllMailAttachmentReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGGetAllMailAttachmentReq::~WGGetAllMailAttachmentReq() {
  SharedDtor();
}

void WGGetAllMailAttachmentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGGetAllMailAttachmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGGetAllMailAttachmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGGetAllMailAttachmentReq_descriptor_;
}

const WGGetAllMailAttachmentReq& WGGetAllMailAttachmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

WGGetAllMailAttachmentReq* WGGetAllMailAttachmentReq::default_instance_ = NULL;

WGGetAllMailAttachmentReq* WGGetAllMailAttachmentReq::New() const {
  return new WGGetAllMailAttachmentReq;
}

void WGGetAllMailAttachmentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  attachmentdatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGGetAllMailAttachmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attachmentDataList;
        break;
      }

      // repeated .ProtoBuf.OneMailAttachmentData attachmentDataList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachmentDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachmentdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attachmentDataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGGetAllMailAttachmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .ProtoBuf.OneMailAttachmentData attachmentDataList = 2;
  for (int i = 0; i < this->attachmentdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attachmentdatalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGGetAllMailAttachmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .ProtoBuf.OneMailAttachmentData attachmentDataList = 2;
  for (int i = 0; i < this->attachmentdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attachmentdatalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGGetAllMailAttachmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .ProtoBuf.OneMailAttachmentData attachmentDataList = 2;
  total_size += 1 * this->attachmentdatalist_size();
  for (int i = 0; i < this->attachmentdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachmentdatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGGetAllMailAttachmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGGetAllMailAttachmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGGetAllMailAttachmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGGetAllMailAttachmentReq::MergeFrom(const WGGetAllMailAttachmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachmentdatalist_.MergeFrom(from.attachmentdatalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGGetAllMailAttachmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGGetAllMailAttachmentReq::CopyFrom(const WGGetAllMailAttachmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGGetAllMailAttachmentReq::IsInitialized() const {

  for (int i = 0; i < attachmentdatalist_size(); i++) {
    if (!this->attachmentdatalist(i).IsInitialized()) return false;
  }
  return true;
}

void WGGetAllMailAttachmentReq::Swap(WGGetAllMailAttachmentReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    attachmentdatalist_.Swap(&other->attachmentdatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGGetAllMailAttachmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGGetAllMailAttachmentReq_descriptor_;
  metadata.reflection = WGGetAllMailAttachmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWSendSystemMailReq::kDestIdFieldNumber;
const int GWSendSystemMailReq::kTitleFieldNumber;
const int GWSendSystemMailReq::kContentFieldNumber;
const int GWSendSystemMailReq::kGoldFieldNumber;
const int GWSendSystemMailReq::kBindGoldFieldNumber;
const int GWSendSystemMailReq::kDiamondFieldNumber;
const int GWSendSystemMailReq::kBindDiamondFieldNumber;
const int GWSendSystemMailReq::kAttachmentFieldNumber;
#endif  // !_MSC_VER

GWSendSystemMailReq::GWSendSystemMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWSendSystemMailReq::InitAsDefaultInstance() {
  attachment_ = const_cast< ::ProtoBuf::MailAttachmentList*>(&::ProtoBuf::MailAttachmentList::default_instance());
}

GWSendSystemMailReq::GWSendSystemMailReq(const GWSendSystemMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWSendSystemMailReq::SharedCtor() {
  _cached_size_ = 0;
  destid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0;
  bindgold_ = 0;
  diamond_ = 0;
  binddiamond_ = 0;
  attachment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWSendSystemMailReq::~GWSendSystemMailReq() {
  SharedDtor();
}

void GWSendSystemMailReq::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete attachment_;
  }
}

void GWSendSystemMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWSendSystemMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWSendSystemMailReq_descriptor_;
}

const GWSendSystemMailReq& GWSendSystemMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMail_2eproto();
  return *default_instance_;
}

GWSendSystemMailReq* GWSendSystemMailReq::default_instance_ = NULL;

GWSendSystemMailReq* GWSendSystemMailReq::New() const {
  return new GWSendSystemMailReq;
}

void GWSendSystemMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    gold_ = 0;
    bindgold_ = 0;
    diamond_ = 0;
    binddiamond_ = 0;
    if (has_attachment()) {
      if (attachment_ != NULL) attachment_->::ProtoBuf::MailAttachmentList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWSendSystemMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 destId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destid_)));
          set_has_destid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindGold;
        break;
      }

      // optional int32 bindGold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindgold_)));
          set_has_bindgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bindDiamond;
        break;
      }

      // optional int32 bindDiamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attachment;
        break;
      }

      // optional .ProtoBuf.MailAttachmentList attachment = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWSendSystemMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 destId = 1;
  if (has_destid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->destid(), output);
  }

  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 bindGold = 5;
  if (has_bindgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bindgold(), output);
  }

  // optional int32 diamond = 6;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->diamond(), output);
  }

  // optional int32 bindDiamond = 7;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->binddiamond(), output);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 8;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attachment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWSendSystemMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 destId = 1;
  if (has_destid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->destid(), target);
  }

  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold(), target);
  }

  // optional int32 bindGold = 5;
  if (has_bindgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bindgold(), target);
  }

  // optional int32 diamond = 6;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->diamond(), target);
  }

  // optional int32 bindDiamond = 7;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->binddiamond(), target);
  }

  // optional .ProtoBuf.MailAttachmentList attachment = 8;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attachment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWSendSystemMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 destId = 1;
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destid());
    }

    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 bindGold = 5;
    if (has_bindgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindgold());
    }

    // optional int32 diamond = 6;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 bindDiamond = 7;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binddiamond());
    }

    // optional .ProtoBuf.MailAttachmentList attachment = 8;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWSendSystemMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWSendSystemMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWSendSystemMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWSendSystemMailReq::MergeFrom(const GWSendSystemMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destid()) {
      set_destid(from.destid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bindgold()) {
      set_bindgold(from.bindgold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_attachment()) {
      mutable_attachment()->::ProtoBuf::MailAttachmentList::MergeFrom(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWSendSystemMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWSendSystemMailReq::CopyFrom(const GWSendSystemMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWSendSystemMailReq::IsInitialized() const {

  if (has_attachment()) {
    if (!this->attachment().IsInitialized()) return false;
  }
  return true;
}

void GWSendSystemMailReq::Swap(GWSendSystemMailReq* other) {
  if (other != this) {
    std::swap(destid_, other->destid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(gold_, other->gold_);
    std::swap(bindgold_, other->bindgold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWSendSystemMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWSendSystemMailReq_descriptor_;
  metadata.reflection = GWSendSystemMailReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
