// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Package.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Package.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* PackageUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageLabelInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageLabelInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageUpdateExpandRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageUpdateExpandRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageSortReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageSortReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageSortRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageSortRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageSellReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageSellReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageSellRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageSellRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageUseRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageUseRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageUpdateRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageUpdateRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PakcagePickupDropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PakcagePickupDropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PakcagePickupDropRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PakcagePickupDropRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipInfoRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipDressRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipDressRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipUndressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipUndressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipUndressRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipUndressRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipUpdateRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipUpdateRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipOneKeyDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipOneKeyDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipOneKeyDressRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipOneKeyDressRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEquipDelNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEquipDelNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_StrenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_StrenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_StrenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_StrenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_OneKeyStrenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_OneKeyStrenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_OneKeyStrenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_OneKeyStrenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_RefineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_RefineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_RefineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_RefineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_DigHoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_DigHoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_DigHoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_DigHoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_InlayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_InlayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_InlayRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_InlayRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_TakeOffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_TakeOffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_TakeOffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_TakeOffRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_InlayHolyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_InlayHolyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_InlayHolyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_InlayHolyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_TakeoffHolyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_TakeoffHolyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_TakeoffHolyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_TakeoffHolyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_ComposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_ComposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_ComposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_ComposeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_RecastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_RecastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_RecastRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_RecastRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_ComposeMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_ComposeMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipForge_ComposeMaterialRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipForge_ComposeMaterialRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fPackage_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Package.proto");
  GOOGLE_CHECK(file != NULL);
  PackageUpdateInfo_descriptor_ = file->message_type(0);
  static const int PackageUpdateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateInfo, item_list_),
  };
  PackageUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageUpdateInfo_descriptor_,
      PackageUpdateInfo::default_instance_,
      PackageUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageUpdateInfo));
  PackageInfoReq_descriptor_ = file->message_type(1);
  static const int PackageInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfoReq, package_label_),
  };
  PackageInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageInfoReq_descriptor_,
      PackageInfoReq::default_instance_,
      PackageInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageInfoReq));
  PackageInfoRet_descriptor_ = file->message_type(2);
  static const int PackageInfoRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfoRet, package_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfoRet, item_list_),
  };
  PackageInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageInfoRet_descriptor_,
      PackageInfoRet::default_instance_,
      PackageInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageInfoRet));
  PackageLabelInfoRet_descriptor_ = file->message_type(3);
  static const int PackageLabelInfoRet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLabelInfoRet, init_equip_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLabelInfoRet, init_daily_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLabelInfoRet, init_material_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLabelInfoRet, init_task_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLabelInfoRet, expand_grid_),
  };
  PackageLabelInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageLabelInfoRet_descriptor_,
      PackageLabelInfoRet::default_instance_,
      PackageLabelInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLabelInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageLabelInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageLabelInfoRet));
  PackageUpdateExpandRet_descriptor_ = file->message_type(4);
  static const int PackageUpdateExpandRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateExpandRet, expand_grid_),
  };
  PackageUpdateExpandRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageUpdateExpandRet_descriptor_,
      PackageUpdateExpandRet::default_instance_,
      PackageUpdateExpandRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateExpandRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateExpandRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageUpdateExpandRet));
  PackageSortReq_descriptor_ = file->message_type(5);
  static const int PackageSortReq_offsets_[1] = {
  };
  PackageSortReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageSortReq_descriptor_,
      PackageSortReq::default_instance_,
      PackageSortReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSortReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSortReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageSortReq));
  PackageSortRet_descriptor_ = file->message_type(6);
  static const int PackageSortRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSortRet, retcode_),
  };
  PackageSortRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageSortRet_descriptor_,
      PackageSortRet::default_instance_,
      PackageSortRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSortRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSortRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageSortRet));
  PackageSellReq_descriptor_ = file->message_type(7);
  static const int PackageSellReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSellReq, sell_),
  };
  PackageSellReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageSellReq_descriptor_,
      PackageSellReq::default_instance_,
      PackageSellReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSellReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSellReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageSellReq));
  PackageSellRet_descriptor_ = file->message_type(8);
  static const int PackageSellRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSellRet, retcode_),
  };
  PackageSellRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageSellRet_descriptor_,
      PackageSellRet::default_instance_,
      PackageSellRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSellRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageSellRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageSellRet));
  PackageUseReq_descriptor_ = file->message_type(9);
  static const int PackageUseReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUseReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUseReq, num_),
  };
  PackageUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageUseReq_descriptor_,
      PackageUseReq::default_instance_,
      PackageUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageUseReq));
  PackageUseRet_descriptor_ = file->message_type(10);
  static const int PackageUseRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUseRet, retcode_),
  };
  PackageUseRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageUseRet_descriptor_,
      PackageUseRet::default_instance_,
      PackageUseRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUseRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUseRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageUseRet));
  PackageUpdateRet_descriptor_ = file->message_type(11);
  static const int PackageUpdateRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateRet, item_list_),
  };
  PackageUpdateRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageUpdateRet_descriptor_,
      PackageUpdateRet::default_instance_,
      PackageUpdateRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageUpdateRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageUpdateRet));
  PakcagePickupDropReq_descriptor_ = file->message_type(12);
  static const int PakcagePickupDropReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakcagePickupDropReq, droplst_),
  };
  PakcagePickupDropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PakcagePickupDropReq_descriptor_,
      PakcagePickupDropReq::default_instance_,
      PakcagePickupDropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakcagePickupDropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakcagePickupDropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PakcagePickupDropReq));
  PakcagePickupDropRet_descriptor_ = file->message_type(13);
  static const int PakcagePickupDropRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakcagePickupDropRet, retcode_),
  };
  PakcagePickupDropRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PakcagePickupDropRet_descriptor_,
      PakcagePickupDropRet::default_instance_,
      PakcagePickupDropRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakcagePickupDropRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakcagePickupDropRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PakcagePickupDropRet));
  PlayerEquipInfoReq_descriptor_ = file->message_type(14);
  static const int PlayerEquipInfoReq_offsets_[1] = {
  };
  PlayerEquipInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipInfoReq_descriptor_,
      PlayerEquipInfoReq::default_instance_,
      PlayerEquipInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipInfoReq));
  PlayerEquipInfoRet_descriptor_ = file->message_type(15);
  static const int PlayerEquipInfoRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipInfoRet, equip_info_),
  };
  PlayerEquipInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipInfoRet_descriptor_,
      PlayerEquipInfoRet::default_instance_,
      PlayerEquipInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipInfoRet));
  PlayerEquipDressReq_descriptor_ = file->message_type(16);
  static const int PlayerEquipDressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDressReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDressReq, pos_),
  };
  PlayerEquipDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipDressReq_descriptor_,
      PlayerEquipDressReq::default_instance_,
      PlayerEquipDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipDressReq));
  PlayerEquipDressRet_descriptor_ = file->message_type(17);
  static const int PlayerEquipDressRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDressRet, retcode_),
  };
  PlayerEquipDressRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipDressRet_descriptor_,
      PlayerEquipDressRet::default_instance_,
      PlayerEquipDressRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDressRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDressRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipDressRet));
  PlayerEquipUndressReq_descriptor_ = file->message_type(18);
  static const int PlayerEquipUndressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUndressReq, pos_),
  };
  PlayerEquipUndressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipUndressReq_descriptor_,
      PlayerEquipUndressReq::default_instance_,
      PlayerEquipUndressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUndressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUndressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipUndressReq));
  PlayerEquipUndressRet_descriptor_ = file->message_type(19);
  static const int PlayerEquipUndressRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUndressRet, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUndressRet, pos_),
  };
  PlayerEquipUndressRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipUndressRet_descriptor_,
      PlayerEquipUndressRet::default_instance_,
      PlayerEquipUndressRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUndressRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUndressRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipUndressRet));
  PlayerEquipUpdateRet_descriptor_ = file->message_type(20);
  static const int PlayerEquipUpdateRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUpdateRet, update_),
  };
  PlayerEquipUpdateRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipUpdateRet_descriptor_,
      PlayerEquipUpdateRet::default_instance_,
      PlayerEquipUpdateRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUpdateRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipUpdateRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipUpdateRet));
  PlayerEquipOneKeyDressReq_descriptor_ = file->message_type(21);
  static const int PlayerEquipOneKeyDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipOneKeyDressReq, dress_),
  };
  PlayerEquipOneKeyDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipOneKeyDressReq_descriptor_,
      PlayerEquipOneKeyDressReq::default_instance_,
      PlayerEquipOneKeyDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipOneKeyDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipOneKeyDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipOneKeyDressReq));
  PlayerEquipOneKeyDressRet_descriptor_ = file->message_type(22);
  static const int PlayerEquipOneKeyDressRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipOneKeyDressRet, retcode_),
  };
  PlayerEquipOneKeyDressRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipOneKeyDressRet_descriptor_,
      PlayerEquipOneKeyDressRet::default_instance_,
      PlayerEquipOneKeyDressRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipOneKeyDressRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipOneKeyDressRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipOneKeyDressRet));
  PlayerEquipDelNotify_descriptor_ = file->message_type(23);
  static const int PlayerEquipDelNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDelNotify, pos_),
  };
  PlayerEquipDelNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEquipDelNotify_descriptor_,
      PlayerEquipDelNotify::default_instance_,
      PlayerEquipDelNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDelNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEquipDelNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEquipDelNotify));
  EquipForge_StrenReq_descriptor_ = file->message_type(24);
  static const int EquipForge_StrenReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenReq, stren_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenReq, equip_pos_),
  };
  EquipForge_StrenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_StrenReq_descriptor_,
      EquipForge_StrenReq::default_instance_,
      EquipForge_StrenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_StrenReq));
  EquipForge_StrenRsp_descriptor_ = file->message_type(25);
  static const int EquipForge_StrenRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenRsp, retcode_),
  };
  EquipForge_StrenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_StrenRsp_descriptor_,
      EquipForge_StrenRsp::default_instance_,
      EquipForge_StrenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_StrenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_StrenRsp));
  EquipForge_OneKeyStrenReq_descriptor_ = file->message_type(26);
  static const int EquipForge_OneKeyStrenReq_offsets_[1] = {
  };
  EquipForge_OneKeyStrenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_OneKeyStrenReq_descriptor_,
      EquipForge_OneKeyStrenReq::default_instance_,
      EquipForge_OneKeyStrenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_OneKeyStrenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_OneKeyStrenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_OneKeyStrenReq));
  EquipForge_OneKeyStrenRsp_descriptor_ = file->message_type(27);
  static const int EquipForge_OneKeyStrenRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_OneKeyStrenRsp, retcode_),
  };
  EquipForge_OneKeyStrenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_OneKeyStrenRsp_descriptor_,
      EquipForge_OneKeyStrenRsp::default_instance_,
      EquipForge_OneKeyStrenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_OneKeyStrenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_OneKeyStrenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_OneKeyStrenRsp));
  EquipForge_RefineReq_descriptor_ = file->message_type(28);
  static const int EquipForge_RefineReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RefineReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RefineReq, equip_pos_),
  };
  EquipForge_RefineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_RefineReq_descriptor_,
      EquipForge_RefineReq::default_instance_,
      EquipForge_RefineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RefineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RefineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_RefineReq));
  EquipForge_RefineRsp_descriptor_ = file->message_type(29);
  static const int EquipForge_RefineRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RefineRsp, retcode_),
  };
  EquipForge_RefineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_RefineRsp_descriptor_,
      EquipForge_RefineRsp::default_instance_,
      EquipForge_RefineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RefineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RefineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_RefineRsp));
  EquipForge_DigHoleReq_descriptor_ = file->message_type(30);
  static const int EquipForge_DigHoleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleReq, hole_idx_),
  };
  EquipForge_DigHoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_DigHoleReq_descriptor_,
      EquipForge_DigHoleReq::default_instance_,
      EquipForge_DigHoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_DigHoleReq));
  EquipForge_DigHoleRsp_descriptor_ = file->message_type(31);
  static const int EquipForge_DigHoleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleRsp, retcode_),
  };
  EquipForge_DigHoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_DigHoleRsp_descriptor_,
      EquipForge_DigHoleRsp::default_instance_,
      EquipForge_DigHoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_DigHoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_DigHoleRsp));
  EquipForge_InlayReq_descriptor_ = file->message_type(32);
  static const int EquipForge_InlayReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayReq, stone_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayReq, hole_idx_),
  };
  EquipForge_InlayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_InlayReq_descriptor_,
      EquipForge_InlayReq::default_instance_,
      EquipForge_InlayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_InlayReq));
  EquipForge_InlayRsp_descriptor_ = file->message_type(33);
  static const int EquipForge_InlayRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayRsp, retcode_),
  };
  EquipForge_InlayRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_InlayRsp_descriptor_,
      EquipForge_InlayRsp::default_instance_,
      EquipForge_InlayRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_InlayRsp));
  EquipForge_TakeOffReq_descriptor_ = file->message_type(34);
  static const int EquipForge_TakeOffReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffReq, hole_idx_),
  };
  EquipForge_TakeOffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_TakeOffReq_descriptor_,
      EquipForge_TakeOffReq::default_instance_,
      EquipForge_TakeOffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_TakeOffReq));
  EquipForge_TakeOffRsp_descriptor_ = file->message_type(35);
  static const int EquipForge_TakeOffRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffRsp, retcode_),
  };
  EquipForge_TakeOffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_TakeOffRsp_descriptor_,
      EquipForge_TakeOffRsp::default_instance_,
      EquipForge_TakeOffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeOffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_TakeOffRsp));
  EquipForge_InlayHolyReq_descriptor_ = file->message_type(36);
  static const int EquipForge_InlayHolyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyReq, stone_idx_),
  };
  EquipForge_InlayHolyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_InlayHolyReq_descriptor_,
      EquipForge_InlayHolyReq::default_instance_,
      EquipForge_InlayHolyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_InlayHolyReq));
  EquipForge_InlayHolyRsp_descriptor_ = file->message_type(37);
  static const int EquipForge_InlayHolyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyRsp, retcode_),
  };
  EquipForge_InlayHolyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_InlayHolyRsp_descriptor_,
      EquipForge_InlayHolyRsp::default_instance_,
      EquipForge_InlayHolyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_InlayHolyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_InlayHolyRsp));
  EquipForge_TakeoffHolyReq_descriptor_ = file->message_type(38);
  static const int EquipForge_TakeoffHolyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeoffHolyReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeoffHolyReq, equip_pos_),
  };
  EquipForge_TakeoffHolyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_TakeoffHolyReq_descriptor_,
      EquipForge_TakeoffHolyReq::default_instance_,
      EquipForge_TakeoffHolyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeoffHolyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeoffHolyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_TakeoffHolyReq));
  EquipForge_TakeoffHolyRsp_descriptor_ = file->message_type(39);
  static const int EquipForge_TakeoffHolyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeoffHolyRsp, retcode_),
  };
  EquipForge_TakeoffHolyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_TakeoffHolyRsp_descriptor_,
      EquipForge_TakeoffHolyRsp::default_instance_,
      EquipForge_TakeoffHolyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeoffHolyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_TakeoffHolyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_TakeoffHolyRsp));
  EquipForge_ComposeReq_descriptor_ = file->message_type(40);
  static const int EquipForge_ComposeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeReq, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeReq, compose_id_),
  };
  EquipForge_ComposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_ComposeReq_descriptor_,
      EquipForge_ComposeReq::default_instance_,
      EquipForge_ComposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_ComposeReq));
  EquipForge_ComposeRsp_descriptor_ = file->message_type(41);
  static const int EquipForge_ComposeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeRsp, retcode_),
  };
  EquipForge_ComposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_ComposeRsp_descriptor_,
      EquipForge_ComposeRsp::default_instance_,
      EquipForge_ComposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_ComposeRsp));
  EquipForge_RecastReq_descriptor_ = file->message_type(42);
  static const int EquipForge_RecastReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RecastReq, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RecastReq, equip_pos_),
  };
  EquipForge_RecastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_RecastReq_descriptor_,
      EquipForge_RecastReq::default_instance_,
      EquipForge_RecastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RecastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RecastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_RecastReq));
  EquipForge_RecastRsp_descriptor_ = file->message_type(43);
  static const int EquipForge_RecastRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RecastRsp, retcode_),
  };
  EquipForge_RecastRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_RecastRsp_descriptor_,
      EquipForge_RecastRsp::default_instance_,
      EquipForge_RecastRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RecastRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_RecastRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_RecastRsp));
  EquipForge_ComposeMaterialReq_descriptor_ = file->message_type(44);
  static const int EquipForge_ComposeMaterialReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeMaterialReq, dst_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeMaterialReq, dst_num_),
  };
  EquipForge_ComposeMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_ComposeMaterialReq_descriptor_,
      EquipForge_ComposeMaterialReq::default_instance_,
      EquipForge_ComposeMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_ComposeMaterialReq));
  EquipForge_ComposeMaterialRsp_descriptor_ = file->message_type(45);
  static const int EquipForge_ComposeMaterialRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeMaterialRsp, retcode_),
  };
  EquipForge_ComposeMaterialRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipForge_ComposeMaterialRsp_descriptor_,
      EquipForge_ComposeMaterialRsp::default_instance_,
      EquipForge_ComposeMaterialRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeMaterialRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipForge_ComposeMaterialRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipForge_ComposeMaterialRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fPackage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageUpdateInfo_descriptor_, &PackageUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageInfoReq_descriptor_, &PackageInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageInfoRet_descriptor_, &PackageInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageLabelInfoRet_descriptor_, &PackageLabelInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageUpdateExpandRet_descriptor_, &PackageUpdateExpandRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageSortReq_descriptor_, &PackageSortReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageSortRet_descriptor_, &PackageSortRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageSellReq_descriptor_, &PackageSellReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageSellRet_descriptor_, &PackageSellRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageUseReq_descriptor_, &PackageUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageUseRet_descriptor_, &PackageUseRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageUpdateRet_descriptor_, &PackageUpdateRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PakcagePickupDropReq_descriptor_, &PakcagePickupDropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PakcagePickupDropRet_descriptor_, &PakcagePickupDropRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipInfoReq_descriptor_, &PlayerEquipInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipInfoRet_descriptor_, &PlayerEquipInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipDressReq_descriptor_, &PlayerEquipDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipDressRet_descriptor_, &PlayerEquipDressRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipUndressReq_descriptor_, &PlayerEquipUndressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipUndressRet_descriptor_, &PlayerEquipUndressRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipUpdateRet_descriptor_, &PlayerEquipUpdateRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipOneKeyDressReq_descriptor_, &PlayerEquipOneKeyDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipOneKeyDressRet_descriptor_, &PlayerEquipOneKeyDressRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEquipDelNotify_descriptor_, &PlayerEquipDelNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_StrenReq_descriptor_, &EquipForge_StrenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_StrenRsp_descriptor_, &EquipForge_StrenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_OneKeyStrenReq_descriptor_, &EquipForge_OneKeyStrenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_OneKeyStrenRsp_descriptor_, &EquipForge_OneKeyStrenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_RefineReq_descriptor_, &EquipForge_RefineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_RefineRsp_descriptor_, &EquipForge_RefineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_DigHoleReq_descriptor_, &EquipForge_DigHoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_DigHoleRsp_descriptor_, &EquipForge_DigHoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_InlayReq_descriptor_, &EquipForge_InlayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_InlayRsp_descriptor_, &EquipForge_InlayRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_TakeOffReq_descriptor_, &EquipForge_TakeOffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_TakeOffRsp_descriptor_, &EquipForge_TakeOffRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_InlayHolyReq_descriptor_, &EquipForge_InlayHolyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_InlayHolyRsp_descriptor_, &EquipForge_InlayHolyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_TakeoffHolyReq_descriptor_, &EquipForge_TakeoffHolyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_TakeoffHolyRsp_descriptor_, &EquipForge_TakeoffHolyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_ComposeReq_descriptor_, &EquipForge_ComposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_ComposeRsp_descriptor_, &EquipForge_ComposeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_RecastReq_descriptor_, &EquipForge_RecastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_RecastRsp_descriptor_, &EquipForge_RecastRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_ComposeMaterialReq_descriptor_, &EquipForge_ComposeMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipForge_ComposeMaterialRsp_descriptor_, &EquipForge_ComposeMaterialRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fPackage_2eproto() {
  delete PackageUpdateInfo::default_instance_;
  delete PackageUpdateInfo_reflection_;
  delete PackageInfoReq::default_instance_;
  delete PackageInfoReq_reflection_;
  delete PackageInfoRet::default_instance_;
  delete PackageInfoRet_reflection_;
  delete PackageLabelInfoRet::default_instance_;
  delete PackageLabelInfoRet_reflection_;
  delete PackageUpdateExpandRet::default_instance_;
  delete PackageUpdateExpandRet_reflection_;
  delete PackageSortReq::default_instance_;
  delete PackageSortReq_reflection_;
  delete PackageSortRet::default_instance_;
  delete PackageSortRet_reflection_;
  delete PackageSellReq::default_instance_;
  delete PackageSellReq_reflection_;
  delete PackageSellRet::default_instance_;
  delete PackageSellRet_reflection_;
  delete PackageUseReq::default_instance_;
  delete PackageUseReq_reflection_;
  delete PackageUseRet::default_instance_;
  delete PackageUseRet_reflection_;
  delete PackageUpdateRet::default_instance_;
  delete PackageUpdateRet_reflection_;
  delete PakcagePickupDropReq::default_instance_;
  delete PakcagePickupDropReq_reflection_;
  delete PakcagePickupDropRet::default_instance_;
  delete PakcagePickupDropRet_reflection_;
  delete PlayerEquipInfoReq::default_instance_;
  delete PlayerEquipInfoReq_reflection_;
  delete PlayerEquipInfoRet::default_instance_;
  delete PlayerEquipInfoRet_reflection_;
  delete PlayerEquipDressReq::default_instance_;
  delete PlayerEquipDressReq_reflection_;
  delete PlayerEquipDressRet::default_instance_;
  delete PlayerEquipDressRet_reflection_;
  delete PlayerEquipUndressReq::default_instance_;
  delete PlayerEquipUndressReq_reflection_;
  delete PlayerEquipUndressRet::default_instance_;
  delete PlayerEquipUndressRet_reflection_;
  delete PlayerEquipUpdateRet::default_instance_;
  delete PlayerEquipUpdateRet_reflection_;
  delete PlayerEquipOneKeyDressReq::default_instance_;
  delete PlayerEquipOneKeyDressReq_reflection_;
  delete PlayerEquipOneKeyDressRet::default_instance_;
  delete PlayerEquipOneKeyDressRet_reflection_;
  delete PlayerEquipDelNotify::default_instance_;
  delete PlayerEquipDelNotify_reflection_;
  delete EquipForge_StrenReq::default_instance_;
  delete EquipForge_StrenReq_reflection_;
  delete EquipForge_StrenRsp::default_instance_;
  delete EquipForge_StrenRsp_reflection_;
  delete EquipForge_OneKeyStrenReq::default_instance_;
  delete EquipForge_OneKeyStrenReq_reflection_;
  delete EquipForge_OneKeyStrenRsp::default_instance_;
  delete EquipForge_OneKeyStrenRsp_reflection_;
  delete EquipForge_RefineReq::default_instance_;
  delete EquipForge_RefineReq_reflection_;
  delete EquipForge_RefineRsp::default_instance_;
  delete EquipForge_RefineRsp_reflection_;
  delete EquipForge_DigHoleReq::default_instance_;
  delete EquipForge_DigHoleReq_reflection_;
  delete EquipForge_DigHoleRsp::default_instance_;
  delete EquipForge_DigHoleRsp_reflection_;
  delete EquipForge_InlayReq::default_instance_;
  delete EquipForge_InlayReq_reflection_;
  delete EquipForge_InlayRsp::default_instance_;
  delete EquipForge_InlayRsp_reflection_;
  delete EquipForge_TakeOffReq::default_instance_;
  delete EquipForge_TakeOffReq_reflection_;
  delete EquipForge_TakeOffRsp::default_instance_;
  delete EquipForge_TakeOffRsp_reflection_;
  delete EquipForge_InlayHolyReq::default_instance_;
  delete EquipForge_InlayHolyReq_reflection_;
  delete EquipForge_InlayHolyRsp::default_instance_;
  delete EquipForge_InlayHolyRsp_reflection_;
  delete EquipForge_TakeoffHolyReq::default_instance_;
  delete EquipForge_TakeoffHolyReq_reflection_;
  delete EquipForge_TakeoffHolyRsp::default_instance_;
  delete EquipForge_TakeoffHolyRsp_reflection_;
  delete EquipForge_ComposeReq::default_instance_;
  delete EquipForge_ComposeReq_reflection_;
  delete EquipForge_ComposeRsp::default_instance_;
  delete EquipForge_ComposeRsp_reflection_;
  delete EquipForge_RecastReq::default_instance_;
  delete EquipForge_RecastReq_reflection_;
  delete EquipForge_RecastRsp::default_instance_;
  delete EquipForge_RecastRsp_reflection_;
  delete EquipForge_ComposeMaterialReq::default_instance_;
  delete EquipForge_ComposeMaterialReq_reflection_;
  delete EquipForge_ComposeMaterialRsp::default_instance_;
  delete EquipForge_ComposeMaterialRsp_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ProtoBuffer/Package.proto\022\010ProtoBuf\032\035P"
    "rotoBuffer/ComProtocol.proto\032#ProtoBuffe"
    "r/ClientToServerCmd.proto\032\026Common/ComDef"
    "ine.proto\"\?\n\021PackageUpdateInfo\022*\n\titem_l"
    "ist\030\001 \003(\0132\027.ProtoBuf.ItemProtoInfo\"\'\n\016Pa"
    "ckageInfoReq\022\025\n\rpackage_label\030\001 \002(\005\"S\n\016P"
    "ackageInfoRet\022\025\n\rpackage_label\030\001 \002(\005\022*\n\t"
    "item_list\030\002 \003(\0132\027.ProtoBuf.ItemProtoInfo"
    "\"\220\001\n\023PackageLabelInfoRet\022\027\n\017init_equip_g"
    "rid\030\001 \002(\005\022\027\n\017init_daily_grid\030\002 \002(\005\022\032\n\022in"
    "it_material_grid\030\003 \002(\005\022\026\n\016init_task_grid"
    "\030\004 \002(\005\022\023\n\013expand_grid\030\005 \002(\005\"-\n\026PackageUp"
    "dateExpandRet\022\023\n\013expand_grid\030\001 \002(\005\"\020\n\016Pa"
    "ckageSortReq\"!\n\016PackageSortRet\022\017\n\007retcod"
    "e\030\001 \002(\005\"7\n\016PackageSellReq\022%\n\004sell\030\001 \003(\0132"
    "\027.ProtoBuf.ItemSellProto\"!\n\016PackageSellR"
    "et\022\017\n\007retcode\030\001 \002(\005\"+\n\rPackageUseReq\022\r\n\005"
    "index\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\" \n\rPackageUseRe"
    "t\022\017\n\007retcode\030\001 \002(\005\">\n\020PackageUpdateRet\022*"
    "\n\titem_list\030\001 \003(\0132\027.ProtoBuf.ItemProtoIn"
    "fo\"\'\n\024PakcagePickupDropReq\022\017\n\007dropLst\030\001 "
    "\003(\r\"\'\n\024PakcagePickupDropRet\022\017\n\007retcode\030\001"
    " \002(\005\"\024\n\022PlayerEquipInfoReq\"A\n\022PlayerEqui"
    "pInfoRet\022+\n\nequip_info\030\001 \003(\0132\027.ProtoBuf."
    "ItemProtoInfo\"1\n\023PlayerEquipDressReq\022\r\n\005"
    "index\030\001 \002(\005\022\013\n\003pos\030\002 \001(\005\"&\n\023PlayerEquipD"
    "ressRet\022\017\n\007retcode\030\001 \002(\005\"$\n\025PlayerEquipU"
    "ndressReq\022\013\n\003pos\030\001 \002(\005\"5\n\025PlayerEquipUnd"
    "ressRet\022\017\n\007retcode\030\001 \002(\005\022\013\n\003pos\030\002 \001(\005\"\?\n"
    "\024PlayerEquipUpdateRet\022\'\n\006update\030\001 \003(\0132\027."
    "ProtoBuf.ItemProtoInfo\"F\n\031PlayerEquipOne"
    "KeyDressReq\022)\n\005dress\030\001 \003(\0132\032.ProtoBuf.On"
    "eKeyDressProto\",\n\031PlayerEquipOneKeyDress"
    "Ret\022\017\n\007retcode\030\001 \002(\005\"#\n\024PlayerEquipDelNo"
    "tify\022\013\n\003pos\030\001 \003(\005\"P\n\023EquipForge_StrenReq"
    "\022\022\n\nequip_type\030\001 \002(\005\022\022\n\nstren_type\030\002 \002(\005"
    "\022\021\n\tequip_pos\030\003 \002(\005\"&\n\023EquipForge_StrenR"
    "sp\022\017\n\007retcode\030\001 \002(\005\"\033\n\031EquipForge_OneKey"
    "StrenReq\",\n\031EquipForge_OneKeyStrenRsp\022\017\n"
    "\007retcode\030\001 \002(\005\"=\n\024EquipForge_RefineReq\022\022"
    "\n\nequip_type\030\001 \002(\005\022\021\n\tequip_pos\030\002 \002(\005\"\'\n"
    "\024EquipForge_RefineRsp\022\017\n\007retcode\030\001 \002(\005\"P"
    "\n\025EquipForge_DigHoleReq\022\022\n\nequip_type\030\001 "
    "\002(\005\022\021\n\tequip_pos\030\002 \002(\005\022\020\n\010hole_idx\030\003 \002(\005"
    "\"(\n\025EquipForge_DigHoleRsp\022\017\n\007retcode\030\001 \002"
    "(\005\"a\n\023EquipForge_InlayReq\022\022\n\nequip_type\030"
    "\001 \002(\005\022\021\n\tequip_pos\030\002 \002(\005\022\021\n\tstone_idx\030\003 "
    "\002(\005\022\020\n\010hole_idx\030\004 \002(\005\"&\n\023EquipForge_Inla"
    "yRsp\022\017\n\007retcode\030\001 \002(\005\"P\n\025EquipForge_Take"
    "OffReq\022\022\n\nequip_type\030\001 \002(\005\022\021\n\tequip_pos\030"
    "\002 \002(\005\022\020\n\010hole_idx\030\003 \002(\005\"(\n\025EquipForge_Ta"
    "keOffRsp\022\017\n\007retcode\030\001 \002(\005\"S\n\027EquipForge_"
    "InlayHolyReq\022\022\n\nequip_type\030\001 \002(\005\022\021\n\tequi"
    "p_pos\030\002 \002(\005\022\021\n\tstone_idx\030\003 \002(\005\"*\n\027EquipF"
    "orge_InlayHolyRsp\022\017\n\007retcode\030\001 \002(\005\"B\n\031Eq"
    "uipForge_TakeoffHolyReq\022\022\n\nequip_type\030\001 "
    "\002(\005\022\021\n\tequip_pos\030\002 \002(\005\",\n\031EquipForge_Tak"
    "eoffHolyRsp\022\017\n\007retcode\030\001 \002(\005\"F\n\025EquipFor"
    "ge_ComposeReq\022\013\n\003idx\030\001 \002(\005\022\014\n\004type\030\002 \002(\005"
    "\022\022\n\ncompose_id\030\003 \002(\005\"(\n\025EquipForge_Compo"
    "seRsp\022\017\n\007retcode\030\001 \002(\005\"=\n\024EquipForge_Rec"
    "astReq\022\022\n\nequip_type\030\001 \002(\005\022\021\n\tequip_pos\030"
    "\002 \002(\005\"\'\n\024EquipForge_RecastRsp\022\017\n\007retcode"
    "\030\001 \002(\005\"E\n\035EquipForge_ComposeMaterialReq\022"
    "\023\n\013dst_item_id\030\001 \002(\005\022\017\n\007dst_num\030\002 \002(\005\"0\n"
    "\035EquipForge_ComposeMaterialRsp\022\017\n\007retcod"
    "e\030\001 \002(\005", 2647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Package.proto", &protobuf_RegisterTypes);
  PackageUpdateInfo::default_instance_ = new PackageUpdateInfo();
  PackageInfoReq::default_instance_ = new PackageInfoReq();
  PackageInfoRet::default_instance_ = new PackageInfoRet();
  PackageLabelInfoRet::default_instance_ = new PackageLabelInfoRet();
  PackageUpdateExpandRet::default_instance_ = new PackageUpdateExpandRet();
  PackageSortReq::default_instance_ = new PackageSortReq();
  PackageSortRet::default_instance_ = new PackageSortRet();
  PackageSellReq::default_instance_ = new PackageSellReq();
  PackageSellRet::default_instance_ = new PackageSellRet();
  PackageUseReq::default_instance_ = new PackageUseReq();
  PackageUseRet::default_instance_ = new PackageUseRet();
  PackageUpdateRet::default_instance_ = new PackageUpdateRet();
  PakcagePickupDropReq::default_instance_ = new PakcagePickupDropReq();
  PakcagePickupDropRet::default_instance_ = new PakcagePickupDropRet();
  PlayerEquipInfoReq::default_instance_ = new PlayerEquipInfoReq();
  PlayerEquipInfoRet::default_instance_ = new PlayerEquipInfoRet();
  PlayerEquipDressReq::default_instance_ = new PlayerEquipDressReq();
  PlayerEquipDressRet::default_instance_ = new PlayerEquipDressRet();
  PlayerEquipUndressReq::default_instance_ = new PlayerEquipUndressReq();
  PlayerEquipUndressRet::default_instance_ = new PlayerEquipUndressRet();
  PlayerEquipUpdateRet::default_instance_ = new PlayerEquipUpdateRet();
  PlayerEquipOneKeyDressReq::default_instance_ = new PlayerEquipOneKeyDressReq();
  PlayerEquipOneKeyDressRet::default_instance_ = new PlayerEquipOneKeyDressRet();
  PlayerEquipDelNotify::default_instance_ = new PlayerEquipDelNotify();
  EquipForge_StrenReq::default_instance_ = new EquipForge_StrenReq();
  EquipForge_StrenRsp::default_instance_ = new EquipForge_StrenRsp();
  EquipForge_OneKeyStrenReq::default_instance_ = new EquipForge_OneKeyStrenReq();
  EquipForge_OneKeyStrenRsp::default_instance_ = new EquipForge_OneKeyStrenRsp();
  EquipForge_RefineReq::default_instance_ = new EquipForge_RefineReq();
  EquipForge_RefineRsp::default_instance_ = new EquipForge_RefineRsp();
  EquipForge_DigHoleReq::default_instance_ = new EquipForge_DigHoleReq();
  EquipForge_DigHoleRsp::default_instance_ = new EquipForge_DigHoleRsp();
  EquipForge_InlayReq::default_instance_ = new EquipForge_InlayReq();
  EquipForge_InlayRsp::default_instance_ = new EquipForge_InlayRsp();
  EquipForge_TakeOffReq::default_instance_ = new EquipForge_TakeOffReq();
  EquipForge_TakeOffRsp::default_instance_ = new EquipForge_TakeOffRsp();
  EquipForge_InlayHolyReq::default_instance_ = new EquipForge_InlayHolyReq();
  EquipForge_InlayHolyRsp::default_instance_ = new EquipForge_InlayHolyRsp();
  EquipForge_TakeoffHolyReq::default_instance_ = new EquipForge_TakeoffHolyReq();
  EquipForge_TakeoffHolyRsp::default_instance_ = new EquipForge_TakeoffHolyRsp();
  EquipForge_ComposeReq::default_instance_ = new EquipForge_ComposeReq();
  EquipForge_ComposeRsp::default_instance_ = new EquipForge_ComposeRsp();
  EquipForge_RecastReq::default_instance_ = new EquipForge_RecastReq();
  EquipForge_RecastRsp::default_instance_ = new EquipForge_RecastRsp();
  EquipForge_ComposeMaterialReq::default_instance_ = new EquipForge_ComposeMaterialReq();
  EquipForge_ComposeMaterialRsp::default_instance_ = new EquipForge_ComposeMaterialRsp();
  PackageUpdateInfo::default_instance_->InitAsDefaultInstance();
  PackageInfoReq::default_instance_->InitAsDefaultInstance();
  PackageInfoRet::default_instance_->InitAsDefaultInstance();
  PackageLabelInfoRet::default_instance_->InitAsDefaultInstance();
  PackageUpdateExpandRet::default_instance_->InitAsDefaultInstance();
  PackageSortReq::default_instance_->InitAsDefaultInstance();
  PackageSortRet::default_instance_->InitAsDefaultInstance();
  PackageSellReq::default_instance_->InitAsDefaultInstance();
  PackageSellRet::default_instance_->InitAsDefaultInstance();
  PackageUseReq::default_instance_->InitAsDefaultInstance();
  PackageUseRet::default_instance_->InitAsDefaultInstance();
  PackageUpdateRet::default_instance_->InitAsDefaultInstance();
  PakcagePickupDropReq::default_instance_->InitAsDefaultInstance();
  PakcagePickupDropRet::default_instance_->InitAsDefaultInstance();
  PlayerEquipInfoReq::default_instance_->InitAsDefaultInstance();
  PlayerEquipInfoRet::default_instance_->InitAsDefaultInstance();
  PlayerEquipDressReq::default_instance_->InitAsDefaultInstance();
  PlayerEquipDressRet::default_instance_->InitAsDefaultInstance();
  PlayerEquipUndressReq::default_instance_->InitAsDefaultInstance();
  PlayerEquipUndressRet::default_instance_->InitAsDefaultInstance();
  PlayerEquipUpdateRet::default_instance_->InitAsDefaultInstance();
  PlayerEquipOneKeyDressReq::default_instance_->InitAsDefaultInstance();
  PlayerEquipOneKeyDressRet::default_instance_->InitAsDefaultInstance();
  PlayerEquipDelNotify::default_instance_->InitAsDefaultInstance();
  EquipForge_StrenReq::default_instance_->InitAsDefaultInstance();
  EquipForge_StrenRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_OneKeyStrenReq::default_instance_->InitAsDefaultInstance();
  EquipForge_OneKeyStrenRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_RefineReq::default_instance_->InitAsDefaultInstance();
  EquipForge_RefineRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_DigHoleReq::default_instance_->InitAsDefaultInstance();
  EquipForge_DigHoleRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_InlayReq::default_instance_->InitAsDefaultInstance();
  EquipForge_InlayRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_TakeOffReq::default_instance_->InitAsDefaultInstance();
  EquipForge_TakeOffRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_InlayHolyReq::default_instance_->InitAsDefaultInstance();
  EquipForge_InlayHolyRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_TakeoffHolyReq::default_instance_->InitAsDefaultInstance();
  EquipForge_TakeoffHolyRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_ComposeReq::default_instance_->InitAsDefaultInstance();
  EquipForge_ComposeRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_RecastReq::default_instance_->InitAsDefaultInstance();
  EquipForge_RecastRsp::default_instance_->InitAsDefaultInstance();
  EquipForge_ComposeMaterialReq::default_instance_->InitAsDefaultInstance();
  EquipForge_ComposeMaterialRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fPackage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fPackage_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fPackage_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fPackage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PackageUpdateInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

PackageUpdateInfo::PackageUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageUpdateInfo::InitAsDefaultInstance() {
}

PackageUpdateInfo::PackageUpdateInfo(const PackageUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageUpdateInfo::~PackageUpdateInfo() {
  SharedDtor();
}

void PackageUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageUpdateInfo_descriptor_;
}

const PackageUpdateInfo& PackageUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageUpdateInfo* PackageUpdateInfo::default_instance_ = NULL;

PackageUpdateInfo* PackageUpdateInfo::New() const {
  return new PackageUpdateInfo;
}

void PackageUpdateInfo::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageUpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageUpdateInfo::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageUpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageUpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageUpdateInfo::MergeFrom(const PackageUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageUpdateInfo::CopyFrom(const PackageUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageUpdateInfo::IsInitialized() const {

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void PackageUpdateInfo::Swap(PackageUpdateInfo* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageUpdateInfo_descriptor_;
  metadata.reflection = PackageUpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageInfoReq::kPackageLabelFieldNumber;
#endif  // !_MSC_VER

PackageInfoReq::PackageInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageInfoReq::InitAsDefaultInstance() {
}

PackageInfoReq::PackageInfoReq(const PackageInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageInfoReq::SharedCtor() {
  _cached_size_ = 0;
  package_label_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageInfoReq::~PackageInfoReq() {
  SharedDtor();
}

void PackageInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageInfoReq_descriptor_;
}

const PackageInfoReq& PackageInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageInfoReq* PackageInfoReq::default_instance_ = NULL;

PackageInfoReq* PackageInfoReq::New() const {
  return new PackageInfoReq;
}

void PackageInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_label_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_label_)));
          set_has_package_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 package_label = 1;
  if (has_package_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 package_label = 1;
  if (has_package_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_label = 1;
    if (has_package_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageInfoReq::MergeFrom(const PackageInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_label()) {
      set_package_label(from.package_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageInfoReq::CopyFrom(const PackageInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageInfoReq::Swap(PackageInfoReq* other) {
  if (other != this) {
    std::swap(package_label_, other->package_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageInfoReq_descriptor_;
  metadata.reflection = PackageInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageInfoRet::kPackageLabelFieldNumber;
const int PackageInfoRet::kItemListFieldNumber;
#endif  // !_MSC_VER

PackageInfoRet::PackageInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageInfoRet::InitAsDefaultInstance() {
}

PackageInfoRet::PackageInfoRet(const PackageInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageInfoRet::SharedCtor() {
  _cached_size_ = 0;
  package_label_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageInfoRet::~PackageInfoRet() {
  SharedDtor();
}

void PackageInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageInfoRet_descriptor_;
}

const PackageInfoRet& PackageInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageInfoRet* PackageInfoRet::default_instance_ = NULL;

PackageInfoRet* PackageInfoRet::New() const {
  return new PackageInfoRet;
}

void PackageInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_label_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_label_)));
          set_has_package_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 package_label = 1;
  if (has_package_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_label(), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 package_label = 1;
  if (has_package_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_label(), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_label = 1;
    if (has_package_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_label());
    }

  }
  // repeated .ProtoBuf.ItemProtoInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageInfoRet::MergeFrom(const PackageInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_label()) {
      set_package_label(from.package_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageInfoRet::CopyFrom(const PackageInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void PackageInfoRet::Swap(PackageInfoRet* other) {
  if (other != this) {
    std::swap(package_label_, other->package_label_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageInfoRet_descriptor_;
  metadata.reflection = PackageInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageLabelInfoRet::kInitEquipGridFieldNumber;
const int PackageLabelInfoRet::kInitDailyGridFieldNumber;
const int PackageLabelInfoRet::kInitMaterialGridFieldNumber;
const int PackageLabelInfoRet::kInitTaskGridFieldNumber;
const int PackageLabelInfoRet::kExpandGridFieldNumber;
#endif  // !_MSC_VER

PackageLabelInfoRet::PackageLabelInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageLabelInfoRet::InitAsDefaultInstance() {
}

PackageLabelInfoRet::PackageLabelInfoRet(const PackageLabelInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageLabelInfoRet::SharedCtor() {
  _cached_size_ = 0;
  init_equip_grid_ = 0;
  init_daily_grid_ = 0;
  init_material_grid_ = 0;
  init_task_grid_ = 0;
  expand_grid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageLabelInfoRet::~PackageLabelInfoRet() {
  SharedDtor();
}

void PackageLabelInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageLabelInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageLabelInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageLabelInfoRet_descriptor_;
}

const PackageLabelInfoRet& PackageLabelInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageLabelInfoRet* PackageLabelInfoRet::default_instance_ = NULL;

PackageLabelInfoRet* PackageLabelInfoRet::New() const {
  return new PackageLabelInfoRet;
}

void PackageLabelInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    init_equip_grid_ = 0;
    init_daily_grid_ = 0;
    init_material_grid_ = 0;
    init_task_grid_ = 0;
    expand_grid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageLabelInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 init_equip_grid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_equip_grid_)));
          set_has_init_equip_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_init_daily_grid;
        break;
      }

      // required int32 init_daily_grid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_daily_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_daily_grid_)));
          set_has_init_daily_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_init_material_grid;
        break;
      }

      // required int32 init_material_grid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_material_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_material_grid_)));
          set_has_init_material_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_init_task_grid;
        break;
      }

      // required int32 init_task_grid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_task_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_task_grid_)));
          set_has_init_task_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expand_grid;
        break;
      }

      // required int32 expand_grid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expand_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_grid_)));
          set_has_expand_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageLabelInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 init_equip_grid = 1;
  if (has_init_equip_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->init_equip_grid(), output);
  }

  // required int32 init_daily_grid = 2;
  if (has_init_daily_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->init_daily_grid(), output);
  }

  // required int32 init_material_grid = 3;
  if (has_init_material_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->init_material_grid(), output);
  }

  // required int32 init_task_grid = 4;
  if (has_init_task_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->init_task_grid(), output);
  }

  // required int32 expand_grid = 5;
  if (has_expand_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expand_grid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageLabelInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 init_equip_grid = 1;
  if (has_init_equip_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->init_equip_grid(), target);
  }

  // required int32 init_daily_grid = 2;
  if (has_init_daily_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->init_daily_grid(), target);
  }

  // required int32 init_material_grid = 3;
  if (has_init_material_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->init_material_grid(), target);
  }

  // required int32 init_task_grid = 4;
  if (has_init_task_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->init_task_grid(), target);
  }

  // required int32 expand_grid = 5;
  if (has_expand_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expand_grid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageLabelInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 init_equip_grid = 1;
    if (has_init_equip_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_equip_grid());
    }

    // required int32 init_daily_grid = 2;
    if (has_init_daily_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_daily_grid());
    }

    // required int32 init_material_grid = 3;
    if (has_init_material_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_material_grid());
    }

    // required int32 init_task_grid = 4;
    if (has_init_task_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_task_grid());
    }

    // required int32 expand_grid = 5;
    if (has_expand_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_grid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageLabelInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageLabelInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageLabelInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageLabelInfoRet::MergeFrom(const PackageLabelInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_equip_grid()) {
      set_init_equip_grid(from.init_equip_grid());
    }
    if (from.has_init_daily_grid()) {
      set_init_daily_grid(from.init_daily_grid());
    }
    if (from.has_init_material_grid()) {
      set_init_material_grid(from.init_material_grid());
    }
    if (from.has_init_task_grid()) {
      set_init_task_grid(from.init_task_grid());
    }
    if (from.has_expand_grid()) {
      set_expand_grid(from.expand_grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageLabelInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageLabelInfoRet::CopyFrom(const PackageLabelInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageLabelInfoRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PackageLabelInfoRet::Swap(PackageLabelInfoRet* other) {
  if (other != this) {
    std::swap(init_equip_grid_, other->init_equip_grid_);
    std::swap(init_daily_grid_, other->init_daily_grid_);
    std::swap(init_material_grid_, other->init_material_grid_);
    std::swap(init_task_grid_, other->init_task_grid_);
    std::swap(expand_grid_, other->expand_grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageLabelInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageLabelInfoRet_descriptor_;
  metadata.reflection = PackageLabelInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageUpdateExpandRet::kExpandGridFieldNumber;
#endif  // !_MSC_VER

PackageUpdateExpandRet::PackageUpdateExpandRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageUpdateExpandRet::InitAsDefaultInstance() {
}

PackageUpdateExpandRet::PackageUpdateExpandRet(const PackageUpdateExpandRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageUpdateExpandRet::SharedCtor() {
  _cached_size_ = 0;
  expand_grid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageUpdateExpandRet::~PackageUpdateExpandRet() {
  SharedDtor();
}

void PackageUpdateExpandRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageUpdateExpandRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageUpdateExpandRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageUpdateExpandRet_descriptor_;
}

const PackageUpdateExpandRet& PackageUpdateExpandRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageUpdateExpandRet* PackageUpdateExpandRet::default_instance_ = NULL;

PackageUpdateExpandRet* PackageUpdateExpandRet::New() const {
  return new PackageUpdateExpandRet;
}

void PackageUpdateExpandRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expand_grid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageUpdateExpandRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 expand_grid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_grid_)));
          set_has_expand_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageUpdateExpandRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 expand_grid = 1;
  if (has_expand_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->expand_grid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageUpdateExpandRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 expand_grid = 1;
  if (has_expand_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->expand_grid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageUpdateExpandRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 expand_grid = 1;
    if (has_expand_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_grid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageUpdateExpandRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageUpdateExpandRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageUpdateExpandRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageUpdateExpandRet::MergeFrom(const PackageUpdateExpandRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expand_grid()) {
      set_expand_grid(from.expand_grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageUpdateExpandRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageUpdateExpandRet::CopyFrom(const PackageUpdateExpandRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageUpdateExpandRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageUpdateExpandRet::Swap(PackageUpdateExpandRet* other) {
  if (other != this) {
    std::swap(expand_grid_, other->expand_grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageUpdateExpandRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageUpdateExpandRet_descriptor_;
  metadata.reflection = PackageUpdateExpandRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PackageSortReq::PackageSortReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageSortReq::InitAsDefaultInstance() {
}

PackageSortReq::PackageSortReq(const PackageSortReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageSortReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageSortReq::~PackageSortReq() {
  SharedDtor();
}

void PackageSortReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageSortReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageSortReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageSortReq_descriptor_;
}

const PackageSortReq& PackageSortReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageSortReq* PackageSortReq::default_instance_ = NULL;

PackageSortReq* PackageSortReq::New() const {
  return new PackageSortReq;
}

void PackageSortReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageSortReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PackageSortReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageSortReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageSortReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageSortReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageSortReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageSortReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageSortReq::MergeFrom(const PackageSortReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageSortReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageSortReq::CopyFrom(const PackageSortReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageSortReq::IsInitialized() const {

  return true;
}

void PackageSortReq::Swap(PackageSortReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageSortReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageSortReq_descriptor_;
  metadata.reflection = PackageSortReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageSortRet::kRetcodeFieldNumber;
#endif  // !_MSC_VER

PackageSortRet::PackageSortRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageSortRet::InitAsDefaultInstance() {
}

PackageSortRet::PackageSortRet(const PackageSortRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageSortRet::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageSortRet::~PackageSortRet() {
  SharedDtor();
}

void PackageSortRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageSortRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageSortRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageSortRet_descriptor_;
}

const PackageSortRet& PackageSortRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageSortRet* PackageSortRet::default_instance_ = NULL;

PackageSortRet* PackageSortRet::New() const {
  return new PackageSortRet;
}

void PackageSortRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageSortRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageSortRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageSortRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageSortRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageSortRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageSortRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageSortRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageSortRet::MergeFrom(const PackageSortRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageSortRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageSortRet::CopyFrom(const PackageSortRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageSortRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageSortRet::Swap(PackageSortRet* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageSortRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageSortRet_descriptor_;
  metadata.reflection = PackageSortRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageSellReq::kSellFieldNumber;
#endif  // !_MSC_VER

PackageSellReq::PackageSellReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageSellReq::InitAsDefaultInstance() {
}

PackageSellReq::PackageSellReq(const PackageSellReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageSellReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageSellReq::~PackageSellReq() {
  SharedDtor();
}

void PackageSellReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageSellReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageSellReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageSellReq_descriptor_;
}

const PackageSellReq& PackageSellReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageSellReq* PackageSellReq::default_instance_ = NULL;

PackageSellReq* PackageSellReq::New() const {
  return new PackageSellReq;
}

void PackageSellReq::Clear() {
  sell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageSellReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemSellProto sell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageSellReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemSellProto sell = 1;
  for (int i = 0; i < this->sell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageSellReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemSellProto sell = 1;
  for (int i = 0; i < this->sell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageSellReq::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemSellProto sell = 1;
  total_size += 1 * this->sell_size();
  for (int i = 0; i < this->sell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageSellReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageSellReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageSellReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageSellReq::MergeFrom(const PackageSellReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  sell_.MergeFrom(from.sell_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageSellReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageSellReq::CopyFrom(const PackageSellReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageSellReq::IsInitialized() const {

  for (int i = 0; i < sell_size(); i++) {
    if (!this->sell(i).IsInitialized()) return false;
  }
  return true;
}

void PackageSellReq::Swap(PackageSellReq* other) {
  if (other != this) {
    sell_.Swap(&other->sell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageSellReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageSellReq_descriptor_;
  metadata.reflection = PackageSellReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageSellRet::kRetcodeFieldNumber;
#endif  // !_MSC_VER

PackageSellRet::PackageSellRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageSellRet::InitAsDefaultInstance() {
}

PackageSellRet::PackageSellRet(const PackageSellRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageSellRet::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageSellRet::~PackageSellRet() {
  SharedDtor();
}

void PackageSellRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageSellRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageSellRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageSellRet_descriptor_;
}

const PackageSellRet& PackageSellRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageSellRet* PackageSellRet::default_instance_ = NULL;

PackageSellRet* PackageSellRet::New() const {
  return new PackageSellRet;
}

void PackageSellRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageSellRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageSellRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageSellRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageSellRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageSellRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageSellRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageSellRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageSellRet::MergeFrom(const PackageSellRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageSellRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageSellRet::CopyFrom(const PackageSellRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageSellRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageSellRet::Swap(PackageSellRet* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageSellRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageSellRet_descriptor_;
  metadata.reflection = PackageSellRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageUseReq::kIndexFieldNumber;
const int PackageUseReq::kNumFieldNumber;
#endif  // !_MSC_VER

PackageUseReq::PackageUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageUseReq::InitAsDefaultInstance() {
}

PackageUseReq::PackageUseReq(const PackageUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageUseReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageUseReq::~PackageUseReq() {
  SharedDtor();
}

void PackageUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageUseReq_descriptor_;
}

const PackageUseReq& PackageUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageUseReq* PackageUseReq::default_instance_ = NULL;

PackageUseReq* PackageUseReq::New() const {
  return new PackageUseReq;
}

void PackageUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageUseReq::MergeFrom(const PackageUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageUseReq::CopyFrom(const PackageUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageUseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageUseReq::Swap(PackageUseReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageUseReq_descriptor_;
  metadata.reflection = PackageUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageUseRet::kRetcodeFieldNumber;
#endif  // !_MSC_VER

PackageUseRet::PackageUseRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageUseRet::InitAsDefaultInstance() {
}

PackageUseRet::PackageUseRet(const PackageUseRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageUseRet::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageUseRet::~PackageUseRet() {
  SharedDtor();
}

void PackageUseRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageUseRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageUseRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageUseRet_descriptor_;
}

const PackageUseRet& PackageUseRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageUseRet* PackageUseRet::default_instance_ = NULL;

PackageUseRet* PackageUseRet::New() const {
  return new PackageUseRet;
}

void PackageUseRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageUseRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageUseRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageUseRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageUseRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageUseRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageUseRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageUseRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageUseRet::MergeFrom(const PackageUseRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageUseRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageUseRet::CopyFrom(const PackageUseRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageUseRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageUseRet::Swap(PackageUseRet* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageUseRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageUseRet_descriptor_;
  metadata.reflection = PackageUseRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageUpdateRet::kItemListFieldNumber;
#endif  // !_MSC_VER

PackageUpdateRet::PackageUpdateRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageUpdateRet::InitAsDefaultInstance() {
}

PackageUpdateRet::PackageUpdateRet(const PackageUpdateRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageUpdateRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageUpdateRet::~PackageUpdateRet() {
  SharedDtor();
}

void PackageUpdateRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageUpdateRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageUpdateRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageUpdateRet_descriptor_;
}

const PackageUpdateRet& PackageUpdateRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PackageUpdateRet* PackageUpdateRet::default_instance_ = NULL;

PackageUpdateRet* PackageUpdateRet::New() const {
  return new PackageUpdateRet;
}

void PackageUpdateRet::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageUpdateRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageUpdateRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageUpdateRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageUpdateRet::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemProtoInfo item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageUpdateRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageUpdateRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageUpdateRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageUpdateRet::MergeFrom(const PackageUpdateRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageUpdateRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageUpdateRet::CopyFrom(const PackageUpdateRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageUpdateRet::IsInitialized() const {

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void PackageUpdateRet::Swap(PackageUpdateRet* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageUpdateRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageUpdateRet_descriptor_;
  metadata.reflection = PackageUpdateRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PakcagePickupDropReq::kDropLstFieldNumber;
#endif  // !_MSC_VER

PakcagePickupDropReq::PakcagePickupDropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PakcagePickupDropReq::InitAsDefaultInstance() {
}

PakcagePickupDropReq::PakcagePickupDropReq(const PakcagePickupDropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PakcagePickupDropReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PakcagePickupDropReq::~PakcagePickupDropReq() {
  SharedDtor();
}

void PakcagePickupDropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PakcagePickupDropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PakcagePickupDropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PakcagePickupDropReq_descriptor_;
}

const PakcagePickupDropReq& PakcagePickupDropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PakcagePickupDropReq* PakcagePickupDropReq::default_instance_ = NULL;

PakcagePickupDropReq* PakcagePickupDropReq::New() const {
  return new PakcagePickupDropReq;
}

void PakcagePickupDropReq::Clear() {
  droplst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PakcagePickupDropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dropLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_droplst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_droplst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dropLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PakcagePickupDropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 dropLst = 1;
  for (int i = 0; i < this->droplst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->droplst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PakcagePickupDropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 dropLst = 1;
  for (int i = 0; i < this->droplst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->droplst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PakcagePickupDropReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 dropLst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->droplst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->droplst(i));
    }
    total_size += 1 * this->droplst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PakcagePickupDropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PakcagePickupDropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PakcagePickupDropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PakcagePickupDropReq::MergeFrom(const PakcagePickupDropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  droplst_.MergeFrom(from.droplst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PakcagePickupDropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PakcagePickupDropReq::CopyFrom(const PakcagePickupDropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakcagePickupDropReq::IsInitialized() const {

  return true;
}

void PakcagePickupDropReq::Swap(PakcagePickupDropReq* other) {
  if (other != this) {
    droplst_.Swap(&other->droplst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PakcagePickupDropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PakcagePickupDropReq_descriptor_;
  metadata.reflection = PakcagePickupDropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PakcagePickupDropRet::kRetcodeFieldNumber;
#endif  // !_MSC_VER

PakcagePickupDropRet::PakcagePickupDropRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PakcagePickupDropRet::InitAsDefaultInstance() {
}

PakcagePickupDropRet::PakcagePickupDropRet(const PakcagePickupDropRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PakcagePickupDropRet::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PakcagePickupDropRet::~PakcagePickupDropRet() {
  SharedDtor();
}

void PakcagePickupDropRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PakcagePickupDropRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PakcagePickupDropRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PakcagePickupDropRet_descriptor_;
}

const PakcagePickupDropRet& PakcagePickupDropRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PakcagePickupDropRet* PakcagePickupDropRet::default_instance_ = NULL;

PakcagePickupDropRet* PakcagePickupDropRet::New() const {
  return new PakcagePickupDropRet;
}

void PakcagePickupDropRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PakcagePickupDropRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PakcagePickupDropRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PakcagePickupDropRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PakcagePickupDropRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PakcagePickupDropRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PakcagePickupDropRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PakcagePickupDropRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PakcagePickupDropRet::MergeFrom(const PakcagePickupDropRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PakcagePickupDropRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PakcagePickupDropRet::CopyFrom(const PakcagePickupDropRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakcagePickupDropRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PakcagePickupDropRet::Swap(PakcagePickupDropRet* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PakcagePickupDropRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PakcagePickupDropRet_descriptor_;
  metadata.reflection = PakcagePickupDropRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerEquipInfoReq::PlayerEquipInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipInfoReq::InitAsDefaultInstance() {
}

PlayerEquipInfoReq::PlayerEquipInfoReq(const PlayerEquipInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipInfoReq::~PlayerEquipInfoReq() {
  SharedDtor();
}

void PlayerEquipInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipInfoReq_descriptor_;
}

const PlayerEquipInfoReq& PlayerEquipInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipInfoReq* PlayerEquipInfoReq::default_instance_ = NULL;

PlayerEquipInfoReq* PlayerEquipInfoReq::New() const {
  return new PlayerEquipInfoReq;
}

void PlayerEquipInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerEquipInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipInfoReq::MergeFrom(const PlayerEquipInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipInfoReq::CopyFrom(const PlayerEquipInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipInfoReq::IsInitialized() const {

  return true;
}

void PlayerEquipInfoReq::Swap(PlayerEquipInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipInfoReq_descriptor_;
  metadata.reflection = PlayerEquipInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipInfoRet::kEquipInfoFieldNumber;
#endif  // !_MSC_VER

PlayerEquipInfoRet::PlayerEquipInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipInfoRet::InitAsDefaultInstance() {
}

PlayerEquipInfoRet::PlayerEquipInfoRet(const PlayerEquipInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipInfoRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipInfoRet::~PlayerEquipInfoRet() {
  SharedDtor();
}

void PlayerEquipInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipInfoRet_descriptor_;
}

const PlayerEquipInfoRet& PlayerEquipInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipInfoRet* PlayerEquipInfoRet::default_instance_ = NULL;

PlayerEquipInfoRet* PlayerEquipInfoRet::New() const {
  return new PlayerEquipInfoRet;
}

void PlayerEquipInfoRet::Clear() {
  equip_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemProtoInfo equip_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemProtoInfo equip_info = 1;
  for (int i = 0; i < this->equip_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemProtoInfo equip_info = 1;
  for (int i = 0; i < this->equip_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipInfoRet::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemProtoInfo equip_info = 1;
  total_size += 1 * this->equip_info_size();
  for (int i = 0; i < this->equip_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipInfoRet::MergeFrom(const PlayerEquipInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_info_.MergeFrom(from.equip_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipInfoRet::CopyFrom(const PlayerEquipInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipInfoRet::IsInitialized() const {

  for (int i = 0; i < equip_info_size(); i++) {
    if (!this->equip_info(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerEquipInfoRet::Swap(PlayerEquipInfoRet* other) {
  if (other != this) {
    equip_info_.Swap(&other->equip_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipInfoRet_descriptor_;
  metadata.reflection = PlayerEquipInfoRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipDressReq::kIndexFieldNumber;
const int PlayerEquipDressReq::kPosFieldNumber;
#endif  // !_MSC_VER

PlayerEquipDressReq::PlayerEquipDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipDressReq::InitAsDefaultInstance() {
}

PlayerEquipDressReq::PlayerEquipDressReq(const PlayerEquipDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipDressReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipDressReq::~PlayerEquipDressReq() {
  SharedDtor();
}

void PlayerEquipDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipDressReq_descriptor_;
}

const PlayerEquipDressReq& PlayerEquipDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipDressReq* PlayerEquipDressReq::default_instance_ = NULL;

PlayerEquipDressReq* PlayerEquipDressReq::New() const {
  return new PlayerEquipDressReq;
}

void PlayerEquipDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipDressReq::MergeFrom(const PlayerEquipDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipDressReq::CopyFrom(const PlayerEquipDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipDressReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerEquipDressReq::Swap(PlayerEquipDressReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipDressReq_descriptor_;
  metadata.reflection = PlayerEquipDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipDressRet::kRetcodeFieldNumber;
#endif  // !_MSC_VER

PlayerEquipDressRet::PlayerEquipDressRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipDressRet::InitAsDefaultInstance() {
}

PlayerEquipDressRet::PlayerEquipDressRet(const PlayerEquipDressRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipDressRet::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipDressRet::~PlayerEquipDressRet() {
  SharedDtor();
}

void PlayerEquipDressRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipDressRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipDressRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipDressRet_descriptor_;
}

const PlayerEquipDressRet& PlayerEquipDressRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipDressRet* PlayerEquipDressRet::default_instance_ = NULL;

PlayerEquipDressRet* PlayerEquipDressRet::New() const {
  return new PlayerEquipDressRet;
}

void PlayerEquipDressRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipDressRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipDressRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipDressRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipDressRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipDressRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipDressRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipDressRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipDressRet::MergeFrom(const PlayerEquipDressRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipDressRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipDressRet::CopyFrom(const PlayerEquipDressRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipDressRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerEquipDressRet::Swap(PlayerEquipDressRet* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipDressRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipDressRet_descriptor_;
  metadata.reflection = PlayerEquipDressRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipUndressReq::kPosFieldNumber;
#endif  // !_MSC_VER

PlayerEquipUndressReq::PlayerEquipUndressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipUndressReq::InitAsDefaultInstance() {
}

PlayerEquipUndressReq::PlayerEquipUndressReq(const PlayerEquipUndressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipUndressReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipUndressReq::~PlayerEquipUndressReq() {
  SharedDtor();
}

void PlayerEquipUndressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipUndressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipUndressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipUndressReq_descriptor_;
}

const PlayerEquipUndressReq& PlayerEquipUndressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipUndressReq* PlayerEquipUndressReq::default_instance_ = NULL;

PlayerEquipUndressReq* PlayerEquipUndressReq::New() const {
  return new PlayerEquipUndressReq;
}

void PlayerEquipUndressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipUndressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipUndressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipUndressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipUndressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipUndressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipUndressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipUndressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipUndressReq::MergeFrom(const PlayerEquipUndressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipUndressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipUndressReq::CopyFrom(const PlayerEquipUndressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipUndressReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerEquipUndressReq::Swap(PlayerEquipUndressReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipUndressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipUndressReq_descriptor_;
  metadata.reflection = PlayerEquipUndressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipUndressRet::kRetcodeFieldNumber;
const int PlayerEquipUndressRet::kPosFieldNumber;
#endif  // !_MSC_VER

PlayerEquipUndressRet::PlayerEquipUndressRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipUndressRet::InitAsDefaultInstance() {
}

PlayerEquipUndressRet::PlayerEquipUndressRet(const PlayerEquipUndressRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipUndressRet::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipUndressRet::~PlayerEquipUndressRet() {
  SharedDtor();
}

void PlayerEquipUndressRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipUndressRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipUndressRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipUndressRet_descriptor_;
}

const PlayerEquipUndressRet& PlayerEquipUndressRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipUndressRet* PlayerEquipUndressRet::default_instance_ = NULL;

PlayerEquipUndressRet* PlayerEquipUndressRet::New() const {
  return new PlayerEquipUndressRet;
}

void PlayerEquipUndressRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipUndressRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipUndressRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipUndressRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipUndressRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipUndressRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipUndressRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipUndressRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipUndressRet::MergeFrom(const PlayerEquipUndressRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipUndressRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipUndressRet::CopyFrom(const PlayerEquipUndressRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipUndressRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerEquipUndressRet::Swap(PlayerEquipUndressRet* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipUndressRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipUndressRet_descriptor_;
  metadata.reflection = PlayerEquipUndressRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipUpdateRet::kUpdateFieldNumber;
#endif  // !_MSC_VER

PlayerEquipUpdateRet::PlayerEquipUpdateRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipUpdateRet::InitAsDefaultInstance() {
}

PlayerEquipUpdateRet::PlayerEquipUpdateRet(const PlayerEquipUpdateRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipUpdateRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipUpdateRet::~PlayerEquipUpdateRet() {
  SharedDtor();
}

void PlayerEquipUpdateRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipUpdateRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipUpdateRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipUpdateRet_descriptor_;
}

const PlayerEquipUpdateRet& PlayerEquipUpdateRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipUpdateRet* PlayerEquipUpdateRet::default_instance_ = NULL;

PlayerEquipUpdateRet* PlayerEquipUpdateRet::New() const {
  return new PlayerEquipUpdateRet;
}

void PlayerEquipUpdateRet::Clear() {
  update_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipUpdateRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ItemProtoInfo update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_update;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipUpdateRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ItemProtoInfo update = 1;
  for (int i = 0; i < this->update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipUpdateRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ItemProtoInfo update = 1;
  for (int i = 0; i < this->update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->update(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipUpdateRet::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ItemProtoInfo update = 1;
  total_size += 1 * this->update_size();
  for (int i = 0; i < this->update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipUpdateRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipUpdateRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipUpdateRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipUpdateRet::MergeFrom(const PlayerEquipUpdateRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_.MergeFrom(from.update_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipUpdateRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipUpdateRet::CopyFrom(const PlayerEquipUpdateRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipUpdateRet::IsInitialized() const {

  for (int i = 0; i < update_size(); i++) {
    if (!this->update(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerEquipUpdateRet::Swap(PlayerEquipUpdateRet* other) {
  if (other != this) {
    update_.Swap(&other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipUpdateRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipUpdateRet_descriptor_;
  metadata.reflection = PlayerEquipUpdateRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipOneKeyDressReq::kDressFieldNumber;
#endif  // !_MSC_VER

PlayerEquipOneKeyDressReq::PlayerEquipOneKeyDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipOneKeyDressReq::InitAsDefaultInstance() {
}

PlayerEquipOneKeyDressReq::PlayerEquipOneKeyDressReq(const PlayerEquipOneKeyDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipOneKeyDressReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipOneKeyDressReq::~PlayerEquipOneKeyDressReq() {
  SharedDtor();
}

void PlayerEquipOneKeyDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipOneKeyDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipOneKeyDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipOneKeyDressReq_descriptor_;
}

const PlayerEquipOneKeyDressReq& PlayerEquipOneKeyDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipOneKeyDressReq* PlayerEquipOneKeyDressReq::default_instance_ = NULL;

PlayerEquipOneKeyDressReq* PlayerEquipOneKeyDressReq::New() const {
  return new PlayerEquipOneKeyDressReq;
}

void PlayerEquipOneKeyDressReq::Clear() {
  dress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipOneKeyDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.OneKeyDressProto dress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dress;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipOneKeyDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.OneKeyDressProto dress = 1;
  for (int i = 0; i < this->dress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipOneKeyDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.OneKeyDressProto dress = 1;
  for (int i = 0; i < this->dress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipOneKeyDressReq::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.OneKeyDressProto dress = 1;
  total_size += 1 * this->dress_size();
  for (int i = 0; i < this->dress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipOneKeyDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipOneKeyDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipOneKeyDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipOneKeyDressReq::MergeFrom(const PlayerEquipOneKeyDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  dress_.MergeFrom(from.dress_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipOneKeyDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipOneKeyDressReq::CopyFrom(const PlayerEquipOneKeyDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipOneKeyDressReq::IsInitialized() const {

  for (int i = 0; i < dress_size(); i++) {
    if (!this->dress(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerEquipOneKeyDressReq::Swap(PlayerEquipOneKeyDressReq* other) {
  if (other != this) {
    dress_.Swap(&other->dress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipOneKeyDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipOneKeyDressReq_descriptor_;
  metadata.reflection = PlayerEquipOneKeyDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipOneKeyDressRet::kRetcodeFieldNumber;
#endif  // !_MSC_VER

PlayerEquipOneKeyDressRet::PlayerEquipOneKeyDressRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipOneKeyDressRet::InitAsDefaultInstance() {
}

PlayerEquipOneKeyDressRet::PlayerEquipOneKeyDressRet(const PlayerEquipOneKeyDressRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipOneKeyDressRet::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipOneKeyDressRet::~PlayerEquipOneKeyDressRet() {
  SharedDtor();
}

void PlayerEquipOneKeyDressRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipOneKeyDressRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipOneKeyDressRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipOneKeyDressRet_descriptor_;
}

const PlayerEquipOneKeyDressRet& PlayerEquipOneKeyDressRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipOneKeyDressRet* PlayerEquipOneKeyDressRet::default_instance_ = NULL;

PlayerEquipOneKeyDressRet* PlayerEquipOneKeyDressRet::New() const {
  return new PlayerEquipOneKeyDressRet;
}

void PlayerEquipOneKeyDressRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipOneKeyDressRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipOneKeyDressRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipOneKeyDressRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipOneKeyDressRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipOneKeyDressRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipOneKeyDressRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipOneKeyDressRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipOneKeyDressRet::MergeFrom(const PlayerEquipOneKeyDressRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipOneKeyDressRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipOneKeyDressRet::CopyFrom(const PlayerEquipOneKeyDressRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipOneKeyDressRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerEquipOneKeyDressRet::Swap(PlayerEquipOneKeyDressRet* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipOneKeyDressRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipOneKeyDressRet_descriptor_;
  metadata.reflection = PlayerEquipOneKeyDressRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEquipDelNotify::kPosFieldNumber;
#endif  // !_MSC_VER

PlayerEquipDelNotify::PlayerEquipDelNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEquipDelNotify::InitAsDefaultInstance() {
}

PlayerEquipDelNotify::PlayerEquipDelNotify(const PlayerEquipDelNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEquipDelNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEquipDelNotify::~PlayerEquipDelNotify() {
  SharedDtor();
}

void PlayerEquipDelNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEquipDelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEquipDelNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEquipDelNotify_descriptor_;
}

const PlayerEquipDelNotify& PlayerEquipDelNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

PlayerEquipDelNotify* PlayerEquipDelNotify::default_instance_ = NULL;

PlayerEquipDelNotify* PlayerEquipDelNotify::New() const {
  return new PlayerEquipDelNotify;
}

void PlayerEquipDelNotify::Clear() {
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEquipDelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEquipDelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEquipDelNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEquipDelNotify::ByteSize() const {
  int total_size = 0;

  // repeated int32 pos = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEquipDelNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEquipDelNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEquipDelNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEquipDelNotify::MergeFrom(const PlayerEquipDelNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEquipDelNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEquipDelNotify::CopyFrom(const PlayerEquipDelNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEquipDelNotify::IsInitialized() const {

  return true;
}

void PlayerEquipDelNotify::Swap(PlayerEquipDelNotify* other) {
  if (other != this) {
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEquipDelNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEquipDelNotify_descriptor_;
  metadata.reflection = PlayerEquipDelNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_StrenReq::kEquipTypeFieldNumber;
const int EquipForge_StrenReq::kStrenTypeFieldNumber;
const int EquipForge_StrenReq::kEquipPosFieldNumber;
#endif  // !_MSC_VER

EquipForge_StrenReq::EquipForge_StrenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_StrenReq::InitAsDefaultInstance() {
}

EquipForge_StrenReq::EquipForge_StrenReq(const EquipForge_StrenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_StrenReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  stren_type_ = 0;
  equip_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_StrenReq::~EquipForge_StrenReq() {
  SharedDtor();
}

void EquipForge_StrenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_StrenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_StrenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_StrenReq_descriptor_;
}

const EquipForge_StrenReq& EquipForge_StrenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_StrenReq* EquipForge_StrenReq::default_instance_ = NULL;

EquipForge_StrenReq* EquipForge_StrenReq::New() const {
  return new EquipForge_StrenReq;
}

void EquipForge_StrenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    stren_type_ = 0;
    equip_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_StrenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stren_type;
        break;
      }

      // required int32 stren_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stren_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stren_type_)));
          set_has_stren_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_StrenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 stren_type = 2;
  if (has_stren_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stren_type(), output);
  }

  // required int32 equip_pos = 3;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_StrenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 stren_type = 2;
  if (has_stren_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stren_type(), target);
  }

  // required int32 equip_pos = 3;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_StrenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 stren_type = 2;
    if (has_stren_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stren_type());
    }

    // required int32 equip_pos = 3;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_StrenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_StrenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_StrenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_StrenReq::MergeFrom(const EquipForge_StrenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_stren_type()) {
      set_stren_type(from.stren_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_StrenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_StrenReq::CopyFrom(const EquipForge_StrenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_StrenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipForge_StrenReq::Swap(EquipForge_StrenReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(stren_type_, other->stren_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_StrenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_StrenReq_descriptor_;
  metadata.reflection = EquipForge_StrenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_StrenRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_StrenRsp::EquipForge_StrenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_StrenRsp::InitAsDefaultInstance() {
}

EquipForge_StrenRsp::EquipForge_StrenRsp(const EquipForge_StrenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_StrenRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_StrenRsp::~EquipForge_StrenRsp() {
  SharedDtor();
}

void EquipForge_StrenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_StrenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_StrenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_StrenRsp_descriptor_;
}

const EquipForge_StrenRsp& EquipForge_StrenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_StrenRsp* EquipForge_StrenRsp::default_instance_ = NULL;

EquipForge_StrenRsp* EquipForge_StrenRsp::New() const {
  return new EquipForge_StrenRsp;
}

void EquipForge_StrenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_StrenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_StrenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_StrenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_StrenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_StrenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_StrenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_StrenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_StrenRsp::MergeFrom(const EquipForge_StrenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_StrenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_StrenRsp::CopyFrom(const EquipForge_StrenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_StrenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_StrenRsp::Swap(EquipForge_StrenRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_StrenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_StrenRsp_descriptor_;
  metadata.reflection = EquipForge_StrenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipForge_OneKeyStrenReq::EquipForge_OneKeyStrenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_OneKeyStrenReq::InitAsDefaultInstance() {
}

EquipForge_OneKeyStrenReq::EquipForge_OneKeyStrenReq(const EquipForge_OneKeyStrenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_OneKeyStrenReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_OneKeyStrenReq::~EquipForge_OneKeyStrenReq() {
  SharedDtor();
}

void EquipForge_OneKeyStrenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_OneKeyStrenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_OneKeyStrenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_OneKeyStrenReq_descriptor_;
}

const EquipForge_OneKeyStrenReq& EquipForge_OneKeyStrenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_OneKeyStrenReq* EquipForge_OneKeyStrenReq::default_instance_ = NULL;

EquipForge_OneKeyStrenReq* EquipForge_OneKeyStrenReq::New() const {
  return new EquipForge_OneKeyStrenReq;
}

void EquipForge_OneKeyStrenReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_OneKeyStrenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipForge_OneKeyStrenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_OneKeyStrenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_OneKeyStrenReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_OneKeyStrenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_OneKeyStrenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_OneKeyStrenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_OneKeyStrenReq::MergeFrom(const EquipForge_OneKeyStrenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_OneKeyStrenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_OneKeyStrenReq::CopyFrom(const EquipForge_OneKeyStrenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_OneKeyStrenReq::IsInitialized() const {

  return true;
}

void EquipForge_OneKeyStrenReq::Swap(EquipForge_OneKeyStrenReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_OneKeyStrenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_OneKeyStrenReq_descriptor_;
  metadata.reflection = EquipForge_OneKeyStrenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_OneKeyStrenRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_OneKeyStrenRsp::EquipForge_OneKeyStrenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_OneKeyStrenRsp::InitAsDefaultInstance() {
}

EquipForge_OneKeyStrenRsp::EquipForge_OneKeyStrenRsp(const EquipForge_OneKeyStrenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_OneKeyStrenRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_OneKeyStrenRsp::~EquipForge_OneKeyStrenRsp() {
  SharedDtor();
}

void EquipForge_OneKeyStrenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_OneKeyStrenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_OneKeyStrenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_OneKeyStrenRsp_descriptor_;
}

const EquipForge_OneKeyStrenRsp& EquipForge_OneKeyStrenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_OneKeyStrenRsp* EquipForge_OneKeyStrenRsp::default_instance_ = NULL;

EquipForge_OneKeyStrenRsp* EquipForge_OneKeyStrenRsp::New() const {
  return new EquipForge_OneKeyStrenRsp;
}

void EquipForge_OneKeyStrenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_OneKeyStrenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_OneKeyStrenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_OneKeyStrenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_OneKeyStrenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_OneKeyStrenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_OneKeyStrenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_OneKeyStrenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_OneKeyStrenRsp::MergeFrom(const EquipForge_OneKeyStrenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_OneKeyStrenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_OneKeyStrenRsp::CopyFrom(const EquipForge_OneKeyStrenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_OneKeyStrenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_OneKeyStrenRsp::Swap(EquipForge_OneKeyStrenRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_OneKeyStrenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_OneKeyStrenRsp_descriptor_;
  metadata.reflection = EquipForge_OneKeyStrenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_RefineReq::kEquipTypeFieldNumber;
const int EquipForge_RefineReq::kEquipPosFieldNumber;
#endif  // !_MSC_VER

EquipForge_RefineReq::EquipForge_RefineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_RefineReq::InitAsDefaultInstance() {
}

EquipForge_RefineReq::EquipForge_RefineReq(const EquipForge_RefineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_RefineReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  equip_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_RefineReq::~EquipForge_RefineReq() {
  SharedDtor();
}

void EquipForge_RefineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_RefineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_RefineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_RefineReq_descriptor_;
}

const EquipForge_RefineReq& EquipForge_RefineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_RefineReq* EquipForge_RefineReq::default_instance_ = NULL;

EquipForge_RefineReq* EquipForge_RefineReq::New() const {
  return new EquipForge_RefineReq;
}

void EquipForge_RefineReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    equip_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_RefineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_RefineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_RefineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_RefineReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_RefineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_RefineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_RefineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_RefineReq::MergeFrom(const EquipForge_RefineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_RefineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_RefineReq::CopyFrom(const EquipForge_RefineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_RefineReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipForge_RefineReq::Swap(EquipForge_RefineReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_RefineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_RefineReq_descriptor_;
  metadata.reflection = EquipForge_RefineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_RefineRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_RefineRsp::EquipForge_RefineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_RefineRsp::InitAsDefaultInstance() {
}

EquipForge_RefineRsp::EquipForge_RefineRsp(const EquipForge_RefineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_RefineRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_RefineRsp::~EquipForge_RefineRsp() {
  SharedDtor();
}

void EquipForge_RefineRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_RefineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_RefineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_RefineRsp_descriptor_;
}

const EquipForge_RefineRsp& EquipForge_RefineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_RefineRsp* EquipForge_RefineRsp::default_instance_ = NULL;

EquipForge_RefineRsp* EquipForge_RefineRsp::New() const {
  return new EquipForge_RefineRsp;
}

void EquipForge_RefineRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_RefineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_RefineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_RefineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_RefineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_RefineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_RefineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_RefineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_RefineRsp::MergeFrom(const EquipForge_RefineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_RefineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_RefineRsp::CopyFrom(const EquipForge_RefineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_RefineRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_RefineRsp::Swap(EquipForge_RefineRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_RefineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_RefineRsp_descriptor_;
  metadata.reflection = EquipForge_RefineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_DigHoleReq::kEquipTypeFieldNumber;
const int EquipForge_DigHoleReq::kEquipPosFieldNumber;
const int EquipForge_DigHoleReq::kHoleIdxFieldNumber;
#endif  // !_MSC_VER

EquipForge_DigHoleReq::EquipForge_DigHoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_DigHoleReq::InitAsDefaultInstance() {
}

EquipForge_DigHoleReq::EquipForge_DigHoleReq(const EquipForge_DigHoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_DigHoleReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  equip_pos_ = 0;
  hole_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_DigHoleReq::~EquipForge_DigHoleReq() {
  SharedDtor();
}

void EquipForge_DigHoleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_DigHoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_DigHoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_DigHoleReq_descriptor_;
}

const EquipForge_DigHoleReq& EquipForge_DigHoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_DigHoleReq* EquipForge_DigHoleReq::default_instance_ = NULL;

EquipForge_DigHoleReq* EquipForge_DigHoleReq::New() const {
  return new EquipForge_DigHoleReq;
}

void EquipForge_DigHoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    equip_pos_ = 0;
    hole_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_DigHoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_idx;
        break;
      }

      // required int32 hole_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_idx_)));
          set_has_hole_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_DigHoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // required int32 hole_idx = 3;
  if (has_hole_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_DigHoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // required int32 hole_idx = 3;
  if (has_hole_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_DigHoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // required int32 hole_idx = 3;
    if (has_hole_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_DigHoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_DigHoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_DigHoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_DigHoleReq::MergeFrom(const EquipForge_DigHoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_hole_idx()) {
      set_hole_idx(from.hole_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_DigHoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_DigHoleReq::CopyFrom(const EquipForge_DigHoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_DigHoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipForge_DigHoleReq::Swap(EquipForge_DigHoleReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(hole_idx_, other->hole_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_DigHoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_DigHoleReq_descriptor_;
  metadata.reflection = EquipForge_DigHoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_DigHoleRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_DigHoleRsp::EquipForge_DigHoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_DigHoleRsp::InitAsDefaultInstance() {
}

EquipForge_DigHoleRsp::EquipForge_DigHoleRsp(const EquipForge_DigHoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_DigHoleRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_DigHoleRsp::~EquipForge_DigHoleRsp() {
  SharedDtor();
}

void EquipForge_DigHoleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_DigHoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_DigHoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_DigHoleRsp_descriptor_;
}

const EquipForge_DigHoleRsp& EquipForge_DigHoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_DigHoleRsp* EquipForge_DigHoleRsp::default_instance_ = NULL;

EquipForge_DigHoleRsp* EquipForge_DigHoleRsp::New() const {
  return new EquipForge_DigHoleRsp;
}

void EquipForge_DigHoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_DigHoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_DigHoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_DigHoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_DigHoleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_DigHoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_DigHoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_DigHoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_DigHoleRsp::MergeFrom(const EquipForge_DigHoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_DigHoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_DigHoleRsp::CopyFrom(const EquipForge_DigHoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_DigHoleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_DigHoleRsp::Swap(EquipForge_DigHoleRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_DigHoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_DigHoleRsp_descriptor_;
  metadata.reflection = EquipForge_DigHoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_InlayReq::kEquipTypeFieldNumber;
const int EquipForge_InlayReq::kEquipPosFieldNumber;
const int EquipForge_InlayReq::kStoneIdxFieldNumber;
const int EquipForge_InlayReq::kHoleIdxFieldNumber;
#endif  // !_MSC_VER

EquipForge_InlayReq::EquipForge_InlayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_InlayReq::InitAsDefaultInstance() {
}

EquipForge_InlayReq::EquipForge_InlayReq(const EquipForge_InlayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_InlayReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  equip_pos_ = 0;
  stone_idx_ = 0;
  hole_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_InlayReq::~EquipForge_InlayReq() {
  SharedDtor();
}

void EquipForge_InlayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_InlayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_InlayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_InlayReq_descriptor_;
}

const EquipForge_InlayReq& EquipForge_InlayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_InlayReq* EquipForge_InlayReq::default_instance_ = NULL;

EquipForge_InlayReq* EquipForge_InlayReq::New() const {
  return new EquipForge_InlayReq;
}

void EquipForge_InlayReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    equip_pos_ = 0;
    stone_idx_ = 0;
    hole_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_InlayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stone_idx;
        break;
      }

      // required int32 stone_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_idx_)));
          set_has_stone_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hole_idx;
        break;
      }

      // required int32 hole_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_idx_)));
          set_has_hole_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_InlayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // required int32 stone_idx = 3;
  if (has_stone_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stone_idx(), output);
  }

  // required int32 hole_idx = 4;
  if (has_hole_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hole_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_InlayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // required int32 stone_idx = 3;
  if (has_stone_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stone_idx(), target);
  }

  // required int32 hole_idx = 4;
  if (has_hole_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hole_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_InlayReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // required int32 stone_idx = 3;
    if (has_stone_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_idx());
    }

    // required int32 hole_idx = 4;
    if (has_hole_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_InlayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_InlayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_InlayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_InlayReq::MergeFrom(const EquipForge_InlayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_stone_idx()) {
      set_stone_idx(from.stone_idx());
    }
    if (from.has_hole_idx()) {
      set_hole_idx(from.hole_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_InlayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_InlayReq::CopyFrom(const EquipForge_InlayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_InlayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EquipForge_InlayReq::Swap(EquipForge_InlayReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(stone_idx_, other->stone_idx_);
    std::swap(hole_idx_, other->hole_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_InlayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_InlayReq_descriptor_;
  metadata.reflection = EquipForge_InlayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_InlayRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_InlayRsp::EquipForge_InlayRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_InlayRsp::InitAsDefaultInstance() {
}

EquipForge_InlayRsp::EquipForge_InlayRsp(const EquipForge_InlayRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_InlayRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_InlayRsp::~EquipForge_InlayRsp() {
  SharedDtor();
}

void EquipForge_InlayRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_InlayRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_InlayRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_InlayRsp_descriptor_;
}

const EquipForge_InlayRsp& EquipForge_InlayRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_InlayRsp* EquipForge_InlayRsp::default_instance_ = NULL;

EquipForge_InlayRsp* EquipForge_InlayRsp::New() const {
  return new EquipForge_InlayRsp;
}

void EquipForge_InlayRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_InlayRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_InlayRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_InlayRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_InlayRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_InlayRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_InlayRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_InlayRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_InlayRsp::MergeFrom(const EquipForge_InlayRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_InlayRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_InlayRsp::CopyFrom(const EquipForge_InlayRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_InlayRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_InlayRsp::Swap(EquipForge_InlayRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_InlayRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_InlayRsp_descriptor_;
  metadata.reflection = EquipForge_InlayRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_TakeOffReq::kEquipTypeFieldNumber;
const int EquipForge_TakeOffReq::kEquipPosFieldNumber;
const int EquipForge_TakeOffReq::kHoleIdxFieldNumber;
#endif  // !_MSC_VER

EquipForge_TakeOffReq::EquipForge_TakeOffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_TakeOffReq::InitAsDefaultInstance() {
}

EquipForge_TakeOffReq::EquipForge_TakeOffReq(const EquipForge_TakeOffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_TakeOffReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  equip_pos_ = 0;
  hole_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_TakeOffReq::~EquipForge_TakeOffReq() {
  SharedDtor();
}

void EquipForge_TakeOffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_TakeOffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_TakeOffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_TakeOffReq_descriptor_;
}

const EquipForge_TakeOffReq& EquipForge_TakeOffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_TakeOffReq* EquipForge_TakeOffReq::default_instance_ = NULL;

EquipForge_TakeOffReq* EquipForge_TakeOffReq::New() const {
  return new EquipForge_TakeOffReq;
}

void EquipForge_TakeOffReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    equip_pos_ = 0;
    hole_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_TakeOffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_idx;
        break;
      }

      // required int32 hole_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_idx_)));
          set_has_hole_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_TakeOffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // required int32 hole_idx = 3;
  if (has_hole_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_TakeOffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // required int32 hole_idx = 3;
  if (has_hole_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_TakeOffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // required int32 hole_idx = 3;
    if (has_hole_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_TakeOffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_TakeOffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_TakeOffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_TakeOffReq::MergeFrom(const EquipForge_TakeOffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_hole_idx()) {
      set_hole_idx(from.hole_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_TakeOffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_TakeOffReq::CopyFrom(const EquipForge_TakeOffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_TakeOffReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipForge_TakeOffReq::Swap(EquipForge_TakeOffReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(hole_idx_, other->hole_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_TakeOffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_TakeOffReq_descriptor_;
  metadata.reflection = EquipForge_TakeOffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_TakeOffRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_TakeOffRsp::EquipForge_TakeOffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_TakeOffRsp::InitAsDefaultInstance() {
}

EquipForge_TakeOffRsp::EquipForge_TakeOffRsp(const EquipForge_TakeOffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_TakeOffRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_TakeOffRsp::~EquipForge_TakeOffRsp() {
  SharedDtor();
}

void EquipForge_TakeOffRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_TakeOffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_TakeOffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_TakeOffRsp_descriptor_;
}

const EquipForge_TakeOffRsp& EquipForge_TakeOffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_TakeOffRsp* EquipForge_TakeOffRsp::default_instance_ = NULL;

EquipForge_TakeOffRsp* EquipForge_TakeOffRsp::New() const {
  return new EquipForge_TakeOffRsp;
}

void EquipForge_TakeOffRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_TakeOffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_TakeOffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_TakeOffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_TakeOffRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_TakeOffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_TakeOffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_TakeOffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_TakeOffRsp::MergeFrom(const EquipForge_TakeOffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_TakeOffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_TakeOffRsp::CopyFrom(const EquipForge_TakeOffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_TakeOffRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_TakeOffRsp::Swap(EquipForge_TakeOffRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_TakeOffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_TakeOffRsp_descriptor_;
  metadata.reflection = EquipForge_TakeOffRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_InlayHolyReq::kEquipTypeFieldNumber;
const int EquipForge_InlayHolyReq::kEquipPosFieldNumber;
const int EquipForge_InlayHolyReq::kStoneIdxFieldNumber;
#endif  // !_MSC_VER

EquipForge_InlayHolyReq::EquipForge_InlayHolyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_InlayHolyReq::InitAsDefaultInstance() {
}

EquipForge_InlayHolyReq::EquipForge_InlayHolyReq(const EquipForge_InlayHolyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_InlayHolyReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  equip_pos_ = 0;
  stone_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_InlayHolyReq::~EquipForge_InlayHolyReq() {
  SharedDtor();
}

void EquipForge_InlayHolyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_InlayHolyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_InlayHolyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_InlayHolyReq_descriptor_;
}

const EquipForge_InlayHolyReq& EquipForge_InlayHolyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_InlayHolyReq* EquipForge_InlayHolyReq::default_instance_ = NULL;

EquipForge_InlayHolyReq* EquipForge_InlayHolyReq::New() const {
  return new EquipForge_InlayHolyReq;
}

void EquipForge_InlayHolyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    equip_pos_ = 0;
    stone_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_InlayHolyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stone_idx;
        break;
      }

      // required int32 stone_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_idx_)));
          set_has_stone_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_InlayHolyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // required int32 stone_idx = 3;
  if (has_stone_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stone_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_InlayHolyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // required int32 stone_idx = 3;
  if (has_stone_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stone_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_InlayHolyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // required int32 stone_idx = 3;
    if (has_stone_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_InlayHolyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_InlayHolyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_InlayHolyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_InlayHolyReq::MergeFrom(const EquipForge_InlayHolyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_stone_idx()) {
      set_stone_idx(from.stone_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_InlayHolyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_InlayHolyReq::CopyFrom(const EquipForge_InlayHolyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_InlayHolyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipForge_InlayHolyReq::Swap(EquipForge_InlayHolyReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(stone_idx_, other->stone_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_InlayHolyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_InlayHolyReq_descriptor_;
  metadata.reflection = EquipForge_InlayHolyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_InlayHolyRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_InlayHolyRsp::EquipForge_InlayHolyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_InlayHolyRsp::InitAsDefaultInstance() {
}

EquipForge_InlayHolyRsp::EquipForge_InlayHolyRsp(const EquipForge_InlayHolyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_InlayHolyRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_InlayHolyRsp::~EquipForge_InlayHolyRsp() {
  SharedDtor();
}

void EquipForge_InlayHolyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_InlayHolyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_InlayHolyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_InlayHolyRsp_descriptor_;
}

const EquipForge_InlayHolyRsp& EquipForge_InlayHolyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_InlayHolyRsp* EquipForge_InlayHolyRsp::default_instance_ = NULL;

EquipForge_InlayHolyRsp* EquipForge_InlayHolyRsp::New() const {
  return new EquipForge_InlayHolyRsp;
}

void EquipForge_InlayHolyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_InlayHolyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_InlayHolyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_InlayHolyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_InlayHolyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_InlayHolyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_InlayHolyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_InlayHolyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_InlayHolyRsp::MergeFrom(const EquipForge_InlayHolyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_InlayHolyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_InlayHolyRsp::CopyFrom(const EquipForge_InlayHolyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_InlayHolyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_InlayHolyRsp::Swap(EquipForge_InlayHolyRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_InlayHolyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_InlayHolyRsp_descriptor_;
  metadata.reflection = EquipForge_InlayHolyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_TakeoffHolyReq::kEquipTypeFieldNumber;
const int EquipForge_TakeoffHolyReq::kEquipPosFieldNumber;
#endif  // !_MSC_VER

EquipForge_TakeoffHolyReq::EquipForge_TakeoffHolyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_TakeoffHolyReq::InitAsDefaultInstance() {
}

EquipForge_TakeoffHolyReq::EquipForge_TakeoffHolyReq(const EquipForge_TakeoffHolyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_TakeoffHolyReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  equip_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_TakeoffHolyReq::~EquipForge_TakeoffHolyReq() {
  SharedDtor();
}

void EquipForge_TakeoffHolyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_TakeoffHolyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_TakeoffHolyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_TakeoffHolyReq_descriptor_;
}

const EquipForge_TakeoffHolyReq& EquipForge_TakeoffHolyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_TakeoffHolyReq* EquipForge_TakeoffHolyReq::default_instance_ = NULL;

EquipForge_TakeoffHolyReq* EquipForge_TakeoffHolyReq::New() const {
  return new EquipForge_TakeoffHolyReq;
}

void EquipForge_TakeoffHolyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    equip_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_TakeoffHolyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_TakeoffHolyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_TakeoffHolyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_TakeoffHolyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_TakeoffHolyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_TakeoffHolyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_TakeoffHolyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_TakeoffHolyReq::MergeFrom(const EquipForge_TakeoffHolyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_TakeoffHolyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_TakeoffHolyReq::CopyFrom(const EquipForge_TakeoffHolyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_TakeoffHolyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipForge_TakeoffHolyReq::Swap(EquipForge_TakeoffHolyReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_TakeoffHolyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_TakeoffHolyReq_descriptor_;
  metadata.reflection = EquipForge_TakeoffHolyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_TakeoffHolyRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_TakeoffHolyRsp::EquipForge_TakeoffHolyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_TakeoffHolyRsp::InitAsDefaultInstance() {
}

EquipForge_TakeoffHolyRsp::EquipForge_TakeoffHolyRsp(const EquipForge_TakeoffHolyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_TakeoffHolyRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_TakeoffHolyRsp::~EquipForge_TakeoffHolyRsp() {
  SharedDtor();
}

void EquipForge_TakeoffHolyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_TakeoffHolyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_TakeoffHolyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_TakeoffHolyRsp_descriptor_;
}

const EquipForge_TakeoffHolyRsp& EquipForge_TakeoffHolyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_TakeoffHolyRsp* EquipForge_TakeoffHolyRsp::default_instance_ = NULL;

EquipForge_TakeoffHolyRsp* EquipForge_TakeoffHolyRsp::New() const {
  return new EquipForge_TakeoffHolyRsp;
}

void EquipForge_TakeoffHolyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_TakeoffHolyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_TakeoffHolyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_TakeoffHolyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_TakeoffHolyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_TakeoffHolyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_TakeoffHolyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_TakeoffHolyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_TakeoffHolyRsp::MergeFrom(const EquipForge_TakeoffHolyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_TakeoffHolyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_TakeoffHolyRsp::CopyFrom(const EquipForge_TakeoffHolyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_TakeoffHolyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_TakeoffHolyRsp::Swap(EquipForge_TakeoffHolyRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_TakeoffHolyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_TakeoffHolyRsp_descriptor_;
  metadata.reflection = EquipForge_TakeoffHolyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_ComposeReq::kIdxFieldNumber;
const int EquipForge_ComposeReq::kTypeFieldNumber;
const int EquipForge_ComposeReq::kComposeIdFieldNumber;
#endif  // !_MSC_VER

EquipForge_ComposeReq::EquipForge_ComposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_ComposeReq::InitAsDefaultInstance() {
}

EquipForge_ComposeReq::EquipForge_ComposeReq(const EquipForge_ComposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_ComposeReq::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  type_ = 0;
  compose_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_ComposeReq::~EquipForge_ComposeReq() {
  SharedDtor();
}

void EquipForge_ComposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_ComposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_ComposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_ComposeReq_descriptor_;
}

const EquipForge_ComposeReq& EquipForge_ComposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_ComposeReq* EquipForge_ComposeReq::default_instance_ = NULL;

EquipForge_ComposeReq* EquipForge_ComposeReq::New() const {
  return new EquipForge_ComposeReq;
}

void EquipForge_ComposeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    type_ = 0;
    compose_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_ComposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compose_id;
        break;
      }

      // required int32 compose_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compose_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compose_id_)));
          set_has_compose_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_ComposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 compose_id = 3;
  if (has_compose_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compose_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_ComposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 compose_id = 3;
  if (has_compose_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compose_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_ComposeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 compose_id = 3;
    if (has_compose_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compose_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_ComposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_ComposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_ComposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_ComposeReq::MergeFrom(const EquipForge_ComposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_compose_id()) {
      set_compose_id(from.compose_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_ComposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_ComposeReq::CopyFrom(const EquipForge_ComposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_ComposeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipForge_ComposeReq::Swap(EquipForge_ComposeReq* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(type_, other->type_);
    std::swap(compose_id_, other->compose_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_ComposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_ComposeReq_descriptor_;
  metadata.reflection = EquipForge_ComposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_ComposeRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_ComposeRsp::EquipForge_ComposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_ComposeRsp::InitAsDefaultInstance() {
}

EquipForge_ComposeRsp::EquipForge_ComposeRsp(const EquipForge_ComposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_ComposeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_ComposeRsp::~EquipForge_ComposeRsp() {
  SharedDtor();
}

void EquipForge_ComposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_ComposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_ComposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_ComposeRsp_descriptor_;
}

const EquipForge_ComposeRsp& EquipForge_ComposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_ComposeRsp* EquipForge_ComposeRsp::default_instance_ = NULL;

EquipForge_ComposeRsp* EquipForge_ComposeRsp::New() const {
  return new EquipForge_ComposeRsp;
}

void EquipForge_ComposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_ComposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_ComposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_ComposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_ComposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_ComposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_ComposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_ComposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_ComposeRsp::MergeFrom(const EquipForge_ComposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_ComposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_ComposeRsp::CopyFrom(const EquipForge_ComposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_ComposeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_ComposeRsp::Swap(EquipForge_ComposeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_ComposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_ComposeRsp_descriptor_;
  metadata.reflection = EquipForge_ComposeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_RecastReq::kEquipTypeFieldNumber;
const int EquipForge_RecastReq::kEquipPosFieldNumber;
#endif  // !_MSC_VER

EquipForge_RecastReq::EquipForge_RecastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_RecastReq::InitAsDefaultInstance() {
}

EquipForge_RecastReq::EquipForge_RecastReq(const EquipForge_RecastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_RecastReq::SharedCtor() {
  _cached_size_ = 0;
  equip_type_ = 0;
  equip_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_RecastReq::~EquipForge_RecastReq() {
  SharedDtor();
}

void EquipForge_RecastReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_RecastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_RecastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_RecastReq_descriptor_;
}

const EquipForge_RecastReq& EquipForge_RecastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_RecastReq* EquipForge_RecastReq::default_instance_ = NULL;

EquipForge_RecastReq* EquipForge_RecastReq::New() const {
  return new EquipForge_RecastReq;
}

void EquipForge_RecastReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_type_ = 0;
    equip_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_RecastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_type_)));
          set_has_equip_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // required int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_RecastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_type(), output);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_RecastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_type = 1;
  if (has_equip_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_type(), target);
  }

  // required int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_RecastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_type = 1;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_type());
    }

    // required int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_RecastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_RecastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_RecastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_RecastReq::MergeFrom(const EquipForge_RecastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_RecastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_RecastReq::CopyFrom(const EquipForge_RecastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_RecastReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipForge_RecastReq::Swap(EquipForge_RecastReq* other) {
  if (other != this) {
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_RecastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_RecastReq_descriptor_;
  metadata.reflection = EquipForge_RecastReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_RecastRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_RecastRsp::EquipForge_RecastRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_RecastRsp::InitAsDefaultInstance() {
}

EquipForge_RecastRsp::EquipForge_RecastRsp(const EquipForge_RecastRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_RecastRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_RecastRsp::~EquipForge_RecastRsp() {
  SharedDtor();
}

void EquipForge_RecastRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_RecastRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_RecastRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_RecastRsp_descriptor_;
}

const EquipForge_RecastRsp& EquipForge_RecastRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_RecastRsp* EquipForge_RecastRsp::default_instance_ = NULL;

EquipForge_RecastRsp* EquipForge_RecastRsp::New() const {
  return new EquipForge_RecastRsp;
}

void EquipForge_RecastRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_RecastRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_RecastRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_RecastRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_RecastRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_RecastRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_RecastRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_RecastRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_RecastRsp::MergeFrom(const EquipForge_RecastRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_RecastRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_RecastRsp::CopyFrom(const EquipForge_RecastRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_RecastRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_RecastRsp::Swap(EquipForge_RecastRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_RecastRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_RecastRsp_descriptor_;
  metadata.reflection = EquipForge_RecastRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_ComposeMaterialReq::kDstItemIdFieldNumber;
const int EquipForge_ComposeMaterialReq::kDstNumFieldNumber;
#endif  // !_MSC_VER

EquipForge_ComposeMaterialReq::EquipForge_ComposeMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_ComposeMaterialReq::InitAsDefaultInstance() {
}

EquipForge_ComposeMaterialReq::EquipForge_ComposeMaterialReq(const EquipForge_ComposeMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_ComposeMaterialReq::SharedCtor() {
  _cached_size_ = 0;
  dst_item_id_ = 0;
  dst_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_ComposeMaterialReq::~EquipForge_ComposeMaterialReq() {
  SharedDtor();
}

void EquipForge_ComposeMaterialReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_ComposeMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_ComposeMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_ComposeMaterialReq_descriptor_;
}

const EquipForge_ComposeMaterialReq& EquipForge_ComposeMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_ComposeMaterialReq* EquipForge_ComposeMaterialReq::default_instance_ = NULL;

EquipForge_ComposeMaterialReq* EquipForge_ComposeMaterialReq::New() const {
  return new EquipForge_ComposeMaterialReq;
}

void EquipForge_ComposeMaterialReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_item_id_ = 0;
    dst_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_ComposeMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dst_item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_item_id_)));
          set_has_dst_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_num;
        break;
      }

      // required int32 dst_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_num_)));
          set_has_dst_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_ComposeMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dst_item_id = 1;
  if (has_dst_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dst_item_id(), output);
  }

  // required int32 dst_num = 2;
  if (has_dst_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_ComposeMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dst_item_id = 1;
  if (has_dst_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dst_item_id(), target);
  }

  // required int32 dst_num = 2;
  if (has_dst_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_ComposeMaterialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dst_item_id = 1;
    if (has_dst_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_item_id());
    }

    // required int32 dst_num = 2;
    if (has_dst_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_ComposeMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_ComposeMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_ComposeMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_ComposeMaterialReq::MergeFrom(const EquipForge_ComposeMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_item_id()) {
      set_dst_item_id(from.dst_item_id());
    }
    if (from.has_dst_num()) {
      set_dst_num(from.dst_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_ComposeMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_ComposeMaterialReq::CopyFrom(const EquipForge_ComposeMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_ComposeMaterialReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipForge_ComposeMaterialReq::Swap(EquipForge_ComposeMaterialReq* other) {
  if (other != this) {
    std::swap(dst_item_id_, other->dst_item_id_);
    std::swap(dst_num_, other->dst_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_ComposeMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_ComposeMaterialReq_descriptor_;
  metadata.reflection = EquipForge_ComposeMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipForge_ComposeMaterialRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

EquipForge_ComposeMaterialRsp::EquipForge_ComposeMaterialRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipForge_ComposeMaterialRsp::InitAsDefaultInstance() {
}

EquipForge_ComposeMaterialRsp::EquipForge_ComposeMaterialRsp(const EquipForge_ComposeMaterialRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipForge_ComposeMaterialRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipForge_ComposeMaterialRsp::~EquipForge_ComposeMaterialRsp() {
  SharedDtor();
}

void EquipForge_ComposeMaterialRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipForge_ComposeMaterialRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipForge_ComposeMaterialRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipForge_ComposeMaterialRsp_descriptor_;
}

const EquipForge_ComposeMaterialRsp& EquipForge_ComposeMaterialRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fPackage_2eproto();
  return *default_instance_;
}

EquipForge_ComposeMaterialRsp* EquipForge_ComposeMaterialRsp::default_instance_ = NULL;

EquipForge_ComposeMaterialRsp* EquipForge_ComposeMaterialRsp::New() const {
  return new EquipForge_ComposeMaterialRsp;
}

void EquipForge_ComposeMaterialRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipForge_ComposeMaterialRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipForge_ComposeMaterialRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipForge_ComposeMaterialRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipForge_ComposeMaterialRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipForge_ComposeMaterialRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipForge_ComposeMaterialRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipForge_ComposeMaterialRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipForge_ComposeMaterialRsp::MergeFrom(const EquipForge_ComposeMaterialRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipForge_ComposeMaterialRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipForge_ComposeMaterialRsp::CopyFrom(const EquipForge_ComposeMaterialRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipForge_ComposeMaterialRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipForge_ComposeMaterialRsp::Swap(EquipForge_ComposeMaterialRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipForge_ComposeMaterialRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipForge_ComposeMaterialRsp_descriptor_;
  metadata.reflection = EquipForge_ComposeMaterialRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
