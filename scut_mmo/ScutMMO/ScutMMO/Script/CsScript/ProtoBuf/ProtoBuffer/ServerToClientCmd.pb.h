// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ServerToClientCmd.proto

#ifndef PROTOBUF_ProtoBuffer_2fServerToClientCmd_2eproto__INCLUDED
#define PROTOBUF_ProtoBuffer_2fServerToClientCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoBuffer_2fServerToClientCmd_2eproto();
void protobuf_AssignDesc_ProtoBuffer_2fServerToClientCmd_2eproto();
void protobuf_ShutdownFile_ProtoBuffer_2fServerToClientCmd_2eproto();


enum ServerToClientCmd {
  SERVER_TO_CLIENT_LOGIN_BEGIN = 1,
  LOGIN_TO_CLIENT_CHECK_VERSION = 4,
  LOGIN_TO_CLIENT_ACCOUNT_LOGIN = 5,
  LOGIC_TO_CLIENT_PING = 66,
  LOGIC_TO_CLIENT_RECONNECT = 67,
  LOGIC_TO_CLIENT_LOGOUT_LOGICSERVER = 68,
  LOGIC_TO_CLIENT_LOGIN_LOGICSERVER = 69,
  LOGIC_TO_CLIENT_GET_CHARACTER_LIST = 70,
  LOGIC_TO_CLIENT_CREATE_CHARACTER = 71,
  LOGIC_TO_CLIENT_DEL_CHARACTER = 72,
  LOGIC_TO_CLIENT_NOTIFY_CLIENT_STATE = 73,
  SERVER_TO_CLIENT_LOGIN_END = 90,
  SERVER_TO_CLIENT_PLAYER_BEGIN = 100,
  LOGIC_TO_CLIENT_PLAYERINFO = 101,
  LOGIC_TO_CLIENT_CREATURE_DESTORY = 102,
  LOGIC_TO_CLIENT_CREATURE_CREATE = 103,
  LOGIC_TO_CLIENT_CREATURE_SYN_ATTR_ALL = 104,
  LOGIC_TO_CLIENT_CREATURE_SYN_ATTR = 105,
  LOGIC_TO_CLIENT_CREATURE_LEVUP = 106,
  SERVER_TO_CLIENT_PLAYER_END = 110,
  SERVER_TO_CLIENT_SCENE_BEGIN = 111,
  LOGIC_TO_CLIENT_ACTOR_MOVE = 112,
  LOGIC_TO_CLIENT_ACTOR_SKILLMOVE = 113,
  LOGIC_TO_CLIENT_NOTIFY_LOAD_MAP = 114,
  LOGIC_TO_CLIENT_SCENE_TRANS_RESULT = 115,
  LOGIC_TO_CLIENT_NOTIFY_TRANS_LOGICNODE = 116,
  LOGIC_TO_CLIENT_ACTOR_BEAT_BACK = 117,
  LOGIC_TO_CLIENT_ACTOR_TELEPORTING = 118,
  LOGIC_TO_CLIENT_ACTOR_ROCKER_MOVE = 119,
  LOGIC_TO_CLIENT_ACTOR_POS_UPDATE = 120,
  SERVER_TO_CLIENT_SCENE_END = 129,
  SERVER_TO_CLIENT_SKILL_BEGIN = 130,
  LOGIC_TO_CLIENT_SKILL_RESULT_BROADCAST = 131,
  LOGIC_TO_CLIENT_SKILL_USE_BROADCAST = 132,
  LOGIC_TO_CLIENT_BUFF_RESULT_BROADCAST = 133,
  LOGIC_TO_CLIENT_SKILL_LEVEL_UP_RSP = 134,
  LOGIC_TO_CLIENT_SKILL_STOP_USE = 135,
  SERVER_TO_CLIENT_SKILL_END = 140,
  SERVER_TO_CLIENT_PACKAGE_BEGIN = 150,
  LOGIC_TO_CLIENT_PACKAGE_LABEL_INFO = 151,
  LOGIC_TO_CLIENT_PACKAGE_INFO = 152,
  LOGIC_TO_CLIENT_PACKAGE_SORT = 153,
  LOGIC_TO_CLIENT_PACKAGE_SELL = 154,
  LOGIC_TO_CLIENT_PACKAGE_USE = 155,
  LOGIC_TO_CLIENT_PACKAGE_UPDATE = 156,
  LOGIC_TO_CLIENT_PACKAGE_UPDATE_EXPAND = 157,
  LOGIC_TO_CLIENT_PLAYER_EQUIP_INFO = 158,
  LOGIC_TO_CLIENT_PLAYER_EQUIP_DRESS = 159,
  LOGIC_TO_CLIENT_PLAYER_EQUIP_UNDRESS = 160,
  LOGIC_TO_CLIENT_PLAYER_EQUIP_UPDATE = 161,
  LOGIC_TO_CLIENT_PLAYER_EQUIP_ONEKEY_DRESS = 162,
  LOGIC_TO_CLIENT_EQUIP_STREN = 163,
  LOGIC_TO_CLIENT_EQUIP_ONEKEY_STREN = 164,
  LOGIC_TO_CLIENT_EQUIP_REFINE = 165,
  LOGIC_TO_CLIENT_EQUIP_DIGHOLE = 166,
  LOGIC_TO_CLIENT_EQUIP_INLAY = 167,
  LOGIC_TO_CLIENT_EQUIP_TAKEOFF = 168,
  LOGIC_TO_CLIENT_EQUIP_COMPOSE = 169,
  LOGIC_TO_CLIENT_EQUIP_RECAST = 170,
  LOGIC_TO_CLIENT_EQUIP_INLAY_HOLY = 171,
  LOGIC_TO_CLIENT_EQUIP_TAKEOFF_HOLY = 172,
  LOGIC_TO_CLIENT_EQUIP_COMPOSE_MATERIAL = 173,
  LOGIC_TO_CLIENT_PLAYER_PICKUP_DROP = 174,
  LOGIC_TO_CLIENT_PLYAER_EQUIP_DEL = 175,
  SERVER_TO_CLIENT_PACKAGE_END = 190,
  SERVER_TO_CLIENT_DUPLICATE_BEGIN = 200,
  LOGIC_TO_CLIENT_DUPLICATE_INFO = 201,
  LOGIC_TO_CLIENT_DUPLICATE_ENTER = 202,
  LOGIC_TO_CLIENT_DUPLICATE_EXIT = 203,
  LOGIC_TO_CLIENT_DUPLICATE_RESULT = 204,
  LOGIC_TO_CLIENT_DUPLICATE_AUTO_FIGHT = 205,
  LOGIC_TO_CLIENT_DUPLICATE_LOTTERY = 206,
  LOGIC_TO_CLIENT_DUPLICATE_BUY_NUM = 207,
  LOGIC_TO_CLIENT_DUPLICATE_SWEEP = 208,
  LOGIC_TO_CLIENT_DUPLICATE_UPDATE = 209,
  LOGIC_TO_CLIENT_DUPLICATE_RELIVE = 210,
  LOGIC_TO_CLIENT_DUPLICATE_LEAVE = 211,
  LOGIC_TO_CLIENT_DUPLICATE_ENTER_AREA = 212,
  SERVER_TO_CLIENT_DUPLICATE_END = 220,
  SERVER_TO_CLIENT_BUFF_BEGIN = 230,
  LOGIC_TO_CLIENT_START_BUFF_BAG = 231,
  LOGIC_TO_CLIENT_END_BUFF_BAG = 232,
  LOGIC_TO_CLIENT_MISS_BUFF_BAG = 233,
  LOGIC_TO_CLIENT_SYN_BUFF_STATE = 234,
  LOGIC_TO_CLIENT_PLAY_IDLE = 235,
  LOGIC_TO_CLIENT_REPLACE_NORMAL_SKILL = 236,
  SERVER_TO_CLIENT_BUFF_END = 250,
  SERVER_TO_CLIENT_MISSION_BEGIN = 270,
  LOGIC_TO_CLIENT_QUERY_MiSSIONLIST = 271,
  LOGIC_TO_CLIENT_ACCEPTMISSION = 272,
  LOGIC_TO_CLIENT_ABANDONMISSION = 273,
  LOGIC_TO_CLIENT_SUBMITMISSION = 274,
  LOGIC_TO_CLIENT_UPDATEMISSIONSTATUSNOTIFY = 275,
  LOGIC_TO_CLIENT_UPDATEACCEPTABLELISTNOTIFY = 276,
  LOGIC_TO_CLIENT_RECEIVEMISSIONNOTIFY = 277,
  LOGIC_TO_CLIENT_GCDELETEMISSIONNOTIFY = 278,
  LOGIC_TO_CLIENT_GETCAMPMISSIONINFO = 279,
  LOGIC_TO_CLIENT_DICECAMPMISSION = 280,
  LOGIC_TO_CLIENT_GETCAMPBOXREWARD = 281,
  SERVER_TO_CLIENT_MISSION_END = 300,
  SERVER_TO_CLIENT_CHAT_BEGIN = 310,
  LOGIC_TO_CLIENT_CHATMSGREQ = 311,
  LOGIC_TO_CLIENT_SYSTEMCHATMSGNOTIFY = 312,
  CENTER_TO_CLIENT_ASKOFFLINEMSG = 313,
  CENTER_TO_CLIENT_INTRVALASKOFFLINEMSG = 314,
  CENTER_TO_CLIENT_CHARACTER_DETAIL_DATA = 315,
  SERVER_TO_CLIENT_CHAT_END = 330,
  SERVER_TO_CLIENT_FRIEND_BEGIN = 350,
  CENTER_TO_CLIENT_APPLY_RELATION = 351,
  CENTER_TO_CLIENT_AGREE_RELATION = 352,
  CENTER_TO_CLIENT_DELETE_RELATION = 353,
  CENTER_TO_CLIENT_RECENT_CHAT_LIST = 354,
  CENTER_TO_CLIENT_ONEKEY_FRIEND = 355,
  CENTER_TO_CLIENT_RELATION_INFO = 356,
  CENTER_TO_CLIENT_SEARCH_USER = 357,
  CENTER_TO_CLIENT_NOTIFY_RELATION = 358,
  CENTER_TO_CLIENT_GIVE_PHYSICAL = 359,
  CENTER_TO_CLIENT_AllGIVE_PHYSICAL = 360,
  CENTER_TO_CLIENT_GET_PHYSICAL = 361,
  CENTER_TO_CLIENT_GET_PHYSICAL_GIFT = 362,
  CENTER_TO_CLIENT_APPLYLIST = 363,
  CENTER_TO_CLIENT_CLEARAPPLYLIST = 364,
  CENTER_TO_CLIENT_PHYSICALNOTIFY = 365,
  SERVER_TO_CLIENT_FRIEND_END = 380,
  SERVER_TO_CLIENT_MAIL_BEGIN = 400,
  SERVER_TO_CLIENT_SENDMAIL = 401,
  SERVER_TO_CLIENT_DELETEMAIL = 402,
  SERVER_TO_CLIENT_NEWMAILNOTIFY = 403,
  SERVER_TO_CLIENT_GETMAILITEMLIST = 404,
  SERVER_TO_CLIENT_ASKMAIL = 405,
  SERVER_TO_CLIENT_UNREADMAILNOTIFY = 406,
  SERVER_TO_CLIENT_GETMAILATTACHMENT = 407,
  SERVER_TO_CLIENT_GETALLMAILATTACHMENT = 408,
  SERVER_TO_CLIENT_MAIL_END = 450,
  SERVER_TO_CLIENT_CAMP_BEGIN = 460,
  CENTER_TO_CLIENT_CAMP_JOIN = 461,
  CENTER_TO_CLIENT_CAMP_CHANGE = 462,
  CENTER_TO_CLIENT_CAMP_INFO = 463,
  CENTER_TO_CLIENT_CAMP_RANK_INFO = 464,
  CENTER_TO_CLIENT_CAMP_HONOR_INFO = 465,
  CENTER_TO_CLIENT_CAMP_PUBLISH_NOTICE = 466,
  CENTER_TO_CLIENT_CAMP_BROAD_NOTICE = 467,
  SERVER_TO_CLIENT_CAMP_END = 520,
  SERVER_TO_CLIENT_ACHIEVENTMENT_BEGIN = 530,
  SERVER_TO_CLIENT_ACHIEVENTMENTNOTIFY = 531,
  SERVER_TO_CLIENT_ACHIEVEMENTINFO = 532,
  SERVER_TO_CLIENT_GETACHIEVEMENTREWARD = 534,
  SERVER_TO_CLIENT_GETACHIEVEMENTBOXREWARD = 535,
  SERVER_TO_CLIENT_ACHIEVENTMENT_END = 540,
  SERVER_TO_CLIENT_DEPUTY_BEGIN = 550,
  SERVER_TO_CLIENT_DEPUTY_COLLECT_SKILL_INFO = 551,
  SERVER_TO_CLIENT_DEPUTY_MAKE_SKILL_INFO = 552,
  SERVER_TO_CLIENT_DEPUTY_UPGRADE_COLLECT_SKILL = 553,
  SERVER_TO_CLIENT_DEPUTY_REFINE_MAKE_SKILL = 554,
  SERVER_TO_CLIENT_DEPUTY_COLLECT_OPERATE = 555,
  SERVER_TO_CLIENT_DEPUTY_MAKE_OPERATE = 556,
  SERVER_TO_CLIENT_DEPUTY_NOTIFY_COLLECT = 557,
  SERVER_TO_CLIENT_DEPUTY_UPDATE_COLLECT_ENERGY = 558,
  SERVER_TO_CLIENT_PVP_BEGIN = 630,
  SERVER_TO_CLIENT_RET_SET_MODE = 631,
  SERVER_TO_CLIENT_PVP_KILLING_VALUE = 632,
  SERVER_TO_CLIENT_UPDATE_RED_PLAYER = 633,
  SERVER_TO_CLIENT_PVP_END = 639,
  SERVER_TO_CLIENT_MALL_BEGIN = 650,
  CENTER_TO_CLIENT_ASK_DATA_RESULT = 651,
  LOGIC_TO_CLIENT_BUY_RESULT = 652,
  CENTER_TO_CLIENT_CHANGE_NOTIFY = 653,
  CENTER_TO_CLIENT_GET_TIME_RESULT = 654,
  SERVER_TO_CLIENT_MALL_END = 660,
  LOGIC_TO_CLIENT_PROTOCOL_COUNT = 1024
};
bool ServerToClientCmd_IsValid(int value);
const ServerToClientCmd ServerToClientCmd_MIN = SERVER_TO_CLIENT_LOGIN_BEGIN;
const ServerToClientCmd ServerToClientCmd_MAX = LOGIC_TO_CLIENT_PROTOCOL_COUNT;
const int ServerToClientCmd_ARRAYSIZE = ServerToClientCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerToClientCmd_descriptor();
inline const ::std::string& ServerToClientCmd_Name(ServerToClientCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerToClientCmd_descriptor(), value);
}
inline bool ServerToClientCmd_Parse(
    const ::std::string& name, ServerToClientCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerToClientCmd>(
    ServerToClientCmd_descriptor(), name, value);
}
enum GAME_STATE {
  GAME_STATE_NULL = 0,
  GAME_STATE_LOGIN_ONLINE_BEGIN = 1,
  GAME_STATE_LOGIN_ONLINE_REPLACE = 2,
  GAME_STATE_LOGIN_ONLINE_END = 3,
  GAME_STATE_LOAD_CHARLIST_BEGIN = 4,
  GAME_STATE_LOAD_CHARLIST_END = 5,
  GAME_STATE_SELECT_ROLE = 6,
  GAME_STATE_CREATE_ROLE_BEGIN = 7,
  GAME_STATE_CREATE_ROLE_END = 8,
  GAME_STATE_ENTER_GAME = 9,
  GAME_STATE_SYNC_BEGIN = 10,
  GAME_STATE_SYNC_END = 11,
  GAME_STATE_ENTER_SCENCE = 12,
  GAME_STATE_PLAYERING = 13
};
bool GAME_STATE_IsValid(int value);
const GAME_STATE GAME_STATE_MIN = GAME_STATE_NULL;
const GAME_STATE GAME_STATE_MAX = GAME_STATE_PLAYERING;
const int GAME_STATE_ARRAYSIZE = GAME_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAME_STATE_descriptor();
inline const ::std::string& GAME_STATE_Name(GAME_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAME_STATE_descriptor(), value);
}
inline bool GAME_STATE_Parse(
    const ::std::string& name, GAME_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAME_STATE>(
    GAME_STATE_descriptor(), name, value);
}
enum LOGIN_FLAG {
  LOGIN_FLAG_NULL = 0,
  LOGIN_FLAG_NORMAL = 1,
  LOGIN_FLAG_REPLACE = 2,
  LOGIN_FLAG_SWITCH_SERVER = 3
};
bool LOGIN_FLAG_IsValid(int value);
const LOGIN_FLAG LOGIN_FLAG_MIN = LOGIN_FLAG_NULL;
const LOGIN_FLAG LOGIN_FLAG_MAX = LOGIN_FLAG_SWITCH_SERVER;
const int LOGIN_FLAG_ARRAYSIZE = LOGIN_FLAG_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOGIN_FLAG_descriptor();
inline const ::std::string& LOGIN_FLAG_Name(LOGIN_FLAG value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOGIN_FLAG_descriptor(), value);
}
inline bool LOGIN_FLAG_Parse(
    const ::std::string& name, LOGIN_FLAG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOGIN_FLAG>(
    LOGIN_FLAG_descriptor(), name, value);
}
enum LOGOUT_FLAG {
  LOGOUT_FLAG_NULL = 0,
  LOGOUT_FLAG_NORMAL = 1,
  LOGOUT_FLAG_REPLACE = 2,
  LOGOUT_FLAG_SWITCH_SERVER = 3,
  LOGOUT_FLAG_BREAK_TIMEOUT = 4
};
bool LOGOUT_FLAG_IsValid(int value);
const LOGOUT_FLAG LOGOUT_FLAG_MIN = LOGOUT_FLAG_NULL;
const LOGOUT_FLAG LOGOUT_FLAG_MAX = LOGOUT_FLAG_BREAK_TIMEOUT;
const int LOGOUT_FLAG_ARRAYSIZE = LOGOUT_FLAG_MAX + 1;

const ::google::protobuf::EnumDescriptor* LOGOUT_FLAG_descriptor();
inline const ::std::string& LOGOUT_FLAG_Name(LOGOUT_FLAG value) {
  return ::google::protobuf::internal::NameOfEnum(
    LOGOUT_FLAG_descriptor(), value);
}
inline bool LOGOUT_FLAG_Parse(
    const ::std::string& name, LOGOUT_FLAG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LOGOUT_FLAG>(
    LOGOUT_FLAG_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::ServerToClientCmd>() {
  return ::ProtoBuf::ServerToClientCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::GAME_STATE>() {
  return ::ProtoBuf::GAME_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::LOGIN_FLAG>() {
  return ::ProtoBuf::LOGIN_FLAG_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::LOGOUT_FLAG>() {
  return ::ProtoBuf::LOGOUT_FLAG_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBuffer_2fServerToClientCmd_2eproto__INCLUDED
