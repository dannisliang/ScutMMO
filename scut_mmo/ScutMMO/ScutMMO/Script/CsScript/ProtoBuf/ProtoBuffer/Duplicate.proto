import "ProtoBuffer/ComProtocol.proto";
import "ProtoBuffer/ClientToServerCmd.proto";
import "Common/ComDefine.proto";
package ProtoBuf;



message DupMonsStateProto
{
	required uint32 mons_id = 1;	//怪物ID
	required int32 state = 2;		//状态 0 未死亡， 1 死亡
}

message DupFightDataProto
{
	required uint32 cid = 1;	//玩家cid
	required uint64 atk = 2;	//输出伤害
	required uint64 be_atk = 3;	//承受伤害
}



////////////////////////  client to logic and logic to client ///////////////////////////////////////////////////

//副本信息
message Duplicate_InfoReq
{
	//空
}
//副本信息返回
message Duplicate_InfoRsp
{
	required int32 retcode = 1;		//返回码
	repeated DuplicateProto info = 2; //副本
	repeated DuplicateGroupProto group = 3;	//副本组
	repeated int32 open_list = 4;		//开启列表
}

//进入副本
message Duplicate_EnterReq
{
	required int32 duplicate_id = 1;	//副本ID
	optional int32 area_id = 2;			//区域ID
	optional Vector3PB cur_pos = 3;		//当前坐标
}

//进入副本返回
message Duplicate_EnterRsp
{
	required int32 retcode = 1;			//返回码
	optional int32 duplicate_id = 2;	//副本ID
	repeated int32 area = 3;			//区域
	optional int32 mons_num = 4;		//剩余怪物数量
	optional int32 dup_sec = 5;			//副本剩余时间
	optional int32 tower_hp = 6;		//塔的血量
	optional int32 trans_num = 7;		//已传送怪物数量
}

//副本结果返回
message Duplicate_ResultRsp
{
	required int32 result = 1;			//结果 0 成功，1 失败
	required int32 duplicate_id = 2;	//副本ID
	optional int32 star = 3;			//星级
	optional int32 exp = 4;				//经验
	optional int32 gold = 5;			//金币
	optional RewardItemProto reward = 6;//奖励物品
	optional RewardItemProto flop = 7;	 //翻牌物品
}

//副本自动战斗
message Duplicate_AutoFightReq
{
	//空
}

//副本自动战斗返回
message Duplicate_AutoFightRsp
{
	required int32 result = 1;	//结果 
}


//翻牌
message Duplicate_FlopReq
{
	//空
}

//翻牌返回
message Duplicate_FlopRsp
{
	required int32 retcode = 1;		//返回码
	optional int32 index = 2;		//翻牌物品索引
}


//副本更新返回
message Duplicate_UpdateRsp
{
	repeated DuplicateProto info = 1;
	repeated DuplicateGroupProto group = 2;	//副本组
	repeated int32 open_list = 3;		//开启列表
}

//复活
message Duplicate_ReliveReq
{
	required int32 type = 1;	//复活方式， 1 回城复活，2 消耗金钱复活
}

//复活返回
message Duplicate_ReliveRsp
{
	required int32 retcode = 1;				//返回码
	optional int32 type = 2;				//复活方式
}

//离开副本
message Duplicate_LeaveReq
{
	//空
}
//离开数副本返回
message Duplicate_LeaveRsp
{
	required int32 retcode = 1;		//返回码
}


//进入副本区域
message Duplicate_EnterAreaReq
{
	required int32 area_id = 1;	//区域ID
}

//进入副本区域返回
message Duplicate_EnterAreaRsp
{
	required int32 retcode = 1;	//返回码
}

//购买次数
message Duplicate_BuyCountReq
{
	required int32 group_id = 1;  //副本组ID
}
//购买次数返回
message Duplicate_BuyCountRsp
{
	required int32 retcode = 1;		//返回码
	optional int32 buy_num = 2;		//已购买次数
	optional int32 group_id = 3;		//副本组ID
	
}


//自动挑战
message Duplicate_AutoChallengeReq
{
	//空
}
//自动挑战返回
message Duplicate_AutoChallengeRsp
{
	required int32 retcode = 1;
}

//副本战斗数据返回
message Duplicate_FightDataRsp
{
	repeated DupFightDataProto fight_data = 1;	//战斗数据
}

//即将刷新的怪物波数
message Duplicate_MonsWaveRsp
{
	required int32 wave = 1;	//怪物波数
	required int32 sec = 2;		//等待时间 单位：秒
}


//剩余怪物数量返回
message Duplicate_MonsNumRsp
{
	required int32 num = 1;	//剩余怪物数量
}


//怪物序列状态（是否死亡）
message Duplicate_MonsStateRsp
{
	repeated DupMonsStateProto mon_state = 1;
}

//玩家已复活次数
message Duplicate_ReliveNumRsp
{
	required int32 count = 1;	//已复活次数
}

//塔血量更新
message Duplicate_TowerHpRsp
{
	required int32 hp = 1;	//塔当前血量
}

//已传送怪物数量
message Duplicate_TransMonsNumRsp
{
	required int32 trans_num = 1;	//已传送数量
}


/////////////////////////////////// logic to center and center to logic //////////////////////////////////////////////////
//进入副本之前所在区域
message DupBeforAreaProto
{
	required uint32 charId = 1;	
	required uint32 areaId = 2;
}

//逻辑服向中心服请求进入副本
message LogicToCenter_EnterDupReq
{
	required uint32 charId = 1;
	required uint32 duplicate_id = 2;		//副本ID
	required int32  key_type = 3;			//副本key值类型
	required uint64 key_value = 4;			//副本key值
	repeated DupBeforAreaProto area = 5;	//进入副本之前所在区域
}
//中心服返回逻辑服进入副本
message CenterToLogic_EnterDupRsp
{
	required int32 retcode = 1;	//返回码
	required uint32 charId = 2;
	required uint32 duplicate_id = 3;		//副本ID
	required int32  key_type = 4;			//副本key值类型
	required uint64 key_value = 5;			//副本key值
}


//逻辑服向中心服请求创建副本场景
message LogicToCenter_CreateSceneReq
{
	required uint32 char_id = 1;			//角色ID
	required uint32 duplicate_id = 2;		//副本ID
	required int32  key_type = 3;			//副本key值类型
	required uint64 key_value = 4;			//副本key值
}
//中心服返回逻辑服创建副本场景结果
message CenterToLogic_CreateSceneRsp
{
	required int32 retcode = 1;				//返回码
	required uint32 char_id = 2;			//角色ID
	required uint32 duplicate_id = 3;		//副本ID
	required int32  key_type = 4;			//副本key值类型
	required uint64 key_value = 5;			//副本key值
	optional uint32 scene_id = 6;			//副本场景ID
	repeated DupBeforAreaProto area = 7;	//进入副本之前所在区域
}

//逻辑服向中心服返回创建副本结果
message LogicToCenter_CreateDuplicateRsp
{
	required int32 retcode = 1;				//返回码
	required uint32 scene_id = 2;			//副本场景ID	
}

//中心服通知逻辑服玩家准备进副本
message CenterToLogic_DuplicateNotifyPrepare
{
	required uint32 char_id = 1;			//角色ID
	required uint32 duplicate_id = 2;		//副本ID
	required uint32 scene_id = 3;			//副本场景ID
	required int32  key_type = 4;			//副本key类型
	required uint64 key_value = 5;		//副本key值
}

//逻辑服返回中心服准备结果
message LogicToCenter_DuplicatePrepareRsp
{
	required int32 retcode = 1;
	required uint32 char_id = 2;			//角色ID
	required uint32 duplicate_id = 3;		//副本ID
	required uint32 scene_id = 4;			//副本场景ID
}

//中心服通知逻辑服玩家进副本
message CenterToLogic_DuplicateEnterNotify
{
	required uint32 char_id = 1;			//角色ID
	required uint32 duplicate_id = 2;		//副本ID
	required uint32 scene_id = 3;			//副本场景ID
}

//逻辑服返回中心服玩家进入副本
message LogicToCenter_DuplicateEnterRsp
{
	required uint32 char_id = 1;			//角色ID
	required uint32 scene_id = 2;			//副本场景ID
}
//逻辑服返回中心服玩家离开副本
message LogicToCenter_DuplicateLeaveRsp
{
	required uint32 char_id = 1;			//角色ID
	required uint32 scene_id = 2;			//副本场景ID
}

//逻辑服通知中心服副本开始
message LogicToCenter_DuplicateBegin
{
	required uint32 scene_id = 1;			//副本场景ID
}

//逻辑服通知中心服副本结束
message LogicToCenter_DuplicateEnd
{
	required uint32 scene_id = 1;			//副本场景ID
}

//逻辑服通知中心服副本销毁
message LogicToCenter_DuplicateDestory
{
	required uint32 scene_id = 1;			//副本场景ID
}