// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Duplicate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Duplicate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Duplicate_InfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_InfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ExitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ExitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ExitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ExitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_AutoFightReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_AutoFightReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_AutoFightRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_AutoFightRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_BuyCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_BuyCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_BuyCountRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_BuyCountRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_FlopReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_FlopReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_FlopRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_FlopRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_SweepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_SweepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_SweepRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_SweepRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_UpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_UpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ReliveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ReliveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ReliveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ReliveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_LeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_LeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_LeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_LeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterAreaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterAreaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterAreaRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterAreaRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_CreateDuplicateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_CreateDuplicateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogic_CreateDuplicateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogic_CreateDuplicateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_EnterDuplicateRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_EnterDuplicateRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicateEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateDestory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicateDestory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fDuplicate_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Duplicate.proto");
  GOOGLE_CHECK(file != NULL);
  Duplicate_InfoReq_descriptor_ = file->message_type(0);
  static const int Duplicate_InfoReq_offsets_[1] = {
  };
  Duplicate_InfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_InfoReq_descriptor_,
      Duplicate_InfoReq::default_instance_,
      Duplicate_InfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_InfoReq));
  Duplicate_InfoRsp_descriptor_ = file->message_type(1);
  static const int Duplicate_InfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, info_),
  };
  Duplicate_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_InfoRsp_descriptor_,
      Duplicate_InfoRsp::default_instance_,
      Duplicate_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_InfoRsp));
  Duplicate_EnterReq_descriptor_ = file->message_type(2);
  static const int Duplicate_EnterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, duplicate_id_),
  };
  Duplicate_EnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterReq_descriptor_,
      Duplicate_EnterReq::default_instance_,
      Duplicate_EnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterReq));
  Duplicate_EnterRsp_descriptor_ = file->message_type(3);
  static const int Duplicate_EnterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, area_),
  };
  Duplicate_EnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterRsp_descriptor_,
      Duplicate_EnterRsp::default_instance_,
      Duplicate_EnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterRsp));
  Duplicate_ExitReq_descriptor_ = file->message_type(4);
  static const int Duplicate_ExitReq_offsets_[1] = {
  };
  Duplicate_ExitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ExitReq_descriptor_,
      Duplicate_ExitReq::default_instance_,
      Duplicate_ExitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ExitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ExitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ExitReq));
  Duplicate_ExitRsp_descriptor_ = file->message_type(5);
  static const int Duplicate_ExitRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ExitRsp, retcode_),
  };
  Duplicate_ExitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ExitRsp_descriptor_,
      Duplicate_ExitRsp::default_instance_,
      Duplicate_ExitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ExitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ExitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ExitRsp));
  Duplicate_ResultRsp_descriptor_ = file->message_type(6);
  static const int Duplicate_ResultRsp_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, kill_mon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, die_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, bind_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, bind_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, flop_),
  };
  Duplicate_ResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ResultRsp_descriptor_,
      Duplicate_ResultRsp::default_instance_,
      Duplicate_ResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ResultRsp));
  Duplicate_AutoFightReq_descriptor_ = file->message_type(7);
  static const int Duplicate_AutoFightReq_offsets_[1] = {
  };
  Duplicate_AutoFightReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_AutoFightReq_descriptor_,
      Duplicate_AutoFightReq::default_instance_,
      Duplicate_AutoFightReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_AutoFightReq));
  Duplicate_AutoFightRsp_descriptor_ = file->message_type(8);
  static const int Duplicate_AutoFightRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightRsp, result_),
  };
  Duplicate_AutoFightRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_AutoFightRsp_descriptor_,
      Duplicate_AutoFightRsp::default_instance_,
      Duplicate_AutoFightRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_AutoFightRsp));
  Duplicate_BuyCountReq_descriptor_ = file->message_type(9);
  static const int Duplicate_BuyCountReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountReq, duplicate_id_),
  };
  Duplicate_BuyCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_BuyCountReq_descriptor_,
      Duplicate_BuyCountReq::default_instance_,
      Duplicate_BuyCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_BuyCountReq));
  Duplicate_BuyCountRsp_descriptor_ = file->message_type(10);
  static const int Duplicate_BuyCountRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, retcode_),
  };
  Duplicate_BuyCountRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_BuyCountRsp_descriptor_,
      Duplicate_BuyCountRsp::default_instance_,
      Duplicate_BuyCountRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_BuyCountRsp));
  Duplicate_FlopReq_descriptor_ = file->message_type(11);
  static const int Duplicate_FlopReq_offsets_[1] = {
  };
  Duplicate_FlopReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_FlopReq_descriptor_,
      Duplicate_FlopReq::default_instance_,
      Duplicate_FlopReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_FlopReq));
  Duplicate_FlopRsp_descriptor_ = file->message_type(12);
  static const int Duplicate_FlopRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, index_),
  };
  Duplicate_FlopRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_FlopRsp_descriptor_,
      Duplicate_FlopRsp::default_instance_,
      Duplicate_FlopRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_FlopRsp));
  Duplicate_SweepReq_descriptor_ = file->message_type(13);
  static const int Duplicate_SweepReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepReq, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepReq, sweep_type_),
  };
  Duplicate_SweepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_SweepReq_descriptor_,
      Duplicate_SweepReq::default_instance_,
      Duplicate_SweepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_SweepReq));
  Duplicate_SweepRsp_descriptor_ = file->message_type(14);
  static const int Duplicate_SweepRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepRsp, sweep_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepRsp, reson_),
  };
  Duplicate_SweepRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_SweepRsp_descriptor_,
      Duplicate_SweepRsp::default_instance_,
      Duplicate_SweepRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_SweepRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_SweepRsp));
  Duplicate_UpdateRsp_descriptor_ = file->message_type(15);
  static const int Duplicate_UpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, info_),
  };
  Duplicate_UpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_UpdateRsp_descriptor_,
      Duplicate_UpdateRsp::default_instance_,
      Duplicate_UpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_UpdateRsp));
  Duplicate_ReliveReq_descriptor_ = file->message_type(16);
  static const int Duplicate_ReliveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveReq, type_),
  };
  Duplicate_ReliveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ReliveReq_descriptor_,
      Duplicate_ReliveReq::default_instance_,
      Duplicate_ReliveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ReliveReq));
  Duplicate_ReliveRsp_descriptor_ = file->message_type(17);
  static const int Duplicate_ReliveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, type_),
  };
  Duplicate_ReliveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ReliveRsp_descriptor_,
      Duplicate_ReliveRsp::default_instance_,
      Duplicate_ReliveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ReliveRsp));
  Duplicate_LeaveReq_descriptor_ = file->message_type(18);
  static const int Duplicate_LeaveReq_offsets_[1] = {
  };
  Duplicate_LeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_LeaveReq_descriptor_,
      Duplicate_LeaveReq::default_instance_,
      Duplicate_LeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_LeaveReq));
  Duplicate_LeaveRsp_descriptor_ = file->message_type(19);
  static const int Duplicate_LeaveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveRsp, retcode_),
  };
  Duplicate_LeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_LeaveRsp_descriptor_,
      Duplicate_LeaveRsp::default_instance_,
      Duplicate_LeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_LeaveRsp));
  Duplicate_EnterAreaReq_descriptor_ = file->message_type(20);
  static const int Duplicate_EnterAreaReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaReq, area_id_),
  };
  Duplicate_EnterAreaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterAreaReq_descriptor_,
      Duplicate_EnterAreaReq::default_instance_,
      Duplicate_EnterAreaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterAreaReq));
  Duplicate_EnterAreaRsp_descriptor_ = file->message_type(21);
  static const int Duplicate_EnterAreaRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaRsp, retcode_),
  };
  Duplicate_EnterAreaRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterAreaRsp_descriptor_,
      Duplicate_EnterAreaRsp::default_instance_,
      Duplicate_EnterAreaRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterAreaRsp));
  LogicToCenter_CreateDuplicateReq_descriptor_ = file->message_type(22);
  static const int LogicToCenter_CreateDuplicateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateReq, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateReq, duplicate_id_),
  };
  LogicToCenter_CreateDuplicateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_CreateDuplicateReq_descriptor_,
      LogicToCenter_CreateDuplicateReq::default_instance_,
      LogicToCenter_CreateDuplicateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_CreateDuplicateReq));
  CenterToLogic_CreateDuplicateRsp_descriptor_ = file->message_type(23);
  static const int CenterToLogic_CreateDuplicateRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateDuplicateRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateDuplicateRsp, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateDuplicateRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateDuplicateRsp, scene_id_),
  };
  CenterToLogic_CreateDuplicateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogic_CreateDuplicateRsp_descriptor_,
      CenterToLogic_CreateDuplicateRsp::default_instance_,
      CenterToLogic_CreateDuplicateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateDuplicateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateDuplicateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogic_CreateDuplicateRsp));
  LogicToCenter_EnterDuplicateRes_descriptor_ = file->message_type(24);
  static const int LogicToCenter_EnterDuplicateRes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, limit_time_),
  };
  LogicToCenter_EnterDuplicateRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_EnterDuplicateRes_descriptor_,
      LogicToCenter_EnterDuplicateRes::default_instance_,
      LogicToCenter_EnterDuplicateRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDuplicateRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_EnterDuplicateRes));
  LogicToCenter_DuplicateEnd_descriptor_ = file->message_type(25);
  static const int LogicToCenter_DuplicateEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnd, scene_id_),
  };
  LogicToCenter_DuplicateEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicateEnd_descriptor_,
      LogicToCenter_DuplicateEnd::default_instance_,
      LogicToCenter_DuplicateEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicateEnd));
  LogicToCenter_DuplicateDestory_descriptor_ = file->message_type(26);
  static const int LogicToCenter_DuplicateDestory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateDestory, scene_id_),
  };
  LogicToCenter_DuplicateDestory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicateDestory_descriptor_,
      LogicToCenter_DuplicateDestory::default_instance_,
      LogicToCenter_DuplicateDestory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateDestory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateDestory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicateDestory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fDuplicate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_InfoReq_descriptor_, &Duplicate_InfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_InfoRsp_descriptor_, &Duplicate_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterReq_descriptor_, &Duplicate_EnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterRsp_descriptor_, &Duplicate_EnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ExitReq_descriptor_, &Duplicate_ExitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ExitRsp_descriptor_, &Duplicate_ExitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ResultRsp_descriptor_, &Duplicate_ResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_AutoFightReq_descriptor_, &Duplicate_AutoFightReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_AutoFightRsp_descriptor_, &Duplicate_AutoFightRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_BuyCountReq_descriptor_, &Duplicate_BuyCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_BuyCountRsp_descriptor_, &Duplicate_BuyCountRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_FlopReq_descriptor_, &Duplicate_FlopReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_FlopRsp_descriptor_, &Duplicate_FlopRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_SweepReq_descriptor_, &Duplicate_SweepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_SweepRsp_descriptor_, &Duplicate_SweepRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_UpdateRsp_descriptor_, &Duplicate_UpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ReliveReq_descriptor_, &Duplicate_ReliveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ReliveRsp_descriptor_, &Duplicate_ReliveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_LeaveReq_descriptor_, &Duplicate_LeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_LeaveRsp_descriptor_, &Duplicate_LeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterAreaReq_descriptor_, &Duplicate_EnterAreaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterAreaRsp_descriptor_, &Duplicate_EnterAreaRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_CreateDuplicateReq_descriptor_, &LogicToCenter_CreateDuplicateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogic_CreateDuplicateRsp_descriptor_, &CenterToLogic_CreateDuplicateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_EnterDuplicateRes_descriptor_, &LogicToCenter_EnterDuplicateRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicateEnd_descriptor_, &LogicToCenter_DuplicateEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicateDestory_descriptor_, &LogicToCenter_DuplicateDestory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fDuplicate_2eproto() {
  delete Duplicate_InfoReq::default_instance_;
  delete Duplicate_InfoReq_reflection_;
  delete Duplicate_InfoRsp::default_instance_;
  delete Duplicate_InfoRsp_reflection_;
  delete Duplicate_EnterReq::default_instance_;
  delete Duplicate_EnterReq_reflection_;
  delete Duplicate_EnterRsp::default_instance_;
  delete Duplicate_EnterRsp_reflection_;
  delete Duplicate_ExitReq::default_instance_;
  delete Duplicate_ExitReq_reflection_;
  delete Duplicate_ExitRsp::default_instance_;
  delete Duplicate_ExitRsp_reflection_;
  delete Duplicate_ResultRsp::default_instance_;
  delete Duplicate_ResultRsp_reflection_;
  delete Duplicate_AutoFightReq::default_instance_;
  delete Duplicate_AutoFightReq_reflection_;
  delete Duplicate_AutoFightRsp::default_instance_;
  delete Duplicate_AutoFightRsp_reflection_;
  delete Duplicate_BuyCountReq::default_instance_;
  delete Duplicate_BuyCountReq_reflection_;
  delete Duplicate_BuyCountRsp::default_instance_;
  delete Duplicate_BuyCountRsp_reflection_;
  delete Duplicate_FlopReq::default_instance_;
  delete Duplicate_FlopReq_reflection_;
  delete Duplicate_FlopRsp::default_instance_;
  delete Duplicate_FlopRsp_reflection_;
  delete Duplicate_SweepReq::default_instance_;
  delete Duplicate_SweepReq_reflection_;
  delete Duplicate_SweepRsp::default_instance_;
  delete Duplicate_SweepRsp_reflection_;
  delete Duplicate_UpdateRsp::default_instance_;
  delete Duplicate_UpdateRsp_reflection_;
  delete Duplicate_ReliveReq::default_instance_;
  delete Duplicate_ReliveReq_reflection_;
  delete Duplicate_ReliveRsp::default_instance_;
  delete Duplicate_ReliveRsp_reflection_;
  delete Duplicate_LeaveReq::default_instance_;
  delete Duplicate_LeaveReq_reflection_;
  delete Duplicate_LeaveRsp::default_instance_;
  delete Duplicate_LeaveRsp_reflection_;
  delete Duplicate_EnterAreaReq::default_instance_;
  delete Duplicate_EnterAreaReq_reflection_;
  delete Duplicate_EnterAreaRsp::default_instance_;
  delete Duplicate_EnterAreaRsp_reflection_;
  delete LogicToCenter_CreateDuplicateReq::default_instance_;
  delete LogicToCenter_CreateDuplicateReq_reflection_;
  delete CenterToLogic_CreateDuplicateRsp::default_instance_;
  delete CenterToLogic_CreateDuplicateRsp_reflection_;
  delete LogicToCenter_EnterDuplicateRes::default_instance_;
  delete LogicToCenter_EnterDuplicateRes_reflection_;
  delete LogicToCenter_DuplicateEnd::default_instance_;
  delete LogicToCenter_DuplicateEnd_reflection_;
  delete LogicToCenter_DuplicateDestory::default_instance_;
  delete LogicToCenter_DuplicateDestory_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ProtoBuffer/Duplicate.proto\022\010ProtoBuf\032"
    "\035ProtoBuffer/ComProtocol.proto\032#ProtoBuf"
    "fer/ClientToServerCmd.proto\032\026Common/ComD"
    "efine.proto\"\023\n\021Duplicate_InfoReq\"L\n\021Dupl"
    "icate_InfoRsp\022\017\n\007retcode\030\001 \002(\005\022&\n\004info\030\002"
    " \003(\0132\030.ProtoBuf.DuplicateProto\"*\n\022Duplic"
    "ate_EnterReq\022\024\n\014duplicate_id\030\001 \002(\005\"I\n\022Du"
    "plicate_EnterRsp\022\017\n\007retcode\030\001 \002(\005\022\024\n\014dup"
    "licate_id\030\002 \001(\005\022\014\n\004area\030\003 \003(\005\"\023\n\021Duplica"
    "te_ExitReq\"$\n\021Duplicate_ExitRsp\022\017\n\007retco"
    "de\030\001 \002(\005\"\244\002\n\023Duplicate_ResultRsp\022\016\n\006resu"
    "lt\030\001 \002(\005\022\024\n\014duplicate_id\030\002 \002(\005\022\014\n\004star\030\003"
    " \001(\005\022\013\n\003sec\030\004 \001(\005\022\020\n\010kill_mon\030\005 \001(\005\022\021\n\td"
    "ie_count\030\006 \001(\005\022\013\n\003exp\030\007 \001(\005\022\014\n\004gold\030\010 \001("
    "\005\022\021\n\tbind_gold\030\t \001(\005\022\017\n\007diamond\030\n \001(\005\022\024\n"
    "\014bind_diamond\030\013 \001(\005\022)\n\006reward\030\014 \001(\0132\031.Pr"
    "otoBuf.RewardItemProto\022\'\n\004flop\030\r \001(\0132\031.P"
    "rotoBuf.RewardItemProto\"\030\n\026Duplicate_Aut"
    "oFightReq\"(\n\026Duplicate_AutoFightRsp\022\016\n\006r"
    "esult\030\001 \002(\005\"-\n\025Duplicate_BuyCountReq\022\024\n\014"
    "duplicate_id\030\001 \002(\005\"(\n\025Duplicate_BuyCount"
    "Rsp\022\017\n\007retcode\030\001 \002(\005\"\023\n\021Duplicate_FlopRe"
    "q\"3\n\021Duplicate_FlopRsp\022\017\n\007retcode\030\001 \002(\005\022"
    "\r\n\005index\030\002 \001(\005\">\n\022Duplicate_SweepReq\022\024\n\014"
    "duplicate_id\030\001 \002(\005\022\022\n\nsweep_type\030\002 \002(\005\"s"
    "\n\022Duplicate_SweepRsp\022\017\n\007retcode\030\001 \002(\005\022\022\n"
    "\nsweep_type\030\002 \001(\005\022)\n\006reward\030\003 \003(\0132\031.Prot"
    "oBuf.RewardItemProto\022\r\n\005reson\030\004 \001(\005\"=\n\023D"
    "uplicate_UpdateRsp\022&\n\004info\030\001 \003(\0132\030.Proto"
    "Buf.DuplicateProto\"#\n\023Duplicate_ReliveRe"
    "q\022\014\n\004type\030\001 \002(\005\"4\n\023Duplicate_ReliveRsp\022\017"
    "\n\007retcode\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\"\024\n\022Duplica"
    "te_LeaveReq\"%\n\022Duplicate_LeaveRsp\022\017\n\007ret"
    "code\030\001 \002(\005\")\n\026Duplicate_EnterAreaReq\022\017\n\007"
    "area_id\030\001 \002(\005\")\n\026Duplicate_EnterAreaRsp\022"
    "\017\n\007retcode\030\001 \002(\005\"I\n LogicToCenter_Create"
    "DuplicateReq\022\017\n\007char_id\030\001 \002(\r\022\024\n\014duplica"
    "te_id\030\002 \002(\r\"l\n CenterToLogic_CreateDupli"
    "cateRsp\022\017\n\007retcode\030\001 \002(\005\022\017\n\007char_id\030\002 \002("
    "\r\022\024\n\014duplicate_id\030\003 \002(\r\022\020\n\010scene_id\030\004 \001("
    "\r\"\223\001\n\037LogicToCenter_EnterDuplicateRes\022\017\n"
    "\007retcode\030\001 \002(\005\022\017\n\007char_id\030\002 \002(\r\022\024\n\014dupli"
    "cate_id\030\003 \002(\r\022\020\n\010scene_id\030\004 \002(\r\022\022\n\nstart"
    "_time\030\005 \001(\004\022\022\n\nlimit_time\030\006 \001(\r\".\n\032Logic"
    "ToCenter_DuplicateEnd\022\020\n\010scene_id\030\001 \002(\r\""
    "2\n\036LogicToCenter_DuplicateDestory\022\020\n\010sce"
    "ne_id\030\001 \002(\r", 1851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Duplicate.proto", &protobuf_RegisterTypes);
  Duplicate_InfoReq::default_instance_ = new Duplicate_InfoReq();
  Duplicate_InfoRsp::default_instance_ = new Duplicate_InfoRsp();
  Duplicate_EnterReq::default_instance_ = new Duplicate_EnterReq();
  Duplicate_EnterRsp::default_instance_ = new Duplicate_EnterRsp();
  Duplicate_ExitReq::default_instance_ = new Duplicate_ExitReq();
  Duplicate_ExitRsp::default_instance_ = new Duplicate_ExitRsp();
  Duplicate_ResultRsp::default_instance_ = new Duplicate_ResultRsp();
  Duplicate_AutoFightReq::default_instance_ = new Duplicate_AutoFightReq();
  Duplicate_AutoFightRsp::default_instance_ = new Duplicate_AutoFightRsp();
  Duplicate_BuyCountReq::default_instance_ = new Duplicate_BuyCountReq();
  Duplicate_BuyCountRsp::default_instance_ = new Duplicate_BuyCountRsp();
  Duplicate_FlopReq::default_instance_ = new Duplicate_FlopReq();
  Duplicate_FlopRsp::default_instance_ = new Duplicate_FlopRsp();
  Duplicate_SweepReq::default_instance_ = new Duplicate_SweepReq();
  Duplicate_SweepRsp::default_instance_ = new Duplicate_SweepRsp();
  Duplicate_UpdateRsp::default_instance_ = new Duplicate_UpdateRsp();
  Duplicate_ReliveReq::default_instance_ = new Duplicate_ReliveReq();
  Duplicate_ReliveRsp::default_instance_ = new Duplicate_ReliveRsp();
  Duplicate_LeaveReq::default_instance_ = new Duplicate_LeaveReq();
  Duplicate_LeaveRsp::default_instance_ = new Duplicate_LeaveRsp();
  Duplicate_EnterAreaReq::default_instance_ = new Duplicate_EnterAreaReq();
  Duplicate_EnterAreaRsp::default_instance_ = new Duplicate_EnterAreaRsp();
  LogicToCenter_CreateDuplicateReq::default_instance_ = new LogicToCenter_CreateDuplicateReq();
  CenterToLogic_CreateDuplicateRsp::default_instance_ = new CenterToLogic_CreateDuplicateRsp();
  LogicToCenter_EnterDuplicateRes::default_instance_ = new LogicToCenter_EnterDuplicateRes();
  LogicToCenter_DuplicateEnd::default_instance_ = new LogicToCenter_DuplicateEnd();
  LogicToCenter_DuplicateDestory::default_instance_ = new LogicToCenter_DuplicateDestory();
  Duplicate_InfoReq::default_instance_->InitAsDefaultInstance();
  Duplicate_InfoRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterReq::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_ExitReq::default_instance_->InitAsDefaultInstance();
  Duplicate_ExitRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_ResultRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_AutoFightReq::default_instance_->InitAsDefaultInstance();
  Duplicate_AutoFightRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_BuyCountReq::default_instance_->InitAsDefaultInstance();
  Duplicate_BuyCountRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_FlopReq::default_instance_->InitAsDefaultInstance();
  Duplicate_FlopRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_SweepReq::default_instance_->InitAsDefaultInstance();
  Duplicate_SweepRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_UpdateRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_ReliveReq::default_instance_->InitAsDefaultInstance();
  Duplicate_ReliveRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_LeaveReq::default_instance_->InitAsDefaultInstance();
  Duplicate_LeaveRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterAreaReq::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterAreaRsp::default_instance_->InitAsDefaultInstance();
  LogicToCenter_CreateDuplicateReq::default_instance_->InitAsDefaultInstance();
  CenterToLogic_CreateDuplicateRsp::default_instance_->InitAsDefaultInstance();
  LogicToCenter_EnterDuplicateRes::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicateEnd::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicateDestory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fDuplicate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fDuplicate_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fDuplicate_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fDuplicate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_InfoReq::Duplicate_InfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_InfoReq::InitAsDefaultInstance() {
}

Duplicate_InfoReq::Duplicate_InfoReq(const Duplicate_InfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_InfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_InfoReq::~Duplicate_InfoReq() {
  SharedDtor();
}

void Duplicate_InfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_InfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_InfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_InfoReq_descriptor_;
}

const Duplicate_InfoReq& Duplicate_InfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_InfoReq* Duplicate_InfoReq::default_instance_ = NULL;

Duplicate_InfoReq* Duplicate_InfoReq::New() const {
  return new Duplicate_InfoReq;
}

void Duplicate_InfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_InfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_InfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_InfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_InfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_InfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_InfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_InfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_InfoReq::MergeFrom(const Duplicate_InfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_InfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_InfoReq::CopyFrom(const Duplicate_InfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_InfoReq::IsInitialized() const {

  return true;
}

void Duplicate_InfoReq::Swap(Duplicate_InfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_InfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_InfoReq_descriptor_;
  metadata.reflection = Duplicate_InfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_InfoRsp::kRetcodeFieldNumber;
const int Duplicate_InfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Duplicate_InfoRsp::Duplicate_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_InfoRsp::InitAsDefaultInstance() {
}

Duplicate_InfoRsp::Duplicate_InfoRsp(const Duplicate_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_InfoRsp::~Duplicate_InfoRsp() {
  SharedDtor();
}

void Duplicate_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_InfoRsp_descriptor_;
}

const Duplicate_InfoRsp& Duplicate_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_InfoRsp* Duplicate_InfoRsp::default_instance_ = NULL;

Duplicate_InfoRsp* Duplicate_InfoRsp::New() const {
  return new Duplicate_InfoRsp;
}

void Duplicate_InfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.DuplicateProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .ProtoBuf.DuplicateProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .ProtoBuf.DuplicateProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  // repeated .ProtoBuf.DuplicateProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_InfoRsp::MergeFrom(const Duplicate_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_InfoRsp::CopyFrom(const Duplicate_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_InfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Duplicate_InfoRsp::Swap(Duplicate_InfoRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_InfoRsp_descriptor_;
  metadata.reflection = Duplicate_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterReq::kDuplicateIdFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterReq::Duplicate_EnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterReq::InitAsDefaultInstance() {
}

Duplicate_EnterReq::Duplicate_EnterReq(const Duplicate_EnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterReq::SharedCtor() {
  _cached_size_ = 0;
  duplicate_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterReq::~Duplicate_EnterReq() {
  SharedDtor();
}

void Duplicate_EnterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_EnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterReq_descriptor_;
}

const Duplicate_EnterReq& Duplicate_EnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterReq* Duplicate_EnterReq::default_instance_ = NULL;

Duplicate_EnterReq* Duplicate_EnterReq::New() const {
  return new Duplicate_EnterReq;
}

void Duplicate_EnterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicate_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 duplicate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duplicate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duplicate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 duplicate_id = 1;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterReq::MergeFrom(const Duplicate_EnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterReq::CopyFrom(const Duplicate_EnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_EnterReq::Swap(Duplicate_EnterReq* other) {
  if (other != this) {
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterReq_descriptor_;
  metadata.reflection = Duplicate_EnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterRsp::kRetcodeFieldNumber;
const int Duplicate_EnterRsp::kDuplicateIdFieldNumber;
const int Duplicate_EnterRsp::kAreaFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterRsp::Duplicate_EnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterRsp::InitAsDefaultInstance() {
}

Duplicate_EnterRsp::Duplicate_EnterRsp(const Duplicate_EnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  duplicate_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterRsp::~Duplicate_EnterRsp() {
  SharedDtor();
}

void Duplicate_EnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_EnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterRsp_descriptor_;
}

const Duplicate_EnterRsp& Duplicate_EnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterRsp* Duplicate_EnterRsp::default_instance_ = NULL;

Duplicate_EnterRsp* Duplicate_EnterRsp::New() const {
  return new Duplicate_EnterRsp;
}

void Duplicate_EnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    duplicate_id_ = 0;
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // optional int32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area;
        break;
      }

      // repeated int32 area = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_area())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_area())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duplicate_id(), output);
  }

  // repeated int32 area = 3;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duplicate_id(), target);
  }

  // repeated int32 area = 3;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

  }
  // repeated int32 area = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->area(i));
    }
    total_size += 1 * this->area_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterRsp::MergeFrom(const Duplicate_EnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterRsp::CopyFrom(const Duplicate_EnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_EnterRsp::Swap(Duplicate_EnterRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(duplicate_id_, other->duplicate_id_);
    area_.Swap(&other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterRsp_descriptor_;
  metadata.reflection = Duplicate_EnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_ExitReq::Duplicate_ExitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ExitReq::InitAsDefaultInstance() {
}

Duplicate_ExitReq::Duplicate_ExitReq(const Duplicate_ExitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ExitReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ExitReq::~Duplicate_ExitReq() {
  SharedDtor();
}

void Duplicate_ExitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_ExitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ExitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ExitReq_descriptor_;
}

const Duplicate_ExitReq& Duplicate_ExitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ExitReq* Duplicate_ExitReq::default_instance_ = NULL;

Duplicate_ExitReq* Duplicate_ExitReq::New() const {
  return new Duplicate_ExitReq;
}

void Duplicate_ExitReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ExitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_ExitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ExitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ExitReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ExitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ExitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ExitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ExitReq::MergeFrom(const Duplicate_ExitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ExitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ExitReq::CopyFrom(const Duplicate_ExitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ExitReq::IsInitialized() const {

  return true;
}

void Duplicate_ExitReq::Swap(Duplicate_ExitReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ExitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ExitReq_descriptor_;
  metadata.reflection = Duplicate_ExitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ExitRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_ExitRsp::Duplicate_ExitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ExitRsp::InitAsDefaultInstance() {
}

Duplicate_ExitRsp::Duplicate_ExitRsp(const Duplicate_ExitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ExitRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ExitRsp::~Duplicate_ExitRsp() {
  SharedDtor();
}

void Duplicate_ExitRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_ExitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ExitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ExitRsp_descriptor_;
}

const Duplicate_ExitRsp& Duplicate_ExitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ExitRsp* Duplicate_ExitRsp::default_instance_ = NULL;

Duplicate_ExitRsp* Duplicate_ExitRsp::New() const {
  return new Duplicate_ExitRsp;
}

void Duplicate_ExitRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ExitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ExitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ExitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ExitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ExitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ExitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ExitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ExitRsp::MergeFrom(const Duplicate_ExitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ExitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ExitRsp::CopyFrom(const Duplicate_ExitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ExitRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_ExitRsp::Swap(Duplicate_ExitRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ExitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ExitRsp_descriptor_;
  metadata.reflection = Duplicate_ExitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ResultRsp::kResultFieldNumber;
const int Duplicate_ResultRsp::kDuplicateIdFieldNumber;
const int Duplicate_ResultRsp::kStarFieldNumber;
const int Duplicate_ResultRsp::kSecFieldNumber;
const int Duplicate_ResultRsp::kKillMonFieldNumber;
const int Duplicate_ResultRsp::kDieCountFieldNumber;
const int Duplicate_ResultRsp::kExpFieldNumber;
const int Duplicate_ResultRsp::kGoldFieldNumber;
const int Duplicate_ResultRsp::kBindGoldFieldNumber;
const int Duplicate_ResultRsp::kDiamondFieldNumber;
const int Duplicate_ResultRsp::kBindDiamondFieldNumber;
const int Duplicate_ResultRsp::kRewardFieldNumber;
const int Duplicate_ResultRsp::kFlopFieldNumber;
#endif  // !_MSC_VER

Duplicate_ResultRsp::Duplicate_ResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ResultRsp::InitAsDefaultInstance() {
  reward_ = const_cast< ::ProtoBuf::RewardItemProto*>(&::ProtoBuf::RewardItemProto::default_instance());
  flop_ = const_cast< ::ProtoBuf::RewardItemProto*>(&::ProtoBuf::RewardItemProto::default_instance());
}

Duplicate_ResultRsp::Duplicate_ResultRsp(const Duplicate_ResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ResultRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  duplicate_id_ = 0;
  star_ = 0;
  sec_ = 0;
  kill_mon_ = 0;
  die_count_ = 0;
  exp_ = 0;
  gold_ = 0;
  bind_gold_ = 0;
  diamond_ = 0;
  bind_diamond_ = 0;
  reward_ = NULL;
  flop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ResultRsp::~Duplicate_ResultRsp() {
  SharedDtor();
}

void Duplicate_ResultRsp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
    delete flop_;
  }
}

void Duplicate_ResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ResultRsp_descriptor_;
}

const Duplicate_ResultRsp& Duplicate_ResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ResultRsp* Duplicate_ResultRsp::default_instance_ = NULL;

Duplicate_ResultRsp* Duplicate_ResultRsp::New() const {
  return new Duplicate_ResultRsp;
}

void Duplicate_ResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    duplicate_id_ = 0;
    star_ = 0;
    sec_ = 0;
    kill_mon_ = 0;
    die_count_ = 0;
    exp_ = 0;
    gold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bind_gold_ = 0;
    diamond_ = 0;
    bind_diamond_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoBuf::RewardItemProto::Clear();
    }
    if (has_flop()) {
      if (flop_ != NULL) flop_->::ProtoBuf::RewardItemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required int32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sec;
        break;
      }

      // optional int32 sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kill_mon;
        break;
      }

      // optional int32 kill_mon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_mon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_mon_)));
          set_has_kill_mon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_die_count;
        break;
      }

      // optional int32 die_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &die_count_)));
          set_has_die_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // optional int32 gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bind_gold;
        break;
      }

      // optional int32 bind_gold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_gold_)));
          set_has_bind_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bind_diamond;
        break;
      }

      // optional int32 bind_diamond = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_diamond_)));
          set_has_bind_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_reward;
        break;
      }

      // optional .ProtoBuf.RewardItemProto reward = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_flop;
        break;
      }

      // optional .ProtoBuf.RewardItemProto flop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duplicate_id(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 sec = 4;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sec(), output);
  }

  // optional int32 kill_mon = 5;
  if (has_kill_mon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->kill_mon(), output);
  }

  // optional int32 die_count = 6;
  if (has_die_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->die_count(), output);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }

  // optional int32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold(), output);
  }

  // optional int32 bind_gold = 9;
  if (has_bind_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bind_gold(), output);
  }

  // optional int32 diamond = 10;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->diamond(), output);
  }

  // optional int32 bind_diamond = 11;
  if (has_bind_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bind_diamond(), output);
  }

  // optional .ProtoBuf.RewardItemProto reward = 12;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reward(), output);
  }

  // optional .ProtoBuf.RewardItemProto flop = 13;
  if (has_flop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->flop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duplicate_id(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 sec = 4;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sec(), target);
  }

  // optional int32 kill_mon = 5;
  if (has_kill_mon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->kill_mon(), target);
  }

  // optional int32 die_count = 6;
  if (has_die_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->die_count(), target);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }

  // optional int32 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold(), target);
  }

  // optional int32 bind_gold = 9;
  if (has_bind_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bind_gold(), target);
  }

  // optional int32 diamond = 10;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->diamond(), target);
  }

  // optional int32 bind_diamond = 11;
  if (has_bind_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bind_diamond(), target);
  }

  // optional .ProtoBuf.RewardItemProto reward = 12;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reward(), target);
  }

  // optional .ProtoBuf.RewardItemProto flop = 13;
  if (has_flop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->flop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 sec = 4;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // optional int32 kill_mon = 5;
    if (has_kill_mon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_mon());
    }

    // optional int32 die_count = 6;
    if (has_die_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->die_count());
    }

    // optional int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bind_gold = 9;
    if (has_bind_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_gold());
    }

    // optional int32 diamond = 10;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 bind_diamond = 11;
    if (has_bind_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_diamond());
    }

    // optional .ProtoBuf.RewardItemProto reward = 12;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional .ProtoBuf.RewardItemProto flop = 13;
    if (has_flop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ResultRsp::MergeFrom(const Duplicate_ResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_kill_mon()) {
      set_kill_mon(from.kill_mon());
    }
    if (from.has_die_count()) {
      set_die_count(from.die_count());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bind_gold()) {
      set_bind_gold(from.bind_gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_bind_diamond()) {
      set_bind_diamond(from.bind_diamond());
    }
    if (from.has_reward()) {
      mutable_reward()->::ProtoBuf::RewardItemProto::MergeFrom(from.reward());
    }
    if (from.has_flop()) {
      mutable_flop()->::ProtoBuf::RewardItemProto::MergeFrom(from.flop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ResultRsp::CopyFrom(const Duplicate_ResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ResultRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_flop()) {
    if (!this->flop().IsInitialized()) return false;
  }
  return true;
}

void Duplicate_ResultRsp::Swap(Duplicate_ResultRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(star_, other->star_);
    std::swap(sec_, other->sec_);
    std::swap(kill_mon_, other->kill_mon_);
    std::swap(die_count_, other->die_count_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(bind_gold_, other->bind_gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(bind_diamond_, other->bind_diamond_);
    std::swap(reward_, other->reward_);
    std::swap(flop_, other->flop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ResultRsp_descriptor_;
  metadata.reflection = Duplicate_ResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_AutoFightReq::Duplicate_AutoFightReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_AutoFightReq::InitAsDefaultInstance() {
}

Duplicate_AutoFightReq::Duplicate_AutoFightReq(const Duplicate_AutoFightReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_AutoFightReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_AutoFightReq::~Duplicate_AutoFightReq() {
  SharedDtor();
}

void Duplicate_AutoFightReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_AutoFightReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_AutoFightReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_AutoFightReq_descriptor_;
}

const Duplicate_AutoFightReq& Duplicate_AutoFightReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_AutoFightReq* Duplicate_AutoFightReq::default_instance_ = NULL;

Duplicate_AutoFightReq* Duplicate_AutoFightReq::New() const {
  return new Duplicate_AutoFightReq;
}

void Duplicate_AutoFightReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_AutoFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_AutoFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_AutoFightReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_AutoFightReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_AutoFightReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_AutoFightReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_AutoFightReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_AutoFightReq::MergeFrom(const Duplicate_AutoFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_AutoFightReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_AutoFightReq::CopyFrom(const Duplicate_AutoFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_AutoFightReq::IsInitialized() const {

  return true;
}

void Duplicate_AutoFightReq::Swap(Duplicate_AutoFightReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_AutoFightReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_AutoFightReq_descriptor_;
  metadata.reflection = Duplicate_AutoFightReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_AutoFightRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Duplicate_AutoFightRsp::Duplicate_AutoFightRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_AutoFightRsp::InitAsDefaultInstance() {
}

Duplicate_AutoFightRsp::Duplicate_AutoFightRsp(const Duplicate_AutoFightRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_AutoFightRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_AutoFightRsp::~Duplicate_AutoFightRsp() {
  SharedDtor();
}

void Duplicate_AutoFightRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_AutoFightRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_AutoFightRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_AutoFightRsp_descriptor_;
}

const Duplicate_AutoFightRsp& Duplicate_AutoFightRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_AutoFightRsp* Duplicate_AutoFightRsp::default_instance_ = NULL;

Duplicate_AutoFightRsp* Duplicate_AutoFightRsp::New() const {
  return new Duplicate_AutoFightRsp;
}

void Duplicate_AutoFightRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_AutoFightRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_AutoFightRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_AutoFightRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_AutoFightRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_AutoFightRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_AutoFightRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_AutoFightRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_AutoFightRsp::MergeFrom(const Duplicate_AutoFightRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_AutoFightRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_AutoFightRsp::CopyFrom(const Duplicate_AutoFightRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_AutoFightRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_AutoFightRsp::Swap(Duplicate_AutoFightRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_AutoFightRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_AutoFightRsp_descriptor_;
  metadata.reflection = Duplicate_AutoFightRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_BuyCountReq::kDuplicateIdFieldNumber;
#endif  // !_MSC_VER

Duplicate_BuyCountReq::Duplicate_BuyCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_BuyCountReq::InitAsDefaultInstance() {
}

Duplicate_BuyCountReq::Duplicate_BuyCountReq(const Duplicate_BuyCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_BuyCountReq::SharedCtor() {
  _cached_size_ = 0;
  duplicate_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_BuyCountReq::~Duplicate_BuyCountReq() {
  SharedDtor();
}

void Duplicate_BuyCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_BuyCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_BuyCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_BuyCountReq_descriptor_;
}

const Duplicate_BuyCountReq& Duplicate_BuyCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_BuyCountReq* Duplicate_BuyCountReq::default_instance_ = NULL;

Duplicate_BuyCountReq* Duplicate_BuyCountReq::New() const {
  return new Duplicate_BuyCountReq;
}

void Duplicate_BuyCountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicate_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_BuyCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 duplicate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_BuyCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duplicate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_BuyCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duplicate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_BuyCountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 duplicate_id = 1;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_BuyCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_BuyCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_BuyCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_BuyCountReq::MergeFrom(const Duplicate_BuyCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_BuyCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_BuyCountReq::CopyFrom(const Duplicate_BuyCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_BuyCountReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_BuyCountReq::Swap(Duplicate_BuyCountReq* other) {
  if (other != this) {
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_BuyCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_BuyCountReq_descriptor_;
  metadata.reflection = Duplicate_BuyCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_BuyCountRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_BuyCountRsp::Duplicate_BuyCountRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_BuyCountRsp::InitAsDefaultInstance() {
}

Duplicate_BuyCountRsp::Duplicate_BuyCountRsp(const Duplicate_BuyCountRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_BuyCountRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_BuyCountRsp::~Duplicate_BuyCountRsp() {
  SharedDtor();
}

void Duplicate_BuyCountRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_BuyCountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_BuyCountRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_BuyCountRsp_descriptor_;
}

const Duplicate_BuyCountRsp& Duplicate_BuyCountRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_BuyCountRsp* Duplicate_BuyCountRsp::default_instance_ = NULL;

Duplicate_BuyCountRsp* Duplicate_BuyCountRsp::New() const {
  return new Duplicate_BuyCountRsp;
}

void Duplicate_BuyCountRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_BuyCountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_BuyCountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_BuyCountRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_BuyCountRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_BuyCountRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_BuyCountRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_BuyCountRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_BuyCountRsp::MergeFrom(const Duplicate_BuyCountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_BuyCountRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_BuyCountRsp::CopyFrom(const Duplicate_BuyCountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_BuyCountRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_BuyCountRsp::Swap(Duplicate_BuyCountRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_BuyCountRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_BuyCountRsp_descriptor_;
  metadata.reflection = Duplicate_BuyCountRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_FlopReq::Duplicate_FlopReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_FlopReq::InitAsDefaultInstance() {
}

Duplicate_FlopReq::Duplicate_FlopReq(const Duplicate_FlopReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_FlopReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_FlopReq::~Duplicate_FlopReq() {
  SharedDtor();
}

void Duplicate_FlopReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_FlopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_FlopReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_FlopReq_descriptor_;
}

const Duplicate_FlopReq& Duplicate_FlopReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_FlopReq* Duplicate_FlopReq::default_instance_ = NULL;

Duplicate_FlopReq* Duplicate_FlopReq::New() const {
  return new Duplicate_FlopReq;
}

void Duplicate_FlopReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_FlopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_FlopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_FlopReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_FlopReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_FlopReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_FlopReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_FlopReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_FlopReq::MergeFrom(const Duplicate_FlopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_FlopReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_FlopReq::CopyFrom(const Duplicate_FlopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_FlopReq::IsInitialized() const {

  return true;
}

void Duplicate_FlopReq::Swap(Duplicate_FlopReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_FlopReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_FlopReq_descriptor_;
  metadata.reflection = Duplicate_FlopReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_FlopRsp::kRetcodeFieldNumber;
const int Duplicate_FlopRsp::kIndexFieldNumber;
#endif  // !_MSC_VER

Duplicate_FlopRsp::Duplicate_FlopRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_FlopRsp::InitAsDefaultInstance() {
}

Duplicate_FlopRsp::Duplicate_FlopRsp(const Duplicate_FlopRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_FlopRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_FlopRsp::~Duplicate_FlopRsp() {
  SharedDtor();
}

void Duplicate_FlopRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_FlopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_FlopRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_FlopRsp_descriptor_;
}

const Duplicate_FlopRsp& Duplicate_FlopRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_FlopRsp* Duplicate_FlopRsp::default_instance_ = NULL;

Duplicate_FlopRsp* Duplicate_FlopRsp::New() const {
  return new Duplicate_FlopRsp;
}

void Duplicate_FlopRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_FlopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_FlopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_FlopRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_FlopRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_FlopRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_FlopRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_FlopRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_FlopRsp::MergeFrom(const Duplicate_FlopRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_FlopRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_FlopRsp::CopyFrom(const Duplicate_FlopRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_FlopRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_FlopRsp::Swap(Duplicate_FlopRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_FlopRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_FlopRsp_descriptor_;
  metadata.reflection = Duplicate_FlopRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_SweepReq::kDuplicateIdFieldNumber;
const int Duplicate_SweepReq::kSweepTypeFieldNumber;
#endif  // !_MSC_VER

Duplicate_SweepReq::Duplicate_SweepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_SweepReq::InitAsDefaultInstance() {
}

Duplicate_SweepReq::Duplicate_SweepReq(const Duplicate_SweepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_SweepReq::SharedCtor() {
  _cached_size_ = 0;
  duplicate_id_ = 0;
  sweep_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_SweepReq::~Duplicate_SweepReq() {
  SharedDtor();
}

void Duplicate_SweepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_SweepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_SweepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_SweepReq_descriptor_;
}

const Duplicate_SweepReq& Duplicate_SweepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_SweepReq* Duplicate_SweepReq::default_instance_ = NULL;

Duplicate_SweepReq* Duplicate_SweepReq::New() const {
  return new Duplicate_SweepReq;
}

void Duplicate_SweepReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicate_id_ = 0;
    sweep_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_SweepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 duplicate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sweep_type;
        break;
      }

      // required int32 sweep_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweep_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweep_type_)));
          set_has_sweep_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_SweepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duplicate_id(), output);
  }

  // required int32 sweep_type = 2;
  if (has_sweep_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sweep_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_SweepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duplicate_id(), target);
  }

  // required int32 sweep_type = 2;
  if (has_sweep_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sweep_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_SweepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 duplicate_id = 1;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

    // required int32 sweep_type = 2;
    if (has_sweep_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweep_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_SweepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_SweepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_SweepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_SweepReq::MergeFrom(const Duplicate_SweepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_sweep_type()) {
      set_sweep_type(from.sweep_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_SweepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_SweepReq::CopyFrom(const Duplicate_SweepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_SweepReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Duplicate_SweepReq::Swap(Duplicate_SweepReq* other) {
  if (other != this) {
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(sweep_type_, other->sweep_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_SweepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_SweepReq_descriptor_;
  metadata.reflection = Duplicate_SweepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_SweepRsp::kRetcodeFieldNumber;
const int Duplicate_SweepRsp::kSweepTypeFieldNumber;
const int Duplicate_SweepRsp::kRewardFieldNumber;
const int Duplicate_SweepRsp::kResonFieldNumber;
#endif  // !_MSC_VER

Duplicate_SweepRsp::Duplicate_SweepRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_SweepRsp::InitAsDefaultInstance() {
}

Duplicate_SweepRsp::Duplicate_SweepRsp(const Duplicate_SweepRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_SweepRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  sweep_type_ = 0;
  reson_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_SweepRsp::~Duplicate_SweepRsp() {
  SharedDtor();
}

void Duplicate_SweepRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_SweepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_SweepRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_SweepRsp_descriptor_;
}

const Duplicate_SweepRsp& Duplicate_SweepRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_SweepRsp* Duplicate_SweepRsp::default_instance_ = NULL;

Duplicate_SweepRsp* Duplicate_SweepRsp::New() const {
  return new Duplicate_SweepRsp;
}

void Duplicate_SweepRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    sweep_type_ = 0;
    reson_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_SweepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sweep_type;
        break;
      }

      // optional int32 sweep_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweep_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweep_type_)));
          set_has_sweep_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .ProtoBuf.RewardItemProto reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectTag(32)) goto parse_reson;
        break;
      }

      // optional int32 reson = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reson_)));
          set_has_reson();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_SweepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 sweep_type = 2;
  if (has_sweep_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sweep_type(), output);
  }

  // repeated .ProtoBuf.RewardItemProto reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  // optional int32 reson = 4;
  if (has_reson()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_SweepRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 sweep_type = 2;
  if (has_sweep_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sweep_type(), target);
  }

  // repeated .ProtoBuf.RewardItemProto reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  // optional int32 reson = 4;
  if (has_reson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_SweepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 sweep_type = 2;
    if (has_sweep_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweep_type());
    }

    // optional int32 reson = 4;
    if (has_reson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reson());
    }

  }
  // repeated .ProtoBuf.RewardItemProto reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_SweepRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_SweepRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_SweepRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_SweepRsp::MergeFrom(const Duplicate_SweepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_sweep_type()) {
      set_sweep_type(from.sweep_type());
    }
    if (from.has_reson()) {
      set_reson(from.reson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_SweepRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_SweepRsp::CopyFrom(const Duplicate_SweepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_SweepRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < reward_size(); i++) {
    if (!this->reward(i).IsInitialized()) return false;
  }
  return true;
}

void Duplicate_SweepRsp::Swap(Duplicate_SweepRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(sweep_type_, other->sweep_type_);
    reward_.Swap(&other->reward_);
    std::swap(reson_, other->reson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_SweepRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_SweepRsp_descriptor_;
  metadata.reflection = Duplicate_SweepRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_UpdateRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Duplicate_UpdateRsp::Duplicate_UpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_UpdateRsp::InitAsDefaultInstance() {
}

Duplicate_UpdateRsp::Duplicate_UpdateRsp(const Duplicate_UpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_UpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_UpdateRsp::~Duplicate_UpdateRsp() {
  SharedDtor();
}

void Duplicate_UpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_UpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_UpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_UpdateRsp_descriptor_;
}

const Duplicate_UpdateRsp& Duplicate_UpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_UpdateRsp* Duplicate_UpdateRsp::default_instance_ = NULL;

Duplicate_UpdateRsp* Duplicate_UpdateRsp::New() const {
  return new Duplicate_UpdateRsp;
}

void Duplicate_UpdateRsp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_UpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.DuplicateProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_UpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.DuplicateProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_UpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.DuplicateProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_UpdateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.DuplicateProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_UpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_UpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_UpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_UpdateRsp::MergeFrom(const Duplicate_UpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_UpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_UpdateRsp::CopyFrom(const Duplicate_UpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_UpdateRsp::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void Duplicate_UpdateRsp::Swap(Duplicate_UpdateRsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_UpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_UpdateRsp_descriptor_;
  metadata.reflection = Duplicate_UpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ReliveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Duplicate_ReliveReq::Duplicate_ReliveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ReliveReq::InitAsDefaultInstance() {
}

Duplicate_ReliveReq::Duplicate_ReliveReq(const Duplicate_ReliveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ReliveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ReliveReq::~Duplicate_ReliveReq() {
  SharedDtor();
}

void Duplicate_ReliveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_ReliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ReliveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ReliveReq_descriptor_;
}

const Duplicate_ReliveReq& Duplicate_ReliveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ReliveReq* Duplicate_ReliveReq::default_instance_ = NULL;

Duplicate_ReliveReq* Duplicate_ReliveReq::New() const {
  return new Duplicate_ReliveReq;
}

void Duplicate_ReliveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ReliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ReliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ReliveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ReliveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ReliveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ReliveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ReliveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ReliveReq::MergeFrom(const Duplicate_ReliveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ReliveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ReliveReq::CopyFrom(const Duplicate_ReliveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ReliveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_ReliveReq::Swap(Duplicate_ReliveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ReliveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ReliveReq_descriptor_;
  metadata.reflection = Duplicate_ReliveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ReliveRsp::kRetcodeFieldNumber;
const int Duplicate_ReliveRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

Duplicate_ReliveRsp::Duplicate_ReliveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ReliveRsp::InitAsDefaultInstance() {
}

Duplicate_ReliveRsp::Duplicate_ReliveRsp(const Duplicate_ReliveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ReliveRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ReliveRsp::~Duplicate_ReliveRsp() {
  SharedDtor();
}

void Duplicate_ReliveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_ReliveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ReliveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ReliveRsp_descriptor_;
}

const Duplicate_ReliveRsp& Duplicate_ReliveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ReliveRsp* Duplicate_ReliveRsp::default_instance_ = NULL;

Duplicate_ReliveRsp* Duplicate_ReliveRsp::New() const {
  return new Duplicate_ReliveRsp;
}

void Duplicate_ReliveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ReliveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ReliveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ReliveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ReliveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ReliveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ReliveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ReliveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ReliveRsp::MergeFrom(const Duplicate_ReliveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ReliveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ReliveRsp::CopyFrom(const Duplicate_ReliveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ReliveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_ReliveRsp::Swap(Duplicate_ReliveRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ReliveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ReliveRsp_descriptor_;
  metadata.reflection = Duplicate_ReliveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_LeaveReq::Duplicate_LeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_LeaveReq::InitAsDefaultInstance() {
}

Duplicate_LeaveReq::Duplicate_LeaveReq(const Duplicate_LeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_LeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_LeaveReq::~Duplicate_LeaveReq() {
  SharedDtor();
}

void Duplicate_LeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_LeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_LeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_LeaveReq_descriptor_;
}

const Duplicate_LeaveReq& Duplicate_LeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_LeaveReq* Duplicate_LeaveReq::default_instance_ = NULL;

Duplicate_LeaveReq* Duplicate_LeaveReq::New() const {
  return new Duplicate_LeaveReq;
}

void Duplicate_LeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_LeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_LeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_LeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_LeaveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_LeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_LeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_LeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_LeaveReq::MergeFrom(const Duplicate_LeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_LeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_LeaveReq::CopyFrom(const Duplicate_LeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_LeaveReq::IsInitialized() const {

  return true;
}

void Duplicate_LeaveReq::Swap(Duplicate_LeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_LeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_LeaveReq_descriptor_;
  metadata.reflection = Duplicate_LeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_LeaveRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_LeaveRsp::Duplicate_LeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_LeaveRsp::InitAsDefaultInstance() {
}

Duplicate_LeaveRsp::Duplicate_LeaveRsp(const Duplicate_LeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_LeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_LeaveRsp::~Duplicate_LeaveRsp() {
  SharedDtor();
}

void Duplicate_LeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_LeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_LeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_LeaveRsp_descriptor_;
}

const Duplicate_LeaveRsp& Duplicate_LeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_LeaveRsp* Duplicate_LeaveRsp::default_instance_ = NULL;

Duplicate_LeaveRsp* Duplicate_LeaveRsp::New() const {
  return new Duplicate_LeaveRsp;
}

void Duplicate_LeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_LeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_LeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_LeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_LeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_LeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_LeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_LeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_LeaveRsp::MergeFrom(const Duplicate_LeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_LeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_LeaveRsp::CopyFrom(const Duplicate_LeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_LeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_LeaveRsp::Swap(Duplicate_LeaveRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_LeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_LeaveRsp_descriptor_;
  metadata.reflection = Duplicate_LeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterAreaReq::kAreaIdFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterAreaReq::Duplicate_EnterAreaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterAreaReq::InitAsDefaultInstance() {
}

Duplicate_EnterAreaReq::Duplicate_EnterAreaReq(const Duplicate_EnterAreaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterAreaReq::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterAreaReq::~Duplicate_EnterAreaReq() {
  SharedDtor();
}

void Duplicate_EnterAreaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_EnterAreaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterAreaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterAreaReq_descriptor_;
}

const Duplicate_EnterAreaReq& Duplicate_EnterAreaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterAreaReq* Duplicate_EnterAreaReq::default_instance_ = NULL;

Duplicate_EnterAreaReq* Duplicate_EnterAreaReq::New() const {
  return new Duplicate_EnterAreaReq;
}

void Duplicate_EnterAreaReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterAreaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterAreaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterAreaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterAreaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterAreaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterAreaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterAreaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterAreaReq::MergeFrom(const Duplicate_EnterAreaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterAreaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterAreaReq::CopyFrom(const Duplicate_EnterAreaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterAreaReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_EnterAreaReq::Swap(Duplicate_EnterAreaReq* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterAreaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterAreaReq_descriptor_;
  metadata.reflection = Duplicate_EnterAreaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterAreaRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterAreaRsp::Duplicate_EnterAreaRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterAreaRsp::InitAsDefaultInstance() {
}

Duplicate_EnterAreaRsp::Duplicate_EnterAreaRsp(const Duplicate_EnterAreaRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterAreaRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterAreaRsp::~Duplicate_EnterAreaRsp() {
  SharedDtor();
}

void Duplicate_EnterAreaRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_EnterAreaRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterAreaRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterAreaRsp_descriptor_;
}

const Duplicate_EnterAreaRsp& Duplicate_EnterAreaRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterAreaRsp* Duplicate_EnterAreaRsp::default_instance_ = NULL;

Duplicate_EnterAreaRsp* Duplicate_EnterAreaRsp::New() const {
  return new Duplicate_EnterAreaRsp;
}

void Duplicate_EnterAreaRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterAreaRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterAreaRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterAreaRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterAreaRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterAreaRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterAreaRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterAreaRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterAreaRsp::MergeFrom(const Duplicate_EnterAreaRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterAreaRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterAreaRsp::CopyFrom(const Duplicate_EnterAreaRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterAreaRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_EnterAreaRsp::Swap(Duplicate_EnterAreaRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterAreaRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterAreaRsp_descriptor_;
  metadata.reflection = Duplicate_EnterAreaRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_CreateDuplicateReq::kCharIdFieldNumber;
const int LogicToCenter_CreateDuplicateReq::kDuplicateIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_CreateDuplicateReq::LogicToCenter_CreateDuplicateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_CreateDuplicateReq::InitAsDefaultInstance() {
}

LogicToCenter_CreateDuplicateReq::LogicToCenter_CreateDuplicateReq(const LogicToCenter_CreateDuplicateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_CreateDuplicateReq::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_CreateDuplicateReq::~LogicToCenter_CreateDuplicateReq() {
  SharedDtor();
}

void LogicToCenter_CreateDuplicateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_CreateDuplicateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_CreateDuplicateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_CreateDuplicateReq_descriptor_;
}

const LogicToCenter_CreateDuplicateReq& LogicToCenter_CreateDuplicateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_CreateDuplicateReq* LogicToCenter_CreateDuplicateReq::default_instance_ = NULL;

LogicToCenter_CreateDuplicateReq* LogicToCenter_CreateDuplicateReq::New() const {
  return new LogicToCenter_CreateDuplicateReq;
}

void LogicToCenter_CreateDuplicateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    duplicate_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_CreateDuplicateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_CreateDuplicateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duplicate_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_CreateDuplicateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duplicate_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_CreateDuplicateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_CreateDuplicateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_CreateDuplicateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_CreateDuplicateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_CreateDuplicateReq::MergeFrom(const LogicToCenter_CreateDuplicateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_CreateDuplicateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_CreateDuplicateReq::CopyFrom(const LogicToCenter_CreateDuplicateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_CreateDuplicateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicToCenter_CreateDuplicateReq::Swap(LogicToCenter_CreateDuplicateReq* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_CreateDuplicateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_CreateDuplicateReq_descriptor_;
  metadata.reflection = LogicToCenter_CreateDuplicateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogic_CreateDuplicateRsp::kRetcodeFieldNumber;
const int CenterToLogic_CreateDuplicateRsp::kCharIdFieldNumber;
const int CenterToLogic_CreateDuplicateRsp::kDuplicateIdFieldNumber;
const int CenterToLogic_CreateDuplicateRsp::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CenterToLogic_CreateDuplicateRsp::CenterToLogic_CreateDuplicateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogic_CreateDuplicateRsp::InitAsDefaultInstance() {
}

CenterToLogic_CreateDuplicateRsp::CenterToLogic_CreateDuplicateRsp(const CenterToLogic_CreateDuplicateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogic_CreateDuplicateRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogic_CreateDuplicateRsp::~CenterToLogic_CreateDuplicateRsp() {
  SharedDtor();
}

void CenterToLogic_CreateDuplicateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogic_CreateDuplicateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogic_CreateDuplicateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogic_CreateDuplicateRsp_descriptor_;
}

const CenterToLogic_CreateDuplicateRsp& CenterToLogic_CreateDuplicateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

CenterToLogic_CreateDuplicateRsp* CenterToLogic_CreateDuplicateRsp::default_instance_ = NULL;

CenterToLogic_CreateDuplicateRsp* CenterToLogic_CreateDuplicateRsp::New() const {
  return new CenterToLogic_CreateDuplicateRsp;
}

void CenterToLogic_CreateDuplicateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    char_id_ = 0u;
    duplicate_id_ = 0u;
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogic_CreateDuplicateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_id;
        break;
      }

      // required uint32 char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogic_CreateDuplicateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_id(), output);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duplicate_id(), output);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogic_CreateDuplicateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_id(), target);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duplicate_id(), target);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogic_CreateDuplicateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 char_id = 2;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 3;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // optional uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogic_CreateDuplicateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogic_CreateDuplicateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogic_CreateDuplicateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogic_CreateDuplicateRsp::MergeFrom(const CenterToLogic_CreateDuplicateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogic_CreateDuplicateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogic_CreateDuplicateRsp::CopyFrom(const CenterToLogic_CreateDuplicateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogic_CreateDuplicateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CenterToLogic_CreateDuplicateRsp::Swap(CenterToLogic_CreateDuplicateRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogic_CreateDuplicateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogic_CreateDuplicateRsp_descriptor_;
  metadata.reflection = CenterToLogic_CreateDuplicateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_EnterDuplicateRes::kRetcodeFieldNumber;
const int LogicToCenter_EnterDuplicateRes::kCharIdFieldNumber;
const int LogicToCenter_EnterDuplicateRes::kDuplicateIdFieldNumber;
const int LogicToCenter_EnterDuplicateRes::kSceneIdFieldNumber;
const int LogicToCenter_EnterDuplicateRes::kStartTimeFieldNumber;
const int LogicToCenter_EnterDuplicateRes::kLimitTimeFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_EnterDuplicateRes::LogicToCenter_EnterDuplicateRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_EnterDuplicateRes::InitAsDefaultInstance() {
}

LogicToCenter_EnterDuplicateRes::LogicToCenter_EnterDuplicateRes(const LogicToCenter_EnterDuplicateRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_EnterDuplicateRes::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  scene_id_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  limit_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_EnterDuplicateRes::~LogicToCenter_EnterDuplicateRes() {
  SharedDtor();
}

void LogicToCenter_EnterDuplicateRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_EnterDuplicateRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_EnterDuplicateRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_EnterDuplicateRes_descriptor_;
}

const LogicToCenter_EnterDuplicateRes& LogicToCenter_EnterDuplicateRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_EnterDuplicateRes* LogicToCenter_EnterDuplicateRes::default_instance_ = NULL;

LogicToCenter_EnterDuplicateRes* LogicToCenter_EnterDuplicateRes::New() const {
  return new LogicToCenter_EnterDuplicateRes;
}

void LogicToCenter_EnterDuplicateRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    char_id_ = 0u;
    duplicate_id_ = 0u;
    scene_id_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
    limit_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_EnterDuplicateRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_id;
        break;
      }

      // required uint32 char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_limit_time;
        break;
      }

      // optional uint32 limit_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_time_)));
          set_has_limit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_EnterDuplicateRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_id(), output);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duplicate_id(), output);
  }

  // required uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // optional uint64 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->start_time(), output);
  }

  // optional uint32 limit_time = 6;
  if (has_limit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->limit_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_EnterDuplicateRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_id(), target);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duplicate_id(), target);
  }

  // required uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // optional uint64 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->start_time(), target);
  }

  // optional uint32 limit_time = 6;
  if (has_limit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->limit_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_EnterDuplicateRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 char_id = 2;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 3;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint64 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint32 limit_time = 6;
    if (has_limit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_EnterDuplicateRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_EnterDuplicateRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_EnterDuplicateRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_EnterDuplicateRes::MergeFrom(const LogicToCenter_EnterDuplicateRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_limit_time()) {
      set_limit_time(from.limit_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_EnterDuplicateRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_EnterDuplicateRes::CopyFrom(const LogicToCenter_EnterDuplicateRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_EnterDuplicateRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogicToCenter_EnterDuplicateRes::Swap(LogicToCenter_EnterDuplicateRes* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(limit_time_, other->limit_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_EnterDuplicateRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_EnterDuplicateRes_descriptor_;
  metadata.reflection = LogicToCenter_EnterDuplicateRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicateEnd::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicateEnd::LogicToCenter_DuplicateEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicateEnd::InitAsDefaultInstance() {
}

LogicToCenter_DuplicateEnd::LogicToCenter_DuplicateEnd(const LogicToCenter_DuplicateEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicateEnd::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicateEnd::~LogicToCenter_DuplicateEnd() {
  SharedDtor();
}

void LogicToCenter_DuplicateEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicateEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicateEnd_descriptor_;
}

const LogicToCenter_DuplicateEnd& LogicToCenter_DuplicateEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicateEnd* LogicToCenter_DuplicateEnd::default_instance_ = NULL;

LogicToCenter_DuplicateEnd* LogicToCenter_DuplicateEnd::New() const {
  return new LogicToCenter_DuplicateEnd;
}

void LogicToCenter_DuplicateEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicateEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicateEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicateEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicateEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicateEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicateEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicateEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicateEnd::MergeFrom(const LogicToCenter_DuplicateEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicateEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicateEnd::CopyFrom(const LogicToCenter_DuplicateEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicateEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogicToCenter_DuplicateEnd::Swap(LogicToCenter_DuplicateEnd* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicateEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicateEnd_descriptor_;
  metadata.reflection = LogicToCenter_DuplicateEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicateDestory::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicateDestory::LogicToCenter_DuplicateDestory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicateDestory::InitAsDefaultInstance() {
}

LogicToCenter_DuplicateDestory::LogicToCenter_DuplicateDestory(const LogicToCenter_DuplicateDestory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicateDestory::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicateDestory::~LogicToCenter_DuplicateDestory() {
  SharedDtor();
}

void LogicToCenter_DuplicateDestory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicateDestory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateDestory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicateDestory_descriptor_;
}

const LogicToCenter_DuplicateDestory& LogicToCenter_DuplicateDestory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicateDestory* LogicToCenter_DuplicateDestory::default_instance_ = NULL;

LogicToCenter_DuplicateDestory* LogicToCenter_DuplicateDestory::New() const {
  return new LogicToCenter_DuplicateDestory;
}

void LogicToCenter_DuplicateDestory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicateDestory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicateDestory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicateDestory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicateDestory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicateDestory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicateDestory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicateDestory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicateDestory::MergeFrom(const LogicToCenter_DuplicateDestory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicateDestory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicateDestory::CopyFrom(const LogicToCenter_DuplicateDestory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicateDestory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogicToCenter_DuplicateDestory::Swap(LogicToCenter_DuplicateDestory* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicateDestory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicateDestory_descriptor_;
  metadata.reflection = LogicToCenter_DuplicateDestory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
