// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Duplicate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Duplicate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* DupMonsStateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupMonsStateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupFightDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupFightDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_InfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_InfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_AutoFightReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_AutoFightReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_AutoFightRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_AutoFightRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_FlopReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_FlopReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_FlopRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_FlopRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_UpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_UpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ReliveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ReliveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ReliveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ReliveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_LeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_LeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_LeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_LeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterAreaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterAreaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_EnterAreaRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_EnterAreaRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_BuyCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_BuyCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_BuyCountRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_BuyCountRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_AutoChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_AutoChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_AutoChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_AutoChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_FightDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_FightDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_MonsWaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_MonsWaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_MonsNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_MonsNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_MonsStateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_MonsStateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_ReliveNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_ReliveNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_TowerHpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_TowerHpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_TransMonsNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_TransMonsNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupBeforAreaProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupBeforAreaProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_EnterDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_EnterDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogic_EnterDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogic_EnterDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_CreateSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_CreateSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogic_CreateSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogic_CreateSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_CreateDuplicateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_CreateDuplicateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogic_DuplicateNotifyPrepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogic_DuplicateNotifyPrepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicatePrepareRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicatePrepareRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogic_DuplicateEnterNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogic_DuplicateEnterNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicateEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicateLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicateBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicateEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateDestory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_DuplicateDestory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fDuplicate_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Duplicate.proto");
  GOOGLE_CHECK(file != NULL);
  DupMonsStateProto_descriptor_ = file->message_type(0);
  static const int DupMonsStateProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupMonsStateProto, mons_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupMonsStateProto, state_),
  };
  DupMonsStateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupMonsStateProto_descriptor_,
      DupMonsStateProto::default_instance_,
      DupMonsStateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupMonsStateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupMonsStateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupMonsStateProto));
  DupFightDataProto_descriptor_ = file->message_type(1);
  static const int DupFightDataProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupFightDataProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupFightDataProto, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupFightDataProto, be_atk_),
  };
  DupFightDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupFightDataProto_descriptor_,
      DupFightDataProto::default_instance_,
      DupFightDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupFightDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupFightDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupFightDataProto));
  Duplicate_InfoReq_descriptor_ = file->message_type(2);
  static const int Duplicate_InfoReq_offsets_[1] = {
  };
  Duplicate_InfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_InfoReq_descriptor_,
      Duplicate_InfoReq::default_instance_,
      Duplicate_InfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_InfoReq));
  Duplicate_InfoRsp_descriptor_ = file->message_type(3);
  static const int Duplicate_InfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, open_list_),
  };
  Duplicate_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_InfoRsp_descriptor_,
      Duplicate_InfoRsp::default_instance_,
      Duplicate_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_InfoRsp));
  Duplicate_EnterReq_descriptor_ = file->message_type(4);
  static const int Duplicate_EnterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, cur_pos_),
  };
  Duplicate_EnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterReq_descriptor_,
      Duplicate_EnterReq::default_instance_,
      Duplicate_EnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterReq));
  Duplicate_EnterRsp_descriptor_ = file->message_type(5);
  static const int Duplicate_EnterRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, mons_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, dup_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, tower_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, trans_num_),
  };
  Duplicate_EnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterRsp_descriptor_,
      Duplicate_EnterRsp::default_instance_,
      Duplicate_EnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterRsp));
  Duplicate_ResultRsp_descriptor_ = file->message_type(6);
  static const int Duplicate_ResultRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, flop_),
  };
  Duplicate_ResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ResultRsp_descriptor_,
      Duplicate_ResultRsp::default_instance_,
      Duplicate_ResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ResultRsp));
  Duplicate_AutoFightReq_descriptor_ = file->message_type(7);
  static const int Duplicate_AutoFightReq_offsets_[1] = {
  };
  Duplicate_AutoFightReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_AutoFightReq_descriptor_,
      Duplicate_AutoFightReq::default_instance_,
      Duplicate_AutoFightReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_AutoFightReq));
  Duplicate_AutoFightRsp_descriptor_ = file->message_type(8);
  static const int Duplicate_AutoFightRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightRsp, result_),
  };
  Duplicate_AutoFightRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_AutoFightRsp_descriptor_,
      Duplicate_AutoFightRsp::default_instance_,
      Duplicate_AutoFightRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoFightRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_AutoFightRsp));
  Duplicate_FlopReq_descriptor_ = file->message_type(9);
  static const int Duplicate_FlopReq_offsets_[1] = {
  };
  Duplicate_FlopReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_FlopReq_descriptor_,
      Duplicate_FlopReq::default_instance_,
      Duplicate_FlopReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_FlopReq));
  Duplicate_FlopRsp_descriptor_ = file->message_type(10);
  static const int Duplicate_FlopRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, index_),
  };
  Duplicate_FlopRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_FlopRsp_descriptor_,
      Duplicate_FlopRsp::default_instance_,
      Duplicate_FlopRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FlopRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_FlopRsp));
  Duplicate_UpdateRsp_descriptor_ = file->message_type(11);
  static const int Duplicate_UpdateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, open_list_),
  };
  Duplicate_UpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_UpdateRsp_descriptor_,
      Duplicate_UpdateRsp::default_instance_,
      Duplicate_UpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_UpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_UpdateRsp));
  Duplicate_ReliveReq_descriptor_ = file->message_type(12);
  static const int Duplicate_ReliveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveReq, type_),
  };
  Duplicate_ReliveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ReliveReq_descriptor_,
      Duplicate_ReliveReq::default_instance_,
      Duplicate_ReliveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ReliveReq));
  Duplicate_ReliveRsp_descriptor_ = file->message_type(13);
  static const int Duplicate_ReliveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, type_),
  };
  Duplicate_ReliveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ReliveRsp_descriptor_,
      Duplicate_ReliveRsp::default_instance_,
      Duplicate_ReliveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ReliveRsp));
  Duplicate_LeaveReq_descriptor_ = file->message_type(14);
  static const int Duplicate_LeaveReq_offsets_[1] = {
  };
  Duplicate_LeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_LeaveReq_descriptor_,
      Duplicate_LeaveReq::default_instance_,
      Duplicate_LeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_LeaveReq));
  Duplicate_LeaveRsp_descriptor_ = file->message_type(15);
  static const int Duplicate_LeaveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveRsp, retcode_),
  };
  Duplicate_LeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_LeaveRsp_descriptor_,
      Duplicate_LeaveRsp::default_instance_,
      Duplicate_LeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_LeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_LeaveRsp));
  Duplicate_EnterAreaReq_descriptor_ = file->message_type(16);
  static const int Duplicate_EnterAreaReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaReq, area_id_),
  };
  Duplicate_EnterAreaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterAreaReq_descriptor_,
      Duplicate_EnterAreaReq::default_instance_,
      Duplicate_EnterAreaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterAreaReq));
  Duplicate_EnterAreaRsp_descriptor_ = file->message_type(17);
  static const int Duplicate_EnterAreaRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaRsp, retcode_),
  };
  Duplicate_EnterAreaRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_EnterAreaRsp_descriptor_,
      Duplicate_EnterAreaRsp::default_instance_,
      Duplicate_EnterAreaRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_EnterAreaRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_EnterAreaRsp));
  Duplicate_BuyCountReq_descriptor_ = file->message_type(18);
  static const int Duplicate_BuyCountReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountReq, group_id_),
  };
  Duplicate_BuyCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_BuyCountReq_descriptor_,
      Duplicate_BuyCountReq::default_instance_,
      Duplicate_BuyCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_BuyCountReq));
  Duplicate_BuyCountRsp_descriptor_ = file->message_type(19);
  static const int Duplicate_BuyCountRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, group_id_),
  };
  Duplicate_BuyCountRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_BuyCountRsp_descriptor_,
      Duplicate_BuyCountRsp::default_instance_,
      Duplicate_BuyCountRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_BuyCountRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_BuyCountRsp));
  Duplicate_AutoChallengeReq_descriptor_ = file->message_type(20);
  static const int Duplicate_AutoChallengeReq_offsets_[1] = {
  };
  Duplicate_AutoChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_AutoChallengeReq_descriptor_,
      Duplicate_AutoChallengeReq::default_instance_,
      Duplicate_AutoChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_AutoChallengeReq));
  Duplicate_AutoChallengeRsp_descriptor_ = file->message_type(21);
  static const int Duplicate_AutoChallengeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoChallengeRsp, retcode_),
  };
  Duplicate_AutoChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_AutoChallengeRsp_descriptor_,
      Duplicate_AutoChallengeRsp::default_instance_,
      Duplicate_AutoChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_AutoChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_AutoChallengeRsp));
  Duplicate_FightDataRsp_descriptor_ = file->message_type(22);
  static const int Duplicate_FightDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FightDataRsp, fight_data_),
  };
  Duplicate_FightDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_FightDataRsp_descriptor_,
      Duplicate_FightDataRsp::default_instance_,
      Duplicate_FightDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FightDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_FightDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_FightDataRsp));
  Duplicate_MonsWaveRsp_descriptor_ = file->message_type(23);
  static const int Duplicate_MonsWaveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsWaveRsp, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsWaveRsp, sec_),
  };
  Duplicate_MonsWaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_MonsWaveRsp_descriptor_,
      Duplicate_MonsWaveRsp::default_instance_,
      Duplicate_MonsWaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsWaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsWaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_MonsWaveRsp));
  Duplicate_MonsNumRsp_descriptor_ = file->message_type(24);
  static const int Duplicate_MonsNumRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsNumRsp, num_),
  };
  Duplicate_MonsNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_MonsNumRsp_descriptor_,
      Duplicate_MonsNumRsp::default_instance_,
      Duplicate_MonsNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_MonsNumRsp));
  Duplicate_MonsStateRsp_descriptor_ = file->message_type(25);
  static const int Duplicate_MonsStateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsStateRsp, mon_state_),
  };
  Duplicate_MonsStateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_MonsStateRsp_descriptor_,
      Duplicate_MonsStateRsp::default_instance_,
      Duplicate_MonsStateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsStateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_MonsStateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_MonsStateRsp));
  Duplicate_ReliveNumRsp_descriptor_ = file->message_type(26);
  static const int Duplicate_ReliveNumRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveNumRsp, count_),
  };
  Duplicate_ReliveNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_ReliveNumRsp_descriptor_,
      Duplicate_ReliveNumRsp::default_instance_,
      Duplicate_ReliveNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_ReliveNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_ReliveNumRsp));
  Duplicate_TowerHpRsp_descriptor_ = file->message_type(27);
  static const int Duplicate_TowerHpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_TowerHpRsp, hp_),
  };
  Duplicate_TowerHpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_TowerHpRsp_descriptor_,
      Duplicate_TowerHpRsp::default_instance_,
      Duplicate_TowerHpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_TowerHpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_TowerHpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_TowerHpRsp));
  Duplicate_TransMonsNumRsp_descriptor_ = file->message_type(28);
  static const int Duplicate_TransMonsNumRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_TransMonsNumRsp, trans_num_),
  };
  Duplicate_TransMonsNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_TransMonsNumRsp_descriptor_,
      Duplicate_TransMonsNumRsp::default_instance_,
      Duplicate_TransMonsNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_TransMonsNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_TransMonsNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_TransMonsNumRsp));
  DupBeforAreaProto_descriptor_ = file->message_type(29);
  static const int DupBeforAreaProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupBeforAreaProto, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupBeforAreaProto, areaid_),
  };
  DupBeforAreaProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupBeforAreaProto_descriptor_,
      DupBeforAreaProto::default_instance_,
      DupBeforAreaProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupBeforAreaProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupBeforAreaProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupBeforAreaProto));
  LogicToCenter_EnterDupReq_descriptor_ = file->message_type(30);
  static const int LogicToCenter_EnterDupReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDupReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDupReq, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDupReq, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDupReq, key_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDupReq, area_),
  };
  LogicToCenter_EnterDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_EnterDupReq_descriptor_,
      LogicToCenter_EnterDupReq::default_instance_,
      LogicToCenter_EnterDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_EnterDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_EnterDupReq));
  CenterToLogic_EnterDupRsp_descriptor_ = file->message_type(31);
  static const int CenterToLogic_EnterDupRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_EnterDupRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_EnterDupRsp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_EnterDupRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_EnterDupRsp, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_EnterDupRsp, key_value_),
  };
  CenterToLogic_EnterDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogic_EnterDupRsp_descriptor_,
      CenterToLogic_EnterDupRsp::default_instance_,
      CenterToLogic_EnterDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_EnterDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_EnterDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogic_EnterDupRsp));
  LogicToCenter_CreateSceneReq_descriptor_ = file->message_type(32);
  static const int LogicToCenter_CreateSceneReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateSceneReq, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateSceneReq, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateSceneReq, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateSceneReq, key_value_),
  };
  LogicToCenter_CreateSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_CreateSceneReq_descriptor_,
      LogicToCenter_CreateSceneReq::default_instance_,
      LogicToCenter_CreateSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_CreateSceneReq));
  CenterToLogic_CreateSceneRsp_descriptor_ = file->message_type(33);
  static const int CenterToLogic_CreateSceneRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, key_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, area_),
  };
  CenterToLogic_CreateSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogic_CreateSceneRsp_descriptor_,
      CenterToLogic_CreateSceneRsp::default_instance_,
      CenterToLogic_CreateSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CreateSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogic_CreateSceneRsp));
  LogicToCenter_CreateDuplicateRsp_descriptor_ = file->message_type(34);
  static const int LogicToCenter_CreateDuplicateRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateRsp, scene_id_),
  };
  LogicToCenter_CreateDuplicateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_CreateDuplicateRsp_descriptor_,
      LogicToCenter_CreateDuplicateRsp::default_instance_,
      LogicToCenter_CreateDuplicateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CreateDuplicateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_CreateDuplicateRsp));
  CenterToLogic_DuplicateNotifyPrepare_descriptor_ = file->message_type(35);
  static const int CenterToLogic_DuplicateNotifyPrepare_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateNotifyPrepare, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateNotifyPrepare, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateNotifyPrepare, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateNotifyPrepare, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateNotifyPrepare, key_value_),
  };
  CenterToLogic_DuplicateNotifyPrepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogic_DuplicateNotifyPrepare_descriptor_,
      CenterToLogic_DuplicateNotifyPrepare::default_instance_,
      CenterToLogic_DuplicateNotifyPrepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateNotifyPrepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateNotifyPrepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogic_DuplicateNotifyPrepare));
  LogicToCenter_DuplicatePrepareRsp_descriptor_ = file->message_type(36);
  static const int LogicToCenter_DuplicatePrepareRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicatePrepareRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicatePrepareRsp, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicatePrepareRsp, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicatePrepareRsp, scene_id_),
  };
  LogicToCenter_DuplicatePrepareRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicatePrepareRsp_descriptor_,
      LogicToCenter_DuplicatePrepareRsp::default_instance_,
      LogicToCenter_DuplicatePrepareRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicatePrepareRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicatePrepareRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicatePrepareRsp));
  CenterToLogic_DuplicateEnterNotify_descriptor_ = file->message_type(37);
  static const int CenterToLogic_DuplicateEnterNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateEnterNotify, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateEnterNotify, duplicate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateEnterNotify, scene_id_),
  };
  CenterToLogic_DuplicateEnterNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogic_DuplicateEnterNotify_descriptor_,
      CenterToLogic_DuplicateEnterNotify::default_instance_,
      CenterToLogic_DuplicateEnterNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateEnterNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_DuplicateEnterNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogic_DuplicateEnterNotify));
  LogicToCenter_DuplicateEnterRsp_descriptor_ = file->message_type(38);
  static const int LogicToCenter_DuplicateEnterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnterRsp, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnterRsp, scene_id_),
  };
  LogicToCenter_DuplicateEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicateEnterRsp_descriptor_,
      LogicToCenter_DuplicateEnterRsp::default_instance_,
      LogicToCenter_DuplicateEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicateEnterRsp));
  LogicToCenter_DuplicateLeaveRsp_descriptor_ = file->message_type(39);
  static const int LogicToCenter_DuplicateLeaveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateLeaveRsp, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateLeaveRsp, scene_id_),
  };
  LogicToCenter_DuplicateLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicateLeaveRsp_descriptor_,
      LogicToCenter_DuplicateLeaveRsp::default_instance_,
      LogicToCenter_DuplicateLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicateLeaveRsp));
  LogicToCenter_DuplicateBegin_descriptor_ = file->message_type(40);
  static const int LogicToCenter_DuplicateBegin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateBegin, scene_id_),
  };
  LogicToCenter_DuplicateBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicateBegin_descriptor_,
      LogicToCenter_DuplicateBegin::default_instance_,
      LogicToCenter_DuplicateBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicateBegin));
  LogicToCenter_DuplicateEnd_descriptor_ = file->message_type(41);
  static const int LogicToCenter_DuplicateEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnd, scene_id_),
  };
  LogicToCenter_DuplicateEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicateEnd_descriptor_,
      LogicToCenter_DuplicateEnd::default_instance_,
      LogicToCenter_DuplicateEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicateEnd));
  LogicToCenter_DuplicateDestory_descriptor_ = file->message_type(42);
  static const int LogicToCenter_DuplicateDestory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateDestory, scene_id_),
  };
  LogicToCenter_DuplicateDestory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_DuplicateDestory_descriptor_,
      LogicToCenter_DuplicateDestory::default_instance_,
      LogicToCenter_DuplicateDestory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateDestory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_DuplicateDestory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_DuplicateDestory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fDuplicate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupMonsStateProto_descriptor_, &DupMonsStateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupFightDataProto_descriptor_, &DupFightDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_InfoReq_descriptor_, &Duplicate_InfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_InfoRsp_descriptor_, &Duplicate_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterReq_descriptor_, &Duplicate_EnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterRsp_descriptor_, &Duplicate_EnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ResultRsp_descriptor_, &Duplicate_ResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_AutoFightReq_descriptor_, &Duplicate_AutoFightReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_AutoFightRsp_descriptor_, &Duplicate_AutoFightRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_FlopReq_descriptor_, &Duplicate_FlopReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_FlopRsp_descriptor_, &Duplicate_FlopRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_UpdateRsp_descriptor_, &Duplicate_UpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ReliveReq_descriptor_, &Duplicate_ReliveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ReliveRsp_descriptor_, &Duplicate_ReliveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_LeaveReq_descriptor_, &Duplicate_LeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_LeaveRsp_descriptor_, &Duplicate_LeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterAreaReq_descriptor_, &Duplicate_EnterAreaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_EnterAreaRsp_descriptor_, &Duplicate_EnterAreaRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_BuyCountReq_descriptor_, &Duplicate_BuyCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_BuyCountRsp_descriptor_, &Duplicate_BuyCountRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_AutoChallengeReq_descriptor_, &Duplicate_AutoChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_AutoChallengeRsp_descriptor_, &Duplicate_AutoChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_FightDataRsp_descriptor_, &Duplicate_FightDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_MonsWaveRsp_descriptor_, &Duplicate_MonsWaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_MonsNumRsp_descriptor_, &Duplicate_MonsNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_MonsStateRsp_descriptor_, &Duplicate_MonsStateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_ReliveNumRsp_descriptor_, &Duplicate_ReliveNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_TowerHpRsp_descriptor_, &Duplicate_TowerHpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_TransMonsNumRsp_descriptor_, &Duplicate_TransMonsNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupBeforAreaProto_descriptor_, &DupBeforAreaProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_EnterDupReq_descriptor_, &LogicToCenter_EnterDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogic_EnterDupRsp_descriptor_, &CenterToLogic_EnterDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_CreateSceneReq_descriptor_, &LogicToCenter_CreateSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogic_CreateSceneRsp_descriptor_, &CenterToLogic_CreateSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_CreateDuplicateRsp_descriptor_, &LogicToCenter_CreateDuplicateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogic_DuplicateNotifyPrepare_descriptor_, &CenterToLogic_DuplicateNotifyPrepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicatePrepareRsp_descriptor_, &LogicToCenter_DuplicatePrepareRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogic_DuplicateEnterNotify_descriptor_, &CenterToLogic_DuplicateEnterNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicateEnterRsp_descriptor_, &LogicToCenter_DuplicateEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicateLeaveRsp_descriptor_, &LogicToCenter_DuplicateLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicateBegin_descriptor_, &LogicToCenter_DuplicateBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicateEnd_descriptor_, &LogicToCenter_DuplicateEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_DuplicateDestory_descriptor_, &LogicToCenter_DuplicateDestory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fDuplicate_2eproto() {
  delete DupMonsStateProto::default_instance_;
  delete DupMonsStateProto_reflection_;
  delete DupFightDataProto::default_instance_;
  delete DupFightDataProto_reflection_;
  delete Duplicate_InfoReq::default_instance_;
  delete Duplicate_InfoReq_reflection_;
  delete Duplicate_InfoRsp::default_instance_;
  delete Duplicate_InfoRsp_reflection_;
  delete Duplicate_EnterReq::default_instance_;
  delete Duplicate_EnterReq_reflection_;
  delete Duplicate_EnterRsp::default_instance_;
  delete Duplicate_EnterRsp_reflection_;
  delete Duplicate_ResultRsp::default_instance_;
  delete Duplicate_ResultRsp_reflection_;
  delete Duplicate_AutoFightReq::default_instance_;
  delete Duplicate_AutoFightReq_reflection_;
  delete Duplicate_AutoFightRsp::default_instance_;
  delete Duplicate_AutoFightRsp_reflection_;
  delete Duplicate_FlopReq::default_instance_;
  delete Duplicate_FlopReq_reflection_;
  delete Duplicate_FlopRsp::default_instance_;
  delete Duplicate_FlopRsp_reflection_;
  delete Duplicate_UpdateRsp::default_instance_;
  delete Duplicate_UpdateRsp_reflection_;
  delete Duplicate_ReliveReq::default_instance_;
  delete Duplicate_ReliveReq_reflection_;
  delete Duplicate_ReliveRsp::default_instance_;
  delete Duplicate_ReliveRsp_reflection_;
  delete Duplicate_LeaveReq::default_instance_;
  delete Duplicate_LeaveReq_reflection_;
  delete Duplicate_LeaveRsp::default_instance_;
  delete Duplicate_LeaveRsp_reflection_;
  delete Duplicate_EnterAreaReq::default_instance_;
  delete Duplicate_EnterAreaReq_reflection_;
  delete Duplicate_EnterAreaRsp::default_instance_;
  delete Duplicate_EnterAreaRsp_reflection_;
  delete Duplicate_BuyCountReq::default_instance_;
  delete Duplicate_BuyCountReq_reflection_;
  delete Duplicate_BuyCountRsp::default_instance_;
  delete Duplicate_BuyCountRsp_reflection_;
  delete Duplicate_AutoChallengeReq::default_instance_;
  delete Duplicate_AutoChallengeReq_reflection_;
  delete Duplicate_AutoChallengeRsp::default_instance_;
  delete Duplicate_AutoChallengeRsp_reflection_;
  delete Duplicate_FightDataRsp::default_instance_;
  delete Duplicate_FightDataRsp_reflection_;
  delete Duplicate_MonsWaveRsp::default_instance_;
  delete Duplicate_MonsWaveRsp_reflection_;
  delete Duplicate_MonsNumRsp::default_instance_;
  delete Duplicate_MonsNumRsp_reflection_;
  delete Duplicate_MonsStateRsp::default_instance_;
  delete Duplicate_MonsStateRsp_reflection_;
  delete Duplicate_ReliveNumRsp::default_instance_;
  delete Duplicate_ReliveNumRsp_reflection_;
  delete Duplicate_TowerHpRsp::default_instance_;
  delete Duplicate_TowerHpRsp_reflection_;
  delete Duplicate_TransMonsNumRsp::default_instance_;
  delete Duplicate_TransMonsNumRsp_reflection_;
  delete DupBeforAreaProto::default_instance_;
  delete DupBeforAreaProto_reflection_;
  delete LogicToCenter_EnterDupReq::default_instance_;
  delete LogicToCenter_EnterDupReq_reflection_;
  delete CenterToLogic_EnterDupRsp::default_instance_;
  delete CenterToLogic_EnterDupRsp_reflection_;
  delete LogicToCenter_CreateSceneReq::default_instance_;
  delete LogicToCenter_CreateSceneReq_reflection_;
  delete CenterToLogic_CreateSceneRsp::default_instance_;
  delete CenterToLogic_CreateSceneRsp_reflection_;
  delete LogicToCenter_CreateDuplicateRsp::default_instance_;
  delete LogicToCenter_CreateDuplicateRsp_reflection_;
  delete CenterToLogic_DuplicateNotifyPrepare::default_instance_;
  delete CenterToLogic_DuplicateNotifyPrepare_reflection_;
  delete LogicToCenter_DuplicatePrepareRsp::default_instance_;
  delete LogicToCenter_DuplicatePrepareRsp_reflection_;
  delete CenterToLogic_DuplicateEnterNotify::default_instance_;
  delete CenterToLogic_DuplicateEnterNotify_reflection_;
  delete LogicToCenter_DuplicateEnterRsp::default_instance_;
  delete LogicToCenter_DuplicateEnterRsp_reflection_;
  delete LogicToCenter_DuplicateLeaveRsp::default_instance_;
  delete LogicToCenter_DuplicateLeaveRsp_reflection_;
  delete LogicToCenter_DuplicateBegin::default_instance_;
  delete LogicToCenter_DuplicateBegin_reflection_;
  delete LogicToCenter_DuplicateEnd::default_instance_;
  delete LogicToCenter_DuplicateEnd_reflection_;
  delete LogicToCenter_DuplicateDestory::default_instance_;
  delete LogicToCenter_DuplicateDestory_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ProtoBuffer/Duplicate.proto\022\010ProtoBuf\032"
    "\035ProtoBuffer/ComProtocol.proto\032#ProtoBuf"
    "fer/ClientToServerCmd.proto\032\026Common/ComD"
    "efine.proto\"3\n\021DupMonsStateProto\022\017\n\007mons"
    "_id\030\001 \002(\r\022\r\n\005state\030\002 \002(\005\"=\n\021DupFightData"
    "Proto\022\013\n\003cid\030\001 \002(\r\022\013\n\003atk\030\002 \002(\004\022\016\n\006be_at"
    "k\030\003 \002(\004\"\023\n\021Duplicate_InfoReq\"\215\001\n\021Duplica"
    "te_InfoRsp\022\017\n\007retcode\030\001 \002(\005\022&\n\004info\030\002 \003("
    "\0132\030.ProtoBuf.DuplicateProto\022,\n\005group\030\003 \003"
    "(\0132\035.ProtoBuf.DuplicateGroupProto\022\021\n\tope"
    "n_list\030\004 \003(\005\"a\n\022Duplicate_EnterReq\022\024\n\014du"
    "plicate_id\030\001 \002(\005\022\017\n\007area_id\030\002 \001(\005\022$\n\007cur"
    "_pos\030\003 \001(\0132\023.ProtoBuf.Vector3PB\"\221\001\n\022Dupl"
    "icate_EnterRsp\022\017\n\007retcode\030\001 \002(\005\022\024\n\014dupli"
    "cate_id\030\002 \001(\005\022\014\n\004area\030\003 \003(\005\022\020\n\010mons_num\030"
    "\004 \001(\005\022\017\n\007dup_sec\030\005 \001(\005\022\020\n\010tower_hp\030\006 \001(\005"
    "\022\021\n\ttrans_num\030\007 \001(\005\"\270\001\n\023Duplicate_Result"
    "Rsp\022\016\n\006result\030\001 \002(\005\022\024\n\014duplicate_id\030\002 \002("
    "\005\022\014\n\004star\030\003 \001(\005\022\013\n\003exp\030\004 \001(\005\022\014\n\004gold\030\005 \001"
    "(\005\022)\n\006reward\030\006 \001(\0132\031.ProtoBuf.RewardItem"
    "Proto\022\'\n\004flop\030\007 \001(\0132\031.ProtoBuf.RewardIte"
    "mProto\"\030\n\026Duplicate_AutoFightReq\"(\n\026Dupl"
    "icate_AutoFightRsp\022\016\n\006result\030\001 \002(\005\"\023\n\021Du"
    "plicate_FlopReq\"3\n\021Duplicate_FlopRsp\022\017\n\007"
    "retcode\030\001 \002(\005\022\r\n\005index\030\002 \001(\005\"~\n\023Duplicat"
    "e_UpdateRsp\022&\n\004info\030\001 \003(\0132\030.ProtoBuf.Dup"
    "licateProto\022,\n\005group\030\002 \003(\0132\035.ProtoBuf.Du"
    "plicateGroupProto\022\021\n\topen_list\030\003 \003(\005\"#\n\023"
    "Duplicate_ReliveReq\022\014\n\004type\030\001 \002(\005\"4\n\023Dup"
    "licate_ReliveRsp\022\017\n\007retcode\030\001 \002(\005\022\014\n\004typ"
    "e\030\002 \001(\005\"\024\n\022Duplicate_LeaveReq\"%\n\022Duplica"
    "te_LeaveRsp\022\017\n\007retcode\030\001 \002(\005\")\n\026Duplicat"
    "e_EnterAreaReq\022\017\n\007area_id\030\001 \002(\005\")\n\026Dupli"
    "cate_EnterAreaRsp\022\017\n\007retcode\030\001 \002(\005\")\n\025Du"
    "plicate_BuyCountReq\022\020\n\010group_id\030\001 \002(\005\"K\n"
    "\025Duplicate_BuyCountRsp\022\017\n\007retcode\030\001 \002(\005\022"
    "\017\n\007buy_num\030\002 \001(\005\022\020\n\010group_id\030\003 \001(\005\"\034\n\032Du"
    "plicate_AutoChallengeReq\"-\n\032Duplicate_Au"
    "toChallengeRsp\022\017\n\007retcode\030\001 \002(\005\"I\n\026Dupli"
    "cate_FightDataRsp\022/\n\nfight_data\030\001 \003(\0132\033."
    "ProtoBuf.DupFightDataProto\"2\n\025Duplicate_"
    "MonsWaveRsp\022\014\n\004wave\030\001 \002(\005\022\013\n\003sec\030\002 \002(\005\"#"
    "\n\024Duplicate_MonsNumRsp\022\013\n\003num\030\001 \002(\005\"H\n\026D"
    "uplicate_MonsStateRsp\022.\n\tmon_state\030\001 \003(\013"
    "2\033.ProtoBuf.DupMonsStateProto\"\'\n\026Duplica"
    "te_ReliveNumRsp\022\r\n\005count\030\001 \002(\005\"\"\n\024Duplic"
    "ate_TowerHpRsp\022\n\n\002hp\030\001 \002(\005\".\n\031Duplicate_"
    "TransMonsNumRsp\022\021\n\ttrans_num\030\001 \002(\005\"3\n\021Du"
    "pBeforAreaProto\022\016\n\006charId\030\001 \002(\r\022\016\n\006areaI"
    "d\030\002 \002(\r\"\221\001\n\031LogicToCenter_EnterDupReq\022\016\n"
    "\006charId\030\001 \002(\r\022\024\n\014duplicate_id\030\002 \002(\r\022\020\n\010k"
    "ey_type\030\003 \002(\005\022\021\n\tkey_value\030\004 \002(\004\022)\n\004area"
    "\030\005 \003(\0132\033.ProtoBuf.DupBeforAreaProto\"w\n\031C"
    "enterToLogic_EnterDupRsp\022\017\n\007retcode\030\001 \002("
    "\005\022\016\n\006charId\030\002 \002(\r\022\024\n\014duplicate_id\030\003 \002(\r\022"
    "\020\n\010key_type\030\004 \002(\005\022\021\n\tkey_value\030\005 \002(\004\"j\n\034"
    "LogicToCenter_CreateSceneReq\022\017\n\007char_id\030"
    "\001 \002(\r\022\024\n\014duplicate_id\030\002 \002(\r\022\020\n\010key_type\030"
    "\003 \002(\005\022\021\n\tkey_value\030\004 \002(\004\"\270\001\n\034CenterToLog"
    "ic_CreateSceneRsp\022\017\n\007retcode\030\001 \002(\005\022\017\n\007ch"
    "ar_id\030\002 \002(\r\022\024\n\014duplicate_id\030\003 \002(\r\022\020\n\010key"
    "_type\030\004 \002(\005\022\021\n\tkey_value\030\005 \002(\004\022\020\n\010scene_"
    "id\030\006 \001(\r\022)\n\004area\030\007 \003(\0132\033.ProtoBuf.DupBef"
    "orAreaProto\"E\n LogicToCenter_CreateDupli"
    "cateRsp\022\017\n\007retcode\030\001 \002(\005\022\020\n\010scene_id\030\002 \002"
    "(\r\"\204\001\n$CenterToLogic_DuplicateNotifyPrep"
    "are\022\017\n\007char_id\030\001 \002(\r\022\024\n\014duplicate_id\030\002 \002"
    "(\r\022\020\n\010scene_id\030\003 \002(\r\022\020\n\010key_type\030\004 \002(\005\022\021"
    "\n\tkey_value\030\005 \002(\004\"m\n!LogicToCenter_Dupli"
    "catePrepareRsp\022\017\n\007retcode\030\001 \002(\005\022\017\n\007char_"
    "id\030\002 \002(\r\022\024\n\014duplicate_id\030\003 \002(\r\022\020\n\010scene_"
    "id\030\004 \002(\r\"]\n\"CenterToLogic_DuplicateEnter"
    "Notify\022\017\n\007char_id\030\001 \002(\r\022\024\n\014duplicate_id\030"
    "\002 \002(\r\022\020\n\010scene_id\030\003 \002(\r\"D\n\037LogicToCenter"
    "_DuplicateEnterRsp\022\017\n\007char_id\030\001 \002(\r\022\020\n\010s"
    "cene_id\030\002 \002(\r\"D\n\037LogicToCenter_Duplicate"
    "LeaveRsp\022\017\n\007char_id\030\001 \002(\r\022\020\n\010scene_id\030\002 "
    "\002(\r\"0\n\034LogicToCenter_DuplicateBegin\022\020\n\010s"
    "cene_id\030\001 \002(\r\".\n\032LogicToCenter_Duplicate"
    "End\022\020\n\010scene_id\030\001 \002(\r\"2\n\036LogicToCenter_D"
    "uplicateDestory\022\020\n\010scene_id\030\001 \002(\r", 3233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Duplicate.proto", &protobuf_RegisterTypes);
  DupMonsStateProto::default_instance_ = new DupMonsStateProto();
  DupFightDataProto::default_instance_ = new DupFightDataProto();
  Duplicate_InfoReq::default_instance_ = new Duplicate_InfoReq();
  Duplicate_InfoRsp::default_instance_ = new Duplicate_InfoRsp();
  Duplicate_EnterReq::default_instance_ = new Duplicate_EnterReq();
  Duplicate_EnterRsp::default_instance_ = new Duplicate_EnterRsp();
  Duplicate_ResultRsp::default_instance_ = new Duplicate_ResultRsp();
  Duplicate_AutoFightReq::default_instance_ = new Duplicate_AutoFightReq();
  Duplicate_AutoFightRsp::default_instance_ = new Duplicate_AutoFightRsp();
  Duplicate_FlopReq::default_instance_ = new Duplicate_FlopReq();
  Duplicate_FlopRsp::default_instance_ = new Duplicate_FlopRsp();
  Duplicate_UpdateRsp::default_instance_ = new Duplicate_UpdateRsp();
  Duplicate_ReliveReq::default_instance_ = new Duplicate_ReliveReq();
  Duplicate_ReliveRsp::default_instance_ = new Duplicate_ReliveRsp();
  Duplicate_LeaveReq::default_instance_ = new Duplicate_LeaveReq();
  Duplicate_LeaveRsp::default_instance_ = new Duplicate_LeaveRsp();
  Duplicate_EnterAreaReq::default_instance_ = new Duplicate_EnterAreaReq();
  Duplicate_EnterAreaRsp::default_instance_ = new Duplicate_EnterAreaRsp();
  Duplicate_BuyCountReq::default_instance_ = new Duplicate_BuyCountReq();
  Duplicate_BuyCountRsp::default_instance_ = new Duplicate_BuyCountRsp();
  Duplicate_AutoChallengeReq::default_instance_ = new Duplicate_AutoChallengeReq();
  Duplicate_AutoChallengeRsp::default_instance_ = new Duplicate_AutoChallengeRsp();
  Duplicate_FightDataRsp::default_instance_ = new Duplicate_FightDataRsp();
  Duplicate_MonsWaveRsp::default_instance_ = new Duplicate_MonsWaveRsp();
  Duplicate_MonsNumRsp::default_instance_ = new Duplicate_MonsNumRsp();
  Duplicate_MonsStateRsp::default_instance_ = new Duplicate_MonsStateRsp();
  Duplicate_ReliveNumRsp::default_instance_ = new Duplicate_ReliveNumRsp();
  Duplicate_TowerHpRsp::default_instance_ = new Duplicate_TowerHpRsp();
  Duplicate_TransMonsNumRsp::default_instance_ = new Duplicate_TransMonsNumRsp();
  DupBeforAreaProto::default_instance_ = new DupBeforAreaProto();
  LogicToCenter_EnterDupReq::default_instance_ = new LogicToCenter_EnterDupReq();
  CenterToLogic_EnterDupRsp::default_instance_ = new CenterToLogic_EnterDupRsp();
  LogicToCenter_CreateSceneReq::default_instance_ = new LogicToCenter_CreateSceneReq();
  CenterToLogic_CreateSceneRsp::default_instance_ = new CenterToLogic_CreateSceneRsp();
  LogicToCenter_CreateDuplicateRsp::default_instance_ = new LogicToCenter_CreateDuplicateRsp();
  CenterToLogic_DuplicateNotifyPrepare::default_instance_ = new CenterToLogic_DuplicateNotifyPrepare();
  LogicToCenter_DuplicatePrepareRsp::default_instance_ = new LogicToCenter_DuplicatePrepareRsp();
  CenterToLogic_DuplicateEnterNotify::default_instance_ = new CenterToLogic_DuplicateEnterNotify();
  LogicToCenter_DuplicateEnterRsp::default_instance_ = new LogicToCenter_DuplicateEnterRsp();
  LogicToCenter_DuplicateLeaveRsp::default_instance_ = new LogicToCenter_DuplicateLeaveRsp();
  LogicToCenter_DuplicateBegin::default_instance_ = new LogicToCenter_DuplicateBegin();
  LogicToCenter_DuplicateEnd::default_instance_ = new LogicToCenter_DuplicateEnd();
  LogicToCenter_DuplicateDestory::default_instance_ = new LogicToCenter_DuplicateDestory();
  DupMonsStateProto::default_instance_->InitAsDefaultInstance();
  DupFightDataProto::default_instance_->InitAsDefaultInstance();
  Duplicate_InfoReq::default_instance_->InitAsDefaultInstance();
  Duplicate_InfoRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterReq::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_ResultRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_AutoFightReq::default_instance_->InitAsDefaultInstance();
  Duplicate_AutoFightRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_FlopReq::default_instance_->InitAsDefaultInstance();
  Duplicate_FlopRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_UpdateRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_ReliveReq::default_instance_->InitAsDefaultInstance();
  Duplicate_ReliveRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_LeaveReq::default_instance_->InitAsDefaultInstance();
  Duplicate_LeaveRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterAreaReq::default_instance_->InitAsDefaultInstance();
  Duplicate_EnterAreaRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_BuyCountReq::default_instance_->InitAsDefaultInstance();
  Duplicate_BuyCountRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_AutoChallengeReq::default_instance_->InitAsDefaultInstance();
  Duplicate_AutoChallengeRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_FightDataRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_MonsWaveRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_MonsNumRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_MonsStateRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_ReliveNumRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_TowerHpRsp::default_instance_->InitAsDefaultInstance();
  Duplicate_TransMonsNumRsp::default_instance_->InitAsDefaultInstance();
  DupBeforAreaProto::default_instance_->InitAsDefaultInstance();
  LogicToCenter_EnterDupReq::default_instance_->InitAsDefaultInstance();
  CenterToLogic_EnterDupRsp::default_instance_->InitAsDefaultInstance();
  LogicToCenter_CreateSceneReq::default_instance_->InitAsDefaultInstance();
  CenterToLogic_CreateSceneRsp::default_instance_->InitAsDefaultInstance();
  LogicToCenter_CreateDuplicateRsp::default_instance_->InitAsDefaultInstance();
  CenterToLogic_DuplicateNotifyPrepare::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicatePrepareRsp::default_instance_->InitAsDefaultInstance();
  CenterToLogic_DuplicateEnterNotify::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicateEnterRsp::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicateLeaveRsp::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicateBegin::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicateEnd::default_instance_->InitAsDefaultInstance();
  LogicToCenter_DuplicateDestory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fDuplicate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fDuplicate_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fDuplicate_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fDuplicate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DupMonsStateProto::kMonsIdFieldNumber;
const int DupMonsStateProto::kStateFieldNumber;
#endif  // !_MSC_VER

DupMonsStateProto::DupMonsStateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupMonsStateProto::InitAsDefaultInstance() {
}

DupMonsStateProto::DupMonsStateProto(const DupMonsStateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupMonsStateProto::SharedCtor() {
  _cached_size_ = 0;
  mons_id_ = 0u;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupMonsStateProto::~DupMonsStateProto() {
  SharedDtor();
}

void DupMonsStateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupMonsStateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupMonsStateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupMonsStateProto_descriptor_;
}

const DupMonsStateProto& DupMonsStateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

DupMonsStateProto* DupMonsStateProto::default_instance_ = NULL;

DupMonsStateProto* DupMonsStateProto::New() const {
  return new DupMonsStateProto;
}

void DupMonsStateProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mons_id_ = 0u;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupMonsStateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mons_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mons_id_)));
          set_has_mons_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupMonsStateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mons_id = 1;
  if (has_mons_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mons_id(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupMonsStateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mons_id = 1;
  if (has_mons_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mons_id(), target);
  }

  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupMonsStateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mons_id = 1;
    if (has_mons_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mons_id());
    }

    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupMonsStateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupMonsStateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupMonsStateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupMonsStateProto::MergeFrom(const DupMonsStateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mons_id()) {
      set_mons_id(from.mons_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupMonsStateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupMonsStateProto::CopyFrom(const DupMonsStateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupMonsStateProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DupMonsStateProto::Swap(DupMonsStateProto* other) {
  if (other != this) {
    std::swap(mons_id_, other->mons_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupMonsStateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupMonsStateProto_descriptor_;
  metadata.reflection = DupMonsStateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupFightDataProto::kCidFieldNumber;
const int DupFightDataProto::kAtkFieldNumber;
const int DupFightDataProto::kBeAtkFieldNumber;
#endif  // !_MSC_VER

DupFightDataProto::DupFightDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupFightDataProto::InitAsDefaultInstance() {
}

DupFightDataProto::DupFightDataProto(const DupFightDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupFightDataProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  atk_ = GOOGLE_ULONGLONG(0);
  be_atk_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupFightDataProto::~DupFightDataProto() {
  SharedDtor();
}

void DupFightDataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupFightDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupFightDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupFightDataProto_descriptor_;
}

const DupFightDataProto& DupFightDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

DupFightDataProto* DupFightDataProto::default_instance_ = NULL;

DupFightDataProto* DupFightDataProto::New() const {
  return new DupFightDataProto;
}

void DupFightDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    atk_ = GOOGLE_ULONGLONG(0);
    be_atk_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupFightDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }

      // required uint64 atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_be_atk;
        break;
      }

      // required uint64 be_atk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_be_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &be_atk_)));
          set_has_be_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupFightDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required uint64 atk = 2;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->atk(), output);
  }

  // required uint64 be_atk = 3;
  if (has_be_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->be_atk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupFightDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required uint64 atk = 2;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->atk(), target);
  }

  // required uint64 be_atk = 3;
  if (has_be_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->be_atk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupFightDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required uint64 atk = 2;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atk());
    }

    // required uint64 be_atk = 3;
    if (has_be_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->be_atk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupFightDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupFightDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupFightDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupFightDataProto::MergeFrom(const DupFightDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_be_atk()) {
      set_be_atk(from.be_atk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupFightDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupFightDataProto::CopyFrom(const DupFightDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupFightDataProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DupFightDataProto::Swap(DupFightDataProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(atk_, other->atk_);
    std::swap(be_atk_, other->be_atk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupFightDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupFightDataProto_descriptor_;
  metadata.reflection = DupFightDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_InfoReq::Duplicate_InfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_InfoReq::InitAsDefaultInstance() {
}

Duplicate_InfoReq::Duplicate_InfoReq(const Duplicate_InfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_InfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_InfoReq::~Duplicate_InfoReq() {
  SharedDtor();
}

void Duplicate_InfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_InfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_InfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_InfoReq_descriptor_;
}

const Duplicate_InfoReq& Duplicate_InfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_InfoReq* Duplicate_InfoReq::default_instance_ = NULL;

Duplicate_InfoReq* Duplicate_InfoReq::New() const {
  return new Duplicate_InfoReq;
}

void Duplicate_InfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_InfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_InfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_InfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_InfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_InfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_InfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_InfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_InfoReq::MergeFrom(const Duplicate_InfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_InfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_InfoReq::CopyFrom(const Duplicate_InfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_InfoReq::IsInitialized() const {

  return true;
}

void Duplicate_InfoReq::Swap(Duplicate_InfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_InfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_InfoReq_descriptor_;
  metadata.reflection = Duplicate_InfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_InfoRsp::kRetcodeFieldNumber;
const int Duplicate_InfoRsp::kInfoFieldNumber;
const int Duplicate_InfoRsp::kGroupFieldNumber;
const int Duplicate_InfoRsp::kOpenListFieldNumber;
#endif  // !_MSC_VER

Duplicate_InfoRsp::Duplicate_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_InfoRsp::InitAsDefaultInstance() {
}

Duplicate_InfoRsp::Duplicate_InfoRsp(const Duplicate_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_InfoRsp::~Duplicate_InfoRsp() {
  SharedDtor();
}

void Duplicate_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_InfoRsp_descriptor_;
}

const Duplicate_InfoRsp& Duplicate_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_InfoRsp* Duplicate_InfoRsp::default_instance_ = NULL;

Duplicate_InfoRsp* Duplicate_InfoRsp::New() const {
  return new Duplicate_InfoRsp;
}

void Duplicate_InfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  info_.Clear();
  group_.Clear();
  open_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.DuplicateProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // repeated .ProtoBuf.DuplicateGroupProto group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group;
        if (input->ExpectTag(32)) goto parse_open_list;
        break;
      }

      // repeated int32 open_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_open_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // repeated .ProtoBuf.DuplicateProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // repeated .ProtoBuf.DuplicateGroupProto group = 3;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group(i), output);
  }

  // repeated int32 open_list = 4;
  for (int i = 0; i < this->open_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->open_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // repeated .ProtoBuf.DuplicateProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // repeated .ProtoBuf.DuplicateGroupProto group = 3;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group(i), target);
  }

  // repeated int32 open_list = 4;
  for (int i = 0; i < this->open_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->open_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  // repeated .ProtoBuf.DuplicateProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .ProtoBuf.DuplicateGroupProto group = 3;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  // repeated int32 open_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_list(i));
    }
    total_size += 1 * this->open_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_InfoRsp::MergeFrom(const Duplicate_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  group_.MergeFrom(from.group_);
  open_list_.MergeFrom(from.open_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_InfoRsp::CopyFrom(const Duplicate_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_InfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < group_size(); i++) {
    if (!this->group(i).IsInitialized()) return false;
  }
  return true;
}

void Duplicate_InfoRsp::Swap(Duplicate_InfoRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    info_.Swap(&other->info_);
    group_.Swap(&other->group_);
    open_list_.Swap(&other->open_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_InfoRsp_descriptor_;
  metadata.reflection = Duplicate_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterReq::kDuplicateIdFieldNumber;
const int Duplicate_EnterReq::kAreaIdFieldNumber;
const int Duplicate_EnterReq::kCurPosFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterReq::Duplicate_EnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterReq::InitAsDefaultInstance() {
  cur_pos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

Duplicate_EnterReq::Duplicate_EnterReq(const Duplicate_EnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterReq::SharedCtor() {
  _cached_size_ = 0;
  duplicate_id_ = 0;
  area_id_ = 0;
  cur_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterReq::~Duplicate_EnterReq() {
  SharedDtor();
}

void Duplicate_EnterReq::SharedDtor() {
  if (this != default_instance_) {
    delete cur_pos_;
  }
}

void Duplicate_EnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterReq_descriptor_;
}

const Duplicate_EnterReq& Duplicate_EnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterReq* Duplicate_EnterReq::default_instance_ = NULL;

Duplicate_EnterReq* Duplicate_EnterReq::New() const {
  return new Duplicate_EnterReq;
}

void Duplicate_EnterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duplicate_id_ = 0;
    area_id_ = 0;
    if (has_cur_pos()) {
      if (cur_pos_ != NULL) cur_pos_->::ProtoBuf::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 duplicate_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area_id;
        break;
      }

      // optional int32 area_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cur_pos;
        break;
      }

      // optional .ProtoBuf.Vector3PB cur_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duplicate_id(), output);
  }

  // optional int32 area_id = 2;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->area_id(), output);
  }

  // optional .ProtoBuf.Vector3PB cur_pos = 3;
  if (has_cur_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cur_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 duplicate_id = 1;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duplicate_id(), target);
  }

  // optional int32 area_id = 2;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->area_id(), target);
  }

  // optional .ProtoBuf.Vector3PB cur_pos = 3;
  if (has_cur_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cur_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 duplicate_id = 1;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

    // optional int32 area_id = 2;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional .ProtoBuf.Vector3PB cur_pos = 3;
    if (has_cur_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cur_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterReq::MergeFrom(const Duplicate_EnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_cur_pos()) {
      mutable_cur_pos()->::ProtoBuf::Vector3PB::MergeFrom(from.cur_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterReq::CopyFrom(const Duplicate_EnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cur_pos()) {
    if (!this->cur_pos().IsInitialized()) return false;
  }
  return true;
}

void Duplicate_EnterReq::Swap(Duplicate_EnterReq* other) {
  if (other != this) {
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(cur_pos_, other->cur_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterReq_descriptor_;
  metadata.reflection = Duplicate_EnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterRsp::kRetcodeFieldNumber;
const int Duplicate_EnterRsp::kDuplicateIdFieldNumber;
const int Duplicate_EnterRsp::kAreaFieldNumber;
const int Duplicate_EnterRsp::kMonsNumFieldNumber;
const int Duplicate_EnterRsp::kDupSecFieldNumber;
const int Duplicate_EnterRsp::kTowerHpFieldNumber;
const int Duplicate_EnterRsp::kTransNumFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterRsp::Duplicate_EnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterRsp::InitAsDefaultInstance() {
}

Duplicate_EnterRsp::Duplicate_EnterRsp(const Duplicate_EnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  duplicate_id_ = 0;
  mons_num_ = 0;
  dup_sec_ = 0;
  tower_hp_ = 0;
  trans_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterRsp::~Duplicate_EnterRsp() {
  SharedDtor();
}

void Duplicate_EnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_EnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterRsp_descriptor_;
}

const Duplicate_EnterRsp& Duplicate_EnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterRsp* Duplicate_EnterRsp::default_instance_ = NULL;

Duplicate_EnterRsp* Duplicate_EnterRsp::New() const {
  return new Duplicate_EnterRsp;
}

void Duplicate_EnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    duplicate_id_ = 0;
    mons_num_ = 0;
    dup_sec_ = 0;
    tower_hp_ = 0;
    trans_num_ = 0;
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // optional int32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area;
        break;
      }

      // repeated int32 area = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_area())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_area())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area;
        if (input->ExpectTag(32)) goto parse_mons_num;
        break;
      }

      // optional int32 mons_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mons_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mons_num_)));
          set_has_mons_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dup_sec;
        break;
      }

      // optional int32 dup_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dup_sec_)));
          set_has_dup_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tower_hp;
        break;
      }

      // optional int32 tower_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_hp_)));
          set_has_tower_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_trans_num;
        break;
      }

      // optional int32 trans_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_num_)));
          set_has_trans_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duplicate_id(), output);
  }

  // repeated int32 area = 3;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->area(i), output);
  }

  // optional int32 mons_num = 4;
  if (has_mons_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mons_num(), output);
  }

  // optional int32 dup_sec = 5;
  if (has_dup_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dup_sec(), output);
  }

  // optional int32 tower_hp = 6;
  if (has_tower_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tower_hp(), output);
  }

  // optional int32 trans_num = 7;
  if (has_trans_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->trans_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duplicate_id(), target);
  }

  // repeated int32 area = 3;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->area(i), target);
  }

  // optional int32 mons_num = 4;
  if (has_mons_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mons_num(), target);
  }

  // optional int32 dup_sec = 5;
  if (has_dup_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dup_sec(), target);
  }

  // optional int32 tower_hp = 6;
  if (has_tower_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tower_hp(), target);
  }

  // optional int32 trans_num = 7;
  if (has_trans_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->trans_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

    // optional int32 mons_num = 4;
    if (has_mons_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mons_num());
    }

    // optional int32 dup_sec = 5;
    if (has_dup_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dup_sec());
    }

    // optional int32 tower_hp = 6;
    if (has_tower_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower_hp());
    }

    // optional int32 trans_num = 7;
    if (has_trans_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_num());
    }

  }
  // repeated int32 area = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->area(i));
    }
    total_size += 1 * this->area_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterRsp::MergeFrom(const Duplicate_EnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_mons_num()) {
      set_mons_num(from.mons_num());
    }
    if (from.has_dup_sec()) {
      set_dup_sec(from.dup_sec());
    }
    if (from.has_tower_hp()) {
      set_tower_hp(from.tower_hp());
    }
    if (from.has_trans_num()) {
      set_trans_num(from.trans_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterRsp::CopyFrom(const Duplicate_EnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_EnterRsp::Swap(Duplicate_EnterRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(duplicate_id_, other->duplicate_id_);
    area_.Swap(&other->area_);
    std::swap(mons_num_, other->mons_num_);
    std::swap(dup_sec_, other->dup_sec_);
    std::swap(tower_hp_, other->tower_hp_);
    std::swap(trans_num_, other->trans_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterRsp_descriptor_;
  metadata.reflection = Duplicate_EnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ResultRsp::kResultFieldNumber;
const int Duplicate_ResultRsp::kDuplicateIdFieldNumber;
const int Duplicate_ResultRsp::kStarFieldNumber;
const int Duplicate_ResultRsp::kExpFieldNumber;
const int Duplicate_ResultRsp::kGoldFieldNumber;
const int Duplicate_ResultRsp::kRewardFieldNumber;
const int Duplicate_ResultRsp::kFlopFieldNumber;
#endif  // !_MSC_VER

Duplicate_ResultRsp::Duplicate_ResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ResultRsp::InitAsDefaultInstance() {
  reward_ = const_cast< ::ProtoBuf::RewardItemProto*>(&::ProtoBuf::RewardItemProto::default_instance());
  flop_ = const_cast< ::ProtoBuf::RewardItemProto*>(&::ProtoBuf::RewardItemProto::default_instance());
}

Duplicate_ResultRsp::Duplicate_ResultRsp(const Duplicate_ResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ResultRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  duplicate_id_ = 0;
  star_ = 0;
  exp_ = 0;
  gold_ = 0;
  reward_ = NULL;
  flop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ResultRsp::~Duplicate_ResultRsp() {
  SharedDtor();
}

void Duplicate_ResultRsp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
    delete flop_;
  }
}

void Duplicate_ResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ResultRsp_descriptor_;
}

const Duplicate_ResultRsp& Duplicate_ResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ResultRsp* Duplicate_ResultRsp::default_instance_ = NULL;

Duplicate_ResultRsp* Duplicate_ResultRsp::New() const {
  return new Duplicate_ResultRsp;
}

void Duplicate_ResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    duplicate_id_ = 0;
    star_ = 0;
    exp_ = 0;
    gold_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoBuf::RewardItemProto::Clear();
    }
    if (has_flop()) {
      if (flop_ != NULL) flop_->::ProtoBuf::RewardItemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required int32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // optional int32 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // optional .ProtoBuf.RewardItemProto reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_flop;
        break;
      }

      // optional .ProtoBuf.RewardItemProto flop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duplicate_id(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // optional .ProtoBuf.RewardItemProto reward = 6;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(), output);
  }

  // optional .ProtoBuf.RewardItemProto flop = 7;
  if (has_flop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->flop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duplicate_id(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional int32 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold(), target);
  }

  // optional .ProtoBuf.RewardItemProto reward = 6;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(), target);
  }

  // optional .ProtoBuf.RewardItemProto flop = 7;
  if (has_flop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->flop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duplicate_id());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional .ProtoBuf.RewardItemProto reward = 6;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional .ProtoBuf.RewardItemProto flop = 7;
    if (has_flop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ResultRsp::MergeFrom(const Duplicate_ResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_reward()) {
      mutable_reward()->::ProtoBuf::RewardItemProto::MergeFrom(from.reward());
    }
    if (from.has_flop()) {
      mutable_flop()->::ProtoBuf::RewardItemProto::MergeFrom(from.flop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ResultRsp::CopyFrom(const Duplicate_ResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ResultRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_flop()) {
    if (!this->flop().IsInitialized()) return false;
  }
  return true;
}

void Duplicate_ResultRsp::Swap(Duplicate_ResultRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(star_, other->star_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(reward_, other->reward_);
    std::swap(flop_, other->flop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ResultRsp_descriptor_;
  metadata.reflection = Duplicate_ResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_AutoFightReq::Duplicate_AutoFightReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_AutoFightReq::InitAsDefaultInstance() {
}

Duplicate_AutoFightReq::Duplicate_AutoFightReq(const Duplicate_AutoFightReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_AutoFightReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_AutoFightReq::~Duplicate_AutoFightReq() {
  SharedDtor();
}

void Duplicate_AutoFightReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_AutoFightReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_AutoFightReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_AutoFightReq_descriptor_;
}

const Duplicate_AutoFightReq& Duplicate_AutoFightReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_AutoFightReq* Duplicate_AutoFightReq::default_instance_ = NULL;

Duplicate_AutoFightReq* Duplicate_AutoFightReq::New() const {
  return new Duplicate_AutoFightReq;
}

void Duplicate_AutoFightReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_AutoFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_AutoFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_AutoFightReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_AutoFightReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_AutoFightReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_AutoFightReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_AutoFightReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_AutoFightReq::MergeFrom(const Duplicate_AutoFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_AutoFightReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_AutoFightReq::CopyFrom(const Duplicate_AutoFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_AutoFightReq::IsInitialized() const {

  return true;
}

void Duplicate_AutoFightReq::Swap(Duplicate_AutoFightReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_AutoFightReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_AutoFightReq_descriptor_;
  metadata.reflection = Duplicate_AutoFightReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_AutoFightRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Duplicate_AutoFightRsp::Duplicate_AutoFightRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_AutoFightRsp::InitAsDefaultInstance() {
}

Duplicate_AutoFightRsp::Duplicate_AutoFightRsp(const Duplicate_AutoFightRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_AutoFightRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_AutoFightRsp::~Duplicate_AutoFightRsp() {
  SharedDtor();
}

void Duplicate_AutoFightRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_AutoFightRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_AutoFightRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_AutoFightRsp_descriptor_;
}

const Duplicate_AutoFightRsp& Duplicate_AutoFightRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_AutoFightRsp* Duplicate_AutoFightRsp::default_instance_ = NULL;

Duplicate_AutoFightRsp* Duplicate_AutoFightRsp::New() const {
  return new Duplicate_AutoFightRsp;
}

void Duplicate_AutoFightRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_AutoFightRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_AutoFightRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_AutoFightRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_AutoFightRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_AutoFightRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_AutoFightRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_AutoFightRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_AutoFightRsp::MergeFrom(const Duplicate_AutoFightRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_AutoFightRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_AutoFightRsp::CopyFrom(const Duplicate_AutoFightRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_AutoFightRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_AutoFightRsp::Swap(Duplicate_AutoFightRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_AutoFightRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_AutoFightRsp_descriptor_;
  metadata.reflection = Duplicate_AutoFightRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_FlopReq::Duplicate_FlopReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_FlopReq::InitAsDefaultInstance() {
}

Duplicate_FlopReq::Duplicate_FlopReq(const Duplicate_FlopReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_FlopReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_FlopReq::~Duplicate_FlopReq() {
  SharedDtor();
}

void Duplicate_FlopReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_FlopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_FlopReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_FlopReq_descriptor_;
}

const Duplicate_FlopReq& Duplicate_FlopReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_FlopReq* Duplicate_FlopReq::default_instance_ = NULL;

Duplicate_FlopReq* Duplicate_FlopReq::New() const {
  return new Duplicate_FlopReq;
}

void Duplicate_FlopReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_FlopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_FlopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_FlopReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_FlopReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_FlopReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_FlopReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_FlopReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_FlopReq::MergeFrom(const Duplicate_FlopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_FlopReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_FlopReq::CopyFrom(const Duplicate_FlopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_FlopReq::IsInitialized() const {

  return true;
}

void Duplicate_FlopReq::Swap(Duplicate_FlopReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_FlopReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_FlopReq_descriptor_;
  metadata.reflection = Duplicate_FlopReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_FlopRsp::kRetcodeFieldNumber;
const int Duplicate_FlopRsp::kIndexFieldNumber;
#endif  // !_MSC_VER

Duplicate_FlopRsp::Duplicate_FlopRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_FlopRsp::InitAsDefaultInstance() {
}

Duplicate_FlopRsp::Duplicate_FlopRsp(const Duplicate_FlopRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_FlopRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_FlopRsp::~Duplicate_FlopRsp() {
  SharedDtor();
}

void Duplicate_FlopRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_FlopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_FlopRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_FlopRsp_descriptor_;
}

const Duplicate_FlopRsp& Duplicate_FlopRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_FlopRsp* Duplicate_FlopRsp::default_instance_ = NULL;

Duplicate_FlopRsp* Duplicate_FlopRsp::New() const {
  return new Duplicate_FlopRsp;
}

void Duplicate_FlopRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_FlopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_FlopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_FlopRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_FlopRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_FlopRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_FlopRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_FlopRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_FlopRsp::MergeFrom(const Duplicate_FlopRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_FlopRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_FlopRsp::CopyFrom(const Duplicate_FlopRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_FlopRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_FlopRsp::Swap(Duplicate_FlopRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_FlopRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_FlopRsp_descriptor_;
  metadata.reflection = Duplicate_FlopRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_UpdateRsp::kInfoFieldNumber;
const int Duplicate_UpdateRsp::kGroupFieldNumber;
const int Duplicate_UpdateRsp::kOpenListFieldNumber;
#endif  // !_MSC_VER

Duplicate_UpdateRsp::Duplicate_UpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_UpdateRsp::InitAsDefaultInstance() {
}

Duplicate_UpdateRsp::Duplicate_UpdateRsp(const Duplicate_UpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_UpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_UpdateRsp::~Duplicate_UpdateRsp() {
  SharedDtor();
}

void Duplicate_UpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_UpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_UpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_UpdateRsp_descriptor_;
}

const Duplicate_UpdateRsp& Duplicate_UpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_UpdateRsp* Duplicate_UpdateRsp::default_instance_ = NULL;

Duplicate_UpdateRsp* Duplicate_UpdateRsp::New() const {
  return new Duplicate_UpdateRsp;
}

void Duplicate_UpdateRsp::Clear() {
  info_.Clear();
  group_.Clear();
  open_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_UpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.DuplicateProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // repeated .ProtoBuf.DuplicateGroupProto group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        if (input->ExpectTag(24)) goto parse_open_list;
        break;
      }

      // repeated int32 open_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_open_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_UpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.DuplicateProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // repeated .ProtoBuf.DuplicateGroupProto group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(i), output);
  }

  // repeated int32 open_list = 3;
  for (int i = 0; i < this->open_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->open_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_UpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.DuplicateProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // repeated .ProtoBuf.DuplicateGroupProto group = 2;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group(i), target);
  }

  // repeated int32 open_list = 3;
  for (int i = 0; i < this->open_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->open_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_UpdateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.DuplicateProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .ProtoBuf.DuplicateGroupProto group = 2;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  // repeated int32 open_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_list(i));
    }
    total_size += 1 * this->open_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_UpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_UpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_UpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_UpdateRsp::MergeFrom(const Duplicate_UpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  group_.MergeFrom(from.group_);
  open_list_.MergeFrom(from.open_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_UpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_UpdateRsp::CopyFrom(const Duplicate_UpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_UpdateRsp::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < group_size(); i++) {
    if (!this->group(i).IsInitialized()) return false;
  }
  return true;
}

void Duplicate_UpdateRsp::Swap(Duplicate_UpdateRsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    group_.Swap(&other->group_);
    open_list_.Swap(&other->open_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_UpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_UpdateRsp_descriptor_;
  metadata.reflection = Duplicate_UpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ReliveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Duplicate_ReliveReq::Duplicate_ReliveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ReliveReq::InitAsDefaultInstance() {
}

Duplicate_ReliveReq::Duplicate_ReliveReq(const Duplicate_ReliveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ReliveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ReliveReq::~Duplicate_ReliveReq() {
  SharedDtor();
}

void Duplicate_ReliveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_ReliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ReliveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ReliveReq_descriptor_;
}

const Duplicate_ReliveReq& Duplicate_ReliveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ReliveReq* Duplicate_ReliveReq::default_instance_ = NULL;

Duplicate_ReliveReq* Duplicate_ReliveReq::New() const {
  return new Duplicate_ReliveReq;
}

void Duplicate_ReliveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ReliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ReliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ReliveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ReliveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ReliveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ReliveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ReliveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ReliveReq::MergeFrom(const Duplicate_ReliveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ReliveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ReliveReq::CopyFrom(const Duplicate_ReliveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ReliveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_ReliveReq::Swap(Duplicate_ReliveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ReliveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ReliveReq_descriptor_;
  metadata.reflection = Duplicate_ReliveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ReliveRsp::kRetcodeFieldNumber;
const int Duplicate_ReliveRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

Duplicate_ReliveRsp::Duplicate_ReliveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ReliveRsp::InitAsDefaultInstance() {
}

Duplicate_ReliveRsp::Duplicate_ReliveRsp(const Duplicate_ReliveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ReliveRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ReliveRsp::~Duplicate_ReliveRsp() {
  SharedDtor();
}

void Duplicate_ReliveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_ReliveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ReliveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ReliveRsp_descriptor_;
}

const Duplicate_ReliveRsp& Duplicate_ReliveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ReliveRsp* Duplicate_ReliveRsp::default_instance_ = NULL;

Duplicate_ReliveRsp* Duplicate_ReliveRsp::New() const {
  return new Duplicate_ReliveRsp;
}

void Duplicate_ReliveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ReliveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ReliveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ReliveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ReliveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ReliveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ReliveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ReliveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ReliveRsp::MergeFrom(const Duplicate_ReliveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ReliveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ReliveRsp::CopyFrom(const Duplicate_ReliveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ReliveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_ReliveRsp::Swap(Duplicate_ReliveRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ReliveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ReliveRsp_descriptor_;
  metadata.reflection = Duplicate_ReliveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_LeaveReq::Duplicate_LeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_LeaveReq::InitAsDefaultInstance() {
}

Duplicate_LeaveReq::Duplicate_LeaveReq(const Duplicate_LeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_LeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_LeaveReq::~Duplicate_LeaveReq() {
  SharedDtor();
}

void Duplicate_LeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_LeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_LeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_LeaveReq_descriptor_;
}

const Duplicate_LeaveReq& Duplicate_LeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_LeaveReq* Duplicate_LeaveReq::default_instance_ = NULL;

Duplicate_LeaveReq* Duplicate_LeaveReq::New() const {
  return new Duplicate_LeaveReq;
}

void Duplicate_LeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_LeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_LeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_LeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_LeaveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_LeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_LeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_LeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_LeaveReq::MergeFrom(const Duplicate_LeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_LeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_LeaveReq::CopyFrom(const Duplicate_LeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_LeaveReq::IsInitialized() const {

  return true;
}

void Duplicate_LeaveReq::Swap(Duplicate_LeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_LeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_LeaveReq_descriptor_;
  metadata.reflection = Duplicate_LeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_LeaveRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_LeaveRsp::Duplicate_LeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_LeaveRsp::InitAsDefaultInstance() {
}

Duplicate_LeaveRsp::Duplicate_LeaveRsp(const Duplicate_LeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_LeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_LeaveRsp::~Duplicate_LeaveRsp() {
  SharedDtor();
}

void Duplicate_LeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_LeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_LeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_LeaveRsp_descriptor_;
}

const Duplicate_LeaveRsp& Duplicate_LeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_LeaveRsp* Duplicate_LeaveRsp::default_instance_ = NULL;

Duplicate_LeaveRsp* Duplicate_LeaveRsp::New() const {
  return new Duplicate_LeaveRsp;
}

void Duplicate_LeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_LeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_LeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_LeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_LeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_LeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_LeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_LeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_LeaveRsp::MergeFrom(const Duplicate_LeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_LeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_LeaveRsp::CopyFrom(const Duplicate_LeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_LeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_LeaveRsp::Swap(Duplicate_LeaveRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_LeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_LeaveRsp_descriptor_;
  metadata.reflection = Duplicate_LeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterAreaReq::kAreaIdFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterAreaReq::Duplicate_EnterAreaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterAreaReq::InitAsDefaultInstance() {
}

Duplicate_EnterAreaReq::Duplicate_EnterAreaReq(const Duplicate_EnterAreaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterAreaReq::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterAreaReq::~Duplicate_EnterAreaReq() {
  SharedDtor();
}

void Duplicate_EnterAreaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_EnterAreaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterAreaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterAreaReq_descriptor_;
}

const Duplicate_EnterAreaReq& Duplicate_EnterAreaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterAreaReq* Duplicate_EnterAreaReq::default_instance_ = NULL;

Duplicate_EnterAreaReq* Duplicate_EnterAreaReq::New() const {
  return new Duplicate_EnterAreaReq;
}

void Duplicate_EnterAreaReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterAreaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterAreaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterAreaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterAreaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterAreaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterAreaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterAreaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterAreaReq::MergeFrom(const Duplicate_EnterAreaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterAreaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterAreaReq::CopyFrom(const Duplicate_EnterAreaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterAreaReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_EnterAreaReq::Swap(Duplicate_EnterAreaReq* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterAreaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterAreaReq_descriptor_;
  metadata.reflection = Duplicate_EnterAreaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_EnterAreaRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_EnterAreaRsp::Duplicate_EnterAreaRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_EnterAreaRsp::InitAsDefaultInstance() {
}

Duplicate_EnterAreaRsp::Duplicate_EnterAreaRsp(const Duplicate_EnterAreaRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_EnterAreaRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_EnterAreaRsp::~Duplicate_EnterAreaRsp() {
  SharedDtor();
}

void Duplicate_EnterAreaRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_EnterAreaRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_EnterAreaRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_EnterAreaRsp_descriptor_;
}

const Duplicate_EnterAreaRsp& Duplicate_EnterAreaRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_EnterAreaRsp* Duplicate_EnterAreaRsp::default_instance_ = NULL;

Duplicate_EnterAreaRsp* Duplicate_EnterAreaRsp::New() const {
  return new Duplicate_EnterAreaRsp;
}

void Duplicate_EnterAreaRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_EnterAreaRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_EnterAreaRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_EnterAreaRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_EnterAreaRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_EnterAreaRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_EnterAreaRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_EnterAreaRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_EnterAreaRsp::MergeFrom(const Duplicate_EnterAreaRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_EnterAreaRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_EnterAreaRsp::CopyFrom(const Duplicate_EnterAreaRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_EnterAreaRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_EnterAreaRsp::Swap(Duplicate_EnterAreaRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_EnterAreaRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_EnterAreaRsp_descriptor_;
  metadata.reflection = Duplicate_EnterAreaRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_BuyCountReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

Duplicate_BuyCountReq::Duplicate_BuyCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_BuyCountReq::InitAsDefaultInstance() {
}

Duplicate_BuyCountReq::Duplicate_BuyCountReq(const Duplicate_BuyCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_BuyCountReq::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_BuyCountReq::~Duplicate_BuyCountReq() {
  SharedDtor();
}

void Duplicate_BuyCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_BuyCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_BuyCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_BuyCountReq_descriptor_;
}

const Duplicate_BuyCountReq& Duplicate_BuyCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_BuyCountReq* Duplicate_BuyCountReq::default_instance_ = NULL;

Duplicate_BuyCountReq* Duplicate_BuyCountReq::New() const {
  return new Duplicate_BuyCountReq;
}

void Duplicate_BuyCountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_BuyCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_BuyCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_BuyCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_BuyCountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_BuyCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_BuyCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_BuyCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_BuyCountReq::MergeFrom(const Duplicate_BuyCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_BuyCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_BuyCountReq::CopyFrom(const Duplicate_BuyCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_BuyCountReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_BuyCountReq::Swap(Duplicate_BuyCountReq* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_BuyCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_BuyCountReq_descriptor_;
  metadata.reflection = Duplicate_BuyCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_BuyCountRsp::kRetcodeFieldNumber;
const int Duplicate_BuyCountRsp::kBuyNumFieldNumber;
const int Duplicate_BuyCountRsp::kGroupIdFieldNumber;
#endif  // !_MSC_VER

Duplicate_BuyCountRsp::Duplicate_BuyCountRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_BuyCountRsp::InitAsDefaultInstance() {
}

Duplicate_BuyCountRsp::Duplicate_BuyCountRsp(const Duplicate_BuyCountRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_BuyCountRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  buy_num_ = 0;
  group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_BuyCountRsp::~Duplicate_BuyCountRsp() {
  SharedDtor();
}

void Duplicate_BuyCountRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_BuyCountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_BuyCountRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_BuyCountRsp_descriptor_;
}

const Duplicate_BuyCountRsp& Duplicate_BuyCountRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_BuyCountRsp* Duplicate_BuyCountRsp::default_instance_ = NULL;

Duplicate_BuyCountRsp* Duplicate_BuyCountRsp::New() const {
  return new Duplicate_BuyCountRsp;
}

void Duplicate_BuyCountRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    buy_num_ = 0;
    group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_BuyCountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // optional int32 group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_BuyCountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_num(), output);
  }

  // optional int32 group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_BuyCountRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 buy_num = 2;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_num(), target);
  }

  // optional int32 group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_BuyCountRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 buy_num = 2;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional int32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_BuyCountRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_BuyCountRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_BuyCountRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_BuyCountRsp::MergeFrom(const Duplicate_BuyCountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_BuyCountRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_BuyCountRsp::CopyFrom(const Duplicate_BuyCountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_BuyCountRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_BuyCountRsp::Swap(Duplicate_BuyCountRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_BuyCountRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_BuyCountRsp_descriptor_;
  metadata.reflection = Duplicate_BuyCountRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Duplicate_AutoChallengeReq::Duplicate_AutoChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_AutoChallengeReq::InitAsDefaultInstance() {
}

Duplicate_AutoChallengeReq::Duplicate_AutoChallengeReq(const Duplicate_AutoChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_AutoChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_AutoChallengeReq::~Duplicate_AutoChallengeReq() {
  SharedDtor();
}

void Duplicate_AutoChallengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_AutoChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_AutoChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_AutoChallengeReq_descriptor_;
}

const Duplicate_AutoChallengeReq& Duplicate_AutoChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_AutoChallengeReq* Duplicate_AutoChallengeReq::default_instance_ = NULL;

Duplicate_AutoChallengeReq* Duplicate_AutoChallengeReq::New() const {
  return new Duplicate_AutoChallengeReq;
}

void Duplicate_AutoChallengeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_AutoChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Duplicate_AutoChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_AutoChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_AutoChallengeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_AutoChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_AutoChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_AutoChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_AutoChallengeReq::MergeFrom(const Duplicate_AutoChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_AutoChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_AutoChallengeReq::CopyFrom(const Duplicate_AutoChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_AutoChallengeReq::IsInitialized() const {

  return true;
}

void Duplicate_AutoChallengeReq::Swap(Duplicate_AutoChallengeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_AutoChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_AutoChallengeReq_descriptor_;
  metadata.reflection = Duplicate_AutoChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_AutoChallengeRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_AutoChallengeRsp::Duplicate_AutoChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_AutoChallengeRsp::InitAsDefaultInstance() {
}

Duplicate_AutoChallengeRsp::Duplicate_AutoChallengeRsp(const Duplicate_AutoChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_AutoChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_AutoChallengeRsp::~Duplicate_AutoChallengeRsp() {
  SharedDtor();
}

void Duplicate_AutoChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_AutoChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_AutoChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_AutoChallengeRsp_descriptor_;
}

const Duplicate_AutoChallengeRsp& Duplicate_AutoChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_AutoChallengeRsp* Duplicate_AutoChallengeRsp::default_instance_ = NULL;

Duplicate_AutoChallengeRsp* Duplicate_AutoChallengeRsp::New() const {
  return new Duplicate_AutoChallengeRsp;
}

void Duplicate_AutoChallengeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_AutoChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_AutoChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_AutoChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_AutoChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_AutoChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_AutoChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_AutoChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_AutoChallengeRsp::MergeFrom(const Duplicate_AutoChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_AutoChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_AutoChallengeRsp::CopyFrom(const Duplicate_AutoChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_AutoChallengeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_AutoChallengeRsp::Swap(Duplicate_AutoChallengeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_AutoChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_AutoChallengeRsp_descriptor_;
  metadata.reflection = Duplicate_AutoChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_FightDataRsp::kFightDataFieldNumber;
#endif  // !_MSC_VER

Duplicate_FightDataRsp::Duplicate_FightDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_FightDataRsp::InitAsDefaultInstance() {
}

Duplicate_FightDataRsp::Duplicate_FightDataRsp(const Duplicate_FightDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_FightDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_FightDataRsp::~Duplicate_FightDataRsp() {
  SharedDtor();
}

void Duplicate_FightDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_FightDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_FightDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_FightDataRsp_descriptor_;
}

const Duplicate_FightDataRsp& Duplicate_FightDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_FightDataRsp* Duplicate_FightDataRsp::default_instance_ = NULL;

Duplicate_FightDataRsp* Duplicate_FightDataRsp::New() const {
  return new Duplicate_FightDataRsp;
}

void Duplicate_FightDataRsp::Clear() {
  fight_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_FightDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.DupFightDataProto fight_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fight_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_FightDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.DupFightDataProto fight_data = 1;
  for (int i = 0; i < this->fight_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fight_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_FightDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.DupFightDataProto fight_data = 1;
  for (int i = 0; i < this->fight_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fight_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_FightDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.DupFightDataProto fight_data = 1;
  total_size += 1 * this->fight_data_size();
  for (int i = 0; i < this->fight_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fight_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_FightDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_FightDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_FightDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_FightDataRsp::MergeFrom(const Duplicate_FightDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fight_data_.MergeFrom(from.fight_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_FightDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_FightDataRsp::CopyFrom(const Duplicate_FightDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_FightDataRsp::IsInitialized() const {

  for (int i = 0; i < fight_data_size(); i++) {
    if (!this->fight_data(i).IsInitialized()) return false;
  }
  return true;
}

void Duplicate_FightDataRsp::Swap(Duplicate_FightDataRsp* other) {
  if (other != this) {
    fight_data_.Swap(&other->fight_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_FightDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_FightDataRsp_descriptor_;
  metadata.reflection = Duplicate_FightDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_MonsWaveRsp::kWaveFieldNumber;
const int Duplicate_MonsWaveRsp::kSecFieldNumber;
#endif  // !_MSC_VER

Duplicate_MonsWaveRsp::Duplicate_MonsWaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_MonsWaveRsp::InitAsDefaultInstance() {
}

Duplicate_MonsWaveRsp::Duplicate_MonsWaveRsp(const Duplicate_MonsWaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_MonsWaveRsp::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0;
  sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_MonsWaveRsp::~Duplicate_MonsWaveRsp() {
  SharedDtor();
}

void Duplicate_MonsWaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_MonsWaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_MonsWaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_MonsWaveRsp_descriptor_;
}

const Duplicate_MonsWaveRsp& Duplicate_MonsWaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_MonsWaveRsp* Duplicate_MonsWaveRsp::default_instance_ = NULL;

Duplicate_MonsWaveRsp* Duplicate_MonsWaveRsp::New() const {
  return new Duplicate_MonsWaveRsp;
}

void Duplicate_MonsWaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wave_ = 0;
    sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_MonsWaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sec;
        break;
      }

      // required int32 sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_MonsWaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 wave = 1;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wave(), output);
  }

  // required int32 sec = 2;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_MonsWaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 wave = 1;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wave(), target);
  }

  // required int32 sec = 2;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_MonsWaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 wave = 1;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

    // required int32 sec = 2;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_MonsWaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_MonsWaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_MonsWaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_MonsWaveRsp::MergeFrom(const Duplicate_MonsWaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_MonsWaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_MonsWaveRsp::CopyFrom(const Duplicate_MonsWaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_MonsWaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Duplicate_MonsWaveRsp::Swap(Duplicate_MonsWaveRsp* other) {
  if (other != this) {
    std::swap(wave_, other->wave_);
    std::swap(sec_, other->sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_MonsWaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_MonsWaveRsp_descriptor_;
  metadata.reflection = Duplicate_MonsWaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_MonsNumRsp::kNumFieldNumber;
#endif  // !_MSC_VER

Duplicate_MonsNumRsp::Duplicate_MonsNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_MonsNumRsp::InitAsDefaultInstance() {
}

Duplicate_MonsNumRsp::Duplicate_MonsNumRsp(const Duplicate_MonsNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_MonsNumRsp::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_MonsNumRsp::~Duplicate_MonsNumRsp() {
  SharedDtor();
}

void Duplicate_MonsNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_MonsNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_MonsNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_MonsNumRsp_descriptor_;
}

const Duplicate_MonsNumRsp& Duplicate_MonsNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_MonsNumRsp* Duplicate_MonsNumRsp::default_instance_ = NULL;

Duplicate_MonsNumRsp* Duplicate_MonsNumRsp::New() const {
  return new Duplicate_MonsNumRsp;
}

void Duplicate_MonsNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_MonsNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_MonsNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_MonsNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_MonsNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_MonsNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_MonsNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_MonsNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_MonsNumRsp::MergeFrom(const Duplicate_MonsNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_MonsNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_MonsNumRsp::CopyFrom(const Duplicate_MonsNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_MonsNumRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_MonsNumRsp::Swap(Duplicate_MonsNumRsp* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_MonsNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_MonsNumRsp_descriptor_;
  metadata.reflection = Duplicate_MonsNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_MonsStateRsp::kMonStateFieldNumber;
#endif  // !_MSC_VER

Duplicate_MonsStateRsp::Duplicate_MonsStateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_MonsStateRsp::InitAsDefaultInstance() {
}

Duplicate_MonsStateRsp::Duplicate_MonsStateRsp(const Duplicate_MonsStateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_MonsStateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_MonsStateRsp::~Duplicate_MonsStateRsp() {
  SharedDtor();
}

void Duplicate_MonsStateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_MonsStateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_MonsStateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_MonsStateRsp_descriptor_;
}

const Duplicate_MonsStateRsp& Duplicate_MonsStateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_MonsStateRsp* Duplicate_MonsStateRsp::default_instance_ = NULL;

Duplicate_MonsStateRsp* Duplicate_MonsStateRsp::New() const {
  return new Duplicate_MonsStateRsp;
}

void Duplicate_MonsStateRsp::Clear() {
  mon_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_MonsStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.DupMonsStateProto mon_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mon_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mon_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mon_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_MonsStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.DupMonsStateProto mon_state = 1;
  for (int i = 0; i < this->mon_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mon_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_MonsStateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.DupMonsStateProto mon_state = 1;
  for (int i = 0; i < this->mon_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mon_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_MonsStateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.DupMonsStateProto mon_state = 1;
  total_size += 1 * this->mon_state_size();
  for (int i = 0; i < this->mon_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mon_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_MonsStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_MonsStateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_MonsStateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_MonsStateRsp::MergeFrom(const Duplicate_MonsStateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mon_state_.MergeFrom(from.mon_state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_MonsStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_MonsStateRsp::CopyFrom(const Duplicate_MonsStateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_MonsStateRsp::IsInitialized() const {

  for (int i = 0; i < mon_state_size(); i++) {
    if (!this->mon_state(i).IsInitialized()) return false;
  }
  return true;
}

void Duplicate_MonsStateRsp::Swap(Duplicate_MonsStateRsp* other) {
  if (other != this) {
    mon_state_.Swap(&other->mon_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_MonsStateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_MonsStateRsp_descriptor_;
  metadata.reflection = Duplicate_MonsStateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_ReliveNumRsp::kCountFieldNumber;
#endif  // !_MSC_VER

Duplicate_ReliveNumRsp::Duplicate_ReliveNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_ReliveNumRsp::InitAsDefaultInstance() {
}

Duplicate_ReliveNumRsp::Duplicate_ReliveNumRsp(const Duplicate_ReliveNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_ReliveNumRsp::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_ReliveNumRsp::~Duplicate_ReliveNumRsp() {
  SharedDtor();
}

void Duplicate_ReliveNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_ReliveNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_ReliveNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_ReliveNumRsp_descriptor_;
}

const Duplicate_ReliveNumRsp& Duplicate_ReliveNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_ReliveNumRsp* Duplicate_ReliveNumRsp::default_instance_ = NULL;

Duplicate_ReliveNumRsp* Duplicate_ReliveNumRsp::New() const {
  return new Duplicate_ReliveNumRsp;
}

void Duplicate_ReliveNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_ReliveNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_ReliveNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_ReliveNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_ReliveNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_ReliveNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_ReliveNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_ReliveNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_ReliveNumRsp::MergeFrom(const Duplicate_ReliveNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_ReliveNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_ReliveNumRsp::CopyFrom(const Duplicate_ReliveNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_ReliveNumRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_ReliveNumRsp::Swap(Duplicate_ReliveNumRsp* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_ReliveNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_ReliveNumRsp_descriptor_;
  metadata.reflection = Duplicate_ReliveNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_TowerHpRsp::kHpFieldNumber;
#endif  // !_MSC_VER

Duplicate_TowerHpRsp::Duplicate_TowerHpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_TowerHpRsp::InitAsDefaultInstance() {
}

Duplicate_TowerHpRsp::Duplicate_TowerHpRsp(const Duplicate_TowerHpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_TowerHpRsp::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_TowerHpRsp::~Duplicate_TowerHpRsp() {
  SharedDtor();
}

void Duplicate_TowerHpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_TowerHpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_TowerHpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_TowerHpRsp_descriptor_;
}

const Duplicate_TowerHpRsp& Duplicate_TowerHpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_TowerHpRsp* Duplicate_TowerHpRsp::default_instance_ = NULL;

Duplicate_TowerHpRsp* Duplicate_TowerHpRsp::New() const {
  return new Duplicate_TowerHpRsp;
}

void Duplicate_TowerHpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_TowerHpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_TowerHpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_TowerHpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_TowerHpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_TowerHpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_TowerHpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_TowerHpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_TowerHpRsp::MergeFrom(const Duplicate_TowerHpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_TowerHpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_TowerHpRsp::CopyFrom(const Duplicate_TowerHpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_TowerHpRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_TowerHpRsp::Swap(Duplicate_TowerHpRsp* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_TowerHpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_TowerHpRsp_descriptor_;
  metadata.reflection = Duplicate_TowerHpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_TransMonsNumRsp::kTransNumFieldNumber;
#endif  // !_MSC_VER

Duplicate_TransMonsNumRsp::Duplicate_TransMonsNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_TransMonsNumRsp::InitAsDefaultInstance() {
}

Duplicate_TransMonsNumRsp::Duplicate_TransMonsNumRsp(const Duplicate_TransMonsNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_TransMonsNumRsp::SharedCtor() {
  _cached_size_ = 0;
  trans_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_TransMonsNumRsp::~Duplicate_TransMonsNumRsp() {
  SharedDtor();
}

void Duplicate_TransMonsNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_TransMonsNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_TransMonsNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_TransMonsNumRsp_descriptor_;
}

const Duplicate_TransMonsNumRsp& Duplicate_TransMonsNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

Duplicate_TransMonsNumRsp* Duplicate_TransMonsNumRsp::default_instance_ = NULL;

Duplicate_TransMonsNumRsp* Duplicate_TransMonsNumRsp::New() const {
  return new Duplicate_TransMonsNumRsp;
}

void Duplicate_TransMonsNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trans_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_TransMonsNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trans_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_num_)));
          set_has_trans_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_TransMonsNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trans_num = 1;
  if (has_trans_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trans_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_TransMonsNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trans_num = 1;
  if (has_trans_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trans_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_TransMonsNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trans_num = 1;
    if (has_trans_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_TransMonsNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_TransMonsNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_TransMonsNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_TransMonsNumRsp::MergeFrom(const Duplicate_TransMonsNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans_num()) {
      set_trans_num(from.trans_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_TransMonsNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_TransMonsNumRsp::CopyFrom(const Duplicate_TransMonsNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_TransMonsNumRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_TransMonsNumRsp::Swap(Duplicate_TransMonsNumRsp* other) {
  if (other != this) {
    std::swap(trans_num_, other->trans_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_TransMonsNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_TransMonsNumRsp_descriptor_;
  metadata.reflection = Duplicate_TransMonsNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupBeforAreaProto::kCharIdFieldNumber;
const int DupBeforAreaProto::kAreaIdFieldNumber;
#endif  // !_MSC_VER

DupBeforAreaProto::DupBeforAreaProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupBeforAreaProto::InitAsDefaultInstance() {
}

DupBeforAreaProto::DupBeforAreaProto(const DupBeforAreaProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupBeforAreaProto::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  areaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupBeforAreaProto::~DupBeforAreaProto() {
  SharedDtor();
}

void DupBeforAreaProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupBeforAreaProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupBeforAreaProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupBeforAreaProto_descriptor_;
}

const DupBeforAreaProto& DupBeforAreaProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

DupBeforAreaProto* DupBeforAreaProto::default_instance_ = NULL;

DupBeforAreaProto* DupBeforAreaProto::New() const {
  return new DupBeforAreaProto;
}

void DupBeforAreaProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    areaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupBeforAreaProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaId;
        break;
      }

      // required uint32 areaId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupBeforAreaProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 areaId = 2;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupBeforAreaProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 areaId = 2;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupBeforAreaProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 areaId = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupBeforAreaProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupBeforAreaProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupBeforAreaProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupBeforAreaProto::MergeFrom(const DupBeforAreaProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupBeforAreaProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupBeforAreaProto::CopyFrom(const DupBeforAreaProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupBeforAreaProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DupBeforAreaProto::Swap(DupBeforAreaProto* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupBeforAreaProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupBeforAreaProto_descriptor_;
  metadata.reflection = DupBeforAreaProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_EnterDupReq::kCharIdFieldNumber;
const int LogicToCenter_EnterDupReq::kDuplicateIdFieldNumber;
const int LogicToCenter_EnterDupReq::kKeyTypeFieldNumber;
const int LogicToCenter_EnterDupReq::kKeyValueFieldNumber;
const int LogicToCenter_EnterDupReq::kAreaFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_EnterDupReq::LogicToCenter_EnterDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_EnterDupReq::InitAsDefaultInstance() {
}

LogicToCenter_EnterDupReq::LogicToCenter_EnterDupReq(const LogicToCenter_EnterDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_EnterDupReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  duplicate_id_ = 0u;
  key_type_ = 0;
  key_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_EnterDupReq::~LogicToCenter_EnterDupReq() {
  SharedDtor();
}

void LogicToCenter_EnterDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_EnterDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_EnterDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_EnterDupReq_descriptor_;
}

const LogicToCenter_EnterDupReq& LogicToCenter_EnterDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_EnterDupReq* LogicToCenter_EnterDupReq::default_instance_ = NULL;

LogicToCenter_EnterDupReq* LogicToCenter_EnterDupReq::New() const {
  return new LogicToCenter_EnterDupReq;
}

void LogicToCenter_EnterDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    duplicate_id_ = 0u;
    key_type_ = 0;
    key_value_ = GOOGLE_ULONGLONG(0);
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_EnterDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key_type;
        break;
      }

      // required int32 key_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_value;
        break;
      }

      // required uint64 key_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_area;
        break;
      }

      // repeated .ProtoBuf.DupBeforAreaProto area = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_area;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_EnterDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duplicate_id(), output);
  }

  // required int32 key_type = 3;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key_type(), output);
  }

  // required uint64 key_value = 4;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->key_value(), output);
  }

  // repeated .ProtoBuf.DupBeforAreaProto area = 5;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_EnterDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duplicate_id(), target);
  }

  // required int32 key_type = 3;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->key_type(), target);
  }

  // required uint64 key_value = 4;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->key_value(), target);
  }

  // repeated .ProtoBuf.DupBeforAreaProto area = 5;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_EnterDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required int32 key_type = 3;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

    // required uint64 key_value = 4;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

  }
  // repeated .ProtoBuf.DupBeforAreaProto area = 5;
  total_size += 1 * this->area_size();
  for (int i = 0; i < this->area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_EnterDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_EnterDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_EnterDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_EnterDupReq::MergeFrom(const LogicToCenter_EnterDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_EnterDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_EnterDupReq::CopyFrom(const LogicToCenter_EnterDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_EnterDupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < area_size(); i++) {
    if (!this->area(i).IsInitialized()) return false;
  }
  return true;
}

void LogicToCenter_EnterDupReq::Swap(LogicToCenter_EnterDupReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(key_type_, other->key_type_);
    std::swap(key_value_, other->key_value_);
    area_.Swap(&other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_EnterDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_EnterDupReq_descriptor_;
  metadata.reflection = LogicToCenter_EnterDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogic_EnterDupRsp::kRetcodeFieldNumber;
const int CenterToLogic_EnterDupRsp::kCharIdFieldNumber;
const int CenterToLogic_EnterDupRsp::kDuplicateIdFieldNumber;
const int CenterToLogic_EnterDupRsp::kKeyTypeFieldNumber;
const int CenterToLogic_EnterDupRsp::kKeyValueFieldNumber;
#endif  // !_MSC_VER

CenterToLogic_EnterDupRsp::CenterToLogic_EnterDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogic_EnterDupRsp::InitAsDefaultInstance() {
}

CenterToLogic_EnterDupRsp::CenterToLogic_EnterDupRsp(const CenterToLogic_EnterDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogic_EnterDupRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  charid_ = 0u;
  duplicate_id_ = 0u;
  key_type_ = 0;
  key_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogic_EnterDupRsp::~CenterToLogic_EnterDupRsp() {
  SharedDtor();
}

void CenterToLogic_EnterDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogic_EnterDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogic_EnterDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogic_EnterDupRsp_descriptor_;
}

const CenterToLogic_EnterDupRsp& CenterToLogic_EnterDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

CenterToLogic_EnterDupRsp* CenterToLogic_EnterDupRsp::default_instance_ = NULL;

CenterToLogic_EnterDupRsp* CenterToLogic_EnterDupRsp::New() const {
  return new CenterToLogic_EnterDupRsp;
}

void CenterToLogic_EnterDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    charid_ = 0u;
    duplicate_id_ = 0u;
    key_type_ = 0;
    key_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogic_EnterDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_type;
        break;
      }

      // required int32 key_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_key_value;
        break;
      }

      // required uint64 key_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogic_EnterDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duplicate_id(), output);
  }

  // required int32 key_type = 4;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->key_type(), output);
  }

  // required uint64 key_value = 5;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->key_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogic_EnterDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duplicate_id(), target);
  }

  // required int32 key_type = 4;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->key_type(), target);
  }

  // required uint64 key_value = 5;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->key_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogic_EnterDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 duplicate_id = 3;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required int32 key_type = 4;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

    // required uint64 key_value = 5;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogic_EnterDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogic_EnterDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogic_EnterDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogic_EnterDupRsp::MergeFrom(const CenterToLogic_EnterDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogic_EnterDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogic_EnterDupRsp::CopyFrom(const CenterToLogic_EnterDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogic_EnterDupRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CenterToLogic_EnterDupRsp::Swap(CenterToLogic_EnterDupRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(key_type_, other->key_type_);
    std::swap(key_value_, other->key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogic_EnterDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogic_EnterDupRsp_descriptor_;
  metadata.reflection = CenterToLogic_EnterDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_CreateSceneReq::kCharIdFieldNumber;
const int LogicToCenter_CreateSceneReq::kDuplicateIdFieldNumber;
const int LogicToCenter_CreateSceneReq::kKeyTypeFieldNumber;
const int LogicToCenter_CreateSceneReq::kKeyValueFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_CreateSceneReq::LogicToCenter_CreateSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_CreateSceneReq::InitAsDefaultInstance() {
}

LogicToCenter_CreateSceneReq::LogicToCenter_CreateSceneReq(const LogicToCenter_CreateSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_CreateSceneReq::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  key_type_ = 0;
  key_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_CreateSceneReq::~LogicToCenter_CreateSceneReq() {
  SharedDtor();
}

void LogicToCenter_CreateSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_CreateSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_CreateSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_CreateSceneReq_descriptor_;
}

const LogicToCenter_CreateSceneReq& LogicToCenter_CreateSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_CreateSceneReq* LogicToCenter_CreateSceneReq::default_instance_ = NULL;

LogicToCenter_CreateSceneReq* LogicToCenter_CreateSceneReq::New() const {
  return new LogicToCenter_CreateSceneReq;
}

void LogicToCenter_CreateSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    duplicate_id_ = 0u;
    key_type_ = 0;
    key_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_CreateSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key_type;
        break;
      }

      // required int32 key_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_value;
        break;
      }

      // required uint64 key_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_CreateSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duplicate_id(), output);
  }

  // required int32 key_type = 3;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key_type(), output);
  }

  // required uint64 key_value = 4;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->key_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_CreateSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duplicate_id(), target);
  }

  // required int32 key_type = 3;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->key_type(), target);
  }

  // required uint64 key_value = 4;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->key_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_CreateSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required int32 key_type = 3;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

    // required uint64 key_value = 4;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_CreateSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_CreateSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_CreateSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_CreateSceneReq::MergeFrom(const LogicToCenter_CreateSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_CreateSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_CreateSceneReq::CopyFrom(const LogicToCenter_CreateSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_CreateSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogicToCenter_CreateSceneReq::Swap(LogicToCenter_CreateSceneReq* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(key_type_, other->key_type_);
    std::swap(key_value_, other->key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_CreateSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_CreateSceneReq_descriptor_;
  metadata.reflection = LogicToCenter_CreateSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogic_CreateSceneRsp::kRetcodeFieldNumber;
const int CenterToLogic_CreateSceneRsp::kCharIdFieldNumber;
const int CenterToLogic_CreateSceneRsp::kDuplicateIdFieldNumber;
const int CenterToLogic_CreateSceneRsp::kKeyTypeFieldNumber;
const int CenterToLogic_CreateSceneRsp::kKeyValueFieldNumber;
const int CenterToLogic_CreateSceneRsp::kSceneIdFieldNumber;
const int CenterToLogic_CreateSceneRsp::kAreaFieldNumber;
#endif  // !_MSC_VER

CenterToLogic_CreateSceneRsp::CenterToLogic_CreateSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogic_CreateSceneRsp::InitAsDefaultInstance() {
}

CenterToLogic_CreateSceneRsp::CenterToLogic_CreateSceneRsp(const CenterToLogic_CreateSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogic_CreateSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  key_type_ = 0;
  key_value_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogic_CreateSceneRsp::~CenterToLogic_CreateSceneRsp() {
  SharedDtor();
}

void CenterToLogic_CreateSceneRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogic_CreateSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogic_CreateSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogic_CreateSceneRsp_descriptor_;
}

const CenterToLogic_CreateSceneRsp& CenterToLogic_CreateSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

CenterToLogic_CreateSceneRsp* CenterToLogic_CreateSceneRsp::default_instance_ = NULL;

CenterToLogic_CreateSceneRsp* CenterToLogic_CreateSceneRsp::New() const {
  return new CenterToLogic_CreateSceneRsp;
}

void CenterToLogic_CreateSceneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    char_id_ = 0u;
    duplicate_id_ = 0u;
    key_type_ = 0;
    key_value_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0u;
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogic_CreateSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_id;
        break;
      }

      // required uint32 char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_type;
        break;
      }

      // required int32 key_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_key_value;
        break;
      }

      // required uint64 key_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_area;
        break;
      }

      // repeated .ProtoBuf.DupBeforAreaProto area = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_area;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogic_CreateSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_id(), output);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duplicate_id(), output);
  }

  // required int32 key_type = 4;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->key_type(), output);
  }

  // required uint64 key_value = 5;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->key_value(), output);
  }

  // optional uint32 scene_id = 6;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scene_id(), output);
  }

  // repeated .ProtoBuf.DupBeforAreaProto area = 7;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogic_CreateSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_id(), target);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duplicate_id(), target);
  }

  // required int32 key_type = 4;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->key_type(), target);
  }

  // required uint64 key_value = 5;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->key_value(), target);
  }

  // optional uint32 scene_id = 6;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scene_id(), target);
  }

  // repeated .ProtoBuf.DupBeforAreaProto area = 7;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogic_CreateSceneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 char_id = 2;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 3;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required int32 key_type = 4;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

    // required uint64 key_value = 5;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

    // optional uint32 scene_id = 6;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  // repeated .ProtoBuf.DupBeforAreaProto area = 7;
  total_size += 1 * this->area_size();
  for (int i = 0; i < this->area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogic_CreateSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogic_CreateSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogic_CreateSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogic_CreateSceneRsp::MergeFrom(const CenterToLogic_CreateSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogic_CreateSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogic_CreateSceneRsp::CopyFrom(const CenterToLogic_CreateSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogic_CreateSceneRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < area_size(); i++) {
    if (!this->area(i).IsInitialized()) return false;
  }
  return true;
}

void CenterToLogic_CreateSceneRsp::Swap(CenterToLogic_CreateSceneRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(key_type_, other->key_type_);
    std::swap(key_value_, other->key_value_);
    std::swap(scene_id_, other->scene_id_);
    area_.Swap(&other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogic_CreateSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogic_CreateSceneRsp_descriptor_;
  metadata.reflection = CenterToLogic_CreateSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_CreateDuplicateRsp::kRetcodeFieldNumber;
const int LogicToCenter_CreateDuplicateRsp::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_CreateDuplicateRsp::LogicToCenter_CreateDuplicateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_CreateDuplicateRsp::InitAsDefaultInstance() {
}

LogicToCenter_CreateDuplicateRsp::LogicToCenter_CreateDuplicateRsp(const LogicToCenter_CreateDuplicateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_CreateDuplicateRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_CreateDuplicateRsp::~LogicToCenter_CreateDuplicateRsp() {
  SharedDtor();
}

void LogicToCenter_CreateDuplicateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_CreateDuplicateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_CreateDuplicateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_CreateDuplicateRsp_descriptor_;
}

const LogicToCenter_CreateDuplicateRsp& LogicToCenter_CreateDuplicateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_CreateDuplicateRsp* LogicToCenter_CreateDuplicateRsp::default_instance_ = NULL;

LogicToCenter_CreateDuplicateRsp* LogicToCenter_CreateDuplicateRsp::New() const {
  return new LogicToCenter_CreateDuplicateRsp;
}

void LogicToCenter_CreateDuplicateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_CreateDuplicateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_CreateDuplicateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_CreateDuplicateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_CreateDuplicateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_CreateDuplicateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_CreateDuplicateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_CreateDuplicateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_CreateDuplicateRsp::MergeFrom(const LogicToCenter_CreateDuplicateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_CreateDuplicateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_CreateDuplicateRsp::CopyFrom(const LogicToCenter_CreateDuplicateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_CreateDuplicateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicToCenter_CreateDuplicateRsp::Swap(LogicToCenter_CreateDuplicateRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_CreateDuplicateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_CreateDuplicateRsp_descriptor_;
  metadata.reflection = LogicToCenter_CreateDuplicateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogic_DuplicateNotifyPrepare::kCharIdFieldNumber;
const int CenterToLogic_DuplicateNotifyPrepare::kDuplicateIdFieldNumber;
const int CenterToLogic_DuplicateNotifyPrepare::kSceneIdFieldNumber;
const int CenterToLogic_DuplicateNotifyPrepare::kKeyTypeFieldNumber;
const int CenterToLogic_DuplicateNotifyPrepare::kKeyValueFieldNumber;
#endif  // !_MSC_VER

CenterToLogic_DuplicateNotifyPrepare::CenterToLogic_DuplicateNotifyPrepare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogic_DuplicateNotifyPrepare::InitAsDefaultInstance() {
}

CenterToLogic_DuplicateNotifyPrepare::CenterToLogic_DuplicateNotifyPrepare(const CenterToLogic_DuplicateNotifyPrepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogic_DuplicateNotifyPrepare::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  scene_id_ = 0u;
  key_type_ = 0;
  key_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogic_DuplicateNotifyPrepare::~CenterToLogic_DuplicateNotifyPrepare() {
  SharedDtor();
}

void CenterToLogic_DuplicateNotifyPrepare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogic_DuplicateNotifyPrepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogic_DuplicateNotifyPrepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogic_DuplicateNotifyPrepare_descriptor_;
}

const CenterToLogic_DuplicateNotifyPrepare& CenterToLogic_DuplicateNotifyPrepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

CenterToLogic_DuplicateNotifyPrepare* CenterToLogic_DuplicateNotifyPrepare::default_instance_ = NULL;

CenterToLogic_DuplicateNotifyPrepare* CenterToLogic_DuplicateNotifyPrepare::New() const {
  return new CenterToLogic_DuplicateNotifyPrepare;
}

void CenterToLogic_DuplicateNotifyPrepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    duplicate_id_ = 0u;
    scene_id_ = 0u;
    key_type_ = 0;
    key_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogic_DuplicateNotifyPrepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_type;
        break;
      }

      // required int32 key_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_key_value;
        break;
      }

      // required uint64 key_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogic_DuplicateNotifyPrepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duplicate_id(), output);
  }

  // required uint32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  // required int32 key_type = 4;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->key_type(), output);
  }

  // required uint64 key_value = 5;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->key_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogic_DuplicateNotifyPrepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duplicate_id(), target);
  }

  // required uint32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  // required int32 key_type = 4;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->key_type(), target);
  }

  // required uint64 key_value = 5;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->key_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogic_DuplicateNotifyPrepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required uint32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // required int32 key_type = 4;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

    // required uint64 key_value = 5;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogic_DuplicateNotifyPrepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogic_DuplicateNotifyPrepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogic_DuplicateNotifyPrepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogic_DuplicateNotifyPrepare::MergeFrom(const CenterToLogic_DuplicateNotifyPrepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogic_DuplicateNotifyPrepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogic_DuplicateNotifyPrepare::CopyFrom(const CenterToLogic_DuplicateNotifyPrepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogic_DuplicateNotifyPrepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CenterToLogic_DuplicateNotifyPrepare::Swap(CenterToLogic_DuplicateNotifyPrepare* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(key_type_, other->key_type_);
    std::swap(key_value_, other->key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogic_DuplicateNotifyPrepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogic_DuplicateNotifyPrepare_descriptor_;
  metadata.reflection = CenterToLogic_DuplicateNotifyPrepare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicatePrepareRsp::kRetcodeFieldNumber;
const int LogicToCenter_DuplicatePrepareRsp::kCharIdFieldNumber;
const int LogicToCenter_DuplicatePrepareRsp::kDuplicateIdFieldNumber;
const int LogicToCenter_DuplicatePrepareRsp::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicatePrepareRsp::LogicToCenter_DuplicatePrepareRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicatePrepareRsp::InitAsDefaultInstance() {
}

LogicToCenter_DuplicatePrepareRsp::LogicToCenter_DuplicatePrepareRsp(const LogicToCenter_DuplicatePrepareRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicatePrepareRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicatePrepareRsp::~LogicToCenter_DuplicatePrepareRsp() {
  SharedDtor();
}

void LogicToCenter_DuplicatePrepareRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicatePrepareRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicatePrepareRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicatePrepareRsp_descriptor_;
}

const LogicToCenter_DuplicatePrepareRsp& LogicToCenter_DuplicatePrepareRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicatePrepareRsp* LogicToCenter_DuplicatePrepareRsp::default_instance_ = NULL;

LogicToCenter_DuplicatePrepareRsp* LogicToCenter_DuplicatePrepareRsp::New() const {
  return new LogicToCenter_DuplicatePrepareRsp;
}

void LogicToCenter_DuplicatePrepareRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    char_id_ = 0u;
    duplicate_id_ = 0u;
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicatePrepareRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_id;
        break;
      }

      // required uint32 char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicatePrepareRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_id(), output);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duplicate_id(), output);
  }

  // required uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicatePrepareRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_id(), target);
  }

  // required uint32 duplicate_id = 3;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duplicate_id(), target);
  }

  // required uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicatePrepareRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 char_id = 2;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 3;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicatePrepareRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicatePrepareRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicatePrepareRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicatePrepareRsp::MergeFrom(const LogicToCenter_DuplicatePrepareRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicatePrepareRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicatePrepareRsp::CopyFrom(const LogicToCenter_DuplicatePrepareRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicatePrepareRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogicToCenter_DuplicatePrepareRsp::Swap(LogicToCenter_DuplicatePrepareRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicatePrepareRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicatePrepareRsp_descriptor_;
  metadata.reflection = LogicToCenter_DuplicatePrepareRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogic_DuplicateEnterNotify::kCharIdFieldNumber;
const int CenterToLogic_DuplicateEnterNotify::kDuplicateIdFieldNumber;
const int CenterToLogic_DuplicateEnterNotify::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CenterToLogic_DuplicateEnterNotify::CenterToLogic_DuplicateEnterNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogic_DuplicateEnterNotify::InitAsDefaultInstance() {
}

CenterToLogic_DuplicateEnterNotify::CenterToLogic_DuplicateEnterNotify(const CenterToLogic_DuplicateEnterNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogic_DuplicateEnterNotify::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  duplicate_id_ = 0u;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogic_DuplicateEnterNotify::~CenterToLogic_DuplicateEnterNotify() {
  SharedDtor();
}

void CenterToLogic_DuplicateEnterNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogic_DuplicateEnterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogic_DuplicateEnterNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogic_DuplicateEnterNotify_descriptor_;
}

const CenterToLogic_DuplicateEnterNotify& CenterToLogic_DuplicateEnterNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

CenterToLogic_DuplicateEnterNotify* CenterToLogic_DuplicateEnterNotify::default_instance_ = NULL;

CenterToLogic_DuplicateEnterNotify* CenterToLogic_DuplicateEnterNotify::New() const {
  return new CenterToLogic_DuplicateEnterNotify;
}

void CenterToLogic_DuplicateEnterNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    duplicate_id_ = 0u;
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogic_DuplicateEnterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duplicate_id;
        break;
      }

      // required uint32 duplicate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_id_)));
          set_has_duplicate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogic_DuplicateEnterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duplicate_id(), output);
  }

  // required uint32 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogic_DuplicateEnterNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 duplicate_id = 2;
  if (has_duplicate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duplicate_id(), target);
  }

  // required uint32 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogic_DuplicateEnterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 duplicate_id = 2;
    if (has_duplicate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_id());
    }

    // required uint32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogic_DuplicateEnterNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogic_DuplicateEnterNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogic_DuplicateEnterNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogic_DuplicateEnterNotify::MergeFrom(const CenterToLogic_DuplicateEnterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_duplicate_id()) {
      set_duplicate_id(from.duplicate_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogic_DuplicateEnterNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogic_DuplicateEnterNotify::CopyFrom(const CenterToLogic_DuplicateEnterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogic_DuplicateEnterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CenterToLogic_DuplicateEnterNotify::Swap(CenterToLogic_DuplicateEnterNotify* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(duplicate_id_, other->duplicate_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogic_DuplicateEnterNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogic_DuplicateEnterNotify_descriptor_;
  metadata.reflection = CenterToLogic_DuplicateEnterNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicateEnterRsp::kCharIdFieldNumber;
const int LogicToCenter_DuplicateEnterRsp::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicateEnterRsp::LogicToCenter_DuplicateEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicateEnterRsp::InitAsDefaultInstance() {
}

LogicToCenter_DuplicateEnterRsp::LogicToCenter_DuplicateEnterRsp(const LogicToCenter_DuplicateEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicateEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicateEnterRsp::~LogicToCenter_DuplicateEnterRsp() {
  SharedDtor();
}

void LogicToCenter_DuplicateEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicateEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicateEnterRsp_descriptor_;
}

const LogicToCenter_DuplicateEnterRsp& LogicToCenter_DuplicateEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicateEnterRsp* LogicToCenter_DuplicateEnterRsp::default_instance_ = NULL;

LogicToCenter_DuplicateEnterRsp* LogicToCenter_DuplicateEnterRsp::New() const {
  return new LogicToCenter_DuplicateEnterRsp;
}

void LogicToCenter_DuplicateEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicateEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicateEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicateEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicateEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicateEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicateEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicateEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicateEnterRsp::MergeFrom(const LogicToCenter_DuplicateEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicateEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicateEnterRsp::CopyFrom(const LogicToCenter_DuplicateEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicateEnterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicToCenter_DuplicateEnterRsp::Swap(LogicToCenter_DuplicateEnterRsp* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicateEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicateEnterRsp_descriptor_;
  metadata.reflection = LogicToCenter_DuplicateEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicateLeaveRsp::kCharIdFieldNumber;
const int LogicToCenter_DuplicateLeaveRsp::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicateLeaveRsp::LogicToCenter_DuplicateLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicateLeaveRsp::InitAsDefaultInstance() {
}

LogicToCenter_DuplicateLeaveRsp::LogicToCenter_DuplicateLeaveRsp(const LogicToCenter_DuplicateLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicateLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicateLeaveRsp::~LogicToCenter_DuplicateLeaveRsp() {
  SharedDtor();
}

void LogicToCenter_DuplicateLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicateLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicateLeaveRsp_descriptor_;
}

const LogicToCenter_DuplicateLeaveRsp& LogicToCenter_DuplicateLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicateLeaveRsp* LogicToCenter_DuplicateLeaveRsp::default_instance_ = NULL;

LogicToCenter_DuplicateLeaveRsp* LogicToCenter_DuplicateLeaveRsp::New() const {
  return new LogicToCenter_DuplicateLeaveRsp;
}

void LogicToCenter_DuplicateLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicateLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicateLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicateLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicateLeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicateLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicateLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicateLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicateLeaveRsp::MergeFrom(const LogicToCenter_DuplicateLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicateLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicateLeaveRsp::CopyFrom(const LogicToCenter_DuplicateLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicateLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicToCenter_DuplicateLeaveRsp::Swap(LogicToCenter_DuplicateLeaveRsp* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicateLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicateLeaveRsp_descriptor_;
  metadata.reflection = LogicToCenter_DuplicateLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicateBegin::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicateBegin::LogicToCenter_DuplicateBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicateBegin::InitAsDefaultInstance() {
}

LogicToCenter_DuplicateBegin::LogicToCenter_DuplicateBegin(const LogicToCenter_DuplicateBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicateBegin::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicateBegin::~LogicToCenter_DuplicateBegin() {
  SharedDtor();
}

void LogicToCenter_DuplicateBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicateBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicateBegin_descriptor_;
}

const LogicToCenter_DuplicateBegin& LogicToCenter_DuplicateBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicateBegin* LogicToCenter_DuplicateBegin::default_instance_ = NULL;

LogicToCenter_DuplicateBegin* LogicToCenter_DuplicateBegin::New() const {
  return new LogicToCenter_DuplicateBegin;
}

void LogicToCenter_DuplicateBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicateBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicateBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicateBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicateBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicateBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicateBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicateBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicateBegin::MergeFrom(const LogicToCenter_DuplicateBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicateBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicateBegin::CopyFrom(const LogicToCenter_DuplicateBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicateBegin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogicToCenter_DuplicateBegin::Swap(LogicToCenter_DuplicateBegin* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicateBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicateBegin_descriptor_;
  metadata.reflection = LogicToCenter_DuplicateBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicateEnd::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicateEnd::LogicToCenter_DuplicateEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicateEnd::InitAsDefaultInstance() {
}

LogicToCenter_DuplicateEnd::LogicToCenter_DuplicateEnd(const LogicToCenter_DuplicateEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicateEnd::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicateEnd::~LogicToCenter_DuplicateEnd() {
  SharedDtor();
}

void LogicToCenter_DuplicateEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicateEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicateEnd_descriptor_;
}

const LogicToCenter_DuplicateEnd& LogicToCenter_DuplicateEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicateEnd* LogicToCenter_DuplicateEnd::default_instance_ = NULL;

LogicToCenter_DuplicateEnd* LogicToCenter_DuplicateEnd::New() const {
  return new LogicToCenter_DuplicateEnd;
}

void LogicToCenter_DuplicateEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicateEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicateEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicateEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicateEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicateEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicateEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicateEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicateEnd::MergeFrom(const LogicToCenter_DuplicateEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicateEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicateEnd::CopyFrom(const LogicToCenter_DuplicateEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicateEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogicToCenter_DuplicateEnd::Swap(LogicToCenter_DuplicateEnd* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicateEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicateEnd_descriptor_;
  metadata.reflection = LogicToCenter_DuplicateEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_DuplicateDestory::kSceneIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_DuplicateDestory::LogicToCenter_DuplicateDestory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_DuplicateDestory::InitAsDefaultInstance() {
}

LogicToCenter_DuplicateDestory::LogicToCenter_DuplicateDestory(const LogicToCenter_DuplicateDestory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_DuplicateDestory::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_DuplicateDestory::~LogicToCenter_DuplicateDestory() {
  SharedDtor();
}

void LogicToCenter_DuplicateDestory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_DuplicateDestory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_DuplicateDestory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_DuplicateDestory_descriptor_;
}

const LogicToCenter_DuplicateDestory& LogicToCenter_DuplicateDestory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDuplicate_2eproto();
  return *default_instance_;
}

LogicToCenter_DuplicateDestory* LogicToCenter_DuplicateDestory::default_instance_ = NULL;

LogicToCenter_DuplicateDestory* LogicToCenter_DuplicateDestory::New() const {
  return new LogicToCenter_DuplicateDestory;
}

void LogicToCenter_DuplicateDestory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_DuplicateDestory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_DuplicateDestory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_DuplicateDestory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_DuplicateDestory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_DuplicateDestory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_DuplicateDestory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_DuplicateDestory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_DuplicateDestory::MergeFrom(const LogicToCenter_DuplicateDestory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_DuplicateDestory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_DuplicateDestory::CopyFrom(const LogicToCenter_DuplicateDestory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_DuplicateDestory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogicToCenter_DuplicateDestory::Swap(LogicToCenter_DuplicateDestory* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_DuplicateDestory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_DuplicateDestory_descriptor_;
  metadata.reflection = LogicToCenter_DuplicateDestory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
