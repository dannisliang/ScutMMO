// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* RoomMemberProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMemberProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomAllMemberProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomAllMemberProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomDetailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomDetailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_CreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_CreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SetPwdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SetPwdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_SetPwdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_SetPwdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_JoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_JoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_JoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_JoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_InviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_InviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_InviteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_InviteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_ReplyInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_ReplyInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_ReplyInviteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_ReplyInviteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_KickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_KickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_KickRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_KickRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_LeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_LeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_LeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_LeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_AutoJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_AutoJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_AutoJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_AutoJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyRecvInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyRecvInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyRefuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyRefuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyMemberKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyMemberKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_NotifyDismiss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_NotifyDismiss_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_SetPwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_SetPwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_Join_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_Join_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_InviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_InviteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_ReplyInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_ReplyInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_KickRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_KickRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_LeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_LeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCRoom_AutoJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCRoom_AutoJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLRoom_CharRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLRoom_CharRoomNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fRoom_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Room.proto");
  GOOGLE_CHECK(file != NULL);
  RoomMemberProto_descriptor_ = file->message_type(0);
  static const int RoomMemberProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, type_),
  };
  RoomMemberProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMemberProto_descriptor_,
      RoomMemberProto::default_instance_,
      RoomMemberProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMemberProto));
  RoomAllMemberProto_descriptor_ = file->message_type(1);
  static const int RoomAllMemberProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAllMemberProto, member_),
  };
  RoomAllMemberProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomAllMemberProto_descriptor_,
      RoomAllMemberProto::default_instance_,
      RoomAllMemberProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAllMemberProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAllMemberProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomAllMemberProto));
  RoomProto_descriptor_ = file->message_type(2);
  static const int RoomProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProto, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProto, dup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProto, pwd_),
  };
  RoomProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomProto_descriptor_,
      RoomProto::default_instance_,
      RoomProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomProto));
  RoomDetailProto_descriptor_ = file->message_type(3);
  static const int RoomDetailProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailProto, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailProto, member_),
  };
  RoomDetailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomDetailProto_descriptor_,
      RoomDetailProto::default_instance_,
      RoomDetailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomDetailProto));
  Room_CreateReq_descriptor_ = file->message_type(4);
  static const int Room_CreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateReq, dup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateReq, pwd_),
  };
  Room_CreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CreateReq_descriptor_,
      Room_CreateReq::default_instance_,
      Room_CreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CreateReq));
  Room_CreateRsp_descriptor_ = file->message_type(5);
  static const int Room_CreateRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateRsp, detail_),
  };
  Room_CreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_CreateRsp_descriptor_,
      Room_CreateRsp::default_instance_,
      Room_CreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_CreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_CreateRsp));
  Room_SetPwdReq_descriptor_ = file->message_type(6);
  static const int Room_SetPwdReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdReq, pwd_),
  };
  Room_SetPwdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SetPwdReq_descriptor_,
      Room_SetPwdReq::default_instance_,
      Room_SetPwdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SetPwdReq));
  Room_SetPwdRsp_descriptor_ = file->message_type(7);
  static const int Room_SetPwdRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdRsp, pwd_),
  };
  Room_SetPwdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_SetPwdRsp_descriptor_,
      Room_SetPwdRsp::default_instance_,
      Room_SetPwdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_SetPwdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_SetPwdRsp));
  Room_JoinReq_descriptor_ = file->message_type(8);
  static const int Room_JoinReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinReq, dup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinReq, pwd_),
  };
  Room_JoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_JoinReq_descriptor_,
      Room_JoinReq::default_instance_,
      Room_JoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_JoinReq));
  Room_JoinRsp_descriptor_ = file->message_type(9);
  static const int Room_JoinRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinRsp, detail_),
  };
  Room_JoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_JoinRsp_descriptor_,
      Room_JoinRsp::default_instance_,
      Room_JoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_JoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_JoinRsp));
  Room_InviteReq_descriptor_ = file->message_type(10);
  static const int Room_InviteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_InviteReq, friend_cid_),
  };
  Room_InviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_InviteReq_descriptor_,
      Room_InviteReq::default_instance_,
      Room_InviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_InviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_InviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_InviteReq));
  Room_InviteRsp_descriptor_ = file->message_type(11);
  static const int Room_InviteRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_InviteRsp, retcode_),
  };
  Room_InviteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_InviteRsp_descriptor_,
      Room_InviteRsp::default_instance_,
      Room_InviteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_InviteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_InviteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_InviteRsp));
  Room_ReplyInviteReq_descriptor_ = file->message_type(12);
  static const int Room_ReplyInviteReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteReq, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteReq, dup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteReq, pwd_),
  };
  Room_ReplyInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_ReplyInviteReq_descriptor_,
      Room_ReplyInviteReq::default_instance_,
      Room_ReplyInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_ReplyInviteReq));
  Room_ReplyInviteRsp_descriptor_ = file->message_type(13);
  static const int Room_ReplyInviteRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteRsp, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteRsp, detail_),
  };
  Room_ReplyInviteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_ReplyInviteRsp_descriptor_,
      Room_ReplyInviteRsp::default_instance_,
      Room_ReplyInviteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_ReplyInviteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_ReplyInviteRsp));
  Room_KickReq_descriptor_ = file->message_type(14);
  static const int Room_KickReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_KickReq, cid_),
  };
  Room_KickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_KickReq_descriptor_,
      Room_KickReq::default_instance_,
      Room_KickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_KickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_KickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_KickReq));
  Room_KickRsp_descriptor_ = file->message_type(15);
  static const int Room_KickRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_KickRsp, retcode_),
  };
  Room_KickRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_KickRsp_descriptor_,
      Room_KickRsp::default_instance_,
      Room_KickRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_KickRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_KickRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_KickRsp));
  Room_LeaveReq_descriptor_ = file->message_type(16);
  static const int Room_LeaveReq_offsets_[1] = {
  };
  Room_LeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_LeaveReq_descriptor_,
      Room_LeaveReq::default_instance_,
      Room_LeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_LeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_LeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_LeaveReq));
  Room_LeaveRsp_descriptor_ = file->message_type(17);
  static const int Room_LeaveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_LeaveRsp, retcode_),
  };
  Room_LeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_LeaveRsp_descriptor_,
      Room_LeaveRsp::default_instance_,
      Room_LeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_LeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_LeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_LeaveRsp));
  Room_AutoJoinReq_descriptor_ = file->message_type(18);
  static const int Room_AutoJoinReq_offsets_[1] = {
  };
  Room_AutoJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_AutoJoinReq_descriptor_,
      Room_AutoJoinReq::default_instance_,
      Room_AutoJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_AutoJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_AutoJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_AutoJoinReq));
  Room_AutoJoinRsp_descriptor_ = file->message_type(19);
  static const int Room_AutoJoinRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_AutoJoinRsp, retcode_),
  };
  Room_AutoJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_AutoJoinRsp_descriptor_,
      Room_AutoJoinRsp::default_instance_,
      Room_AutoJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_AutoJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_AutoJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_AutoJoinRsp));
  Room_NotifyLeave_descriptor_ = file->message_type(20);
  static const int Room_NotifyLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyLeave, cid_),
  };
  Room_NotifyLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyLeave_descriptor_,
      Room_NotifyLeave::default_instance_,
      Room_NotifyLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyLeave));
  Room_NotifyJoin_descriptor_ = file->message_type(21);
  static const int Room_NotifyJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyJoin, join_),
  };
  Room_NotifyJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyJoin_descriptor_,
      Room_NotifyJoin::default_instance_,
      Room_NotifyJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyJoin));
  Room_NotifyUpdate_descriptor_ = file->message_type(22);
  static const int Room_NotifyUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyUpdate, update_),
  };
  Room_NotifyUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyUpdate_descriptor_,
      Room_NotifyUpdate::default_instance_,
      Room_NotifyUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyUpdate));
  Room_NotifyRecvInvite_descriptor_ = file->message_type(23);
  static const int Room_NotifyRecvInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyRecvInvite, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyRecvInvite, owner_),
  };
  Room_NotifyRecvInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyRecvInvite_descriptor_,
      Room_NotifyRecvInvite::default_instance_,
      Room_NotifyRecvInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyRecvInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyRecvInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyRecvInvite));
  Room_NotifyRefuse_descriptor_ = file->message_type(24);
  static const int Room_NotifyRefuse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyRefuse, name_),
  };
  Room_NotifyRefuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyRefuse_descriptor_,
      Room_NotifyRefuse::default_instance_,
      Room_NotifyRefuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyRefuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyRefuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyRefuse));
  Room_NotifyKick_descriptor_ = file->message_type(25);
  static const int Room_NotifyKick_offsets_[1] = {
  };
  Room_NotifyKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyKick_descriptor_,
      Room_NotifyKick::default_instance_,
      Room_NotifyKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyKick));
  Room_NotifyMemberKick_descriptor_ = file->message_type(26);
  static const int Room_NotifyMemberKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyMemberKick, kick_),
  };
  Room_NotifyMemberKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyMemberKick_descriptor_,
      Room_NotifyMemberKick::default_instance_,
      Room_NotifyMemberKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyMemberKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyMemberKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyMemberKick));
  Room_NotifyDismiss_descriptor_ = file->message_type(27);
  static const int Room_NotifyDismiss_offsets_[1] = {
  };
  Room_NotifyDismiss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_NotifyDismiss_descriptor_,
      Room_NotifyDismiss::default_instance_,
      Room_NotifyDismiss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyDismiss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_NotifyDismiss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room_NotifyDismiss));
  LCRoom_CreateRoom_descriptor_ = file->message_type(28);
  static const int LCRoom_CreateRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_CreateRoom, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_CreateRoom, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_CreateRoom, pwd_),
  };
  LCRoom_CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_CreateRoom_descriptor_,
      LCRoom_CreateRoom::default_instance_,
      LCRoom_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_CreateRoom));
  LCRoom_SetPwd_descriptor_ = file->message_type(29);
  static const int LCRoom_SetPwd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_SetPwd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_SetPwd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_SetPwd, pwd_),
  };
  LCRoom_SetPwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_SetPwd_descriptor_,
      LCRoom_SetPwd::default_instance_,
      LCRoom_SetPwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_SetPwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_SetPwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_SetPwd));
  LCRoom_Join_descriptor_ = file->message_type(30);
  static const int LCRoom_Join_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_Join, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_Join, dup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_Join, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_Join, pwd_),
  };
  LCRoom_Join_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_Join_descriptor_,
      LCRoom_Join::default_instance_,
      LCRoom_Join_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_Join, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_Join, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_Join));
  LCRoom_InviteFriend_descriptor_ = file->message_type(31);
  static const int LCRoom_InviteFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_InviteFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_InviteFriend, friend_cid_),
  };
  LCRoom_InviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_InviteFriend_descriptor_,
      LCRoom_InviteFriend::default_instance_,
      LCRoom_InviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_InviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_InviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_InviteFriend));
  LCRoom_ReplyInvite_descriptor_ = file->message_type(32);
  static const int LCRoom_ReplyInvite_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_ReplyInvite, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_ReplyInvite, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_ReplyInvite, dup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_ReplyInvite, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_ReplyInvite, pwd_),
  };
  LCRoom_ReplyInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_ReplyInvite_descriptor_,
      LCRoom_ReplyInvite::default_instance_,
      LCRoom_ReplyInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_ReplyInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_ReplyInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_ReplyInvite));
  LCRoom_KickRoom_descriptor_ = file->message_type(33);
  static const int LCRoom_KickRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_KickRoom, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_KickRoom, cid_),
  };
  LCRoom_KickRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_KickRoom_descriptor_,
      LCRoom_KickRoom::default_instance_,
      LCRoom_KickRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_KickRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_KickRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_KickRoom));
  LCRoom_LeaveRoom_descriptor_ = file->message_type(34);
  static const int LCRoom_LeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_LeaveRoom, charid_),
  };
  LCRoom_LeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_LeaveRoom_descriptor_,
      LCRoom_LeaveRoom::default_instance_,
      LCRoom_LeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_LeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_LeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_LeaveRoom));
  LCRoom_AutoJoin_descriptor_ = file->message_type(35);
  static const int LCRoom_AutoJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_AutoJoin, charid_),
  };
  LCRoom_AutoJoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCRoom_AutoJoin_descriptor_,
      LCRoom_AutoJoin::default_instance_,
      LCRoom_AutoJoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_AutoJoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCRoom_AutoJoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCRoom_AutoJoin));
  CLRoom_CharRoomNotify_descriptor_ = file->message_type(36);
  static const int CLRoom_CharRoomNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLRoom_CharRoomNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLRoom_CharRoomNotify, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLRoom_CharRoomNotify, owner_),
  };
  CLRoom_CharRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLRoom_CharRoomNotify_descriptor_,
      CLRoom_CharRoomNotify::default_instance_,
      CLRoom_CharRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLRoom_CharRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLRoom_CharRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLRoom_CharRoomNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fRoom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMemberProto_descriptor_, &RoomMemberProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomAllMemberProto_descriptor_, &RoomAllMemberProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomProto_descriptor_, &RoomProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomDetailProto_descriptor_, &RoomDetailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CreateReq_descriptor_, &Room_CreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_CreateRsp_descriptor_, &Room_CreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SetPwdReq_descriptor_, &Room_SetPwdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_SetPwdRsp_descriptor_, &Room_SetPwdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_JoinReq_descriptor_, &Room_JoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_JoinRsp_descriptor_, &Room_JoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_InviteReq_descriptor_, &Room_InviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_InviteRsp_descriptor_, &Room_InviteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_ReplyInviteReq_descriptor_, &Room_ReplyInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_ReplyInviteRsp_descriptor_, &Room_ReplyInviteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_KickReq_descriptor_, &Room_KickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_KickRsp_descriptor_, &Room_KickRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_LeaveReq_descriptor_, &Room_LeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_LeaveRsp_descriptor_, &Room_LeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_AutoJoinReq_descriptor_, &Room_AutoJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_AutoJoinRsp_descriptor_, &Room_AutoJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyLeave_descriptor_, &Room_NotifyLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyJoin_descriptor_, &Room_NotifyJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyUpdate_descriptor_, &Room_NotifyUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyRecvInvite_descriptor_, &Room_NotifyRecvInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyRefuse_descriptor_, &Room_NotifyRefuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyKick_descriptor_, &Room_NotifyKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyMemberKick_descriptor_, &Room_NotifyMemberKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_NotifyDismiss_descriptor_, &Room_NotifyDismiss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_CreateRoom_descriptor_, &LCRoom_CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_SetPwd_descriptor_, &LCRoom_SetPwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_Join_descriptor_, &LCRoom_Join::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_InviteFriend_descriptor_, &LCRoom_InviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_ReplyInvite_descriptor_, &LCRoom_ReplyInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_KickRoom_descriptor_, &LCRoom_KickRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_LeaveRoom_descriptor_, &LCRoom_LeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCRoom_AutoJoin_descriptor_, &LCRoom_AutoJoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLRoom_CharRoomNotify_descriptor_, &CLRoom_CharRoomNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fRoom_2eproto() {
  delete RoomMemberProto::default_instance_;
  delete RoomMemberProto_reflection_;
  delete RoomAllMemberProto::default_instance_;
  delete RoomAllMemberProto_reflection_;
  delete RoomProto::default_instance_;
  delete RoomProto_reflection_;
  delete RoomDetailProto::default_instance_;
  delete RoomDetailProto_reflection_;
  delete Room_CreateReq::default_instance_;
  delete Room_CreateReq_reflection_;
  delete Room_CreateRsp::default_instance_;
  delete Room_CreateRsp_reflection_;
  delete Room_SetPwdReq::default_instance_;
  delete Room_SetPwdReq_reflection_;
  delete Room_SetPwdRsp::default_instance_;
  delete Room_SetPwdRsp_reflection_;
  delete Room_JoinReq::default_instance_;
  delete Room_JoinReq_reflection_;
  delete Room_JoinRsp::default_instance_;
  delete Room_JoinRsp_reflection_;
  delete Room_InviteReq::default_instance_;
  delete Room_InviteReq_reflection_;
  delete Room_InviteRsp::default_instance_;
  delete Room_InviteRsp_reflection_;
  delete Room_ReplyInviteReq::default_instance_;
  delete Room_ReplyInviteReq_reflection_;
  delete Room_ReplyInviteRsp::default_instance_;
  delete Room_ReplyInviteRsp_reflection_;
  delete Room_KickReq::default_instance_;
  delete Room_KickReq_reflection_;
  delete Room_KickRsp::default_instance_;
  delete Room_KickRsp_reflection_;
  delete Room_LeaveReq::default_instance_;
  delete Room_LeaveReq_reflection_;
  delete Room_LeaveRsp::default_instance_;
  delete Room_LeaveRsp_reflection_;
  delete Room_AutoJoinReq::default_instance_;
  delete Room_AutoJoinReq_reflection_;
  delete Room_AutoJoinRsp::default_instance_;
  delete Room_AutoJoinRsp_reflection_;
  delete Room_NotifyLeave::default_instance_;
  delete Room_NotifyLeave_reflection_;
  delete Room_NotifyJoin::default_instance_;
  delete Room_NotifyJoin_reflection_;
  delete Room_NotifyUpdate::default_instance_;
  delete Room_NotifyUpdate_reflection_;
  delete Room_NotifyRecvInvite::default_instance_;
  delete Room_NotifyRecvInvite_reflection_;
  delete Room_NotifyRefuse::default_instance_;
  delete Room_NotifyRefuse_reflection_;
  delete Room_NotifyKick::default_instance_;
  delete Room_NotifyKick_reflection_;
  delete Room_NotifyMemberKick::default_instance_;
  delete Room_NotifyMemberKick_reflection_;
  delete Room_NotifyDismiss::default_instance_;
  delete Room_NotifyDismiss_reflection_;
  delete LCRoom_CreateRoom::default_instance_;
  delete LCRoom_CreateRoom_reflection_;
  delete LCRoom_SetPwd::default_instance_;
  delete LCRoom_SetPwd_reflection_;
  delete LCRoom_Join::default_instance_;
  delete LCRoom_Join_reflection_;
  delete LCRoom_InviteFriend::default_instance_;
  delete LCRoom_InviteFriend_reflection_;
  delete LCRoom_ReplyInvite::default_instance_;
  delete LCRoom_ReplyInvite_reflection_;
  delete LCRoom_KickRoom::default_instance_;
  delete LCRoom_KickRoom_reflection_;
  delete LCRoom_LeaveRoom::default_instance_;
  delete LCRoom_LeaveRoom_reflection_;
  delete LCRoom_AutoJoin::default_instance_;
  delete LCRoom_AutoJoin_reflection_;
  delete CLRoom_CharRoomNotify::default_instance_;
  delete CLRoom_CharRoomNotify_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoBuffer/Room.proto\022\010ProtoBuf\032\035Prot"
    "oBuffer/ComProtocol.proto\032#ProtoBuffer/C"
    "lientToServerCmd.proto\032\026Common/ComDefine"
    ".proto\"f\n\017RoomMemberProto\022\013\n\003cid\030\001 \001(\r\022\014"
    "\n\004name\030\002 \001(\t\022\014\n\004prof\030\003 \001(\005\022\r\n\005level\030\004 \001("
    "\005\022\r\n\005fight\030\005 \001(\005\022\014\n\004type\030\006 \001(\005\"\?\n\022RoomAl"
    "lMemberProto\022)\n\006member\030\001 \003(\0132\031.ProtoBuf."
    "RoomMemberProto\"9\n\tRoomProto\022\017\n\007room_id\030"
    "\001 \001(\r\022\016\n\006dup_id\030\002 \001(\r\022\013\n\003pwd\030\003 \003(\005\"b\n\017Ro"
    "omDetailProto\022!\n\004room\030\001 \001(\0132\023.ProtoBuf.R"
    "oomProto\022,\n\006member\030\002 \001(\0132\034.ProtoBuf.Room"
    "AllMemberProto\"-\n\016Room_CreateReq\022\016\n\006dup_"
    "id\030\001 \002(\005\022\013\n\003pwd\030\002 \003(\005\"L\n\016Room_CreateRsp\022"
    "\017\n\007retcode\030\001 \002(\005\022)\n\006detail\030\002 \001(\0132\031.Proto"
    "Buf.RoomDetailProto\"+\n\016Room_SetPwdReq\022\014\n"
    "\004type\030\001 \002(\005\022\013\n\003pwd\030\002 \003(\005\"<\n\016Room_SetPwdR"
    "sp\022\017\n\007retcode\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\022\013\n\003pwd"
    "\030\003 \003(\005\"<\n\014Room_JoinReq\022\016\n\006dup_id\030\001 \002(\r\022\017"
    "\n\007room_id\030\002 \002(\r\022\013\n\003pwd\030\003 \003(\005\"J\n\014Room_Joi"
    "nRsp\022\017\n\007retcode\030\001 \002(\005\022)\n\006detail\030\002 \001(\0132\031."
    "ProtoBuf.RoomDetailProto\"$\n\016Room_InviteR"
    "eq\022\022\n\nfriend_cid\030\001 \002(\r\"!\n\016Room_InviteRsp"
    "\022\017\n\007retcode\030\001 \002(\005\"R\n\023Room_ReplyInviteReq"
    "\022\r\n\005reply\030\001 \002(\005\022\016\n\006dup_id\030\002 \002(\r\022\017\n\007room_"
    "id\030\003 \002(\r\022\013\n\003pwd\030\004 \003(\005\"`\n\023Room_ReplyInvit"
    "eRsp\022\017\n\007retcode\030\001 \002(\005\022\r\n\005reply\030\002 \001(\005\022)\n\006"
    "detail\030\003 \001(\0132\031.ProtoBuf.RoomDetailProto\""
    "\033\n\014Room_KickReq\022\013\n\003cid\030\001 \002(\r\"\037\n\014Room_Kic"
    "kRsp\022\017\n\007retcode\030\001 \002(\005\"\017\n\rRoom_LeaveReq\" "
    "\n\rRoom_LeaveRsp\022\017\n\007retcode\030\001 \002(\005\"\022\n\020Room"
    "_AutoJoinReq\"#\n\020Room_AutoJoinRsp\022\017\n\007retc"
    "ode\030\001 \002(\005\"\037\n\020Room_NotifyLeave\022\013\n\003cid\030\001 \002"
    "(\r\":\n\017Room_NotifyJoin\022\'\n\004join\030\001 \001(\0132\031.Pr"
    "otoBuf.RoomMemberProto\">\n\021Room_NotifyUpd"
    "ate\022)\n\006update\030\001 \001(\0132\031.ProtoBuf.RoomMembe"
    "rProto\"d\n\025Room_NotifyRecvInvite\022!\n\004room\030"
    "\001 \001(\0132\023.ProtoBuf.RoomProto\022(\n\005owner\030\002 \001("
    "\0132\031.ProtoBuf.RoomMemberProto\"!\n\021Room_Not"
    "ifyRefuse\022\014\n\004name\030\001 \001(\t\"\021\n\017Room_NotifyKi"
    "ck\"%\n\025Room_NotifyMemberKick\022\014\n\004kick\030\001 \002("
    "\r\"\024\n\022Room_NotifyDismiss\"\?\n\021LCRoom_Create"
    "Room\022\016\n\006charid\030\001 \002(\r\022\r\n\005dupid\030\002 \002(\r\022\013\n\003p"
    "wd\030\003 \003(\005\":\n\rLCRoom_SetPwd\022\016\n\006charid\030\001 \002("
    "\r\022\014\n\004type\030\002 \002(\005\022\013\n\003pwd\030\003 \003(\005\"J\n\013LCRoom_J"
    "oin\022\016\n\006charid\030\001 \002(\r\022\016\n\006dup_id\030\002 \002(\r\022\016\n\006r"
    "oomid\030\003 \002(\r\022\013\n\003pwd\030\004 \003(\005\"9\n\023LCRoom_Invit"
    "eFriend\022\016\n\006charid\030\001 \002(\r\022\022\n\nfriend_cid\030\002 "
    "\002(\r\"a\n\022LCRoom_ReplyInvite\022\016\n\006charid\030\001 \002("
    "\r\022\r\n\005reply\030\002 \002(\005\022\016\n\006dup_id\030\003 \002(\r\022\017\n\007room"
    "_id\030\004 \002(\r\022\013\n\003pwd\030\005 \003(\005\".\n\017LCRoom_KickRoo"
    "m\022\016\n\006charid\030\001 \002(\r\022\013\n\003cid\030\002 \002(\r\"\"\n\020LCRoom"
    "_LeaveRoom\022\016\n\006charid\030\001 \002(\r\"!\n\017LCRoom_Aut"
    "oJoin\022\016\n\006charid\030\001 \002(\r\"F\n\025CLRoom_CharRoom"
    "Notify\022\016\n\006charid\030\001 \002(\r\022\016\n\006roomid\030\002 \002(\r\022\r"
    "\n\005owner\030\003 \002(\r", 2173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Room.proto", &protobuf_RegisterTypes);
  RoomMemberProto::default_instance_ = new RoomMemberProto();
  RoomAllMemberProto::default_instance_ = new RoomAllMemberProto();
  RoomProto::default_instance_ = new RoomProto();
  RoomDetailProto::default_instance_ = new RoomDetailProto();
  Room_CreateReq::default_instance_ = new Room_CreateReq();
  Room_CreateRsp::default_instance_ = new Room_CreateRsp();
  Room_SetPwdReq::default_instance_ = new Room_SetPwdReq();
  Room_SetPwdRsp::default_instance_ = new Room_SetPwdRsp();
  Room_JoinReq::default_instance_ = new Room_JoinReq();
  Room_JoinRsp::default_instance_ = new Room_JoinRsp();
  Room_InviteReq::default_instance_ = new Room_InviteReq();
  Room_InviteRsp::default_instance_ = new Room_InviteRsp();
  Room_ReplyInviteReq::default_instance_ = new Room_ReplyInviteReq();
  Room_ReplyInviteRsp::default_instance_ = new Room_ReplyInviteRsp();
  Room_KickReq::default_instance_ = new Room_KickReq();
  Room_KickRsp::default_instance_ = new Room_KickRsp();
  Room_LeaveReq::default_instance_ = new Room_LeaveReq();
  Room_LeaveRsp::default_instance_ = new Room_LeaveRsp();
  Room_AutoJoinReq::default_instance_ = new Room_AutoJoinReq();
  Room_AutoJoinRsp::default_instance_ = new Room_AutoJoinRsp();
  Room_NotifyLeave::default_instance_ = new Room_NotifyLeave();
  Room_NotifyJoin::default_instance_ = new Room_NotifyJoin();
  Room_NotifyUpdate::default_instance_ = new Room_NotifyUpdate();
  Room_NotifyRecvInvite::default_instance_ = new Room_NotifyRecvInvite();
  Room_NotifyRefuse::default_instance_ = new Room_NotifyRefuse();
  Room_NotifyKick::default_instance_ = new Room_NotifyKick();
  Room_NotifyMemberKick::default_instance_ = new Room_NotifyMemberKick();
  Room_NotifyDismiss::default_instance_ = new Room_NotifyDismiss();
  LCRoom_CreateRoom::default_instance_ = new LCRoom_CreateRoom();
  LCRoom_SetPwd::default_instance_ = new LCRoom_SetPwd();
  LCRoom_Join::default_instance_ = new LCRoom_Join();
  LCRoom_InviteFriend::default_instance_ = new LCRoom_InviteFriend();
  LCRoom_ReplyInvite::default_instance_ = new LCRoom_ReplyInvite();
  LCRoom_KickRoom::default_instance_ = new LCRoom_KickRoom();
  LCRoom_LeaveRoom::default_instance_ = new LCRoom_LeaveRoom();
  LCRoom_AutoJoin::default_instance_ = new LCRoom_AutoJoin();
  CLRoom_CharRoomNotify::default_instance_ = new CLRoom_CharRoomNotify();
  RoomMemberProto::default_instance_->InitAsDefaultInstance();
  RoomAllMemberProto::default_instance_->InitAsDefaultInstance();
  RoomProto::default_instance_->InitAsDefaultInstance();
  RoomDetailProto::default_instance_->InitAsDefaultInstance();
  Room_CreateReq::default_instance_->InitAsDefaultInstance();
  Room_CreateRsp::default_instance_->InitAsDefaultInstance();
  Room_SetPwdReq::default_instance_->InitAsDefaultInstance();
  Room_SetPwdRsp::default_instance_->InitAsDefaultInstance();
  Room_JoinReq::default_instance_->InitAsDefaultInstance();
  Room_JoinRsp::default_instance_->InitAsDefaultInstance();
  Room_InviteReq::default_instance_->InitAsDefaultInstance();
  Room_InviteRsp::default_instance_->InitAsDefaultInstance();
  Room_ReplyInviteReq::default_instance_->InitAsDefaultInstance();
  Room_ReplyInviteRsp::default_instance_->InitAsDefaultInstance();
  Room_KickReq::default_instance_->InitAsDefaultInstance();
  Room_KickRsp::default_instance_->InitAsDefaultInstance();
  Room_LeaveReq::default_instance_->InitAsDefaultInstance();
  Room_LeaveRsp::default_instance_->InitAsDefaultInstance();
  Room_AutoJoinReq::default_instance_->InitAsDefaultInstance();
  Room_AutoJoinRsp::default_instance_->InitAsDefaultInstance();
  Room_NotifyLeave::default_instance_->InitAsDefaultInstance();
  Room_NotifyJoin::default_instance_->InitAsDefaultInstance();
  Room_NotifyUpdate::default_instance_->InitAsDefaultInstance();
  Room_NotifyRecvInvite::default_instance_->InitAsDefaultInstance();
  Room_NotifyRefuse::default_instance_->InitAsDefaultInstance();
  Room_NotifyKick::default_instance_->InitAsDefaultInstance();
  Room_NotifyMemberKick::default_instance_->InitAsDefaultInstance();
  Room_NotifyDismiss::default_instance_->InitAsDefaultInstance();
  LCRoom_CreateRoom::default_instance_->InitAsDefaultInstance();
  LCRoom_SetPwd::default_instance_->InitAsDefaultInstance();
  LCRoom_Join::default_instance_->InitAsDefaultInstance();
  LCRoom_InviteFriend::default_instance_->InitAsDefaultInstance();
  LCRoom_ReplyInvite::default_instance_->InitAsDefaultInstance();
  LCRoom_KickRoom::default_instance_->InitAsDefaultInstance();
  LCRoom_LeaveRoom::default_instance_->InitAsDefaultInstance();
  LCRoom_AutoJoin::default_instance_->InitAsDefaultInstance();
  CLRoom_CharRoomNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fRoom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fRoom_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fRoom_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fRoom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RoomMemberProto::kCidFieldNumber;
const int RoomMemberProto::kNameFieldNumber;
const int RoomMemberProto::kProfFieldNumber;
const int RoomMemberProto::kLevelFieldNumber;
const int RoomMemberProto::kFightFieldNumber;
const int RoomMemberProto::kTypeFieldNumber;
#endif  // !_MSC_VER

RoomMemberProto::RoomMemberProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomMemberProto::InitAsDefaultInstance() {
}

RoomMemberProto::RoomMemberProto(const RoomMemberProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomMemberProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  level_ = 0;
  fight_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMemberProto::~RoomMemberProto() {
  SharedDtor();
}

void RoomMemberProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoomMemberProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMemberProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMemberProto_descriptor_;
}

const RoomMemberProto& RoomMemberProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

RoomMemberProto* RoomMemberProto::default_instance_ = NULL;

RoomMemberProto* RoomMemberProto::New() const {
  return new RoomMemberProto;
}

void RoomMemberProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    level_ = 0;
    fight_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMemberProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional int32 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomMemberProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fight(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomMemberProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fight(), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomMemberProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMemberProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMemberProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMemberProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMemberProto::MergeFrom(const RoomMemberProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMemberProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMemberProto::CopyFrom(const RoomMemberProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMemberProto::IsInitialized() const {

  return true;
}

void RoomMemberProto::Swap(RoomMemberProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMemberProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMemberProto_descriptor_;
  metadata.reflection = RoomMemberProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomAllMemberProto::kMemberFieldNumber;
#endif  // !_MSC_VER

RoomAllMemberProto::RoomAllMemberProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomAllMemberProto::InitAsDefaultInstance() {
}

RoomAllMemberProto::RoomAllMemberProto(const RoomAllMemberProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomAllMemberProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomAllMemberProto::~RoomAllMemberProto() {
  SharedDtor();
}

void RoomAllMemberProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomAllMemberProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomAllMemberProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomAllMemberProto_descriptor_;
}

const RoomAllMemberProto& RoomAllMemberProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

RoomAllMemberProto* RoomAllMemberProto::default_instance_ = NULL;

RoomAllMemberProto* RoomAllMemberProto::New() const {
  return new RoomAllMemberProto;
}

void RoomAllMemberProto::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomAllMemberProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.RoomMemberProto member = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomAllMemberProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.RoomMemberProto member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomAllMemberProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.RoomMemberProto member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomAllMemberProto::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.RoomMemberProto member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomAllMemberProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomAllMemberProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomAllMemberProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomAllMemberProto::MergeFrom(const RoomAllMemberProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomAllMemberProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomAllMemberProto::CopyFrom(const RoomAllMemberProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomAllMemberProto::IsInitialized() const {

  return true;
}

void RoomAllMemberProto::Swap(RoomAllMemberProto* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomAllMemberProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomAllMemberProto_descriptor_;
  metadata.reflection = RoomAllMemberProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomProto::kRoomIdFieldNumber;
const int RoomProto::kDupIdFieldNumber;
const int RoomProto::kPwdFieldNumber;
#endif  // !_MSC_VER

RoomProto::RoomProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomProto::InitAsDefaultInstance() {
}

RoomProto::RoomProto(const RoomProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomProto::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  dup_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomProto::~RoomProto() {
  SharedDtor();
}

void RoomProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomProto_descriptor_;
}

const RoomProto& RoomProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

RoomProto* RoomProto::default_instance_ = NULL;

RoomProto* RoomProto::New() const {
  return new RoomProto;
}

void RoomProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    dup_id_ = 0u;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dup_id;
        break;
      }

      // optional uint32 dup_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // optional uint32 dup_id = 2;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dup_id(), output);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // optional uint32 dup_id = 2;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dup_id(), target);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 dup_id = 2;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dup_id());
    }

  }
  // repeated int32 pwd = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomProto::MergeFrom(const RoomProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomProto::CopyFrom(const RoomProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomProto::IsInitialized() const {

  return true;
}

void RoomProto::Swap(RoomProto* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(dup_id_, other->dup_id_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomProto_descriptor_;
  metadata.reflection = RoomProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomDetailProto::kRoomFieldNumber;
const int RoomDetailProto::kMemberFieldNumber;
#endif  // !_MSC_VER

RoomDetailProto::RoomDetailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomDetailProto::InitAsDefaultInstance() {
  room_ = const_cast< ::ProtoBuf::RoomProto*>(&::ProtoBuf::RoomProto::default_instance());
  member_ = const_cast< ::ProtoBuf::RoomAllMemberProto*>(&::ProtoBuf::RoomAllMemberProto::default_instance());
}

RoomDetailProto::RoomDetailProto(const RoomDetailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomDetailProto::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDetailProto::~RoomDetailProto() {
  SharedDtor();
}

void RoomDetailProto::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
    delete member_;
  }
}

void RoomDetailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomDetailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDetailProto_descriptor_;
}

const RoomDetailProto& RoomDetailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

RoomDetailProto* RoomDetailProto::default_instance_ = NULL;

RoomDetailProto* RoomDetailProto::New() const {
  return new RoomDetailProto;
}

void RoomDetailProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room()) {
      if (room_ != NULL) room_->::ProtoBuf::RoomProto::Clear();
    }
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoBuf::RoomAllMemberProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomDetailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.RoomProto room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // optional .ProtoBuf.RoomAllMemberProto member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomDetailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.RoomProto room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  // optional .ProtoBuf.RoomAllMemberProto member = 2;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomDetailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.RoomProto room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  // optional .ProtoBuf.RoomAllMemberProto member = 2;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomDetailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.RoomProto room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // optional .ProtoBuf.RoomAllMemberProto member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDetailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomDetailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomDetailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomDetailProto::MergeFrom(const RoomDetailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::ProtoBuf::RoomProto::MergeFrom(from.room());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoBuf::RoomAllMemberProto::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomDetailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDetailProto::CopyFrom(const RoomDetailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDetailProto::IsInitialized() const {

  return true;
}

void RoomDetailProto::Swap(RoomDetailProto* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomDetailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomDetailProto_descriptor_;
  metadata.reflection = RoomDetailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CreateReq::kDupIdFieldNumber;
const int Room_CreateReq::kPwdFieldNumber;
#endif  // !_MSC_VER

Room_CreateReq::Room_CreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CreateReq::InitAsDefaultInstance() {
}

Room_CreateReq::Room_CreateReq(const Room_CreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CreateReq::SharedCtor() {
  _cached_size_ = 0;
  dup_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CreateReq::~Room_CreateReq() {
  SharedDtor();
}

void Room_CreateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_CreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CreateReq_descriptor_;
}

const Room_CreateReq& Room_CreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_CreateReq* Room_CreateReq::default_instance_ = NULL;

Room_CreateReq* Room_CreateReq::New() const {
  return new Room_CreateReq;
}

void Room_CreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dup_id_ = 0;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dup_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dup_id = 1;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dup_id(), output);
  }

  // repeated int32 pwd = 2;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dup_id = 1;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dup_id(), target);
  }

  // repeated int32 pwd = 2;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dup_id = 1;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dup_id());
    }

  }
  // repeated int32 pwd = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CreateReq::MergeFrom(const Room_CreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CreateReq::CopyFrom(const Room_CreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CreateReq::Swap(Room_CreateReq* other) {
  if (other != this) {
    std::swap(dup_id_, other->dup_id_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CreateReq_descriptor_;
  metadata.reflection = Room_CreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_CreateRsp::kRetcodeFieldNumber;
const int Room_CreateRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Room_CreateRsp::Room_CreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_CreateRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::ProtoBuf::RoomDetailProto*>(&::ProtoBuf::RoomDetailProto::default_instance());
}

Room_CreateRsp::Room_CreateRsp(const Room_CreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_CreateRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_CreateRsp::~Room_CreateRsp() {
  SharedDtor();
}

void Room_CreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void Room_CreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_CreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_CreateRsp_descriptor_;
}

const Room_CreateRsp& Room_CreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_CreateRsp* Room_CreateRsp::default_instance_ = NULL;

Room_CreateRsp* Room_CreateRsp::New() const {
  return new Room_CreateRsp;
}

void Room_CreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::ProtoBuf::RoomDetailProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_CreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional .ProtoBuf.RoomDetailProto detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_CreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .ProtoBuf.RoomDetailProto detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_CreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .ProtoBuf.RoomDetailProto detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_CreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .ProtoBuf.RoomDetailProto detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_CreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_CreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_CreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_CreateRsp::MergeFrom(const Room_CreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_detail()) {
      mutable_detail()->::ProtoBuf::RoomDetailProto::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_CreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_CreateRsp::CopyFrom(const Room_CreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_CreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_CreateRsp::Swap(Room_CreateRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_CreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_CreateRsp_descriptor_;
  metadata.reflection = Room_CreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SetPwdReq::kTypeFieldNumber;
const int Room_SetPwdReq::kPwdFieldNumber;
#endif  // !_MSC_VER

Room_SetPwdReq::Room_SetPwdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SetPwdReq::InitAsDefaultInstance() {
}

Room_SetPwdReq::Room_SetPwdReq(const Room_SetPwdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SetPwdReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SetPwdReq::~Room_SetPwdReq() {
  SharedDtor();
}

void Room_SetPwdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SetPwdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SetPwdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SetPwdReq_descriptor_;
}

const Room_SetPwdReq& Room_SetPwdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_SetPwdReq* Room_SetPwdReq::default_instance_ = NULL;

Room_SetPwdReq* Room_SetPwdReq::New() const {
  return new Room_SetPwdReq;
}

void Room_SetPwdReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SetPwdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SetPwdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 pwd = 2;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SetPwdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 pwd = 2;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SetPwdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 pwd = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SetPwdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SetPwdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SetPwdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SetPwdReq::MergeFrom(const Room_SetPwdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SetPwdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SetPwdReq::CopyFrom(const Room_SetPwdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SetPwdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SetPwdReq::Swap(Room_SetPwdReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SetPwdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SetPwdReq_descriptor_;
  metadata.reflection = Room_SetPwdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_SetPwdRsp::kRetcodeFieldNumber;
const int Room_SetPwdRsp::kTypeFieldNumber;
const int Room_SetPwdRsp::kPwdFieldNumber;
#endif  // !_MSC_VER

Room_SetPwdRsp::Room_SetPwdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_SetPwdRsp::InitAsDefaultInstance() {
}

Room_SetPwdRsp::Room_SetPwdRsp(const Room_SetPwdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_SetPwdRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_SetPwdRsp::~Room_SetPwdRsp() {
  SharedDtor();
}

void Room_SetPwdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_SetPwdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_SetPwdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_SetPwdRsp_descriptor_;
}

const Room_SetPwdRsp& Room_SetPwdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_SetPwdRsp* Room_SetPwdRsp::default_instance_ = NULL;

Room_SetPwdRsp* Room_SetPwdRsp::New() const {
  return new Room_SetPwdRsp;
}

void Room_SetPwdRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_ = 0;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_SetPwdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_SetPwdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_SetPwdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_SetPwdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 pwd = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_SetPwdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_SetPwdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_SetPwdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_SetPwdRsp::MergeFrom(const Room_SetPwdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_SetPwdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_SetPwdRsp::CopyFrom(const Room_SetPwdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_SetPwdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_SetPwdRsp::Swap(Room_SetPwdRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_, other->type_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_SetPwdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_SetPwdRsp_descriptor_;
  metadata.reflection = Room_SetPwdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_JoinReq::kDupIdFieldNumber;
const int Room_JoinReq::kRoomIdFieldNumber;
const int Room_JoinReq::kPwdFieldNumber;
#endif  // !_MSC_VER

Room_JoinReq::Room_JoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_JoinReq::InitAsDefaultInstance() {
}

Room_JoinReq::Room_JoinReq(const Room_JoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_JoinReq::SharedCtor() {
  _cached_size_ = 0;
  dup_id_ = 0u;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_JoinReq::~Room_JoinReq() {
  SharedDtor();
}

void Room_JoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_JoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_JoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_JoinReq_descriptor_;
}

const Room_JoinReq& Room_JoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_JoinReq* Room_JoinReq::default_instance_ = NULL;

Room_JoinReq* Room_JoinReq::New() const {
  return new Room_JoinReq;
}

void Room_JoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dup_id_ = 0u;
    room_id_ = 0u;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_JoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dup_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_JoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dup_id = 1;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dup_id(), output);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_JoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dup_id = 1;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dup_id(), target);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_JoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dup_id = 1;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dup_id());
    }

    // required uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  // repeated int32 pwd = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_JoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_JoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_JoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_JoinReq::MergeFrom(const Room_JoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_JoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_JoinReq::CopyFrom(const Room_JoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_JoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Room_JoinReq::Swap(Room_JoinReq* other) {
  if (other != this) {
    std::swap(dup_id_, other->dup_id_);
    std::swap(room_id_, other->room_id_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_JoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_JoinReq_descriptor_;
  metadata.reflection = Room_JoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_JoinRsp::kRetcodeFieldNumber;
const int Room_JoinRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Room_JoinRsp::Room_JoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_JoinRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::ProtoBuf::RoomDetailProto*>(&::ProtoBuf::RoomDetailProto::default_instance());
}

Room_JoinRsp::Room_JoinRsp(const Room_JoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_JoinRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_JoinRsp::~Room_JoinRsp() {
  SharedDtor();
}

void Room_JoinRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void Room_JoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_JoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_JoinRsp_descriptor_;
}

const Room_JoinRsp& Room_JoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_JoinRsp* Room_JoinRsp::default_instance_ = NULL;

Room_JoinRsp* Room_JoinRsp::New() const {
  return new Room_JoinRsp;
}

void Room_JoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::ProtoBuf::RoomDetailProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_JoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional .ProtoBuf.RoomDetailProto detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_JoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .ProtoBuf.RoomDetailProto detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_JoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .ProtoBuf.RoomDetailProto detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_JoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .ProtoBuf.RoomDetailProto detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_JoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_JoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_JoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_JoinRsp::MergeFrom(const Room_JoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_detail()) {
      mutable_detail()->::ProtoBuf::RoomDetailProto::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_JoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_JoinRsp::CopyFrom(const Room_JoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_JoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_JoinRsp::Swap(Room_JoinRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_JoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_JoinRsp_descriptor_;
  metadata.reflection = Room_JoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_InviteReq::kFriendCidFieldNumber;
#endif  // !_MSC_VER

Room_InviteReq::Room_InviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_InviteReq::InitAsDefaultInstance() {
}

Room_InviteReq::Room_InviteReq(const Room_InviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_InviteReq::SharedCtor() {
  _cached_size_ = 0;
  friend_cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_InviteReq::~Room_InviteReq() {
  SharedDtor();
}

void Room_InviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_InviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_InviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_InviteReq_descriptor_;
}

const Room_InviteReq& Room_InviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_InviteReq* Room_InviteReq::default_instance_ = NULL;

Room_InviteReq* Room_InviteReq::New() const {
  return new Room_InviteReq;
}

void Room_InviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_cid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_InviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 friend_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_cid_)));
          set_has_friend_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_InviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 friend_cid = 1;
  if (has_friend_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friend_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_InviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 friend_cid = 1;
  if (has_friend_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friend_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_InviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 friend_cid = 1;
    if (has_friend_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_InviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_InviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_InviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_InviteReq::MergeFrom(const Room_InviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_cid()) {
      set_friend_cid(from.friend_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_InviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_InviteReq::CopyFrom(const Room_InviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_InviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_InviteReq::Swap(Room_InviteReq* other) {
  if (other != this) {
    std::swap(friend_cid_, other->friend_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_InviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_InviteReq_descriptor_;
  metadata.reflection = Room_InviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_InviteRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Room_InviteRsp::Room_InviteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_InviteRsp::InitAsDefaultInstance() {
}

Room_InviteRsp::Room_InviteRsp(const Room_InviteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_InviteRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_InviteRsp::~Room_InviteRsp() {
  SharedDtor();
}

void Room_InviteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_InviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_InviteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_InviteRsp_descriptor_;
}

const Room_InviteRsp& Room_InviteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_InviteRsp* Room_InviteRsp::default_instance_ = NULL;

Room_InviteRsp* Room_InviteRsp::New() const {
  return new Room_InviteRsp;
}

void Room_InviteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_InviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_InviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_InviteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_InviteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_InviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_InviteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_InviteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_InviteRsp::MergeFrom(const Room_InviteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_InviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_InviteRsp::CopyFrom(const Room_InviteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_InviteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_InviteRsp::Swap(Room_InviteRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_InviteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_InviteRsp_descriptor_;
  metadata.reflection = Room_InviteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_ReplyInviteReq::kReplyFieldNumber;
const int Room_ReplyInviteReq::kDupIdFieldNumber;
const int Room_ReplyInviteReq::kRoomIdFieldNumber;
const int Room_ReplyInviteReq::kPwdFieldNumber;
#endif  // !_MSC_VER

Room_ReplyInviteReq::Room_ReplyInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_ReplyInviteReq::InitAsDefaultInstance() {
}

Room_ReplyInviteReq::Room_ReplyInviteReq(const Room_ReplyInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_ReplyInviteReq::SharedCtor() {
  _cached_size_ = 0;
  reply_ = 0;
  dup_id_ = 0u;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_ReplyInviteReq::~Room_ReplyInviteReq() {
  SharedDtor();
}

void Room_ReplyInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_ReplyInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_ReplyInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_ReplyInviteReq_descriptor_;
}

const Room_ReplyInviteReq& Room_ReplyInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_ReplyInviteReq* Room_ReplyInviteReq::default_instance_ = NULL;

Room_ReplyInviteReq* Room_ReplyInviteReq::New() const {
  return new Room_ReplyInviteReq;
}

void Room_ReplyInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_ = 0;
    dup_id_ = 0u;
    room_id_ = 0u;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_ReplyInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reply = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dup_id;
        break;
      }

      // required uint32 dup_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_ReplyInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reply = 1;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reply(), output);
  }

  // required uint32 dup_id = 2;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dup_id(), output);
  }

  // required uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // repeated int32 pwd = 4;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_ReplyInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reply = 1;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reply(), target);
  }

  // required uint32 dup_id = 2;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dup_id(), target);
  }

  // required uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // repeated int32 pwd = 4;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_ReplyInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reply = 1;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply());
    }

    // required uint32 dup_id = 2;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dup_id());
    }

    // required uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  // repeated int32 pwd = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_ReplyInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_ReplyInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_ReplyInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_ReplyInviteReq::MergeFrom(const Room_ReplyInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_ReplyInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_ReplyInviteReq::CopyFrom(const Room_ReplyInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_ReplyInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Room_ReplyInviteReq::Swap(Room_ReplyInviteReq* other) {
  if (other != this) {
    std::swap(reply_, other->reply_);
    std::swap(dup_id_, other->dup_id_);
    std::swap(room_id_, other->room_id_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_ReplyInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_ReplyInviteReq_descriptor_;
  metadata.reflection = Room_ReplyInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_ReplyInviteRsp::kRetcodeFieldNumber;
const int Room_ReplyInviteRsp::kReplyFieldNumber;
const int Room_ReplyInviteRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Room_ReplyInviteRsp::Room_ReplyInviteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_ReplyInviteRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::ProtoBuf::RoomDetailProto*>(&::ProtoBuf::RoomDetailProto::default_instance());
}

Room_ReplyInviteRsp::Room_ReplyInviteRsp(const Room_ReplyInviteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_ReplyInviteRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  reply_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_ReplyInviteRsp::~Room_ReplyInviteRsp() {
  SharedDtor();
}

void Room_ReplyInviteRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void Room_ReplyInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_ReplyInviteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_ReplyInviteRsp_descriptor_;
}

const Room_ReplyInviteRsp& Room_ReplyInviteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_ReplyInviteRsp* Room_ReplyInviteRsp::default_instance_ = NULL;

Room_ReplyInviteRsp* Room_ReplyInviteRsp::New() const {
  return new Room_ReplyInviteRsp;
}

void Room_ReplyInviteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    reply_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::ProtoBuf::RoomDetailProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_ReplyInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply;
        break;
      }

      // optional int32 reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // optional .ProtoBuf.RoomDetailProto detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_ReplyInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reply(), output);
  }

  // optional .ProtoBuf.RoomDetailProto detail = 3;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_ReplyInviteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 reply = 2;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reply(), target);
  }

  // optional .ProtoBuf.RoomDetailProto detail = 3;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_ReplyInviteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply());
    }

    // optional .ProtoBuf.RoomDetailProto detail = 3;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_ReplyInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_ReplyInviteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_ReplyInviteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_ReplyInviteRsp::MergeFrom(const Room_ReplyInviteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_detail()) {
      mutable_detail()->::ProtoBuf::RoomDetailProto::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_ReplyInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_ReplyInviteRsp::CopyFrom(const Room_ReplyInviteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_ReplyInviteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_ReplyInviteRsp::Swap(Room_ReplyInviteRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(reply_, other->reply_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_ReplyInviteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_ReplyInviteRsp_descriptor_;
  metadata.reflection = Room_ReplyInviteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_KickReq::kCidFieldNumber;
#endif  // !_MSC_VER

Room_KickReq::Room_KickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_KickReq::InitAsDefaultInstance() {
}

Room_KickReq::Room_KickReq(const Room_KickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_KickReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_KickReq::~Room_KickReq() {
  SharedDtor();
}

void Room_KickReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_KickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_KickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_KickReq_descriptor_;
}

const Room_KickReq& Room_KickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_KickReq* Room_KickReq::default_instance_ = NULL;

Room_KickReq* Room_KickReq::New() const {
  return new Room_KickReq;
}

void Room_KickReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_KickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_KickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_KickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_KickReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_KickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_KickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_KickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_KickReq::MergeFrom(const Room_KickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_KickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_KickReq::CopyFrom(const Room_KickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_KickReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_KickReq::Swap(Room_KickReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_KickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_KickReq_descriptor_;
  metadata.reflection = Room_KickReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_KickRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Room_KickRsp::Room_KickRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_KickRsp::InitAsDefaultInstance() {
}

Room_KickRsp::Room_KickRsp(const Room_KickRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_KickRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_KickRsp::~Room_KickRsp() {
  SharedDtor();
}

void Room_KickRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_KickRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_KickRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_KickRsp_descriptor_;
}

const Room_KickRsp& Room_KickRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_KickRsp* Room_KickRsp::default_instance_ = NULL;

Room_KickRsp* Room_KickRsp::New() const {
  return new Room_KickRsp;
}

void Room_KickRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_KickRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_KickRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_KickRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_KickRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_KickRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_KickRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_KickRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_KickRsp::MergeFrom(const Room_KickRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_KickRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_KickRsp::CopyFrom(const Room_KickRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_KickRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_KickRsp::Swap(Room_KickRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_KickRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_KickRsp_descriptor_;
  metadata.reflection = Room_KickRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_LeaveReq::Room_LeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_LeaveReq::InitAsDefaultInstance() {
}

Room_LeaveReq::Room_LeaveReq(const Room_LeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_LeaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_LeaveReq::~Room_LeaveReq() {
  SharedDtor();
}

void Room_LeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_LeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_LeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_LeaveReq_descriptor_;
}

const Room_LeaveReq& Room_LeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_LeaveReq* Room_LeaveReq::default_instance_ = NULL;

Room_LeaveReq* Room_LeaveReq::New() const {
  return new Room_LeaveReq;
}

void Room_LeaveReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_LeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_LeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_LeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_LeaveReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_LeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_LeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_LeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_LeaveReq::MergeFrom(const Room_LeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_LeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_LeaveReq::CopyFrom(const Room_LeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_LeaveReq::IsInitialized() const {

  return true;
}

void Room_LeaveReq::Swap(Room_LeaveReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_LeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_LeaveReq_descriptor_;
  metadata.reflection = Room_LeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_LeaveRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Room_LeaveRsp::Room_LeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_LeaveRsp::InitAsDefaultInstance() {
}

Room_LeaveRsp::Room_LeaveRsp(const Room_LeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_LeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_LeaveRsp::~Room_LeaveRsp() {
  SharedDtor();
}

void Room_LeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_LeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_LeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_LeaveRsp_descriptor_;
}

const Room_LeaveRsp& Room_LeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_LeaveRsp* Room_LeaveRsp::default_instance_ = NULL;

Room_LeaveRsp* Room_LeaveRsp::New() const {
  return new Room_LeaveRsp;
}

void Room_LeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_LeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_LeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_LeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_LeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_LeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_LeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_LeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_LeaveRsp::MergeFrom(const Room_LeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_LeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_LeaveRsp::CopyFrom(const Room_LeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_LeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_LeaveRsp::Swap(Room_LeaveRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_LeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_LeaveRsp_descriptor_;
  metadata.reflection = Room_LeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_AutoJoinReq::Room_AutoJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_AutoJoinReq::InitAsDefaultInstance() {
}

Room_AutoJoinReq::Room_AutoJoinReq(const Room_AutoJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_AutoJoinReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_AutoJoinReq::~Room_AutoJoinReq() {
  SharedDtor();
}

void Room_AutoJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_AutoJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_AutoJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_AutoJoinReq_descriptor_;
}

const Room_AutoJoinReq& Room_AutoJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_AutoJoinReq* Room_AutoJoinReq::default_instance_ = NULL;

Room_AutoJoinReq* Room_AutoJoinReq::New() const {
  return new Room_AutoJoinReq;
}

void Room_AutoJoinReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_AutoJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_AutoJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_AutoJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_AutoJoinReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_AutoJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_AutoJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_AutoJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_AutoJoinReq::MergeFrom(const Room_AutoJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_AutoJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_AutoJoinReq::CopyFrom(const Room_AutoJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_AutoJoinReq::IsInitialized() const {

  return true;
}

void Room_AutoJoinReq::Swap(Room_AutoJoinReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_AutoJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_AutoJoinReq_descriptor_;
  metadata.reflection = Room_AutoJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_AutoJoinRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Room_AutoJoinRsp::Room_AutoJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_AutoJoinRsp::InitAsDefaultInstance() {
}

Room_AutoJoinRsp::Room_AutoJoinRsp(const Room_AutoJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_AutoJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_AutoJoinRsp::~Room_AutoJoinRsp() {
  SharedDtor();
}

void Room_AutoJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_AutoJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_AutoJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_AutoJoinRsp_descriptor_;
}

const Room_AutoJoinRsp& Room_AutoJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_AutoJoinRsp* Room_AutoJoinRsp::default_instance_ = NULL;

Room_AutoJoinRsp* Room_AutoJoinRsp::New() const {
  return new Room_AutoJoinRsp;
}

void Room_AutoJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_AutoJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_AutoJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_AutoJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_AutoJoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_AutoJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_AutoJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_AutoJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_AutoJoinRsp::MergeFrom(const Room_AutoJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_AutoJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_AutoJoinRsp::CopyFrom(const Room_AutoJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_AutoJoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_AutoJoinRsp::Swap(Room_AutoJoinRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_AutoJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_AutoJoinRsp_descriptor_;
  metadata.reflection = Room_AutoJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_NotifyLeave::kCidFieldNumber;
#endif  // !_MSC_VER

Room_NotifyLeave::Room_NotifyLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyLeave::InitAsDefaultInstance() {
}

Room_NotifyLeave::Room_NotifyLeave(const Room_NotifyLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyLeave::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyLeave::~Room_NotifyLeave() {
  SharedDtor();
}

void Room_NotifyLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_NotifyLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyLeave_descriptor_;
}

const Room_NotifyLeave& Room_NotifyLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyLeave* Room_NotifyLeave::default_instance_ = NULL;

Room_NotifyLeave* Room_NotifyLeave::New() const {
  return new Room_NotifyLeave;
}

void Room_NotifyLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_NotifyLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyLeave::MergeFrom(const Room_NotifyLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyLeave::CopyFrom(const Room_NotifyLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_NotifyLeave::Swap(Room_NotifyLeave* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyLeave_descriptor_;
  metadata.reflection = Room_NotifyLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_NotifyJoin::kJoinFieldNumber;
#endif  // !_MSC_VER

Room_NotifyJoin::Room_NotifyJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyJoin::InitAsDefaultInstance() {
  join_ = const_cast< ::ProtoBuf::RoomMemberProto*>(&::ProtoBuf::RoomMemberProto::default_instance());
}

Room_NotifyJoin::Room_NotifyJoin(const Room_NotifyJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyJoin::SharedCtor() {
  _cached_size_ = 0;
  join_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyJoin::~Room_NotifyJoin() {
  SharedDtor();
}

void Room_NotifyJoin::SharedDtor() {
  if (this != default_instance_) {
    delete join_;
  }
}

void Room_NotifyJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyJoin_descriptor_;
}

const Room_NotifyJoin& Room_NotifyJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyJoin* Room_NotifyJoin::default_instance_ = NULL;

Room_NotifyJoin* Room_NotifyJoin::New() const {
  return new Room_NotifyJoin;
}

void Room_NotifyJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_join()) {
      if (join_ != NULL) join_->::ProtoBuf::RoomMemberProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.RoomMemberProto join = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_NotifyJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.RoomMemberProto join = 1;
  if (has_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->join(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.RoomMemberProto join = 1;
  if (has_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->join(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.RoomMemberProto join = 1;
    if (has_join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyJoin::MergeFrom(const Room_NotifyJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_join()) {
      mutable_join()->::ProtoBuf::RoomMemberProto::MergeFrom(from.join());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyJoin::CopyFrom(const Room_NotifyJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyJoin::IsInitialized() const {

  return true;
}

void Room_NotifyJoin::Swap(Room_NotifyJoin* other) {
  if (other != this) {
    std::swap(join_, other->join_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyJoin_descriptor_;
  metadata.reflection = Room_NotifyJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_NotifyUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

Room_NotifyUpdate::Room_NotifyUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyUpdate::InitAsDefaultInstance() {
  update_ = const_cast< ::ProtoBuf::RoomMemberProto*>(&::ProtoBuf::RoomMemberProto::default_instance());
}

Room_NotifyUpdate::Room_NotifyUpdate(const Room_NotifyUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyUpdate::SharedCtor() {
  _cached_size_ = 0;
  update_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyUpdate::~Room_NotifyUpdate() {
  SharedDtor();
}

void Room_NotifyUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
  }
}

void Room_NotifyUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyUpdate_descriptor_;
}

const Room_NotifyUpdate& Room_NotifyUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyUpdate* Room_NotifyUpdate::default_instance_ = NULL;

Room_NotifyUpdate* Room_NotifyUpdate::New() const {
  return new Room_NotifyUpdate;
}

void Room_NotifyUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_update()) {
      if (update_ != NULL) update_->::ProtoBuf::RoomMemberProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.RoomMemberProto update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_NotifyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.RoomMemberProto update = 1;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.RoomMemberProto update = 1;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.RoomMemberProto update = 1;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyUpdate::MergeFrom(const Room_NotifyUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update()) {
      mutable_update()->::ProtoBuf::RoomMemberProto::MergeFrom(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyUpdate::CopyFrom(const Room_NotifyUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyUpdate::IsInitialized() const {

  return true;
}

void Room_NotifyUpdate::Swap(Room_NotifyUpdate* other) {
  if (other != this) {
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyUpdate_descriptor_;
  metadata.reflection = Room_NotifyUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_NotifyRecvInvite::kRoomFieldNumber;
const int Room_NotifyRecvInvite::kOwnerFieldNumber;
#endif  // !_MSC_VER

Room_NotifyRecvInvite::Room_NotifyRecvInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyRecvInvite::InitAsDefaultInstance() {
  room_ = const_cast< ::ProtoBuf::RoomProto*>(&::ProtoBuf::RoomProto::default_instance());
  owner_ = const_cast< ::ProtoBuf::RoomMemberProto*>(&::ProtoBuf::RoomMemberProto::default_instance());
}

Room_NotifyRecvInvite::Room_NotifyRecvInvite(const Room_NotifyRecvInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyRecvInvite::SharedCtor() {
  _cached_size_ = 0;
  room_ = NULL;
  owner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyRecvInvite::~Room_NotifyRecvInvite() {
  SharedDtor();
}

void Room_NotifyRecvInvite::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
    delete owner_;
  }
}

void Room_NotifyRecvInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyRecvInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyRecvInvite_descriptor_;
}

const Room_NotifyRecvInvite& Room_NotifyRecvInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyRecvInvite* Room_NotifyRecvInvite::default_instance_ = NULL;

Room_NotifyRecvInvite* Room_NotifyRecvInvite::New() const {
  return new Room_NotifyRecvInvite;
}

void Room_NotifyRecvInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room()) {
      if (room_ != NULL) room_->::ProtoBuf::RoomProto::Clear();
    }
    if (has_owner()) {
      if (owner_ != NULL) owner_->::ProtoBuf::RoomMemberProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyRecvInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.RoomProto room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner;
        break;
      }

      // optional .ProtoBuf.RoomMemberProto owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_NotifyRecvInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.RoomProto room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(), output);
  }

  // optional .ProtoBuf.RoomMemberProto owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyRecvInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.RoomProto room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(), target);
  }

  // optional .ProtoBuf.RoomMemberProto owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyRecvInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.RoomProto room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // optional .ProtoBuf.RoomMemberProto owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyRecvInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyRecvInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyRecvInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyRecvInvite::MergeFrom(const Room_NotifyRecvInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      mutable_room()->::ProtoBuf::RoomProto::MergeFrom(from.room());
    }
    if (from.has_owner()) {
      mutable_owner()->::ProtoBuf::RoomMemberProto::MergeFrom(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyRecvInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyRecvInvite::CopyFrom(const Room_NotifyRecvInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyRecvInvite::IsInitialized() const {

  return true;
}

void Room_NotifyRecvInvite::Swap(Room_NotifyRecvInvite* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyRecvInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyRecvInvite_descriptor_;
  metadata.reflection = Room_NotifyRecvInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_NotifyRefuse::kNameFieldNumber;
#endif  // !_MSC_VER

Room_NotifyRefuse::Room_NotifyRefuse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyRefuse::InitAsDefaultInstance() {
}

Room_NotifyRefuse::Room_NotifyRefuse(const Room_NotifyRefuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyRefuse::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyRefuse::~Room_NotifyRefuse() {
  SharedDtor();
}

void Room_NotifyRefuse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Room_NotifyRefuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyRefuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyRefuse_descriptor_;
}

const Room_NotifyRefuse& Room_NotifyRefuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyRefuse* Room_NotifyRefuse::default_instance_ = NULL;

Room_NotifyRefuse* Room_NotifyRefuse::New() const {
  return new Room_NotifyRefuse;
}

void Room_NotifyRefuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyRefuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_NotifyRefuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyRefuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyRefuse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyRefuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyRefuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyRefuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyRefuse::MergeFrom(const Room_NotifyRefuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyRefuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyRefuse::CopyFrom(const Room_NotifyRefuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyRefuse::IsInitialized() const {

  return true;
}

void Room_NotifyRefuse::Swap(Room_NotifyRefuse* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyRefuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyRefuse_descriptor_;
  metadata.reflection = Room_NotifyRefuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_NotifyKick::Room_NotifyKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyKick::InitAsDefaultInstance() {
}

Room_NotifyKick::Room_NotifyKick(const Room_NotifyKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyKick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyKick::~Room_NotifyKick() {
  SharedDtor();
}

void Room_NotifyKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_NotifyKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyKick_descriptor_;
}

const Room_NotifyKick& Room_NotifyKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyKick* Room_NotifyKick::default_instance_ = NULL;

Room_NotifyKick* Room_NotifyKick::New() const {
  return new Room_NotifyKick;
}

void Room_NotifyKick::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_NotifyKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyKick::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyKick::MergeFrom(const Room_NotifyKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyKick::CopyFrom(const Room_NotifyKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyKick::IsInitialized() const {

  return true;
}

void Room_NotifyKick::Swap(Room_NotifyKick* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyKick_descriptor_;
  metadata.reflection = Room_NotifyKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Room_NotifyMemberKick::kKickFieldNumber;
#endif  // !_MSC_VER

Room_NotifyMemberKick::Room_NotifyMemberKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyMemberKick::InitAsDefaultInstance() {
}

Room_NotifyMemberKick::Room_NotifyMemberKick(const Room_NotifyMemberKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyMemberKick::SharedCtor() {
  _cached_size_ = 0;
  kick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyMemberKick::~Room_NotifyMemberKick() {
  SharedDtor();
}

void Room_NotifyMemberKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_NotifyMemberKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyMemberKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyMemberKick_descriptor_;
}

const Room_NotifyMemberKick& Room_NotifyMemberKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyMemberKick* Room_NotifyMemberKick::default_instance_ = NULL;

Room_NotifyMemberKick* Room_NotifyMemberKick::New() const {
  return new Room_NotifyMemberKick;
}

void Room_NotifyMemberKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyMemberKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_)));
          set_has_kick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Room_NotifyMemberKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 kick = 1;
  if (has_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyMemberKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 kick = 1;
  if (has_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyMemberKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kick = 1;
    if (has_kick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyMemberKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyMemberKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyMemberKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyMemberKick::MergeFrom(const Room_NotifyMemberKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kick()) {
      set_kick(from.kick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyMemberKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyMemberKick::CopyFrom(const Room_NotifyMemberKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyMemberKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Room_NotifyMemberKick::Swap(Room_NotifyMemberKick* other) {
  if (other != this) {
    std::swap(kick_, other->kick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyMemberKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyMemberKick_descriptor_;
  metadata.reflection = Room_NotifyMemberKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Room_NotifyDismiss::Room_NotifyDismiss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Room_NotifyDismiss::InitAsDefaultInstance() {
}

Room_NotifyDismiss::Room_NotifyDismiss(const Room_NotifyDismiss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Room_NotifyDismiss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room_NotifyDismiss::~Room_NotifyDismiss() {
  SharedDtor();
}

void Room_NotifyDismiss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room_NotifyDismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_NotifyDismiss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_NotifyDismiss_descriptor_;
}

const Room_NotifyDismiss& Room_NotifyDismiss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

Room_NotifyDismiss* Room_NotifyDismiss::default_instance_ = NULL;

Room_NotifyDismiss* Room_NotifyDismiss::New() const {
  return new Room_NotifyDismiss;
}

void Room_NotifyDismiss::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room_NotifyDismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Room_NotifyDismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Room_NotifyDismiss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Room_NotifyDismiss::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_NotifyDismiss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room_NotifyDismiss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room_NotifyDismiss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room_NotifyDismiss::MergeFrom(const Room_NotifyDismiss& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room_NotifyDismiss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_NotifyDismiss::CopyFrom(const Room_NotifyDismiss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_NotifyDismiss::IsInitialized() const {

  return true;
}

void Room_NotifyDismiss::Swap(Room_NotifyDismiss* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room_NotifyDismiss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_NotifyDismiss_descriptor_;
  metadata.reflection = Room_NotifyDismiss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_CreateRoom::kCharidFieldNumber;
const int LCRoom_CreateRoom::kDupidFieldNumber;
const int LCRoom_CreateRoom::kPwdFieldNumber;
#endif  // !_MSC_VER

LCRoom_CreateRoom::LCRoom_CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_CreateRoom::InitAsDefaultInstance() {
}

LCRoom_CreateRoom::LCRoom_CreateRoom(const LCRoom_CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  dupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_CreateRoom::~LCRoom_CreateRoom() {
  SharedDtor();
}

void LCRoom_CreateRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_CreateRoom_descriptor_;
}

const LCRoom_CreateRoom& LCRoom_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_CreateRoom* LCRoom_CreateRoom::default_instance_ = NULL;

LCRoom_CreateRoom* LCRoom_CreateRoom::New() const {
  return new LCRoom_CreateRoom;
}

void LCRoom_CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    dupid_ = 0u;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dupid;
        break;
      }

      // required uint32 dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 dupid = 2;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dupid(), output);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 dupid = 2;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dupid(), target);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 dupid = 2;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dupid());
    }

  }
  // repeated int32 pwd = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_CreateRoom::MergeFrom(const LCRoom_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_CreateRoom::CopyFrom(const LCRoom_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_CreateRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LCRoom_CreateRoom::Swap(LCRoom_CreateRoom* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dupid_, other->dupid_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_CreateRoom_descriptor_;
  metadata.reflection = LCRoom_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_SetPwd::kCharidFieldNumber;
const int LCRoom_SetPwd::kTypeFieldNumber;
const int LCRoom_SetPwd::kPwdFieldNumber;
#endif  // !_MSC_VER

LCRoom_SetPwd::LCRoom_SetPwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_SetPwd::InitAsDefaultInstance() {
}

LCRoom_SetPwd::LCRoom_SetPwd(const LCRoom_SetPwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_SetPwd::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_SetPwd::~LCRoom_SetPwd() {
  SharedDtor();
}

void LCRoom_SetPwd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_SetPwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_SetPwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_SetPwd_descriptor_;
}

const LCRoom_SetPwd& LCRoom_SetPwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_SetPwd* LCRoom_SetPwd::default_instance_ = NULL;

LCRoom_SetPwd* LCRoom_SetPwd::New() const {
  return new LCRoom_SetPwd;
}

void LCRoom_SetPwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    type_ = 0;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_SetPwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_SetPwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_SetPwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 pwd = 3;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_SetPwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 pwd = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_SetPwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_SetPwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_SetPwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_SetPwd::MergeFrom(const LCRoom_SetPwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_SetPwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_SetPwd::CopyFrom(const LCRoom_SetPwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_SetPwd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LCRoom_SetPwd::Swap(LCRoom_SetPwd* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_SetPwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_SetPwd_descriptor_;
  metadata.reflection = LCRoom_SetPwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_Join::kCharidFieldNumber;
const int LCRoom_Join::kDupIdFieldNumber;
const int LCRoom_Join::kRoomidFieldNumber;
const int LCRoom_Join::kPwdFieldNumber;
#endif  // !_MSC_VER

LCRoom_Join::LCRoom_Join()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_Join::InitAsDefaultInstance() {
}

LCRoom_Join::LCRoom_Join(const LCRoom_Join& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_Join::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  dup_id_ = 0u;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_Join::~LCRoom_Join() {
  SharedDtor();
}

void LCRoom_Join::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_Join::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_Join::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_Join_descriptor_;
}

const LCRoom_Join& LCRoom_Join::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_Join* LCRoom_Join::default_instance_ = NULL;

LCRoom_Join* LCRoom_Join::New() const {
  return new LCRoom_Join;
}

void LCRoom_Join::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    dup_id_ = 0u;
    roomid_ = 0u;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_Join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dup_id;
        break;
      }

      // required uint32 dup_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // required uint32 roomid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_Join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 dup_id = 2;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dup_id(), output);
  }

  // required uint32 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roomid(), output);
  }

  // repeated int32 pwd = 4;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_Join::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 dup_id = 2;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dup_id(), target);
  }

  // required uint32 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roomid(), target);
  }

  // repeated int32 pwd = 4;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_Join::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 dup_id = 2;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dup_id());
    }

    // required uint32 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  // repeated int32 pwd = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_Join::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_Join* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_Join*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_Join::MergeFrom(const LCRoom_Join& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_Join::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_Join::CopyFrom(const LCRoom_Join& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_Join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LCRoom_Join::Swap(LCRoom_Join* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dup_id_, other->dup_id_);
    std::swap(roomid_, other->roomid_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_Join::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_Join_descriptor_;
  metadata.reflection = LCRoom_Join_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_InviteFriend::kCharidFieldNumber;
const int LCRoom_InviteFriend::kFriendCidFieldNumber;
#endif  // !_MSC_VER

LCRoom_InviteFriend::LCRoom_InviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_InviteFriend::InitAsDefaultInstance() {
}

LCRoom_InviteFriend::LCRoom_InviteFriend(const LCRoom_InviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_InviteFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  friend_cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_InviteFriend::~LCRoom_InviteFriend() {
  SharedDtor();
}

void LCRoom_InviteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_InviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_InviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_InviteFriend_descriptor_;
}

const LCRoom_InviteFriend& LCRoom_InviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_InviteFriend* LCRoom_InviteFriend::default_instance_ = NULL;

LCRoom_InviteFriend* LCRoom_InviteFriend::New() const {
  return new LCRoom_InviteFriend;
}

void LCRoom_InviteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    friend_cid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_InviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_cid;
        break;
      }

      // required uint32 friend_cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_cid_)));
          set_has_friend_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_InviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 friend_cid = 2;
  if (has_friend_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_InviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 friend_cid = 2;
  if (has_friend_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_InviteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 friend_cid = 2;
    if (has_friend_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_InviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_InviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_InviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_InviteFriend::MergeFrom(const LCRoom_InviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_friend_cid()) {
      set_friend_cid(from.friend_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_InviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_InviteFriend::CopyFrom(const LCRoom_InviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_InviteFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LCRoom_InviteFriend::Swap(LCRoom_InviteFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(friend_cid_, other->friend_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_InviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_InviteFriend_descriptor_;
  metadata.reflection = LCRoom_InviteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_ReplyInvite::kCharidFieldNumber;
const int LCRoom_ReplyInvite::kReplyFieldNumber;
const int LCRoom_ReplyInvite::kDupIdFieldNumber;
const int LCRoom_ReplyInvite::kRoomIdFieldNumber;
const int LCRoom_ReplyInvite::kPwdFieldNumber;
#endif  // !_MSC_VER

LCRoom_ReplyInvite::LCRoom_ReplyInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_ReplyInvite::InitAsDefaultInstance() {
}

LCRoom_ReplyInvite::LCRoom_ReplyInvite(const LCRoom_ReplyInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_ReplyInvite::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  reply_ = 0;
  dup_id_ = 0u;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_ReplyInvite::~LCRoom_ReplyInvite() {
  SharedDtor();
}

void LCRoom_ReplyInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_ReplyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_ReplyInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_ReplyInvite_descriptor_;
}

const LCRoom_ReplyInvite& LCRoom_ReplyInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_ReplyInvite* LCRoom_ReplyInvite::default_instance_ = NULL;

LCRoom_ReplyInvite* LCRoom_ReplyInvite::New() const {
  return new LCRoom_ReplyInvite;
}

void LCRoom_ReplyInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    reply_ = 0;
    dup_id_ = 0u;
    room_id_ = 0u;
  }
  pwd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_ReplyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reply;
        break;
      }

      // required int32 reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dup_id;
        break;
      }

      // required uint32 dup_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pwd;
        break;
      }

      // repeated int32 pwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_pwd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pwd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pwd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_ReplyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required int32 reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reply(), output);
  }

  // required uint32 dup_id = 3;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dup_id(), output);
  }

  // required uint32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_id(), output);
  }

  // repeated int32 pwd = 5;
  for (int i = 0; i < this->pwd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->pwd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_ReplyInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required int32 reply = 2;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reply(), target);
  }

  // required uint32 dup_id = 3;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dup_id(), target);
  }

  // required uint32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_id(), target);
  }

  // repeated int32 pwd = 5;
  for (int i = 0; i < this->pwd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->pwd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_ReplyInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required int32 reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply());
    }

    // required uint32 dup_id = 3;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dup_id());
    }

    // required uint32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  // repeated int32 pwd = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pwd(i));
    }
    total_size += 1 * this->pwd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_ReplyInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_ReplyInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_ReplyInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_ReplyInvite::MergeFrom(const LCRoom_ReplyInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwd_.MergeFrom(from.pwd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_ReplyInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_ReplyInvite::CopyFrom(const LCRoom_ReplyInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_ReplyInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LCRoom_ReplyInvite::Swap(LCRoom_ReplyInvite* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(reply_, other->reply_);
    std::swap(dup_id_, other->dup_id_);
    std::swap(room_id_, other->room_id_);
    pwd_.Swap(&other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_ReplyInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_ReplyInvite_descriptor_;
  metadata.reflection = LCRoom_ReplyInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_KickRoom::kCharidFieldNumber;
const int LCRoom_KickRoom::kCidFieldNumber;
#endif  // !_MSC_VER

LCRoom_KickRoom::LCRoom_KickRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_KickRoom::InitAsDefaultInstance() {
}

LCRoom_KickRoom::LCRoom_KickRoom(const LCRoom_KickRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_KickRoom::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_KickRoom::~LCRoom_KickRoom() {
  SharedDtor();
}

void LCRoom_KickRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_KickRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_KickRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_KickRoom_descriptor_;
}

const LCRoom_KickRoom& LCRoom_KickRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_KickRoom* LCRoom_KickRoom::default_instance_ = NULL;

LCRoom_KickRoom* LCRoom_KickRoom::New() const {
  return new LCRoom_KickRoom;
}

void LCRoom_KickRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    cid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_KickRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint32 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_KickRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_KickRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_KickRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_KickRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_KickRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_KickRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_KickRoom::MergeFrom(const LCRoom_KickRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_KickRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_KickRoom::CopyFrom(const LCRoom_KickRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_KickRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LCRoom_KickRoom::Swap(LCRoom_KickRoom* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_KickRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_KickRoom_descriptor_;
  metadata.reflection = LCRoom_KickRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_LeaveRoom::kCharidFieldNumber;
#endif  // !_MSC_VER

LCRoom_LeaveRoom::LCRoom_LeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_LeaveRoom::InitAsDefaultInstance() {
}

LCRoom_LeaveRoom::LCRoom_LeaveRoom(const LCRoom_LeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_LeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_LeaveRoom::~LCRoom_LeaveRoom() {
  SharedDtor();
}

void LCRoom_LeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_LeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_LeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_LeaveRoom_descriptor_;
}

const LCRoom_LeaveRoom& LCRoom_LeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_LeaveRoom* LCRoom_LeaveRoom::default_instance_ = NULL;

LCRoom_LeaveRoom* LCRoom_LeaveRoom::New() const {
  return new LCRoom_LeaveRoom;
}

void LCRoom_LeaveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_LeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_LeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_LeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_LeaveRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_LeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_LeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_LeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_LeaveRoom::MergeFrom(const LCRoom_LeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_LeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_LeaveRoom::CopyFrom(const LCRoom_LeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_LeaveRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LCRoom_LeaveRoom::Swap(LCRoom_LeaveRoom* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_LeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_LeaveRoom_descriptor_;
  metadata.reflection = LCRoom_LeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCRoom_AutoJoin::kCharidFieldNumber;
#endif  // !_MSC_VER

LCRoom_AutoJoin::LCRoom_AutoJoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCRoom_AutoJoin::InitAsDefaultInstance() {
}

LCRoom_AutoJoin::LCRoom_AutoJoin(const LCRoom_AutoJoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCRoom_AutoJoin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCRoom_AutoJoin::~LCRoom_AutoJoin() {
  SharedDtor();
}

void LCRoom_AutoJoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCRoom_AutoJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCRoom_AutoJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCRoom_AutoJoin_descriptor_;
}

const LCRoom_AutoJoin& LCRoom_AutoJoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

LCRoom_AutoJoin* LCRoom_AutoJoin::default_instance_ = NULL;

LCRoom_AutoJoin* LCRoom_AutoJoin::New() const {
  return new LCRoom_AutoJoin;
}

void LCRoom_AutoJoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCRoom_AutoJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCRoom_AutoJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCRoom_AutoJoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCRoom_AutoJoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCRoom_AutoJoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCRoom_AutoJoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCRoom_AutoJoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCRoom_AutoJoin::MergeFrom(const LCRoom_AutoJoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCRoom_AutoJoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCRoom_AutoJoin::CopyFrom(const LCRoom_AutoJoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCRoom_AutoJoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LCRoom_AutoJoin::Swap(LCRoom_AutoJoin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCRoom_AutoJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCRoom_AutoJoin_descriptor_;
  metadata.reflection = LCRoom_AutoJoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLRoom_CharRoomNotify::kCharidFieldNumber;
const int CLRoom_CharRoomNotify::kRoomidFieldNumber;
const int CLRoom_CharRoomNotify::kOwnerFieldNumber;
#endif  // !_MSC_VER

CLRoom_CharRoomNotify::CLRoom_CharRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLRoom_CharRoomNotify::InitAsDefaultInstance() {
}

CLRoom_CharRoomNotify::CLRoom_CharRoomNotify(const CLRoom_CharRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLRoom_CharRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  roomid_ = 0u;
  owner_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLRoom_CharRoomNotify::~CLRoom_CharRoomNotify() {
  SharedDtor();
}

void CLRoom_CharRoomNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLRoom_CharRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLRoom_CharRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLRoom_CharRoomNotify_descriptor_;
}

const CLRoom_CharRoomNotify& CLRoom_CharRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRoom_2eproto();
  return *default_instance_;
}

CLRoom_CharRoomNotify* CLRoom_CharRoomNotify::default_instance_ = NULL;

CLRoom_CharRoomNotify* CLRoom_CharRoomNotify::New() const {
  return new CLRoom_CharRoomNotify;
}

void CLRoom_CharRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    roomid_ = 0u;
    owner_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLRoom_CharRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_owner;
        break;
      }

      // required uint32 owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLRoom_CharRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // required uint32 owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLRoom_CharRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // required uint32 owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLRoom_CharRoomNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // required uint32 owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLRoom_CharRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLRoom_CharRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLRoom_CharRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLRoom_CharRoomNotify::MergeFrom(const CLRoom_CharRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLRoom_CharRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLRoom_CharRoomNotify::CopyFrom(const CLRoom_CharRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLRoom_CharRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CLRoom_CharRoomNotify::Swap(CLRoom_CharRoomNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(roomid_, other->roomid_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLRoom_CharRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLRoom_CharRoomNotify_descriptor_;
  metadata.reflection = CLRoom_CharRoomNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
