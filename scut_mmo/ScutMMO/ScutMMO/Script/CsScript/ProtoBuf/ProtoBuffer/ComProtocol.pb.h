// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ComProtocol.proto

#ifndef PROTOBUF_ProtoBuffer_2fComProtocol_2eproto__INCLUDED
#define PROTOBUF_ProtoBuffer_2fComProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

class EmptyMessage;
class RegisterServiceRequest;
class ValueCurrency;
class CharacterDBPvpData;
class CharacterDBBaseInfo;
class CharacterDBTaskData;
class CharacterDBEffPreCondition;
class CharacterDBSubmittedMission;
class CharacterDBWithoutPreComplete;
class CharacterDBMissionItemInfo;
class CharacterDBMissionTrack;
class CharacterDBSignleCampMission;
class CharacterDBCampMissionInfo;
class CharacterDBLoopMissionInfo;
class CharacterDBSkillItem;
class CharacterDBSkillData;
class CharacterDBAttrDetailInfo;
class CharacterDBExtendData;
class CharacterDBInfo;
class CharacterDBSimpleInfo;
class ItemProtoInfo;
class FashionProtoInfo;
class CharacterDBPackageData;
class CharacterDBEquipData;
class CharacterDBFashionData;
class DuplicateSingleProto;
class CharacterDBDuplicateData;
class CharacterDBMailData;
class SingleCampRankDBInfo;
class CampRankDBData;
class SingleCampDBData;
class AllCampDBData;
class GlobalDBData;
class CharacterCampDBData;
class MallInfo;
class AllMallDBData;
class SingleCharacterMallDB;
class SingleAchievementDBData;
class GroupAchievementDBData;
class CharacterAchievementDBData;
class SingleDeputyDBData;
class CollectDeputyDBData;
class MakeDeputyDBData;
class CharacterDeputyDBData;
class Vector3PB;
class ActorMove;
class ActorSkillMove;
class ActorRockerMove;
class ActorPosUpDate;
class CharSyncAttr;
class SkillCell;
class Attr;
class DigPerfor;
class IsCanTransSceneRouteReq;
class IsCanTransSceneReq;
class ItemSellProto;
class OneKeyDressProto;
class RewardItemProto;
class DuplicateProto;
class RelationMember;
class RelationInfo;
class RelationPhysicalTab;
class RelationDBInfo;
class CharacterPlayerMiniInfo;
class CharacterDetailProtoInfo;
class MailAttachmentList;
class MailHead;
class MailInfo;
class MiniMailInfo;

enum ActorRockerMove_Type {
  ActorRockerMove_Type_Up = 1,
  ActorRockerMove_Type_Down = 2,
  ActorRockerMove_Type_Stop = 3,
  ActorRockerMove_Type_Block = 4,
  ActorRockerMove_Type_UpRoll = 5,
  ActorRockerMove_Type_DownRoll = 6
};
bool ActorRockerMove_Type_IsValid(int value);
const ActorRockerMove_Type ActorRockerMove_Type_Type_MIN = ActorRockerMove_Type_Up;
const ActorRockerMove_Type ActorRockerMove_Type_Type_MAX = ActorRockerMove_Type_DownRoll;
const int ActorRockerMove_Type_Type_ARRAYSIZE = ActorRockerMove_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorRockerMove_Type_descriptor();
inline const ::std::string& ActorRockerMove_Type_Name(ActorRockerMove_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorRockerMove_Type_descriptor(), value);
}
inline bool ActorRockerMove_Type_Parse(
    const ::std::string& name, ActorRockerMove_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorRockerMove_Type>(
    ActorRockerMove_Type_descriptor(), name, value);
}
enum DigPerfor_Type {
  DigPerfor_Type_addHp = 1,
  DigPerfor_Type_reduceHp = 2,
  DigPerfor_Type_cirit = 3,
  DigPerfor_Type_doge = 4
};
bool DigPerfor_Type_IsValid(int value);
const DigPerfor_Type DigPerfor_Type_Type_MIN = DigPerfor_Type_addHp;
const DigPerfor_Type DigPerfor_Type_Type_MAX = DigPerfor_Type_doge;
const int DigPerfor_Type_Type_ARRAYSIZE = DigPerfor_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DigPerfor_Type_descriptor();
inline const ::std::string& DigPerfor_Type_Name(DigPerfor_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DigPerfor_Type_descriptor(), value);
}
inline bool DigPerfor_Type_Parse(
    const ::std::string& name, DigPerfor_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DigPerfor_Type>(
    DigPerfor_Type_descriptor(), name, value);
}
enum PlayerAttr {
  P_NONE = 0,
  P_POWER = 1,
  P_INTELLIGENCE = 2,
  P_AGILITY = 3,
  P_PHYSIQUE = 4,
  P_ENDURANCE = 5,
  P_PRECISION = 6,
  P_MAX_HP = 7,
  P_MAX_MP = 8,
  P_AP = 9,
  P_MAT = 10,
  P_DP = 11,
  P_MDP = 12,
  P_HIT = 13,
  P_DODGE = 14,
  P_CRIT = 15,
  P_TOUGHNESS = 16,
  P_CRIT_RATE = 17,
  P_CRIT_EXTRADAMAGE = 18,
  P_CRIT_REDUCEDAMAGE = 19,
  P_EXTRA_DAMAGE = 20,
  P_REDUCE_DAMAGE = 21,
  P_APDAMAGERATE = 22,
  P_APREDUCEDAMAGERATE = 23,
  P_FREEZERES = 24,
  P_BURNRES = 25,
  P_WEAKRES = 26,
  P_FASTINGRES = 27,
  P_FUNKRES = 28,
  P_RESTORE_HP = 29,
  P_RESTORE_MP = 30,
  P_MSPEED = 31,
  P_ASPEED = 32,
  P_VIEW = 33,
  P_MAX_ACCPOWER = 34,
  P_MATDAMAGERATE = 35,
  P_MATREDUCEDAMAGERATE = 36,
  P_CUREADDITION = 37,
  P_CUREADDITIONBY = 38,
  P_CUREEFFECT = 39,
  P_CUREEFFECTBY = 40,
  P_HP = 41,
  P_MP = 42,
  P_DIRECT = 43,
  P_FREEZE = 44,
  P_BRUN = 45,
  P_WEAK = 46,
  P_FASTING = 47,
  P_FUNK = 48,
  P_RESTART_HP = 49,
  P_SILENTRES = 50,
  P_REFDAMAGE = 51,
  P_IMMUNITY = 52,
  P_PABODY = 53,
  P_MIRACLE = 54,
  P_LUCKY = 55,
  P_SLIENT = 56,
  P_RACE = 57,
  P_PROF = 58,
  P_GENDER = 59,
  P_LEVEL = 60,
  P_VIP = 61,
  P_EXP = 62,
  P_EXPMAX = 63,
  P_CAMP = 64,
  P_CAMP_LEV = 65,
  P_MARRIED = 66,
  P_CAMP_KILLING = 67,
  P_HOSTILEKILLING = 68,
  P_STAMINA = 69,
  P_STAMINA_REPLY = 70,
  P_MAX_STAMINA = 71,
  P_ACCPOWER = 72,
  P_FIGHT_POWER = 73,
  P_ATTR_POINT = 74,
  P_GOLD = 75,
  P_GOLD_BIND = 76,
  P_DIAMOND = 77,
  P_DIAMOND_BIND = 78,
  P_DUPLICATE_ID = 79,
  P_OFFICIAL = 80,
  P_KNIGHT = 81,
  P_UNION_CONTRI = 82,
  P_ENERGY = 83,
  P_CLIENT_END = 99,
  P_VALUE_BEGIN = 100,
  P_VALUE_POWER = 101,
  P_VALUE_INTELLIGENCE = 102,
  P_VALUE_AGILITY = 103,
  P_VALUE_PHYSIQUE = 104,
  P_VALUE_ENDURANCE = 105,
  P_VALUE_PRECISION = 106,
  P_VALUE_MAX_HP = 107,
  P_VALUE_MAX_MP = 108,
  P_VALUE_AP = 109,
  P_VALUE_MAT = 110,
  P_VALUE_DP = 111,
  P_VALUE_MDP = 112,
  P_VALUE_HIT = 113,
  P_VALUE_DODGE = 114,
  P_VALUE_CRIT = 115,
  P_VALUE_TOUGHNESS = 116,
  P_VALUE_CRIT_EXTRADAMAGE = 117,
  P_VALUE_CRIT_REDUCEDAMAGE = 118,
  P_VALUE_EXTRA_DAMAGE = 119,
  P_VALUE_REDUCE_DAMAGE = 120,
  P_VALUE_END = 131,
  P_PERCENT_BEGIN = 132,
  P_PERCENT_POWER = 133,
  P_PERCENT_INTELLIGENCE = 134,
  P_PERCENT_AGILITY = 135,
  P_PERCENT_PHYSIQUE = 136,
  P_PERCENT_ENDURANCE = 137,
  P_PERCENT_PRECISION = 138,
  P_PERCENT_MAX_HP = 139,
  P_PERCENT_MAX_MP = 140,
  P_PERCENT_AP = 141,
  P_PERCENT_MAT = 142,
  P_PERCENT_DP = 143,
  P_PERCENT_MDP = 144,
  P_PERCENT_HIT = 145,
  P_PERCENT_DODGE = 146,
  P_PERCENT_CRIT = 147,
  P_PERCENT_TOUGHNESS = 148,
  P_PERCENT_CRIT_EXTRADAMAGE = 149,
  P_PERCENT_CRIT_REDUCEDAMAGE = 150,
  P_PERCENT_EXTRA_DAMAGE = 151,
  P_PERCENT_REDUCE_DAMAGE = 152,
  P_PERCENT_CUREEFFECTBY = 153,
  P_PERCENT_APDAMAGERATE = 154,
  P_PERCENT_MATDAMAGERATE = 155,
  P_PERCENT_APREDUCEDAMAGERATE = 156,
  P_PERCENT_MATREDUCEDAMAGERATE = 157,
  P_PERCENT_CRIT_RATE = 158,
  P_PERCENT_CUREADDITION = 159,
  P_PERCENT_CUREADDITIONBY = 160,
  P_PERCENT_END = 180,
  P_SKILL_FIX_BEGIN = 181,
  P_SKILL_FIX_AP = 182,
  P_SKILL_FIX_MAT = 183,
  P_SKILL_FIX_END = 200,
  P_ATTR_POINT_BEGIN = 201,
  P_ATTR_POINT_POWER = 202,
  P_ATTR_POINT_INTELLIGENCE = 203,
  P_ATTR_POINT_AGILITY = 204,
  P_ATTR_POINT_PHYSIQUE = 205,
  P_ATTR_POINT_ENDURANCE = 206,
  P_ATTR_POINT_PRECISION = 207,
  P_ATTR_POINT_END = 208,
  P_ADVANCED_ATTR_BEGIN = 209,
  P_ADVANCED_ATTR_AP = 210,
  P_ADVANCED_ATTR_MAT = 211,
  P_ADVANCED_ATTR_DP = 212,
  P_ADVANCED_ATTR_MDP = 213,
  P_ADVANCED_ATTR_HIT = 214,
  P_ADVANCED_ATTR_DODGE = 215,
  P_ADVANCED_ATTR_CRIT = 216,
  P_ADVANCED_ATTR_TOUGHNESS = 217,
  P_ADVANCED_ATTR_MP_MAX = 218,
  P_ADVANCED_ATTR_HP_MAX = 219,
  P_ADVANCED_ATTR_END = 220,
  P_EQUIP_BEGIN = 221,
  P_EQUIP_POWER = 222,
  P_EQUIP_INTELLIGENCE = 223,
  P_EQUIP_AGILITY = 224,
  P_EQUIP_PHYSIQUE = 225,
  P_EQUIP_ENDURANCE = 226,
  P_EQUIP_PRECISION = 227,
  P_EQUIP_MAX_HP = 228,
  P_EQUIP_MAX_MP = 229,
  P_EQUIP_AP = 230,
  P_EQUIP_MAT = 231,
  P_EQUIP_DP = 232,
  P_EQUIP_MDP = 233,
  P_EQUIP_HIT = 234,
  P_EQUIP_DODGE = 235,
  P_EQUIP_CRIT = 236,
  P_EQUIP_TOUGHNESS = 237,
  P_EQUIP_CRIT_RATE = 238,
  P_EQUIP_CRIT_EXTRADAMAGE = 239,
  P_EQUIP_CRIT_REDUCEDAMAGE = 240,
  P_EQUIP_EXTRA_DAMAGE = 241,
  P_EQUIP_REDUCE_DAMAGE = 242,
  P_EQUIP_DAMAGE_RATE = 243,
  P_EQUIP_FREEZERES = 244,
  P_EQUIP_BURNRES = 245,
  P_EQUIP_WEAKRES = 246,
  P_EQUIP_FASTINGRES = 247,
  P_EQUIP_FUNKRES = 248,
  P_EQUIP_APDAMAGERATE = 249,
  P_EQUIP_MATDAMAGERATE = 250,
  P_EQUIP_APREDUCEDAMAGERATE = 251,
  P_EQUIP_MATREDUCEDAMAGERATE = 252,
  P_EQUIP_END = 280,
  P_LEV_BEGIN = 281,
  P_LEV_POWER = 282,
  P_LEV_INTELLIGENCE = 283,
  P_LEV_AGILITY = 284,
  P_LEV_PHYSIQUE = 285,
  P_LEV_ENDURANCE = 286,
  P_LEV_PRECISION = 287,
  P_LEV_MAX_HP = 288,
  P_LEV_MAX_MP = 289,
  P_LEV_AP = 290,
  P_LEV_MAT = 291,
  P_LEV_DP = 292,
  P_LEV_MDP = 293,
  P_LEV_HIT = 294,
  P_LEV_DODGE = 295,
  P_LEV_CRIT = 296,
  P_LEV_TOUGHNESS = 297,
  P_LEV_CRIT_RATE = 298,
  P_LEV_END = 320,
  P_SKILL_PERCENT_BEGIN = 321,
  P_SKILL_PERCENT_MAT = 322,
  P_SKILL_PERCENT_AP = 323,
  P_SKILL_PERCENT_END = 340,
  P_AUTO_POINT_BEGIN = 341,
  P_AUTO_POINT_POWER = 342,
  P_AUTO_POINT_INTELLIGENCE = 343,
  P_AUTO_POINT_AGILITY = 344,
  P_AUTO_POINT_PHYSIQUE = 345,
  P_AUTO_POINT_ENDURANCE = 346,
  P_AUTO_POINT_PRECISION = 347,
  P_AUTO_POINT = 348,
  P_AUTO_POINT_END = 349,
  P_BUFF_FIX_BEGIN = 350,
  P_BUFF_FIX_POWER = 351,
  P_BUFF_FIX_INTELLIGENCE = 352,
  P_BUFF_FIX_AGILITY = 353,
  P_BUFF_FIX_PHYSIQUE = 354,
  P_BUFF_FIX_ENDURANCE = 355,
  P_BUFF_FIX_PRECISION = 356,
  P_BUFF_FIX_MAX_HP = 357,
  P_BUFF_FIX_MAX_MP = 358,
  P_BUFF_FIX_AP = 359,
  P_BUFF_FIX_MAT = 360,
  P_BUFF_FIX_DP = 361,
  P_BUFF_FIX_MDP = 362,
  P_BUFF_FIX_HIT = 363,
  P_BUFF_FIX_DODGE = 364,
  P_BUFF_FIX_CRIT = 365,
  P_BUFF_FIX_TOUGHNESS = 366,
  P_BUFF_FIX_CRIT_EXTRADAMAGE = 367,
  P_BUFF_FIX_CRIT_REDUCEDAMAGE = 368,
  P_BUFF_FIX_EXTRA_DAMAGE = 369,
  P_BUFF_FIX_REDUCE_DAMAGE = 370,
  P_BUFF_FIX_END = 400,
  P_BUFF_PERCENT_BEGIN = 401,
  P_BUFF_PERCENT_POWER = 402,
  P_BUFF_PERCENT_INTELLIGENCE = 403,
  P_BUFF_PERCENT_AGILITY = 404,
  P_BUFF_PERCENT_PHYSIQUE = 405,
  P_BUFF_PERCENT_ENDURANCE = 406,
  P_BUFF_PERCENT_PRECISION = 407,
  P_BUFF_PERCENT_MAX_HP = 408,
  P_BUFF_PERCENT_MAX_MP = 409,
  P_BUFF_PERCENT_AP = 410,
  P_BUFF_PERCENT_MAT = 411,
  P_BUFF_PERCENT_DP = 412,
  P_BUFF_PERCENT_MDP = 413,
  P_BUFF_PERCENT_HIT = 414,
  P_BUFF_PERCENT_DODGE = 415,
  P_BUFF_PERCENT_CRIT = 416,
  P_BUFF_PERCENT_TOUGHNESS = 417,
  P_BUFF_PERCENT_CRIT_EXTRADAMAGE = 418,
  P_BUFF_PERCENT_CRIT_REDUCEDAMAGE = 419,
  P_BUFF_PERCENT_EXTRA_DAMAGE = 420,
  P_BUFF_PERCENT_REDUCE_DAMAGE = 421,
  P_BUFF_PERCENT_CUREEFFECTBY = 422,
  P_BUFF_PERCENT_APDAMAGERATE = 423,
  P_BUFF_PERCENT_MATDAMAGERATE = 424,
  P_BUFF_PERCENT_APREDUCEDAMAGERATE = 425,
  P_BUFF_PERCENT_MATREDUCEDAMAGERATE = 426,
  P_BUFF_PERCENT_CRIT_RATE = 427,
  P_BUFF_PERCENT_CUREADDITION = 428,
  P_BUFF_PERCENT_CUREADDITIONBY = 429,
  P_BUFF_PERCENT_END = 450,
  P_FIX_BEGIN = 452,
  P_FIX_POWER = 453,
  P_FIX_INTELLIGENCE = 454,
  P_FIX_AGILITY = 455,
  P_FIX_PHYSIQUE = 456,
  P_FIX_ENDURANCE = 457,
  P_FIX_PRECISION = 458,
  P_FIX_MAX_HP = 459,
  P_FIX_MAX_MP = 460,
  P_FIX_AP = 461,
  P_FIX_MAT = 462,
  P_FIX_DP = 463,
  P_FIX_MDP = 464,
  P_FIX_HIT = 465,
  P_FIX_DODGE = 466,
  P_FIX_CRIT = 467,
  P_FIX_TOUGHNESS = 468,
  P_FIX_CRIT_EXTRADAMAGE = 469,
  P_FIX_CRIT_REDUCEDAMAGE = 470,
  P_FIX_EXTRA_DAMAGE = 471,
  P_FIX_REDUCE_DAMAGE = 472,
  P_FIX_END = 499,
  P_MAX = 500
};
bool PlayerAttr_IsValid(int value);
const PlayerAttr PlayerAttr_MIN = P_NONE;
const PlayerAttr PlayerAttr_MAX = P_MAX;
const int PlayerAttr_ARRAYSIZE = PlayerAttr_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerAttr_descriptor();
inline const ::std::string& PlayerAttr_Name(PlayerAttr value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerAttr_descriptor(), value);
}
inline bool PlayerAttr_Parse(
    const ::std::string& name, PlayerAttr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerAttr>(
    PlayerAttr_descriptor(), name, value);
}
enum MonsterAttr {
  M_NONE = 0,
  M_HP = 1,
  M_MAX_HP = 2,
  M_ID = 3,
  M_MP = 4,
  M_MAX_MP = 5,
  M_AP = 6,
  M_MAT = 7,
  M_DP = 8,
  M_MDP = 9,
  M_HIT = 10,
  M_DODGE = 11,
  M_CRIT = 12,
  M_TOUGHNESS = 13,
  M_CRIT_RATE = 14,
  M_CRIT_EXTRADAMAGE = 15,
  M_CRIT_REDUCEDAMAGE = 16,
  M_EXTRA_DAMAGE = 17,
  M_REDUCE_DAMAGE = 18,
  M_DAMAGE_RATE = 19,
  M_REDUCE_DAMAGERATE = 20,
  M_FREEZERES = 21,
  M_BURNRES = 22,
  M_WEAKRES = 23,
  M_FASTINGRES = 24,
  M_FUNKRES = 25,
  M_MSPEED = 26,
  M_ASPEED = 27,
  M_SKILL_FIX_BEGIN = 28,
  M_SKILL_FIX_AP = 29,
  M_SKILL_FIX_MAT = 30,
  M_SKILL_FIX_END = 31,
  M_SKILL_PERCENT_BEGIN = 50,
  M_SKILL_PERCENT_AP = 51,
  M_SKILL_PERCENT_MAT = 52,
  M_CUREEFFECT = 53,
  M_CUREADDITION = 54,
  M_SKILLCFG_END = 55,
  M_BUFF_FIX_BEGIN = 70,
  M_BUFF_FIX_POWER = 71,
  M_BUFF_FIX_INTELLIGENCE = 72,
  M_BUFF_FIX_AGILITY = 73,
  M_BUFF_FIX_PHYSIQUE = 74,
  M_BUFF_FIX_ENDURANCE = 75,
  M_BUFF_FIX_PRECISION = 76,
  M_BUFF_FIX_MAX_HP = 77,
  M_BUFF_FIX_MAX_MP = 78,
  M_BUFF_FIX_AP = 79,
  M_BUFF_FIX_MAT = 80,
  M_BUFF_FIX_DP = 81,
  M_BUFF_FIX_MDP = 82,
  M_BUFF_FIX_HIT = 83,
  M_BUFF_FIX_DODGE = 84,
  M_BUFF_FIX_CRIT = 85,
  M_BUFF_FIX_TOUGHNESS = 86,
  M_BUFF_FIX_CRIT_EXTRADAMAGE = 87,
  M_BUFF_FIX_CRIT_REDUCEDAMAGE = 88,
  M_BUFF_FIX_EXTRA_DAMAGE = 89,
  M_BUFF_FIX_REDUCE_DAMAGE = 90,
  M_BUFF_FIX_END = 91,
  M_BUFF_PERCENT_BEGIN = 100,
  M_BUFF_PERCENT_POWER = 101,
  M_BUFF_PERCENT_INTELLIGENCE = 102,
  M_BUFF_PERCENT_AGILITY = 103,
  M_BUFF_PERCENT_PHYSIQUE = 104,
  M_BUFF_PERCENT_ENDURANCE = 105,
  M_BUFF_PERCENT_PRECISION = 106,
  M_BUFF_PERCENT_MAX_HP = 107,
  M_BUFF_PERCENT_MAX_MP = 108,
  M_BUFF_PERCENT_AP = 109,
  M_BUFF_PERCENT_MAT = 110,
  M_BUFF_PERCENT_DP = 111,
  M_BUFF_PERCENT_MDP = 112,
  M_BUFF_PERCENT_HIT = 113,
  M_BUFF_PERCENT_DODGE = 114,
  M_BUFF_PERCENT_CRIT = 115,
  M_BUFF_PERCENT_TOUGHNESS = 116,
  M_BUFF_PERCENT_CRIT_EXTRADAMAGE = 117,
  M_BUFF_PERCENT_CRIT_REDUCEDAMAGE = 118,
  M_BUFF_PERCENT_EXTRA_DAMAGE = 119,
  M_BUFF_PERCENT_REDUCE_DAMAGE = 120,
  M_BUFF_PERCENT_CUREEFFECTBY = 121,
  M_BUFF_PERCENT_APDAMAGERATE = 122,
  M_BUFF_PERCENT_MATDAMAGERATE = 123,
  M_BUFF_PERCENT_APREDUCEDAMAGERATE = 124,
  M_BUFF_PERCENT_MATREDUCEDAMAGERATE = 125,
  M_BUFF_PERCENT_CRIT_RATE = 126,
  M_BUFF_PERCENT_CUREADDITION = 127,
  M_BUFF_PERCENT_CUREADDITIONBY = 128,
  M_BUFF_PERCENT_END = 129,
  M_VALUE_BEGIN = 140,
  M_VALUE_POWER = 141,
  M_VALUE_INTELLIGENCE = 142,
  M_VALUE_AGILITY = 143,
  M_VALUE_PHYSIQUE = 144,
  M_VALUE_ENDURANCE = 145,
  M_VALUE_PRECISION = 146,
  M_VALUE_MAX_HP = 147,
  M_VALUE_MAX_MP = 148,
  M_VALUE_AP = 149,
  M_VALUE_MAT = 150,
  M_VALUE_DP = 151,
  M_VALUE_MDP = 152,
  M_VALUE_HIT = 153,
  M_VALUE_DODGE = 154,
  M_VALUE_CRIT = 155,
  M_VALUE_TOUGHNESS = 156,
  M_VALUE_CRIT_EXTRADAMAGE = 157,
  M_VALUE_CRIT_REDUCEDAMAGE = 158,
  M_VALUE_EXTRA_DAMAGE = 159,
  M_VALUE_REDUCE_DAMAGE = 160,
  M_VALUE_END = 170,
  M_PERCENT_BEGIN = 171,
  M_PERCENT_POWER = 172,
  M_PERCENT_INTELLIGENCE = 173,
  M_PERCENT_AGILITY = 174,
  M_PERCENT_PHYSIQUE = 175,
  M_PERCENT_ENDURANCE = 176,
  M_PERCENT_PRECISION = 177,
  M_PERCENT_MAX_HP = 178,
  M_PERCENT_MAX_MP = 179,
  M_PERCENT_AP = 180,
  M_PERCENT_MAT = 181,
  M_PERCENT_DP = 182,
  M_PERCENT_MDP = 183,
  M_PERCENT_HIT = 184,
  M_PERCENT_DODGE = 185,
  M_PERCENT_CRIT = 186,
  M_PERCENT_TOUGHNESS = 187,
  M_PERCENT_CRIT_EXTRADAMAGE = 188,
  M_PERCENT_CRIT_REDUCEDAMAGE = 189,
  M_PERCENT_EXTRA_DAMAGE = 190,
  M_PERCENT_REDUCE_DAMAGE = 191,
  M_PERCENT_CUREEFFECTBY = 192,
  M_PERCENT_APDAMAGERATE = 193,
  M_PERCENT_MATDAMAGERATE = 194,
  M_PERCENT_APREDUCEDAMAGERATE = 195,
  M_PERCENT_MATREDUCEDAMAGERATE = 196,
  M_PERCENT_CRIT_RATE = 197,
  M_PERCENT_CUREADDITION = 198,
  M_PERCENT_CUREADDITIONBY = 199,
  M_PERCENT_END = 210,
  M_FIX_BEGIN = 240,
  M_FIX_POWER = 241,
  M_FIX_INTELLIGENCE = 242,
  M_FIX_AGILITY = 243,
  M_FIX_PHYSIQUE = 244,
  M_FIX_ENDURANCE = 245,
  M_FIX_PRECISION = 246,
  M_FIX_MAX_HP = 247,
  M_FIX_MAX_MP = 248,
  M_FIX_AP = 249,
  M_FIX_MAT = 250,
  M_FIX_DP = 251,
  M_FIX_MDP = 252,
  M_FIX_HIT = 253,
  M_FIX_DODGE = 254,
  M_FIX_CRIT = 255,
  M_FIX_TOUGHNESS = 256,
  M_FIX_CRIT_EXTRADAMAGE = 257,
  M_FIX_CRIT_REDUCEDAMAGE = 258,
  M_FIX_EXTRA_DAMAGE = 259,
  M_FIX_REDUCE_DAMAGE = 260,
  M_FIX_CUREEFFECTBY = 261,
  M_FIX_APDAMAGERATE = 262,
  M_FIX_MATDAMAGERATE = 263,
  M_FIX_APREDUCEDAMAGERATE = 264,
  M_FIX_MATREDUCEDAMAGERATE = 265,
  M_FIX_CRIT_RATE = 266,
  M_FIX_CUREADDITION = 267,
  M_FIX_CUREADDITIONBY = 268,
  M_FIX_END = 269,
  M_MAX = 270
};
bool MonsterAttr_IsValid(int value);
const MonsterAttr MonsterAttr_MIN = M_NONE;
const MonsterAttr MonsterAttr_MAX = M_MAX;
const int MonsterAttr_ARRAYSIZE = MonsterAttr_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonsterAttr_descriptor();
inline const ::std::string& MonsterAttr_Name(MonsterAttr value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonsterAttr_descriptor(), value);
}
inline bool MonsterAttr_Parse(
    const ::std::string& name, MonsterAttr* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonsterAttr>(
    MonsterAttr_descriptor(), name, value);
}
enum CreatureState {
  State_Init = 0,
  State_normal = 1,
  State_dead = 2,
  state_relive = 3
};
bool CreatureState_IsValid(int value);
const CreatureState CreatureState_MIN = State_Init;
const CreatureState CreatureState_MAX = state_relive;
const int CreatureState_ARRAYSIZE = CreatureState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreatureState_descriptor();
inline const ::std::string& CreatureState_Name(CreatureState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreatureState_descriptor(), value);
}
inline bool CreatureState_Parse(
    const ::std::string& name, CreatureState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreatureState>(
    CreatureState_descriptor(), name, value);
}
// ===================================================================

class EmptyMessage : public ::google::protobuf::Message {
 public:
  EmptyMessage();
  virtual ~EmptyMessage();

  EmptyMessage(const EmptyMessage& from);

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyMessage& default_instance();

  void Swap(EmptyMessage* other);

  // implements Message ----------------------------------------------

  EmptyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyMessage& from);
  void MergeFrom(const EmptyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoBuf.EmptyMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static EmptyMessage* default_instance_;
};
// -------------------------------------------------------------------

class RegisterServiceRequest : public ::google::protobuf::Message {
 public:
  RegisterServiceRequest();
  virtual ~RegisterServiceRequest();

  RegisterServiceRequest(const RegisterServiceRequest& from);

  inline RegisterServiceRequest& operator=(const RegisterServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterServiceRequest& default_instance();

  void Swap(RegisterServiceRequest* other);

  // implements Message ----------------------------------------------

  RegisterServiceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterServiceRequest& from);
  void MergeFrom(const RegisterServiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 service_type = 1;
  inline bool has_service_type() const;
  inline void clear_service_type();
  static const int kServiceTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 service_type() const;
  inline void set_service_type(::google::protobuf::uint32 value);

  // required uint32 group_id = 2;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 service_id = 3;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 3;
  inline ::google::protobuf::uint32 service_id() const;
  inline void set_service_id(::google::protobuf::uint32 value);

  // required string listen_ip = 4;
  inline bool has_listen_ip() const;
  inline void clear_listen_ip();
  static const int kListenIpFieldNumber = 4;
  inline const ::std::string& listen_ip() const;
  inline void set_listen_ip(const ::std::string& value);
  inline void set_listen_ip(const char* value);
  inline void set_listen_ip(const char* value, size_t size);
  inline ::std::string* mutable_listen_ip();
  inline ::std::string* release_listen_ip();
  inline void set_allocated_listen_ip(::std::string* listen_ip);

  // required uint32 listen_port = 5;
  inline bool has_listen_port() const;
  inline void clear_listen_port();
  static const int kListenPortFieldNumber = 5;
  inline ::google::protobuf::uint32 listen_port() const;
  inline void set_listen_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.RegisterServiceRequest)
 private:
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_service_id();
  inline void clear_has_service_id();
  inline void set_has_listen_ip();
  inline void clear_has_listen_ip();
  inline void set_has_listen_port();
  inline void clear_has_listen_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 service_type_;
  ::google::protobuf::uint32 group_id_;
  ::std::string* listen_ip_;
  ::google::protobuf::uint32 service_id_;
  ::google::protobuf::uint32 listen_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static RegisterServiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ValueCurrency : public ::google::protobuf::Message {
 public:
  ValueCurrency();
  virtual ~ValueCurrency();

  ValueCurrency(const ValueCurrency& from);

  inline ValueCurrency& operator=(const ValueCurrency& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueCurrency& default_instance();

  void Swap(ValueCurrency* other);

  // implements Message ----------------------------------------------

  ValueCurrency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValueCurrency& from);
  void MergeFrom(const ValueCurrency& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 coinType = 1;
  inline bool has_cointype() const;
  inline void clear_cointype();
  static const int kCoinTypeFieldNumber = 1;
  inline ::google::protobuf::int32 cointype() const;
  inline void set_cointype(::google::protobuf::int32 value);

  // required int32 coinValue = 2;
  inline bool has_coinvalue() const;
  inline void clear_coinvalue();
  static const int kCoinValueFieldNumber = 2;
  inline ::google::protobuf::int32 coinvalue() const;
  inline void set_coinvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ValueCurrency)
 private:
  inline void set_has_cointype();
  inline void clear_has_cointype();
  inline void set_has_coinvalue();
  inline void clear_has_coinvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cointype_;
  ::google::protobuf::int32 coinvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static ValueCurrency* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBPvpData : public ::google::protobuf::Message {
 public:
  CharacterDBPvpData();
  virtual ~CharacterDBPvpData();

  CharacterDBPvpData(const CharacterDBPvpData& from);

  inline CharacterDBPvpData& operator=(const CharacterDBPvpData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBPvpData& default_instance();

  void Swap(CharacterDBPvpData* other);

  // implements Message ----------------------------------------------

  CharacterDBPvpData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBPvpData& from);
  void MergeFrom(const CharacterDBPvpData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pk_mode = 1;
  inline bool has_pk_mode() const;
  inline void clear_pk_mode();
  static const int kPkModeFieldNumber = 1;
  inline ::google::protobuf::uint32 pk_mode() const;
  inline void set_pk_mode(::google::protobuf::uint32 value);

  // optional uint32 pk_killing_value = 2;
  inline bool has_pk_killing_value() const;
  inline void clear_pk_killing_value();
  static const int kPkKillingValueFieldNumber = 2;
  inline ::google::protobuf::uint32 pk_killing_value() const;
  inline void set_pk_killing_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBPvpData)
 private:
  inline void set_has_pk_mode();
  inline void clear_has_pk_mode();
  inline void set_has_pk_killing_value();
  inline void clear_has_pk_killing_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pk_mode_;
  ::google::protobuf::uint32 pk_killing_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBPvpData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBBaseInfo : public ::google::protobuf::Message {
 public:
  CharacterDBBaseInfo();
  virtual ~CharacterDBBaseInfo();

  CharacterDBBaseInfo(const CharacterDBBaseInfo& from);

  inline CharacterDBBaseInfo& operator=(const CharacterDBBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBBaseInfo& default_instance();

  void Swap(CharacterDBBaseInfo* other);

  // implements Message ----------------------------------------------

  CharacterDBBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBBaseInfo& from);
  void MergeFrom(const CharacterDBBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channelId = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // required string userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // required string userName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required uint64 createTime = 4;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // required uint64 lastSaveTime = 5;
  inline bool has_lastsavetime() const;
  inline void clear_lastsavetime();
  static const int kLastSaveTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 lastsavetime() const;
  inline void set_lastsavetime(::google::protobuf::uint64 value);

  // required uint64 onlineTime = 6;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlineTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::uint64 value);

  // required uint64 loginTime = 7;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 logintime() const;
  inline void set_logintime(::google::protobuf::uint64 value);

  // required uint64 logoutTime = 8;
  inline bool has_logouttime() const;
  inline void clear_logouttime();
  static const int kLogoutTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 logouttime() const;
  inline void set_logouttime(::google::protobuf::uint64 value);

  // repeated .ProtoBuf.ValueCurrency currency = 9;
  inline int currency_size() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 9;
  inline const ::ProtoBuf::ValueCurrency& currency(int index) const;
  inline ::ProtoBuf::ValueCurrency* mutable_currency(int index);
  inline ::ProtoBuf::ValueCurrency* add_currency();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ValueCurrency >&
      currency() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ValueCurrency >*
      mutable_currency();

  // required string name = 10;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 10;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 sex = 11;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 11;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // required uint32 prof = 12;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 12;
  inline ::google::protobuf::uint32 prof() const;
  inline void set_prof(::google::protobuf::uint32 value);

  // required uint32 level = 13;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required int64 exp = 14;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 14;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // required uint32 hp = 15;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 15;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // required uint32 fightPower = 16;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightPowerFieldNumber = 16;
  inline ::google::protobuf::uint32 fightpower() const;
  inline void set_fightpower(::google::protobuf::uint32 value);

  // required uint32 enter_scene_id = 17;
  inline bool has_enter_scene_id() const;
  inline void clear_enter_scene_id();
  static const int kEnterSceneIdFieldNumber = 17;
  inline ::google::protobuf::uint32 enter_scene_id() const;
  inline void set_enter_scene_id(::google::protobuf::uint32 value);

  // required float enterPosX = 18;
  inline bool has_enterposx() const;
  inline void clear_enterposx();
  static const int kEnterPosXFieldNumber = 18;
  inline float enterposx() const;
  inline void set_enterposx(float value);

  // required float enterPosY = 19;
  inline bool has_enterposy() const;
  inline void clear_enterposy();
  static const int kEnterPosYFieldNumber = 19;
  inline float enterposy() const;
  inline void set_enterposy(float value);

  // required float enterPosZ = 20;
  inline bool has_enterposz() const;
  inline void clear_enterposz();
  static const int kEnterPosZFieldNumber = 20;
  inline float enterposz() const;
  inline void set_enterposz(float value);

  // required uint32 race = 21;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 21;
  inline ::google::protobuf::uint32 race() const;
  inline void set_race(::google::protobuf::uint32 value);

  // required uint32 enter_map_id = 22;
  inline bool has_enter_map_id() const;
  inline void clear_enter_map_id();
  static const int kEnterMapIdFieldNumber = 22;
  inline ::google::protobuf::uint32 enter_map_id() const;
  inline void set_enter_map_id(::google::protobuf::uint32 value);

  // optional uint64 lastReviveTime = 23;
  inline bool has_lastrevivetime() const;
  inline void clear_lastrevivetime();
  static const int kLastReviveTimeFieldNumber = 23;
  inline ::google::protobuf::uint64 lastrevivetime() const;
  inline void set_lastrevivetime(::google::protobuf::uint64 value);

  // optional uint32 curState = 24;
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurStateFieldNumber = 24;
  inline ::google::protobuf::uint32 curstate() const;
  inline void set_curstate(::google::protobuf::uint32 value);

  // optional uint32 lastSceneId = 25;
  inline bool has_lastsceneid() const;
  inline void clear_lastsceneid();
  static const int kLastSceneIdFieldNumber = 25;
  inline ::google::protobuf::uint32 lastsceneid() const;
  inline void set_lastsceneid(::google::protobuf::uint32 value);

  // optional uint32 lastMapId = 26;
  inline bool has_lastmapid() const;
  inline void clear_lastmapid();
  static const int kLastMapIdFieldNumber = 26;
  inline ::google::protobuf::uint32 lastmapid() const;
  inline void set_lastmapid(::google::protobuf::uint32 value);

  // optional float lastPosX = 27;
  inline bool has_lastposx() const;
  inline void clear_lastposx();
  static const int kLastPosXFieldNumber = 27;
  inline float lastposx() const;
  inline void set_lastposx(float value);

  // optional float lastPosY = 28;
  inline bool has_lastposy() const;
  inline void clear_lastposy();
  static const int kLastPosYFieldNumber = 28;
  inline float lastposy() const;
  inline void set_lastposy(float value);

  // optional float lastPosZ = 29;
  inline bool has_lastposz() const;
  inline void clear_lastposz();
  static const int kLastPosZFieldNumber = 29;
  inline float lastposz() const;
  inline void set_lastposz(float value);

  // optional uint32 gold = 30;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 30;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 bindgold = 31;
  inline bool has_bindgold() const;
  inline void clear_bindgold();
  static const int kBindgoldFieldNumber = 31;
  inline ::google::protobuf::uint32 bindgold() const;
  inline void set_bindgold(::google::protobuf::uint32 value);

  // optional uint32 diamond = 32;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 32;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // optional uint32 binddiamond = 33;
  inline bool has_binddiamond() const;
  inline void clear_binddiamond();
  static const int kBinddiamondFieldNumber = 33;
  inline ::google::protobuf::uint32 binddiamond() const;
  inline void set_binddiamond(::google::protobuf::uint32 value);

  // optional uint32 power = 34;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 34;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // optional uint32 intelligence = 35;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 35;
  inline ::google::protobuf::uint32 intelligence() const;
  inline void set_intelligence(::google::protobuf::uint32 value);

  // optional uint32 agility = 36;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 36;
  inline ::google::protobuf::uint32 agility() const;
  inline void set_agility(::google::protobuf::uint32 value);

  // optional uint32 physique = 37;
  inline bool has_physique() const;
  inline void clear_physique();
  static const int kPhysiqueFieldNumber = 37;
  inline ::google::protobuf::uint32 physique() const;
  inline void set_physique(::google::protobuf::uint32 value);

  // optional uint32 endurance = 38;
  inline bool has_endurance() const;
  inline void clear_endurance();
  static const int kEnduranceFieldNumber = 38;
  inline ::google::protobuf::uint32 endurance() const;
  inline void set_endurance(::google::protobuf::uint32 value);

  // optional uint32 precision = 39;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 39;
  inline ::google::protobuf::uint32 precision() const;
  inline void set_precision(::google::protobuf::uint32 value);

  // optional uint32 mp = 40;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 40;
  inline ::google::protobuf::uint32 mp() const;
  inline void set_mp(::google::protobuf::uint32 value);

  // optional uint32 vip = 41;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 41;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // optional uint32 camp = 42;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 42;
  inline ::google::protobuf::uint32 camp() const;
  inline void set_camp(::google::protobuf::uint32 value);

  // optional uint32 camplev = 43;
  inline bool has_camplev() const;
  inline void clear_camplev();
  static const int kCamplevFieldNumber = 43;
  inline ::google::protobuf::uint32 camplev() const;
  inline void set_camplev(::google::protobuf::uint32 value);

  // optional uint32 married = 44;
  inline bool has_married() const;
  inline void clear_married();
  static const int kMarriedFieldNumber = 44;
  inline ::google::protobuf::uint32 married() const;
  inline void set_married(::google::protobuf::uint32 value);

  // optional uint32 campkilling = 45;
  inline bool has_campkilling() const;
  inline void clear_campkilling();
  static const int kCampkillingFieldNumber = 45;
  inline ::google::protobuf::uint32 campkilling() const;
  inline void set_campkilling(::google::protobuf::uint32 value);

  // optional uint32 hostilekilling = 46;
  inline bool has_hostilekilling() const;
  inline void clear_hostilekilling();
  static const int kHostilekillingFieldNumber = 46;
  inline ::google::protobuf::uint32 hostilekilling() const;
  inline void set_hostilekilling(::google::protobuf::uint32 value);

  // optional uint32 stamina = 47;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 47;
  inline ::google::protobuf::uint32 stamina() const;
  inline void set_stamina(::google::protobuf::uint32 value);

  // optional uint32 attr_point = 48;
  inline bool has_attr_point() const;
  inline void clear_attr_point();
  static const int kAttrPointFieldNumber = 48;
  inline ::google::protobuf::uint32 attr_point() const;
  inline void set_attr_point(::google::protobuf::uint32 value);

  // optional uint32 pointPower = 49;
  inline bool has_pointpower() const;
  inline void clear_pointpower();
  static const int kPointPowerFieldNumber = 49;
  inline ::google::protobuf::uint32 pointpower() const;
  inline void set_pointpower(::google::protobuf::uint32 value);

  // optional uint32 pointIntelligence = 50;
  inline bool has_pointintelligence() const;
  inline void clear_pointintelligence();
  static const int kPointIntelligenceFieldNumber = 50;
  inline ::google::protobuf::uint32 pointintelligence() const;
  inline void set_pointintelligence(::google::protobuf::uint32 value);

  // optional uint32 pointAgility = 51;
  inline bool has_pointagility() const;
  inline void clear_pointagility();
  static const int kPointAgilityFieldNumber = 51;
  inline ::google::protobuf::uint32 pointagility() const;
  inline void set_pointagility(::google::protobuf::uint32 value);

  // optional uint32 pointPhysique = 52;
  inline bool has_pointphysique() const;
  inline void clear_pointphysique();
  static const int kPointPhysiqueFieldNumber = 52;
  inline ::google::protobuf::uint32 pointphysique() const;
  inline void set_pointphysique(::google::protobuf::uint32 value);

  // optional uint32 pointEndurance = 53;
  inline bool has_pointendurance() const;
  inline void clear_pointendurance();
  static const int kPointEnduranceFieldNumber = 53;
  inline ::google::protobuf::uint32 pointendurance() const;
  inline void set_pointendurance(::google::protobuf::uint32 value);

  // optional uint32 pointPrecision = 54;
  inline bool has_pointprecision() const;
  inline void clear_pointprecision();
  static const int kPointPrecisionFieldNumber = 54;
  inline ::google::protobuf::uint32 pointprecision() const;
  inline void set_pointprecision(::google::protobuf::uint32 value);

  // optional uint32 autoPower = 55;
  inline bool has_autopower() const;
  inline void clear_autopower();
  static const int kAutoPowerFieldNumber = 55;
  inline ::google::protobuf::uint32 autopower() const;
  inline void set_autopower(::google::protobuf::uint32 value);

  // optional uint32 autoIntelligence = 56;
  inline bool has_autointelligence() const;
  inline void clear_autointelligence();
  static const int kAutoIntelligenceFieldNumber = 56;
  inline ::google::protobuf::uint32 autointelligence() const;
  inline void set_autointelligence(::google::protobuf::uint32 value);

  // optional uint32 autoAgility = 57;
  inline bool has_autoagility() const;
  inline void clear_autoagility();
  static const int kAutoAgilityFieldNumber = 57;
  inline ::google::protobuf::uint32 autoagility() const;
  inline void set_autoagility(::google::protobuf::uint32 value);

  // optional uint32 autoPhysique = 58;
  inline bool has_autophysique() const;
  inline void clear_autophysique();
  static const int kAutoPhysiqueFieldNumber = 58;
  inline ::google::protobuf::uint32 autophysique() const;
  inline void set_autophysique(::google::protobuf::uint32 value);

  // optional uint32 autoEndurance = 59;
  inline bool has_autoendurance() const;
  inline void clear_autoendurance();
  static const int kAutoEnduranceFieldNumber = 59;
  inline ::google::protobuf::uint32 autoendurance() const;
  inline void set_autoendurance(::google::protobuf::uint32 value);

  // optional uint32 autoPrecision = 60;
  inline bool has_autoprecision() const;
  inline void clear_autoprecision();
  static const int kAutoPrecisionFieldNumber = 60;
  inline ::google::protobuf::uint32 autoprecision() const;
  inline void set_autoprecision(::google::protobuf::uint32 value);

  // optional uint32 autoPoint = 61;
  inline bool has_autopoint() const;
  inline void clear_autopoint();
  static const int kAutoPointFieldNumber = 61;
  inline ::google::protobuf::uint32 autopoint() const;
  inline void set_autopoint(::google::protobuf::uint32 value);

  // optional uint32 duplicate_id = 62;
  inline bool has_duplicate_id() const;
  inline void clear_duplicate_id();
  static const int kDuplicateIdFieldNumber = 62;
  inline ::google::protobuf::uint32 duplicate_id() const;
  inline void set_duplicate_id(::google::protobuf::uint32 value);

  // optional int32 official = 63;
  inline bool has_official() const;
  inline void clear_official();
  static const int kOfficialFieldNumber = 63;
  inline ::google::protobuf::int32 official() const;
  inline void set_official(::google::protobuf::int32 value);

  // optional int32 knight = 64;
  inline bool has_knight() const;
  inline void clear_knight();
  static const int kKnightFieldNumber = 64;
  inline ::google::protobuf::int32 knight() const;
  inline void set_knight(::google::protobuf::int32 value);

  // optional .ProtoBuf.CharacterDBPvpData pvpData = 65;
  inline bool has_pvpdata() const;
  inline void clear_pvpdata();
  static const int kPvpDataFieldNumber = 65;
  inline const ::ProtoBuf::CharacterDBPvpData& pvpdata() const;
  inline ::ProtoBuf::CharacterDBPvpData* mutable_pvpdata();
  inline ::ProtoBuf::CharacterDBPvpData* release_pvpdata();
  inline void set_allocated_pvpdata(::ProtoBuf::CharacterDBPvpData* pvpdata);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBBaseInfo)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_lastsavetime();
  inline void clear_has_lastsavetime();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_logouttime();
  inline void clear_has_logouttime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  inline void set_has_enter_scene_id();
  inline void clear_has_enter_scene_id();
  inline void set_has_enterposx();
  inline void clear_has_enterposx();
  inline void set_has_enterposy();
  inline void clear_has_enterposy();
  inline void set_has_enterposz();
  inline void clear_has_enterposz();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_enter_map_id();
  inline void clear_has_enter_map_id();
  inline void set_has_lastrevivetime();
  inline void clear_has_lastrevivetime();
  inline void set_has_curstate();
  inline void clear_has_curstate();
  inline void set_has_lastsceneid();
  inline void clear_has_lastsceneid();
  inline void set_has_lastmapid();
  inline void clear_has_lastmapid();
  inline void set_has_lastposx();
  inline void clear_has_lastposx();
  inline void set_has_lastposy();
  inline void clear_has_lastposy();
  inline void set_has_lastposz();
  inline void clear_has_lastposz();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_bindgold();
  inline void clear_has_bindgold();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_binddiamond();
  inline void clear_has_binddiamond();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_physique();
  inline void clear_has_physique();
  inline void set_has_endurance();
  inline void clear_has_endurance();
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_camplev();
  inline void clear_has_camplev();
  inline void set_has_married();
  inline void clear_has_married();
  inline void set_has_campkilling();
  inline void clear_has_campkilling();
  inline void set_has_hostilekilling();
  inline void clear_has_hostilekilling();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_attr_point();
  inline void clear_has_attr_point();
  inline void set_has_pointpower();
  inline void clear_has_pointpower();
  inline void set_has_pointintelligence();
  inline void clear_has_pointintelligence();
  inline void set_has_pointagility();
  inline void clear_has_pointagility();
  inline void set_has_pointphysique();
  inline void clear_has_pointphysique();
  inline void set_has_pointendurance();
  inline void clear_has_pointendurance();
  inline void set_has_pointprecision();
  inline void clear_has_pointprecision();
  inline void set_has_autopower();
  inline void clear_has_autopower();
  inline void set_has_autointelligence();
  inline void clear_has_autointelligence();
  inline void set_has_autoagility();
  inline void clear_has_autoagility();
  inline void set_has_autophysique();
  inline void clear_has_autophysique();
  inline void set_has_autoendurance();
  inline void clear_has_autoendurance();
  inline void set_has_autoprecision();
  inline void clear_has_autoprecision();
  inline void set_has_autopoint();
  inline void clear_has_autopoint();
  inline void set_has_duplicate_id();
  inline void clear_has_duplicate_id();
  inline void set_has_official();
  inline void clear_has_official();
  inline void set_has_knight();
  inline void clear_has_knight();
  inline void set_has_pvpdata();
  inline void clear_has_pvpdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channelid_;
  ::std::string* userid_;
  ::std::string* username_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint64 lastsavetime_;
  ::google::protobuf::uint64 onlinetime_;
  ::google::protobuf::uint64 logintime_;
  ::google::protobuf::uint64 logouttime_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ValueCurrency > currency_;
  ::std::string* name_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 prof_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 fightpower_;
  ::google::protobuf::uint32 enter_scene_id_;
  float enterposx_;
  float enterposy_;
  float enterposz_;
  ::google::protobuf::uint32 race_;
  ::google::protobuf::uint64 lastrevivetime_;
  ::google::protobuf::uint32 enter_map_id_;
  ::google::protobuf::uint32 curstate_;
  ::google::protobuf::uint32 lastsceneid_;
  ::google::protobuf::uint32 lastmapid_;
  float lastposx_;
  float lastposy_;
  float lastposz_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 bindgold_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 binddiamond_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 intelligence_;
  ::google::protobuf::uint32 agility_;
  ::google::protobuf::uint32 physique_;
  ::google::protobuf::uint32 endurance_;
  ::google::protobuf::uint32 precision_;
  ::google::protobuf::uint32 mp_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint32 camp_;
  ::google::protobuf::uint32 camplev_;
  ::google::protobuf::uint32 married_;
  ::google::protobuf::uint32 campkilling_;
  ::google::protobuf::uint32 hostilekilling_;
  ::google::protobuf::uint32 stamina_;
  ::google::protobuf::uint32 attr_point_;
  ::google::protobuf::uint32 pointpower_;
  ::google::protobuf::uint32 pointintelligence_;
  ::google::protobuf::uint32 pointagility_;
  ::google::protobuf::uint32 pointphysique_;
  ::google::protobuf::uint32 pointendurance_;
  ::google::protobuf::uint32 pointprecision_;
  ::google::protobuf::uint32 autopower_;
  ::google::protobuf::uint32 autointelligence_;
  ::google::protobuf::uint32 autoagility_;
  ::google::protobuf::uint32 autophysique_;
  ::google::protobuf::uint32 autoendurance_;
  ::google::protobuf::uint32 autoprecision_;
  ::google::protobuf::uint32 autopoint_;
  ::google::protobuf::uint32 duplicate_id_;
  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 knight_;
  ::ProtoBuf::CharacterDBPvpData* pvpdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(65 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBTaskData : public ::google::protobuf::Message {
 public:
  CharacterDBTaskData();
  virtual ~CharacterDBTaskData();

  CharacterDBTaskData(const CharacterDBTaskData& from);

  inline CharacterDBTaskData& operator=(const CharacterDBTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBTaskData& default_instance();

  void Swap(CharacterDBTaskData* other);

  // implements Message ----------------------------------------------

  CharacterDBTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBTaskData& from);
  void MergeFrom(const CharacterDBTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.CharacterDBEffPreCondition effPreCondition = 1;
  inline int effprecondition_size() const;
  inline void clear_effprecondition();
  static const int kEffPreConditionFieldNumber = 1;
  inline const ::ProtoBuf::CharacterDBEffPreCondition& effprecondition(int index) const;
  inline ::ProtoBuf::CharacterDBEffPreCondition* mutable_effprecondition(int index);
  inline ::ProtoBuf::CharacterDBEffPreCondition* add_effprecondition();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBEffPreCondition >&
      effprecondition() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBEffPreCondition >*
      mutable_effprecondition();

  // repeated .ProtoBuf.CharacterDBSubmittedMission submitMission = 2;
  inline int submitmission_size() const;
  inline void clear_submitmission();
  static const int kSubmitMissionFieldNumber = 2;
  inline const ::ProtoBuf::CharacterDBSubmittedMission& submitmission(int index) const;
  inline ::ProtoBuf::CharacterDBSubmittedMission* mutable_submitmission(int index);
  inline ::ProtoBuf::CharacterDBSubmittedMission* add_submitmission();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSubmittedMission >&
      submitmission() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSubmittedMission >*
      mutable_submitmission();

  // repeated .ProtoBuf.CharacterDBWithoutPreComplete withoutPreComplete = 3;
  inline int withoutprecomplete_size() const;
  inline void clear_withoutprecomplete();
  static const int kWithoutPreCompleteFieldNumber = 3;
  inline const ::ProtoBuf::CharacterDBWithoutPreComplete& withoutprecomplete(int index) const;
  inline ::ProtoBuf::CharacterDBWithoutPreComplete* mutable_withoutprecomplete(int index);
  inline ::ProtoBuf::CharacterDBWithoutPreComplete* add_withoutprecomplete();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBWithoutPreComplete >&
      withoutprecomplete() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBWithoutPreComplete >*
      mutable_withoutprecomplete();

  // repeated .ProtoBuf.CharacterDBMissionTrack missionTrack = 4;
  inline int missiontrack_size() const;
  inline void clear_missiontrack();
  static const int kMissionTrackFieldNumber = 4;
  inline const ::ProtoBuf::CharacterDBMissionTrack& missiontrack(int index) const;
  inline ::ProtoBuf::CharacterDBMissionTrack* mutable_missiontrack(int index);
  inline ::ProtoBuf::CharacterDBMissionTrack* add_missiontrack();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBMissionTrack >&
      missiontrack() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBMissionTrack >*
      mutable_missiontrack();

  // repeated uint32 assignList = 5;
  inline int assignlist_size() const;
  inline void clear_assignlist();
  static const int kAssignListFieldNumber = 5;
  inline ::google::protobuf::uint32 assignlist(int index) const;
  inline void set_assignlist(int index, ::google::protobuf::uint32 value);
  inline void add_assignlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      assignlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_assignlist();

  // optional .ProtoBuf.CharacterDBCampMissionInfo campMissionInfo = 6;
  inline bool has_campmissioninfo() const;
  inline void clear_campmissioninfo();
  static const int kCampMissionInfoFieldNumber = 6;
  inline const ::ProtoBuf::CharacterDBCampMissionInfo& campmissioninfo() const;
  inline ::ProtoBuf::CharacterDBCampMissionInfo* mutable_campmissioninfo();
  inline ::ProtoBuf::CharacterDBCampMissionInfo* release_campmissioninfo();
  inline void set_allocated_campmissioninfo(::ProtoBuf::CharacterDBCampMissionInfo* campmissioninfo);

  // optional .ProtoBuf.CharacterDBLoopMissionInfo loopMissionInfo = 7;
  inline bool has_loopmissioninfo() const;
  inline void clear_loopmissioninfo();
  static const int kLoopMissionInfoFieldNumber = 7;
  inline const ::ProtoBuf::CharacterDBLoopMissionInfo& loopmissioninfo() const;
  inline ::ProtoBuf::CharacterDBLoopMissionInfo* mutable_loopmissioninfo();
  inline ::ProtoBuf::CharacterDBLoopMissionInfo* release_loopmissioninfo();
  inline void set_allocated_loopmissioninfo(::ProtoBuf::CharacterDBLoopMissionInfo* loopmissioninfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBTaskData)
 private:
  inline void set_has_campmissioninfo();
  inline void clear_has_campmissioninfo();
  inline void set_has_loopmissioninfo();
  inline void clear_has_loopmissioninfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBEffPreCondition > effprecondition_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSubmittedMission > submitmission_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBWithoutPreComplete > withoutprecomplete_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBMissionTrack > missiontrack_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > assignlist_;
  ::ProtoBuf::CharacterDBCampMissionInfo* campmissioninfo_;
  ::ProtoBuf::CharacterDBLoopMissionInfo* loopmissioninfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBTaskData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBEffPreCondition : public ::google::protobuf::Message {
 public:
  CharacterDBEffPreCondition();
  virtual ~CharacterDBEffPreCondition();

  CharacterDBEffPreCondition(const CharacterDBEffPreCondition& from);

  inline CharacterDBEffPreCondition& operator=(const CharacterDBEffPreCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBEffPreCondition& default_instance();

  void Swap(CharacterDBEffPreCondition* other);

  // implements Message ----------------------------------------------

  CharacterDBEffPreCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBEffPreCondition& from);
  void MergeFrom(const CharacterDBEffPreCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 missionId = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 missionid() const;
  inline void set_missionid(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBEffPreCondition)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 missionid_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBEffPreCondition* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBSubmittedMission : public ::google::protobuf::Message {
 public:
  CharacterDBSubmittedMission();
  virtual ~CharacterDBSubmittedMission();

  CharacterDBSubmittedMission(const CharacterDBSubmittedMission& from);

  inline CharacterDBSubmittedMission& operator=(const CharacterDBSubmittedMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBSubmittedMission& default_instance();

  void Swap(CharacterDBSubmittedMission* other);

  // implements Message ----------------------------------------------

  CharacterDBSubmittedMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBSubmittedMission& from);
  void MergeFrom(const CharacterDBSubmittedMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 missionId = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 missionid() const;
  inline void set_missionid(::google::protobuf::uint32 value);

  // optional uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBSubmittedMission)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 missionid_;
  ::google::protobuf::uint32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBSubmittedMission* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBWithoutPreComplete : public ::google::protobuf::Message {
 public:
  CharacterDBWithoutPreComplete();
  virtual ~CharacterDBWithoutPreComplete();

  CharacterDBWithoutPreComplete(const CharacterDBWithoutPreComplete& from);

  inline CharacterDBWithoutPreComplete& operator=(const CharacterDBWithoutPreComplete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBWithoutPreComplete& default_instance();

  void Swap(CharacterDBWithoutPreComplete* other);

  // implements Message ----------------------------------------------

  CharacterDBWithoutPreComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBWithoutPreComplete& from);
  void MergeFrom(const CharacterDBWithoutPreComplete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 missionId = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 missionid() const;
  inline void set_missionid(::google::protobuf::uint32 value);

  // optional uint32 finishYearDay = 2;
  inline bool has_finishyearday() const;
  inline void clear_finishyearday();
  static const int kFinishYearDayFieldNumber = 2;
  inline ::google::protobuf::uint32 finishyearday() const;
  inline void set_finishyearday(::google::protobuf::uint32 value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional bool acceptable = 4;
  inline bool has_acceptable() const;
  inline void clear_acceptable();
  static const int kAcceptableFieldNumber = 4;
  inline bool acceptable() const;
  inline void set_acceptable(bool value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBWithoutPreComplete)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_finishyearday();
  inline void clear_has_finishyearday();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_acceptable();
  inline void clear_has_acceptable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 missionid_;
  ::google::protobuf::uint32 finishyearday_;
  ::google::protobuf::uint32 count_;
  bool acceptable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBWithoutPreComplete* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBMissionItemInfo : public ::google::protobuf::Message {
 public:
  CharacterDBMissionItemInfo();
  virtual ~CharacterDBMissionItemInfo();

  CharacterDBMissionItemInfo(const CharacterDBMissionItemInfo& from);

  inline CharacterDBMissionItemInfo& operator=(const CharacterDBMissionItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBMissionItemInfo& default_instance();

  void Swap(CharacterDBMissionItemInfo* other);

  // implements Message ----------------------------------------------

  CharacterDBMissionItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBMissionItemInfo& from);
  void MergeFrom(const CharacterDBMissionItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 currentValue = 3;
  inline bool has_currentvalue() const;
  inline void clear_currentvalue();
  static const int kCurrentValueFieldNumber = 3;
  inline ::google::protobuf::uint32 currentvalue() const;
  inline void set_currentvalue(::google::protobuf::uint32 value);

  // optional uint32 finalValue = 4;
  inline bool has_finalvalue() const;
  inline void clear_finalvalue();
  static const int kFinalValueFieldNumber = 4;
  inline ::google::protobuf::uint32 finalvalue() const;
  inline void set_finalvalue(::google::protobuf::uint32 value);

  // optional bool completedFlag = 5;
  inline bool has_completedflag() const;
  inline void clear_completedflag();
  static const int kCompletedFlagFieldNumber = 5;
  inline bool completedflag() const;
  inline void set_completedflag(bool value);

  // optional uint32 parma1 = 6;
  inline bool has_parma1() const;
  inline void clear_parma1();
  static const int kParma1FieldNumber = 6;
  inline ::google::protobuf::uint32 parma1() const;
  inline void set_parma1(::google::protobuf::uint32 value);

  // optional uint32 parma2 = 7;
  inline bool has_parma2() const;
  inline void clear_parma2();
  static const int kParma2FieldNumber = 7;
  inline ::google::protobuf::uint32 parma2() const;
  inline void set_parma2(::google::protobuf::uint32 value);

  // optional uint32 parma3 = 8;
  inline bool has_parma3() const;
  inline void clear_parma3();
  static const int kParma3FieldNumber = 8;
  inline ::google::protobuf::uint32 parma3() const;
  inline void set_parma3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBMissionItemInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_currentvalue();
  inline void clear_has_currentvalue();
  inline void set_has_finalvalue();
  inline void clear_has_finalvalue();
  inline void set_has_completedflag();
  inline void clear_has_completedflag();
  inline void set_has_parma1();
  inline void clear_has_parma1();
  inline void set_has_parma2();
  inline void clear_has_parma2();
  inline void set_has_parma3();
  inline void clear_has_parma3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 currentvalue_;
  ::google::protobuf::uint32 finalvalue_;
  bool completedflag_;
  ::google::protobuf::uint32 parma1_;
  ::google::protobuf::uint32 parma2_;
  ::google::protobuf::uint32 parma3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBMissionItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBMissionTrack : public ::google::protobuf::Message {
 public:
  CharacterDBMissionTrack();
  virtual ~CharacterDBMissionTrack();

  CharacterDBMissionTrack(const CharacterDBMissionTrack& from);

  inline CharacterDBMissionTrack& operator=(const CharacterDBMissionTrack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBMissionTrack& default_instance();

  void Swap(CharacterDBMissionTrack* other);

  // implements Message ----------------------------------------------

  CharacterDBMissionTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBMissionTrack& from);
  void MergeFrom(const CharacterDBMissionTrack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 missionId = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 missionid() const;
  inline void set_missionid(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 acceptMissionTime = 4;
  inline bool has_acceptmissiontime() const;
  inline void clear_acceptmissiontime();
  static const int kAcceptMissionTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 acceptmissiontime() const;
  inline void set_acceptmissiontime(::google::protobuf::uint32 value);

  // optional uint32 submittedMissionTime = 5;
  inline bool has_submittedmissiontime() const;
  inline void clear_submittedmissiontime();
  static const int kSubmittedMissionTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 submittedmissiontime() const;
  inline void set_submittedmissiontime(::google::protobuf::uint32 value);

  // optional .ProtoBuf.CharacterDBMissionItemInfo itemInfo = 6;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 6;
  inline const ::ProtoBuf::CharacterDBMissionItemInfo& iteminfo() const;
  inline ::ProtoBuf::CharacterDBMissionItemInfo* mutable_iteminfo();
  inline ::ProtoBuf::CharacterDBMissionItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::ProtoBuf::CharacterDBMissionItemInfo* iteminfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBMissionTrack)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_acceptmissiontime();
  inline void clear_has_acceptmissiontime();
  inline void set_has_submittedmissiontime();
  inline void clear_has_submittedmissiontime();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 missionid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 acceptmissiontime_;
  ::ProtoBuf::CharacterDBMissionItemInfo* iteminfo_;
  ::google::protobuf::uint32 submittedmissiontime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBMissionTrack* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBSignleCampMission : public ::google::protobuf::Message {
 public:
  CharacterDBSignleCampMission();
  virtual ~CharacterDBSignleCampMission();

  CharacterDBSignleCampMission(const CharacterDBSignleCampMission& from);

  inline CharacterDBSignleCampMission& operator=(const CharacterDBSignleCampMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBSignleCampMission& default_instance();

  void Swap(CharacterDBSignleCampMission* other);

  // implements Message ----------------------------------------------

  CharacterDBSignleCampMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBSignleCampMission& from);
  void MergeFrom(const CharacterDBSignleCampMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 missionId = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 missionid() const;
  inline void set_missionid(::google::protobuf::uint32 value);

  // optional uint32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional bool isAccept = 3;
  inline bool has_isaccept() const;
  inline void clear_isaccept();
  static const int kIsAcceptFieldNumber = 3;
  inline bool isaccept() const;
  inline void set_isaccept(bool value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBSignleCampMission)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_isaccept();
  inline void clear_has_isaccept();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 missionid_;
  ::google::protobuf::uint32 quality_;
  bool isaccept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBSignleCampMission* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBCampMissionInfo : public ::google::protobuf::Message {
 public:
  CharacterDBCampMissionInfo();
  virtual ~CharacterDBCampMissionInfo();

  CharacterDBCampMissionInfo(const CharacterDBCampMissionInfo& from);

  inline CharacterDBCampMissionInfo& operator=(const CharacterDBCampMissionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBCampMissionInfo& default_instance();

  void Swap(CharacterDBCampMissionInfo* other);

  // implements Message ----------------------------------------------

  CharacterDBCampMissionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBCampMissionInfo& from);
  void MergeFrom(const CharacterDBCampMissionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.CharacterDBSignleCampMission campSingleMission = 1;
  inline int campsinglemission_size() const;
  inline void clear_campsinglemission();
  static const int kCampSingleMissionFieldNumber = 1;
  inline const ::ProtoBuf::CharacterDBSignleCampMission& campsinglemission(int index) const;
  inline ::ProtoBuf::CharacterDBSignleCampMission* mutable_campsinglemission(int index);
  inline ::ProtoBuf::CharacterDBSignleCampMission* add_campsinglemission();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSignleCampMission >&
      campsinglemission() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSignleCampMission >*
      mutable_campsinglemission();

  // optional uint32 campRefreshTime = 2;
  inline bool has_camprefreshtime() const;
  inline void clear_camprefreshtime();
  static const int kCampRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 camprefreshtime() const;
  inline void set_camprefreshtime(::google::protobuf::uint32 value);

  // optional uint32 campTimes = 3;
  inline bool has_camptimes() const;
  inline void clear_camptimes();
  static const int kCampTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 camptimes() const;
  inline void set_camptimes(::google::protobuf::uint32 value);

  // optional uint32 boxProgress = 4;
  inline bool has_boxprogress() const;
  inline void clear_boxprogress();
  static const int kBoxProgressFieldNumber = 4;
  inline ::google::protobuf::uint32 boxprogress() const;
  inline void set_boxprogress(::google::protobuf::uint32 value);

  // optional bool campOpen = 5;
  inline bool has_campopen() const;
  inline void clear_campopen();
  static const int kCampOpenFieldNumber = 5;
  inline bool campopen() const;
  inline void set_campopen(bool value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBCampMissionInfo)
 private:
  inline void set_has_camprefreshtime();
  inline void clear_has_camprefreshtime();
  inline void set_has_camptimes();
  inline void clear_has_camptimes();
  inline void set_has_boxprogress();
  inline void clear_has_boxprogress();
  inline void set_has_campopen();
  inline void clear_has_campopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSignleCampMission > campsinglemission_;
  ::google::protobuf::uint32 camprefreshtime_;
  ::google::protobuf::uint32 camptimes_;
  ::google::protobuf::uint32 boxprogress_;
  bool campopen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBCampMissionInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBLoopMissionInfo : public ::google::protobuf::Message {
 public:
  CharacterDBLoopMissionInfo();
  virtual ~CharacterDBLoopMissionInfo();

  CharacterDBLoopMissionInfo(const CharacterDBLoopMissionInfo& from);

  inline CharacterDBLoopMissionInfo& operator=(const CharacterDBLoopMissionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBLoopMissionInfo& default_instance();

  void Swap(CharacterDBLoopMissionInfo* other);

  // implements Message ----------------------------------------------

  CharacterDBLoopMissionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBLoopMissionInfo& from);
  void MergeFrom(const CharacterDBLoopMissionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 loopCount = 1;
  inline bool has_loopcount() const;
  inline void clear_loopcount();
  static const int kLoopCountFieldNumber = 1;
  inline ::google::protobuf::uint32 loopcount() const;
  inline void set_loopcount(::google::protobuf::uint32 value);

  // optional uint32 loopFinishCount = 2;
  inline bool has_loopfinishcount() const;
  inline void clear_loopfinishcount();
  static const int kLoopFinishCountFieldNumber = 2;
  inline ::google::protobuf::uint32 loopfinishcount() const;
  inline void set_loopfinishcount(::google::protobuf::uint32 value);

  // optional bool loopOpen = 3;
  inline bool has_loopopen() const;
  inline void clear_loopopen();
  static const int kLoopOpenFieldNumber = 3;
  inline bool loopopen() const;
  inline void set_loopopen(bool value);

  // optional uint32 loopMissionId = 4;
  inline bool has_loopmissionid() const;
  inline void clear_loopmissionid();
  static const int kLoopMissionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 loopmissionid() const;
  inline void set_loopmissionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBLoopMissionInfo)
 private:
  inline void set_has_loopcount();
  inline void clear_has_loopcount();
  inline void set_has_loopfinishcount();
  inline void clear_has_loopfinishcount();
  inline void set_has_loopopen();
  inline void clear_has_loopopen();
  inline void set_has_loopmissionid();
  inline void clear_has_loopmissionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 loopcount_;
  ::google::protobuf::uint32 loopfinishcount_;
  bool loopopen_;
  ::google::protobuf::uint32 loopmissionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBLoopMissionInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBSkillItem : public ::google::protobuf::Message {
 public:
  CharacterDBSkillItem();
  virtual ~CharacterDBSkillItem();

  CharacterDBSkillItem(const CharacterDBSkillItem& from);

  inline CharacterDBSkillItem& operator=(const CharacterDBSkillItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBSkillItem& default_instance();

  void Swap(CharacterDBSkillItem* other);

  // implements Message ----------------------------------------------

  CharacterDBSkillItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBSkillItem& from);
  void MergeFrom(const CharacterDBSkillItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // required int32 skillLevel = 2;
  inline bool has_skilllevel() const;
  inline void clear_skilllevel();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::int32 skilllevel() const;
  inline void set_skilllevel(::google::protobuf::int32 value);

  // optional uint64 cd = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline ::google::protobuf::uint64 cd() const;
  inline void set_cd(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBSkillItem)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllevel();
  inline void clear_has_skilllevel();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 skilllevel_;
  ::google::protobuf::uint64 cd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBSkillItem* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBSkillData : public ::google::protobuf::Message {
 public:
  CharacterDBSkillData();
  virtual ~CharacterDBSkillData();

  CharacterDBSkillData(const CharacterDBSkillData& from);

  inline CharacterDBSkillData& operator=(const CharacterDBSkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBSkillData& default_instance();

  void Swap(CharacterDBSkillData* other);

  // implements Message ----------------------------------------------

  CharacterDBSkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBSkillData& from);
  void MergeFrom(const CharacterDBSkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.CharacterDBSkillItem skillList = 1;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkillListFieldNumber = 1;
  inline const ::ProtoBuf::CharacterDBSkillItem& skilllist(int index) const;
  inline ::ProtoBuf::CharacterDBSkillItem* mutable_skilllist(int index);
  inline ::ProtoBuf::CharacterDBSkillItem* add_skilllist();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSkillItem >&
      skilllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSkillItem >*
      mutable_skilllist();

  // repeated uint32 skillAttrs = 2;
  inline int skillattrs_size() const;
  inline void clear_skillattrs();
  static const int kSkillAttrsFieldNumber = 2;
  inline ::google::protobuf::uint32 skillattrs(int index) const;
  inline void set_skillattrs(int index, ::google::protobuf::uint32 value);
  inline void add_skillattrs(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skillattrs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skillattrs();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBSkillData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSkillItem > skilllist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skillattrs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBSkillData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBAttrDetailInfo : public ::google::protobuf::Message {
 public:
  CharacterDBAttrDetailInfo();
  virtual ~CharacterDBAttrDetailInfo();

  CharacterDBAttrDetailInfo(const CharacterDBAttrDetailInfo& from);

  inline CharacterDBAttrDetailInfo& operator=(const CharacterDBAttrDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBAttrDetailInfo& default_instance();

  void Swap(CharacterDBAttrDetailInfo* other);

  // implements Message ----------------------------------------------

  CharacterDBAttrDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBAttrDetailInfo& from);
  void MergeFrom(const CharacterDBAttrDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_hp = 1;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 1;
  inline ::google::protobuf::uint32 max_hp() const;
  inline void set_max_hp(::google::protobuf::uint32 value);

  // optional uint32 intelligence = 2;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 2;
  inline ::google::protobuf::uint32 intelligence() const;
  inline void set_intelligence(::google::protobuf::uint32 value);

  // optional uint32 agility = 3;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 3;
  inline ::google::protobuf::uint32 agility() const;
  inline void set_agility(::google::protobuf::uint32 value);

  // optional uint32 physique = 4;
  inline bool has_physique() const;
  inline void clear_physique();
  static const int kPhysiqueFieldNumber = 4;
  inline ::google::protobuf::uint32 physique() const;
  inline void set_physique(::google::protobuf::uint32 value);

  // optional uint32 endurance = 5;
  inline bool has_endurance() const;
  inline void clear_endurance();
  static const int kEnduranceFieldNumber = 5;
  inline ::google::protobuf::uint32 endurance() const;
  inline void set_endurance(::google::protobuf::uint32 value);

  // optional uint32 precision = 6;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 6;
  inline ::google::protobuf::uint32 precision() const;
  inline void set_precision(::google::protobuf::uint32 value);

  // optional uint32 max_mp = 7;
  inline bool has_max_mp() const;
  inline void clear_max_mp();
  static const int kMaxMpFieldNumber = 7;
  inline ::google::protobuf::uint32 max_mp() const;
  inline void set_max_mp(::google::protobuf::uint32 value);

  // optional uint32 ap = 8;
  inline bool has_ap() const;
  inline void clear_ap();
  static const int kApFieldNumber = 8;
  inline ::google::protobuf::uint32 ap() const;
  inline void set_ap(::google::protobuf::uint32 value);

  // optional uint32 mat = 9;
  inline bool has_mat() const;
  inline void clear_mat();
  static const int kMatFieldNumber = 9;
  inline ::google::protobuf::uint32 mat() const;
  inline void set_mat(::google::protobuf::uint32 value);

  // optional uint32 dp = 10;
  inline bool has_dp() const;
  inline void clear_dp();
  static const int kDpFieldNumber = 10;
  inline ::google::protobuf::uint32 dp() const;
  inline void set_dp(::google::protobuf::uint32 value);

  // optional uint32 mdp = 11;
  inline bool has_mdp() const;
  inline void clear_mdp();
  static const int kMdpFieldNumber = 11;
  inline ::google::protobuf::uint32 mdp() const;
  inline void set_mdp(::google::protobuf::uint32 value);

  // optional uint32 hit = 12;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 12;
  inline ::google::protobuf::uint32 hit() const;
  inline void set_hit(::google::protobuf::uint32 value);

  // optional uint32 dodge = 13;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 13;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);

  // optional uint32 crit = 14;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 14;
  inline ::google::protobuf::uint32 crit() const;
  inline void set_crit(::google::protobuf::uint32 value);

  // optional uint32 toughness = 15;
  inline bool has_toughness() const;
  inline void clear_toughness();
  static const int kToughnessFieldNumber = 15;
  inline ::google::protobuf::uint32 toughness() const;
  inline void set_toughness(::google::protobuf::uint32 value);

  // optional uint32 crit_rate = 16;
  inline bool has_crit_rate() const;
  inline void clear_crit_rate();
  static const int kCritRateFieldNumber = 16;
  inline ::google::protobuf::uint32 crit_rate() const;
  inline void set_crit_rate(::google::protobuf::uint32 value);

  // optional uint32 crit_extradamage = 17;
  inline bool has_crit_extradamage() const;
  inline void clear_crit_extradamage();
  static const int kCritExtradamageFieldNumber = 17;
  inline ::google::protobuf::uint32 crit_extradamage() const;
  inline void set_crit_extradamage(::google::protobuf::uint32 value);

  // optional uint32 crit_reducedamage = 18;
  inline bool has_crit_reducedamage() const;
  inline void clear_crit_reducedamage();
  static const int kCritReducedamageFieldNumber = 18;
  inline ::google::protobuf::uint32 crit_reducedamage() const;
  inline void set_crit_reducedamage(::google::protobuf::uint32 value);

  // optional uint32 extra_damage = 19;
  inline bool has_extra_damage() const;
  inline void clear_extra_damage();
  static const int kExtraDamageFieldNumber = 19;
  inline ::google::protobuf::uint32 extra_damage() const;
  inline void set_extra_damage(::google::protobuf::uint32 value);

  // optional uint32 reduce_damage = 20;
  inline bool has_reduce_damage() const;
  inline void clear_reduce_damage();
  static const int kReduceDamageFieldNumber = 20;
  inline ::google::protobuf::uint32 reduce_damage() const;
  inline void set_reduce_damage(::google::protobuf::uint32 value);

  // optional uint32 apdamagerate = 21;
  inline bool has_apdamagerate() const;
  inline void clear_apdamagerate();
  static const int kApdamagerateFieldNumber = 21;
  inline ::google::protobuf::uint32 apdamagerate() const;
  inline void set_apdamagerate(::google::protobuf::uint32 value);

  // optional uint32 apreducedamage = 22;
  inline bool has_apreducedamage() const;
  inline void clear_apreducedamage();
  static const int kApreducedamageFieldNumber = 22;
  inline ::google::protobuf::uint32 apreducedamage() const;
  inline void set_apreducedamage(::google::protobuf::uint32 value);

  // optional uint32 freezeres = 23;
  inline bool has_freezeres() const;
  inline void clear_freezeres();
  static const int kFreezeresFieldNumber = 23;
  inline ::google::protobuf::uint32 freezeres() const;
  inline void set_freezeres(::google::protobuf::uint32 value);

  // optional uint32 burners = 24;
  inline bool has_burners() const;
  inline void clear_burners();
  static const int kBurnersFieldNumber = 24;
  inline ::google::protobuf::uint32 burners() const;
  inline void set_burners(::google::protobuf::uint32 value);

  // optional uint32 weakres = 25;
  inline bool has_weakres() const;
  inline void clear_weakres();
  static const int kWeakresFieldNumber = 25;
  inline ::google::protobuf::uint32 weakres() const;
  inline void set_weakres(::google::protobuf::uint32 value);

  // optional uint32 fastingres = 26;
  inline bool has_fastingres() const;
  inline void clear_fastingres();
  static const int kFastingresFieldNumber = 26;
  inline ::google::protobuf::uint32 fastingres() const;
  inline void set_fastingres(::google::protobuf::uint32 value);

  // optional uint32 funkres = 27;
  inline bool has_funkres() const;
  inline void clear_funkres();
  static const int kFunkresFieldNumber = 27;
  inline ::google::protobuf::uint32 funkres() const;
  inline void set_funkres(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBAttrDetailInfo)
 private:
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_physique();
  inline void clear_has_physique();
  inline void set_has_endurance();
  inline void clear_has_endurance();
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_max_mp();
  inline void clear_has_max_mp();
  inline void set_has_ap();
  inline void clear_has_ap();
  inline void set_has_mat();
  inline void clear_has_mat();
  inline void set_has_dp();
  inline void clear_has_dp();
  inline void set_has_mdp();
  inline void clear_has_mdp();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_toughness();
  inline void clear_has_toughness();
  inline void set_has_crit_rate();
  inline void clear_has_crit_rate();
  inline void set_has_crit_extradamage();
  inline void clear_has_crit_extradamage();
  inline void set_has_crit_reducedamage();
  inline void clear_has_crit_reducedamage();
  inline void set_has_extra_damage();
  inline void clear_has_extra_damage();
  inline void set_has_reduce_damage();
  inline void clear_has_reduce_damage();
  inline void set_has_apdamagerate();
  inline void clear_has_apdamagerate();
  inline void set_has_apreducedamage();
  inline void clear_has_apreducedamage();
  inline void set_has_freezeres();
  inline void clear_has_freezeres();
  inline void set_has_burners();
  inline void clear_has_burners();
  inline void set_has_weakres();
  inline void clear_has_weakres();
  inline void set_has_fastingres();
  inline void clear_has_fastingres();
  inline void set_has_funkres();
  inline void clear_has_funkres();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 max_hp_;
  ::google::protobuf::uint32 intelligence_;
  ::google::protobuf::uint32 agility_;
  ::google::protobuf::uint32 physique_;
  ::google::protobuf::uint32 endurance_;
  ::google::protobuf::uint32 precision_;
  ::google::protobuf::uint32 max_mp_;
  ::google::protobuf::uint32 ap_;
  ::google::protobuf::uint32 mat_;
  ::google::protobuf::uint32 dp_;
  ::google::protobuf::uint32 mdp_;
  ::google::protobuf::uint32 hit_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 crit_;
  ::google::protobuf::uint32 toughness_;
  ::google::protobuf::uint32 crit_rate_;
  ::google::protobuf::uint32 crit_extradamage_;
  ::google::protobuf::uint32 crit_reducedamage_;
  ::google::protobuf::uint32 extra_damage_;
  ::google::protobuf::uint32 reduce_damage_;
  ::google::protobuf::uint32 apdamagerate_;
  ::google::protobuf::uint32 apreducedamage_;
  ::google::protobuf::uint32 freezeres_;
  ::google::protobuf::uint32 burners_;
  ::google::protobuf::uint32 weakres_;
  ::google::protobuf::uint32 fastingres_;
  ::google::protobuf::uint32 funkres_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBAttrDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBExtendData : public ::google::protobuf::Message {
 public:
  CharacterDBExtendData();
  virtual ~CharacterDBExtendData();

  CharacterDBExtendData(const CharacterDBExtendData& from);

  inline CharacterDBExtendData& operator=(const CharacterDBExtendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBExtendData& default_instance();

  void Swap(CharacterDBExtendData* other);

  // implements Message ----------------------------------------------

  CharacterDBExtendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBExtendData& from);
  void MergeFrom(const CharacterDBExtendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr_detail = 1;
  inline bool has_attr_detail() const;
  inline void clear_attr_detail();
  static const int kAttrDetailFieldNumber = 1;
  inline const ::ProtoBuf::CharacterDBAttrDetailInfo& attr_detail() const;
  inline ::ProtoBuf::CharacterDBAttrDetailInfo* mutable_attr_detail();
  inline ::ProtoBuf::CharacterDBAttrDetailInfo* release_attr_detail();
  inline void set_allocated_attr_detail(::ProtoBuf::CharacterDBAttrDetailInfo* attr_detail);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBExtendData)
 private:
  inline void set_has_attr_detail();
  inline void clear_has_attr_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CharacterDBAttrDetailInfo* attr_detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBExtendData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBInfo : public ::google::protobuf::Message {
 public:
  CharacterDBInfo();
  virtual ~CharacterDBInfo();

  CharacterDBInfo(const CharacterDBInfo& from);

  inline CharacterDBInfo& operator=(const CharacterDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBInfo& default_instance();

  void Swap(CharacterDBInfo* other);

  // implements Message ----------------------------------------------

  CharacterDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBInfo& from);
  void MergeFrom(const CharacterDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required uint32 groupId = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // required .ProtoBuf.CharacterDBBaseInfo baseData = 3;
  inline bool has_basedata() const;
  inline void clear_basedata();
  static const int kBaseDataFieldNumber = 3;
  inline const ::ProtoBuf::CharacterDBBaseInfo& basedata() const;
  inline ::ProtoBuf::CharacterDBBaseInfo* mutable_basedata();
  inline ::ProtoBuf::CharacterDBBaseInfo* release_basedata();
  inline void set_allocated_basedata(::ProtoBuf::CharacterDBBaseInfo* basedata);

  // optional .ProtoBuf.CharacterDBPackageData itemData = 4;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 4;
  inline const ::ProtoBuf::CharacterDBPackageData& itemdata() const;
  inline ::ProtoBuf::CharacterDBPackageData* mutable_itemdata();
  inline ::ProtoBuf::CharacterDBPackageData* release_itemdata();
  inline void set_allocated_itemdata(::ProtoBuf::CharacterDBPackageData* itemdata);

  // optional .ProtoBuf.CharacterDBTaskData taskData = 5;
  inline bool has_taskdata() const;
  inline void clear_taskdata();
  static const int kTaskDataFieldNumber = 5;
  inline const ::ProtoBuf::CharacterDBTaskData& taskdata() const;
  inline ::ProtoBuf::CharacterDBTaskData* mutable_taskdata();
  inline ::ProtoBuf::CharacterDBTaskData* release_taskdata();
  inline void set_allocated_taskdata(::ProtoBuf::CharacterDBTaskData* taskdata);

  // optional .ProtoBuf.CharacterDBSkillData skillData = 6;
  inline bool has_skilldata() const;
  inline void clear_skilldata();
  static const int kSkillDataFieldNumber = 6;
  inline const ::ProtoBuf::CharacterDBSkillData& skilldata() const;
  inline ::ProtoBuf::CharacterDBSkillData* mutable_skilldata();
  inline ::ProtoBuf::CharacterDBSkillData* release_skilldata();
  inline void set_allocated_skilldata(::ProtoBuf::CharacterDBSkillData* skilldata);

  // optional .ProtoBuf.CharacterDBExtendData extendData = 7;
  inline bool has_extenddata() const;
  inline void clear_extenddata();
  static const int kExtendDataFieldNumber = 7;
  inline const ::ProtoBuf::CharacterDBExtendData& extenddata() const;
  inline ::ProtoBuf::CharacterDBExtendData* mutable_extenddata();
  inline ::ProtoBuf::CharacterDBExtendData* release_extenddata();
  inline void set_allocated_extenddata(::ProtoBuf::CharacterDBExtendData* extenddata);

  // optional .ProtoBuf.CharacterDBEquipData equipData = 8;
  inline bool has_equipdata() const;
  inline void clear_equipdata();
  static const int kEquipDataFieldNumber = 8;
  inline const ::ProtoBuf::CharacterDBEquipData& equipdata() const;
  inline ::ProtoBuf::CharacterDBEquipData* mutable_equipdata();
  inline ::ProtoBuf::CharacterDBEquipData* release_equipdata();
  inline void set_allocated_equipdata(::ProtoBuf::CharacterDBEquipData* equipdata);

  // optional .ProtoBuf.CharacterDBDuplicateData duplicateData = 9;
  inline bool has_duplicatedata() const;
  inline void clear_duplicatedata();
  static const int kDuplicateDataFieldNumber = 9;
  inline const ::ProtoBuf::CharacterDBDuplicateData& duplicatedata() const;
  inline ::ProtoBuf::CharacterDBDuplicateData* mutable_duplicatedata();
  inline ::ProtoBuf::CharacterDBDuplicateData* release_duplicatedata();
  inline void set_allocated_duplicatedata(::ProtoBuf::CharacterDBDuplicateData* duplicatedata);

  // optional .ProtoBuf.CharacterAchievementDBData achievementData = 10;
  inline bool has_achievementdata() const;
  inline void clear_achievementdata();
  static const int kAchievementDataFieldNumber = 10;
  inline const ::ProtoBuf::CharacterAchievementDBData& achievementdata() const;
  inline ::ProtoBuf::CharacterAchievementDBData* mutable_achievementdata();
  inline ::ProtoBuf::CharacterAchievementDBData* release_achievementdata();
  inline void set_allocated_achievementdata(::ProtoBuf::CharacterAchievementDBData* achievementdata);

  // optional .ProtoBuf.CharacterDeputyDBData deputyData = 11;
  inline bool has_deputydata() const;
  inline void clear_deputydata();
  static const int kDeputyDataFieldNumber = 11;
  inline const ::ProtoBuf::CharacterDeputyDBData& deputydata() const;
  inline ::ProtoBuf::CharacterDeputyDBData* mutable_deputydata();
  inline ::ProtoBuf::CharacterDeputyDBData* release_deputydata();
  inline void set_allocated_deputydata(::ProtoBuf::CharacterDeputyDBData* deputydata);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_basedata();
  inline void clear_has_basedata();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_taskdata();
  inline void clear_has_taskdata();
  inline void set_has_skilldata();
  inline void clear_has_skilldata();
  inline void set_has_extenddata();
  inline void clear_has_extenddata();
  inline void set_has_equipdata();
  inline void clear_has_equipdata();
  inline void set_has_duplicatedata();
  inline void clear_has_duplicatedata();
  inline void set_has_achievementdata();
  inline void clear_has_achievementdata();
  inline void set_has_deputydata();
  inline void clear_has_deputydata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 groupid_;
  ::ProtoBuf::CharacterDBBaseInfo* basedata_;
  ::ProtoBuf::CharacterDBPackageData* itemdata_;
  ::ProtoBuf::CharacterDBTaskData* taskdata_;
  ::ProtoBuf::CharacterDBSkillData* skilldata_;
  ::ProtoBuf::CharacterDBExtendData* extenddata_;
  ::ProtoBuf::CharacterDBEquipData* equipdata_;
  ::ProtoBuf::CharacterDBDuplicateData* duplicatedata_;
  ::ProtoBuf::CharacterAchievementDBData* achievementdata_;
  ::ProtoBuf::CharacterDeputyDBData* deputydata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBSimpleInfo : public ::google::protobuf::Message {
 public:
  CharacterDBSimpleInfo();
  virtual ~CharacterDBSimpleInfo();

  CharacterDBSimpleInfo(const CharacterDBSimpleInfo& from);

  inline CharacterDBSimpleInfo& operator=(const CharacterDBSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBSimpleInfo& default_instance();

  void Swap(CharacterDBSimpleInfo* other);

  // implements Message ----------------------------------------------

  CharacterDBSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBSimpleInfo& from);
  void MergeFrom(const CharacterDBSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // required uint32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::uint32 prof() const;
  inline void set_prof(::google::protobuf::uint32 value);

  // required uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 race = 6;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 6;
  inline ::google::protobuf::uint32 race() const;
  inline void set_race(::google::protobuf::uint32 value);

  // optional int64 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional uint32 hp = 8;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 8;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 fightPower = 9;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightPowerFieldNumber = 9;
  inline ::google::protobuf::uint32 fightpower() const;
  inline void set_fightpower(::google::protobuf::uint32 value);

  // optional uint32 weapon_id = 10;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 10;
  inline ::google::protobuf::uint32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::uint32 value);

  // optional uint32 clothes_id = 11;
  inline bool has_clothes_id() const;
  inline void clear_clothes_id();
  static const int kClothesIdFieldNumber = 11;
  inline ::google::protobuf::uint32 clothes_id() const;
  inline void set_clothes_id(::google::protobuf::uint32 value);

  // optional uint32 wing_id = 12;
  inline bool has_wing_id() const;
  inline void clear_wing_id();
  static const int kWingIdFieldNumber = 12;
  inline ::google::protobuf::uint32 wing_id() const;
  inline void set_wing_id(::google::protobuf::uint32 value);

  // repeated uint32 fashion_id = 13;
  inline int fashion_id_size() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 13;
  inline ::google::protobuf::uint32 fashion_id(int index) const;
  inline void set_fashion_id(int index, ::google::protobuf::uint32 value);
  inline void add_fashion_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fashion_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fashion_id();

  // optional int32 camp = 14;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 14;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // optional int32 official = 15;
  inline bool has_official() const;
  inline void clear_official();
  static const int kOfficialFieldNumber = 15;
  inline ::google::protobuf::int32 official() const;
  inline void set_official(::google::protobuf::int32 value);

  // optional int32 knight = 16;
  inline bool has_knight() const;
  inline void clear_knight();
  static const int kKnightFieldNumber = 16;
  inline ::google::protobuf::int32 knight() const;
  inline void set_knight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBSimpleInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  inline void set_has_clothes_id();
  inline void clear_has_clothes_id();
  inline void set_has_wing_id();
  inline void clear_has_wing_id();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_official();
  inline void clear_has_official();
  inline void set_has_knight();
  inline void clear_has_knight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 prof_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::uint32 race_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 fightpower_;
  ::google::protobuf::uint32 weapon_id_;
  ::google::protobuf::uint32 clothes_id_;
  ::google::protobuf::uint32 wing_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fashion_id_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 knight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemProtoInfo : public ::google::protobuf::Message {
 public:
  ItemProtoInfo();
  virtual ~ItemProtoInfo();

  ItemProtoInfo(const ItemProtoInfo& from);

  inline ItemProtoInfo& operator=(const ItemProtoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemProtoInfo& default_instance();

  void Swap(ItemProtoInfo* other);

  // implements Message ----------------------------------------------

  ItemProtoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemProtoInfo& from);
  void MergeFrom(const ItemProtoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // required int32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);

  // optional int32 bind = 3;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 3;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);

  // optional int32 strenlev = 4;
  inline bool has_strenlev() const;
  inline void clear_strenlev();
  static const int kStrenlevFieldNumber = 4;
  inline ::google::protobuf::int32 strenlev() const;
  inline void set_strenlev(::google::protobuf::int32 value);

  // optional int32 refinelev = 5;
  inline bool has_refinelev() const;
  inline void clear_refinelev();
  static const int kRefinelevFieldNumber = 5;
  inline ::google::protobuf::int32 refinelev() const;
  inline void set_refinelev(::google::protobuf::int32 value);

  // optional int32 holy = 6;
  inline bool has_holy() const;
  inline void clear_holy();
  static const int kHolyFieldNumber = 6;
  inline ::google::protobuf::int32 holy() const;
  inline void set_holy(::google::protobuf::int32 value);

  // repeated .ProtoBuf.Attr refineex = 7;
  inline int refineex_size() const;
  inline void clear_refineex();
  static const int kRefineexFieldNumber = 7;
  inline const ::ProtoBuf::Attr& refineex(int index) const;
  inline ::ProtoBuf::Attr* mutable_refineex(int index);
  inline ::ProtoBuf::Attr* add_refineex();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >&
      refineex() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >*
      mutable_refineex();

  // repeated .ProtoBuf.Attr baseattr = 8;
  inline int baseattr_size() const;
  inline void clear_baseattr();
  static const int kBaseattrFieldNumber = 8;
  inline const ::ProtoBuf::Attr& baseattr(int index) const;
  inline ::ProtoBuf::Attr* mutable_baseattr(int index);
  inline ::ProtoBuf::Attr* add_baseattr();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >&
      baseattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >*
      mutable_baseattr();

  // repeated uint32 inlay = 9;
  inline int inlay_size() const;
  inline void clear_inlay();
  static const int kInlayFieldNumber = 9;
  inline ::google::protobuf::uint32 inlay(int index) const;
  inline void set_inlay(int index, ::google::protobuf::uint32 value);
  inline void add_inlay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      inlay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_inlay();

  // optional int32 index = 10;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 10;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 fight = 11;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 11;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // optional string maker = 12;
  inline bool has_maker() const;
  inline void clear_maker();
  static const int kMakerFieldNumber = 12;
  inline const ::std::string& maker() const;
  inline void set_maker(const ::std::string& value);
  inline void set_maker(const char* value);
  inline void set_maker(const char* value, size_t size);
  inline ::std::string* mutable_maker();
  inline ::std::string* release_maker();
  inline void set_allocated_maker(::std::string* maker);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ItemProtoInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_strenlev();
  inline void clear_has_strenlev();
  inline void set_has_refinelev();
  inline void clear_has_refinelev();
  inline void set_has_holy();
  inline void clear_has_holy();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_maker();
  inline void clear_has_maker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::int32 item_num_;
  ::google::protobuf::int32 bind_;
  ::google::protobuf::int32 strenlev_;
  ::google::protobuf::int32 refinelev_;
  ::google::protobuf::int32 holy_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr > refineex_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr > baseattr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > inlay_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 fight_;
  ::std::string* maker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static ItemProtoInfo* default_instance_;
};
// -------------------------------------------------------------------

class FashionProtoInfo : public ::google::protobuf::Message {
 public:
  FashionProtoInfo();
  virtual ~FashionProtoInfo();

  FashionProtoInfo(const FashionProtoInfo& from);

  inline FashionProtoInfo& operator=(const FashionProtoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FashionProtoInfo& default_instance();

  void Swap(FashionProtoInfo* other);

  // implements Message ----------------------------------------------

  FashionProtoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FashionProtoInfo& from);
  void MergeFrom(const FashionProtoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 fashion_id = 1;
  inline bool has_fashion_id() const;
  inline void clear_fashion_id();
  static const int kFashionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 fashion_id() const;
  inline void set_fashion_id(::google::protobuf::uint32 value);

  // optional uint64 left_sec = 2;
  inline bool has_left_sec() const;
  inline void clear_left_sec();
  static const int kLeftSecFieldNumber = 2;
  inline ::google::protobuf::uint64 left_sec() const;
  inline void set_left_sec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.FashionProtoInfo)
 private:
  inline void set_has_fashion_id();
  inline void clear_has_fashion_id();
  inline void set_has_left_sec();
  inline void clear_has_left_sec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 left_sec_;
  ::google::protobuf::uint32 fashion_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static FashionProtoInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBPackageData : public ::google::protobuf::Message {
 public:
  CharacterDBPackageData();
  virtual ~CharacterDBPackageData();

  CharacterDBPackageData(const CharacterDBPackageData& from);

  inline CharacterDBPackageData& operator=(const CharacterDBPackageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBPackageData& default_instance();

  void Swap(CharacterDBPackageData* other);

  // implements Message ----------------------------------------------

  CharacterDBPackageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBPackageData& from);
  void MergeFrom(const CharacterDBPackageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 expand_num = 1;
  inline bool has_expand_num() const;
  inline void clear_expand_num();
  static const int kExpandNumFieldNumber = 1;
  inline ::google::protobuf::int32 expand_num() const;
  inline void set_expand_num(::google::protobuf::int32 value);

  // repeated .ProtoBuf.ItemProtoInfo equip = 2;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 2;
  inline const ::ProtoBuf::ItemProtoInfo& equip(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_equip(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_equip();

  // repeated .ProtoBuf.ItemProtoInfo daily = 3;
  inline int daily_size() const;
  inline void clear_daily();
  static const int kDailyFieldNumber = 3;
  inline const ::ProtoBuf::ItemProtoInfo& daily(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_daily(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_daily();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      daily() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_daily();

  // repeated .ProtoBuf.ItemProtoInfo material = 4;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 4;
  inline const ::ProtoBuf::ItemProtoInfo& material(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_material(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_material();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      material() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_material();

  // repeated .ProtoBuf.ItemProtoInfo task = 5;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 5;
  inline const ::ProtoBuf::ItemProtoInfo& task(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_task(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBPackageData)
 private:
  inline void set_has_expand_num();
  inline void clear_has_expand_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > equip_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > daily_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > material_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > task_;
  ::google::protobuf::int32 expand_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBPackageData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBEquipData : public ::google::protobuf::Message {
 public:
  CharacterDBEquipData();
  virtual ~CharacterDBEquipData();

  CharacterDBEquipData(const CharacterDBEquipData& from);

  inline CharacterDBEquipData& operator=(const CharacterDBEquipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBEquipData& default_instance();

  void Swap(CharacterDBEquipData* other);

  // implements Message ----------------------------------------------

  CharacterDBEquipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBEquipData& from);
  void MergeFrom(const CharacterDBEquipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.ItemProtoInfo equip = 1;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 1;
  inline const ::ProtoBuf::ItemProtoInfo& equip(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_equip(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_equip();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBEquipData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > equip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBEquipData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBFashionData : public ::google::protobuf::Message {
 public:
  CharacterDBFashionData();
  virtual ~CharacterDBFashionData();

  CharacterDBFashionData(const CharacterDBFashionData& from);

  inline CharacterDBFashionData& operator=(const CharacterDBFashionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBFashionData& default_instance();

  void Swap(CharacterDBFashionData* other);

  // implements Message ----------------------------------------------

  CharacterDBFashionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBFashionData& from);
  void MergeFrom(const CharacterDBFashionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.FashionProtoInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::ProtoBuf::FashionProtoInfo& data(int index) const;
  inline ::ProtoBuf::FashionProtoInfo* mutable_data(int index);
  inline ::ProtoBuf::FashionProtoInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >*
      mutable_data();

  // repeated .ProtoBuf.FashionProtoInfo dress = 2;
  inline int dress_size() const;
  inline void clear_dress();
  static const int kDressFieldNumber = 2;
  inline const ::ProtoBuf::FashionProtoInfo& dress(int index) const;
  inline ::ProtoBuf::FashionProtoInfo* mutable_dress(int index);
  inline ::ProtoBuf::FashionProtoInfo* add_dress();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >&
      dress() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >*
      mutable_dress();

  // optional int32 open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBFashionData)
 private:
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo > data_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo > dress_;
  ::google::protobuf::int32 open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBFashionData* default_instance_;
};
// -------------------------------------------------------------------

class DuplicateSingleProto : public ::google::protobuf::Message {
 public:
  DuplicateSingleProto();
  virtual ~DuplicateSingleProto();

  DuplicateSingleProto(const DuplicateSingleProto& from);

  inline DuplicateSingleProto& operator=(const DuplicateSingleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplicateSingleProto& default_instance();

  void Swap(DuplicateSingleProto* other);

  // implements Message ----------------------------------------------

  DuplicateSingleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplicateSingleProto& from);
  void MergeFrom(const DuplicateSingleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dupliate_id = 1;
  inline bool has_dupliate_id() const;
  inline void clear_dupliate_id();
  static const int kDupliateIdFieldNumber = 1;
  inline ::google::protobuf::int32 dupliate_id() const;
  inline void set_dupliate_id(::google::protobuf::int32 value);

  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 reward_count = 3;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 3;
  inline ::google::protobuf::int32 reward_count() const;
  inline void set_reward_count(::google::protobuf::int32 value);

  // optional uint64 last_fresh = 4;
  inline bool has_last_fresh() const;
  inline void clear_last_fresh();
  static const int kLastFreshFieldNumber = 4;
  inline ::google::protobuf::uint64 last_fresh() const;
  inline void set_last_fresh(::google::protobuf::uint64 value);

  // optional int32 buy_count = 5;
  inline bool has_buy_count() const;
  inline void clear_buy_count();
  static const int kBuyCountFieldNumber = 5;
  inline ::google::protobuf::int32 buy_count() const;
  inline void set_buy_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.DuplicateSingleProto)
 private:
  inline void set_has_dupliate_id();
  inline void clear_has_dupliate_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();
  inline void set_has_last_fresh();
  inline void clear_has_last_fresh();
  inline void set_has_buy_count();
  inline void clear_has_buy_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dupliate_id_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::uint64 last_fresh_;
  ::google::protobuf::int32 reward_count_;
  ::google::protobuf::int32 buy_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static DuplicateSingleProto* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBDuplicateData : public ::google::protobuf::Message {
 public:
  CharacterDBDuplicateData();
  virtual ~CharacterDBDuplicateData();

  CharacterDBDuplicateData(const CharacterDBDuplicateData& from);

  inline CharacterDBDuplicateData& operator=(const CharacterDBDuplicateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBDuplicateData& default_instance();

  void Swap(CharacterDBDuplicateData* other);

  // implements Message ----------------------------------------------

  CharacterDBDuplicateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBDuplicateData& from);
  void MergeFrom(const CharacterDBDuplicateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.DuplicateSingleProto duplicate = 1;
  inline int duplicate_size() const;
  inline void clear_duplicate();
  static const int kDuplicateFieldNumber = 1;
  inline const ::ProtoBuf::DuplicateSingleProto& duplicate(int index) const;
  inline ::ProtoBuf::DuplicateSingleProto* mutable_duplicate(int index);
  inline ::ProtoBuf::DuplicateSingleProto* add_duplicate();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::DuplicateSingleProto >&
      duplicate() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::DuplicateSingleProto >*
      mutable_duplicate();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBDuplicateData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::DuplicateSingleProto > duplicate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBDuplicateData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDBMailData : public ::google::protobuf::Message {
 public:
  CharacterDBMailData();
  virtual ~CharacterDBMailData();

  CharacterDBMailData(const CharacterDBMailData& from);

  inline CharacterDBMailData& operator=(const CharacterDBMailData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDBMailData& default_instance();

  void Swap(CharacterDBMailData* other);

  // implements Message ----------------------------------------------

  CharacterDBMailData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDBMailData& from);
  void MergeFrom(const CharacterDBMailData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.MailInfo mailList = 1;
  inline int maillist_size() const;
  inline void clear_maillist();
  static const int kMailListFieldNumber = 1;
  inline const ::ProtoBuf::MailInfo& maillist(int index) const;
  inline ::ProtoBuf::MailInfo* mutable_maillist(int index);
  inline ::ProtoBuf::MailInfo* add_maillist();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
      maillist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
      mutable_maillist();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDBMailData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo > maillist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDBMailData* default_instance_;
};
// -------------------------------------------------------------------

class SingleCampRankDBInfo : public ::google::protobuf::Message {
 public:
  SingleCampRankDBInfo();
  virtual ~SingleCampRankDBInfo();

  SingleCampRankDBInfo(const SingleCampRankDBInfo& from);

  inline SingleCampRankDBInfo& operator=(const SingleCampRankDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleCampRankDBInfo& default_instance();

  void Swap(SingleCampRankDBInfo* other);

  // implements Message ----------------------------------------------

  SingleCampRankDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleCampRankDBInfo& from);
  void MergeFrom(const SingleCampRankDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // optional int32 official = 4;
  inline bool has_official() const;
  inline void clear_official();
  static const int kOfficialFieldNumber = 4;
  inline ::google::protobuf::int32 official() const;
  inline void set_official(::google::protobuf::int32 value);

  // optional int32 knight = 5;
  inline bool has_knight() const;
  inline void clear_knight();
  static const int kKnightFieldNumber = 5;
  inline ::google::protobuf::int32 knight() const;
  inline void set_knight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SingleCampRankDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_official();
  inline void clear_has_official();
  inline void set_has_knight();
  inline void clear_has_knight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 knight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static SingleCampRankDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class CampRankDBData : public ::google::protobuf::Message {
 public:
  CampRankDBData();
  virtual ~CampRankDBData();

  CampRankDBData(const CampRankDBData& from);

  inline CampRankDBData& operator=(const CampRankDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampRankDBData& default_instance();

  void Swap(CampRankDBData* other);

  // implements Message ----------------------------------------------

  CampRankDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampRankDBData& from);
  void MergeFrom(const CampRankDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.SingleCampRankDBInfo rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::ProtoBuf::SingleCampRankDBInfo& rank(int index) const;
  inline ::ProtoBuf::SingleCampRankDBInfo* mutable_rank(int index);
  inline ::ProtoBuf::SingleCampRankDBInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampRankDBInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampRankDBInfo >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CampRankDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampRankDBInfo > rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CampRankDBData* default_instance_;
};
// -------------------------------------------------------------------

class SingleCampDBData : public ::google::protobuf::Message {
 public:
  SingleCampDBData();
  virtual ~SingleCampDBData();

  SingleCampDBData(const SingleCampDBData& from);

  inline SingleCampDBData& operator=(const SingleCampDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleCampDBData& default_instance();

  void Swap(SingleCampDBData* other);

  // implements Message ----------------------------------------------

  SingleCampDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleCampDBData& from);
  void MergeFrom(const SingleCampDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 camp_id = 1;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 1;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // optional uint32 leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 leader_id() const;
  inline void set_leader_id(::google::protobuf::uint32 value);

  // optional string notice = 3;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 3;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint64 last_notice = 4;
  inline bool has_last_notice() const;
  inline void clear_last_notice();
  static const int kLastNoticeFieldNumber = 4;
  inline ::google::protobuf::uint64 last_notice() const;
  inline void set_last_notice(::google::protobuf::uint64 value);

  // optional uint64 last_fresh = 5;
  inline bool has_last_fresh() const;
  inline void clear_last_fresh();
  static const int kLastFreshFieldNumber = 5;
  inline ::google::protobuf::uint64 last_fresh() const;
  inline void set_last_fresh(::google::protobuf::uint64 value);

  // optional uint32 active_num = 6;
  inline bool has_active_num() const;
  inline void clear_active_num();
  static const int kActiveNumFieldNumber = 6;
  inline ::google::protobuf::uint32 active_num() const;
  inline void set_active_num(::google::protobuf::uint32 value);

  // optional uint64 total_fight = 7;
  inline bool has_total_fight() const;
  inline void clear_total_fight();
  static const int kTotalFightFieldNumber = 7;
  inline ::google::protobuf::uint64 total_fight() const;
  inline void set_total_fight(::google::protobuf::uint64 value);

  // optional .ProtoBuf.CampRankDBData lev_rank = 8;
  inline bool has_lev_rank() const;
  inline void clear_lev_rank();
  static const int kLevRankFieldNumber = 8;
  inline const ::ProtoBuf::CampRankDBData& lev_rank() const;
  inline ::ProtoBuf::CampRankDBData* mutable_lev_rank();
  inline ::ProtoBuf::CampRankDBData* release_lev_rank();
  inline void set_allocated_lev_rank(::ProtoBuf::CampRankDBData* lev_rank);

  // optional .ProtoBuf.CampRankDBData fight_rank = 9;
  inline bool has_fight_rank() const;
  inline void clear_fight_rank();
  static const int kFightRankFieldNumber = 9;
  inline const ::ProtoBuf::CampRankDBData& fight_rank() const;
  inline ::ProtoBuf::CampRankDBData* mutable_fight_rank();
  inline ::ProtoBuf::CampRankDBData* release_fight_rank();
  inline void set_allocated_fight_rank(::ProtoBuf::CampRankDBData* fight_rank);

  // optional .ProtoBuf.CampRankDBData official_rank = 10;
  inline bool has_official_rank() const;
  inline void clear_official_rank();
  static const int kOfficialRankFieldNumber = 10;
  inline const ::ProtoBuf::CampRankDBData& official_rank() const;
  inline ::ProtoBuf::CampRankDBData* mutable_official_rank();
  inline ::ProtoBuf::CampRankDBData* release_official_rank();
  inline void set_allocated_official_rank(::ProtoBuf::CampRankDBData* official_rank);

  // optional .ProtoBuf.CampRankDBData knight_rank = 11;
  inline bool has_knight_rank() const;
  inline void clear_knight_rank();
  static const int kKnightRankFieldNumber = 11;
  inline const ::ProtoBuf::CampRankDBData& knight_rank() const;
  inline ::ProtoBuf::CampRankDBData* mutable_knight_rank();
  inline ::ProtoBuf::CampRankDBData* release_knight_rank();
  inline void set_allocated_knight_rank(::ProtoBuf::CampRankDBData* knight_rank);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SingleCampDBData)
 private:
  inline void set_has_camp_id();
  inline void clear_has_camp_id();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_last_notice();
  inline void clear_has_last_notice();
  inline void set_has_last_fresh();
  inline void clear_has_last_fresh();
  inline void set_has_active_num();
  inline void clear_has_active_num();
  inline void set_has_total_fight();
  inline void clear_has_total_fight();
  inline void set_has_lev_rank();
  inline void clear_has_lev_rank();
  inline void set_has_fight_rank();
  inline void clear_has_fight_rank();
  inline void set_has_official_rank();
  inline void clear_has_official_rank();
  inline void set_has_knight_rank();
  inline void clear_has_knight_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 camp_id_;
  ::google::protobuf::uint32 leader_id_;
  ::std::string* notice_;
  ::google::protobuf::uint64 last_notice_;
  ::google::protobuf::uint64 last_fresh_;
  ::google::protobuf::uint64 total_fight_;
  ::ProtoBuf::CampRankDBData* lev_rank_;
  ::ProtoBuf::CampRankDBData* fight_rank_;
  ::ProtoBuf::CampRankDBData* official_rank_;
  ::ProtoBuf::CampRankDBData* knight_rank_;
  ::google::protobuf::uint32 active_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static SingleCampDBData* default_instance_;
};
// -------------------------------------------------------------------

class AllCampDBData : public ::google::protobuf::Message {
 public:
  AllCampDBData();
  virtual ~AllCampDBData();

  AllCampDBData(const AllCampDBData& from);

  inline AllCampDBData& operator=(const AllCampDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllCampDBData& default_instance();

  void Swap(AllCampDBData* other);

  // implements Message ----------------------------------------------

  AllCampDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllCampDBData& from);
  void MergeFrom(const AllCampDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.SingleCampDBData all_camp_data = 1;
  inline int all_camp_data_size() const;
  inline void clear_all_camp_data();
  static const int kAllCampDataFieldNumber = 1;
  inline const ::ProtoBuf::SingleCampDBData& all_camp_data(int index) const;
  inline ::ProtoBuf::SingleCampDBData* mutable_all_camp_data(int index);
  inline ::ProtoBuf::SingleCampDBData* add_all_camp_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampDBData >&
      all_camp_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampDBData >*
      mutable_all_camp_data();

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllCampDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampDBData > all_camp_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllCampDBData* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBData : public ::google::protobuf::Message {
 public:
  GlobalDBData();
  virtual ~GlobalDBData();

  GlobalDBData(const GlobalDBData& from);

  inline GlobalDBData& operator=(const GlobalDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBData& default_instance();

  void Swap(GlobalDBData* other);

  // implements Message ----------------------------------------------

  GlobalDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBData& from);
  void MergeFrom(const GlobalDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes global_data = 2;
  inline bool has_global_data() const;
  inline void clear_global_data();
  static const int kGlobalDataFieldNumber = 2;
  inline const ::std::string& global_data() const;
  inline void set_global_data(const ::std::string& value);
  inline void set_global_data(const char* value);
  inline void set_global_data(const void* value, size_t size);
  inline ::std::string* mutable_global_data();
  inline ::std::string* release_global_data();
  inline void set_allocated_global_data(::std::string* global_data);

  // @@protoc_insertion_point(class_scope:ProtoBuf.GlobalDBData)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_global_data();
  inline void clear_has_global_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* global_data_;
  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterCampDBData : public ::google::protobuf::Message {
 public:
  CharacterCampDBData();
  virtual ~CharacterCampDBData();

  CharacterCampDBData(const CharacterCampDBData& from);

  inline CharacterCampDBData& operator=(const CharacterCampDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterCampDBData& default_instance();

  void Swap(CharacterCampDBData* other);

  // implements Message ----------------------------------------------

  CharacterCampDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterCampDBData& from);
  void MergeFrom(const CharacterCampDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 contribute = 1;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 1;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // optional uint32 total_contribute = 2;
  inline bool has_total_contribute() const;
  inline void clear_total_contribute();
  static const int kTotalContributeFieldNumber = 2;
  inline ::google::protobuf::uint32 total_contribute() const;
  inline void set_total_contribute(::google::protobuf::uint32 value);

  // optional uint32 prestige = 3;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 3;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);

  // optional uint64 last_join = 4;
  inline bool has_last_join() const;
  inline void clear_last_join();
  static const int kLastJoinFieldNumber = 4;
  inline ::google::protobuf::uint64 last_join() const;
  inline void set_last_join(::google::protobuf::uint64 value);

  // optional uint32 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterCampDBData)
 private:
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_total_contribute();
  inline void clear_has_total_contribute();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_last_join();
  inline void clear_has_last_join();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 total_contribute_;
  ::google::protobuf::uint64 last_join_;
  ::google::protobuf::uint32 prestige_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterCampDBData* default_instance_;
};
// -------------------------------------------------------------------

class MallInfo : public ::google::protobuf::Message {
 public:
  MallInfo();
  virtual ~MallInfo();

  MallInfo(const MallInfo& from);

  inline MallInfo& operator=(const MallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MallInfo& default_instance();

  void Swap(MallInfo* other);

  // implements Message ----------------------------------------------

  MallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MallInfo& from);
  void MergeFrom(const MallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mall_id = 1;
  inline bool has_mall_id() const;
  inline void clear_mall_id();
  static const int kMallIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mall_id() const;
  inline void set_mall_id(::google::protobuf::uint32 value);

  // optional uint32 buy_amount = 2;
  inline bool has_buy_amount() const;
  inline void clear_buy_amount();
  static const int kBuyAmountFieldNumber = 2;
  inline ::google::protobuf::uint32 buy_amount() const;
  inline void set_buy_amount(::google::protobuf::uint32 value);

  // optional uint32 goods_amount = 3;
  inline bool has_goods_amount() const;
  inline void clear_goods_amount();
  static const int kGoodsAmountFieldNumber = 3;
  inline ::google::protobuf::uint32 goods_amount() const;
  inline void set_goods_amount(::google::protobuf::uint32 value);

  // optional uint64 goods_time = 4;
  inline bool has_goods_time() const;
  inline void clear_goods_time();
  static const int kGoodsTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 goods_time() const;
  inline void set_goods_time(::google::protobuf::uint64 value);

  // optional uint64 buy_time = 5;
  inline bool has_buy_time() const;
  inline void clear_buy_time();
  static const int kBuyTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 buy_time() const;
  inline void set_buy_time(::google::protobuf::uint64 value);

  // optional uint64 open_time = 6;
  inline bool has_open_time() const;
  inline void clear_open_time();
  static const int kOpenTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 open_time() const;
  inline void set_open_time(::google::protobuf::uint64 value);

  // optional uint64 open_cool_time = 7;
  inline bool has_open_cool_time() const;
  inline void clear_open_cool_time();
  static const int kOpenCoolTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 open_cool_time() const;
  inline void set_open_cool_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.MallInfo)
 private:
  inline void set_has_mall_id();
  inline void clear_has_mall_id();
  inline void set_has_buy_amount();
  inline void clear_has_buy_amount();
  inline void set_has_goods_amount();
  inline void clear_has_goods_amount();
  inline void set_has_goods_time();
  inline void clear_has_goods_time();
  inline void set_has_buy_time();
  inline void clear_has_buy_time();
  inline void set_has_open_time();
  inline void clear_has_open_time();
  inline void set_has_open_cool_time();
  inline void clear_has_open_cool_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mall_id_;
  ::google::protobuf::uint32 buy_amount_;
  ::google::protobuf::uint64 goods_time_;
  ::google::protobuf::uint64 buy_time_;
  ::google::protobuf::uint64 open_time_;
  ::google::protobuf::uint64 open_cool_time_;
  ::google::protobuf::uint32 goods_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static MallInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllMallDBData : public ::google::protobuf::Message {
 public:
  AllMallDBData();
  virtual ~AllMallDBData();

  AllMallDBData(const AllMallDBData& from);

  inline AllMallDBData& operator=(const AllMallDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllMallDBData& default_instance();

  void Swap(AllMallDBData* other);

  // implements Message ----------------------------------------------

  AllMallDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllMallDBData& from);
  void MergeFrom(const AllMallDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 last_logout = 1;
  inline bool has_last_logout() const;
  inline void clear_last_logout();
  static const int kLastLogoutFieldNumber = 1;
  inline ::google::protobuf::uint64 last_logout() const;
  inline void set_last_logout(::google::protobuf::uint64 value);

  // repeated .ProtoBuf.MallInfo all_mall_data = 2;
  inline int all_mall_data_size() const;
  inline void clear_all_mall_data();
  static const int kAllMallDataFieldNumber = 2;
  inline const ::ProtoBuf::MallInfo& all_mall_data(int index) const;
  inline ::ProtoBuf::MallInfo* mutable_all_mall_data(int index);
  inline ::ProtoBuf::MallInfo* add_all_mall_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MallInfo >&
      all_mall_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MallInfo >*
      mutable_all_mall_data();

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllMallDBData)
 private:
  inline void set_has_last_logout();
  inline void clear_has_last_logout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_logout_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MallInfo > all_mall_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllMallDBData* default_instance_;
};
// -------------------------------------------------------------------

class SingleCharacterMallDB : public ::google::protobuf::Message {
 public:
  SingleCharacterMallDB();
  virtual ~SingleCharacterMallDB();

  SingleCharacterMallDB(const SingleCharacterMallDB& from);

  inline SingleCharacterMallDB& operator=(const SingleCharacterMallDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleCharacterMallDB& default_instance();

  void Swap(SingleCharacterMallDB* other);

  // implements Message ----------------------------------------------

  SingleCharacterMallDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleCharacterMallDB& from);
  void MergeFrom(const SingleCharacterMallDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .ProtoBuf.AllMallDBData info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ProtoBuf::AllMallDBData& info() const;
  inline ::ProtoBuf::AllMallDBData* mutable_info();
  inline ::ProtoBuf::AllMallDBData* release_info();
  inline void set_allocated_info(::ProtoBuf::AllMallDBData* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SingleCharacterMallDB)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::AllMallDBData* info_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static SingleCharacterMallDB* default_instance_;
};
// -------------------------------------------------------------------

class SingleAchievementDBData : public ::google::protobuf::Message {
 public:
  SingleAchievementDBData();
  virtual ~SingleAchievementDBData();

  SingleAchievementDBData(const SingleAchievementDBData& from);

  inline SingleAchievementDBData& operator=(const SingleAchievementDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleAchievementDBData& default_instance();

  void Swap(SingleAchievementDBData* other);

  // implements Message ----------------------------------------------

  SingleAchievementDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleAchievementDBData& from);
  void MergeFrom(const SingleAchievementDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 completeCount = 3;
  inline bool has_completecount() const;
  inline void clear_completecount();
  static const int kCompleteCountFieldNumber = 3;
  inline ::google::protobuf::uint32 completecount() const;
  inline void set_completecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SingleAchievementDBData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_completecount();
  inline void clear_has_completecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 completecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static SingleAchievementDBData* default_instance_;
};
// -------------------------------------------------------------------

class GroupAchievementDBData : public ::google::protobuf::Message {
 public:
  GroupAchievementDBData();
  virtual ~GroupAchievementDBData();

  GroupAchievementDBData(const GroupAchievementDBData& from);

  inline GroupAchievementDBData& operator=(const GroupAchievementDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAchievementDBData& default_instance();

  void Swap(GroupAchievementDBData* other);

  // implements Message ----------------------------------------------

  GroupAchievementDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupAchievementDBData& from);
  void MergeFrom(const GroupAchievementDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sortType = 1;
  inline bool has_sorttype() const;
  inline void clear_sorttype();
  static const int kSortTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 sorttype() const;
  inline void set_sorttype(::google::protobuf::uint32 value);

  // repeated .ProtoBuf.SingleAchievementDBData achievementInfoList = 2;
  inline int achievementinfolist_size() const;
  inline void clear_achievementinfolist();
  static const int kAchievementInfoListFieldNumber = 2;
  inline const ::ProtoBuf::SingleAchievementDBData& achievementinfolist(int index) const;
  inline ::ProtoBuf::SingleAchievementDBData* mutable_achievementinfolist(int index);
  inline ::ProtoBuf::SingleAchievementDBData* add_achievementinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleAchievementDBData >&
      achievementinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleAchievementDBData >*
      mutable_achievementinfolist();

  // optional uint32 achievementReward = 3;
  inline bool has_achievementreward() const;
  inline void clear_achievementreward();
  static const int kAchievementRewardFieldNumber = 3;
  inline ::google::protobuf::uint32 achievementreward() const;
  inline void set_achievementreward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.GroupAchievementDBData)
 private:
  inline void set_has_sorttype();
  inline void clear_has_sorttype();
  inline void set_has_achievementreward();
  inline void clear_has_achievementreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleAchievementDBData > achievementinfolist_;
  ::google::protobuf::uint32 sorttype_;
  ::google::protobuf::uint32 achievementreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static GroupAchievementDBData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterAchievementDBData : public ::google::protobuf::Message {
 public:
  CharacterAchievementDBData();
  virtual ~CharacterAchievementDBData();

  CharacterAchievementDBData(const CharacterAchievementDBData& from);

  inline CharacterAchievementDBData& operator=(const CharacterAchievementDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterAchievementDBData& default_instance();

  void Swap(CharacterAchievementDBData* other);

  // implements Message ----------------------------------------------

  CharacterAchievementDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterAchievementDBData& from);
  void MergeFrom(const CharacterAchievementDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.GroupAchievementDBData groupAchievementData = 1;
  inline int groupachievementdata_size() const;
  inline void clear_groupachievementdata();
  static const int kGroupAchievementDataFieldNumber = 1;
  inline const ::ProtoBuf::GroupAchievementDBData& groupachievementdata(int index) const;
  inline ::ProtoBuf::GroupAchievementDBData* mutable_groupachievementdata(int index);
  inline ::ProtoBuf::GroupAchievementDBData* add_groupachievementdata();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::GroupAchievementDBData >&
      groupachievementdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::GroupAchievementDBData >*
      mutable_groupachievementdata();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterAchievementDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::GroupAchievementDBData > groupachievementdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterAchievementDBData* default_instance_;
};
// -------------------------------------------------------------------

class SingleDeputyDBData : public ::google::protobuf::Message {
 public:
  SingleDeputyDBData();
  virtual ~SingleDeputyDBData();

  SingleDeputyDBData(const SingleDeputyDBData& from);

  inline SingleDeputyDBData& operator=(const SingleDeputyDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleDeputyDBData& default_instance();

  void Swap(SingleDeputyDBData* other);

  // implements Message ----------------------------------------------

  SingleDeputyDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleDeputyDBData& from);
  void MergeFrom(const SingleDeputyDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 skill_lvl = 2;
  inline bool has_skill_lvl() const;
  inline void clear_skill_lvl();
  static const int kSkillLvlFieldNumber = 2;
  inline ::google::protobuf::int32 skill_lvl() const;
  inline void set_skill_lvl(::google::protobuf::int32 value);

  // optional int32 lvl_val = 3;
  inline bool has_lvl_val() const;
  inline void clear_lvl_val();
  static const int kLvlValFieldNumber = 3;
  inline ::google::protobuf::int32 lvl_val() const;
  inline void set_lvl_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SingleDeputyDBData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_skill_lvl();
  inline void clear_has_skill_lvl();
  inline void set_has_lvl_val();
  inline void clear_has_lvl_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 skill_lvl_;
  ::google::protobuf::int32 lvl_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static SingleDeputyDBData* default_instance_;
};
// -------------------------------------------------------------------

class CollectDeputyDBData : public ::google::protobuf::Message {
 public:
  CollectDeputyDBData();
  virtual ~CollectDeputyDBData();

  CollectDeputyDBData(const CollectDeputyDBData& from);

  inline CollectDeputyDBData& operator=(const CollectDeputyDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectDeputyDBData& default_instance();

  void Swap(CollectDeputyDBData* other);

  // implements Message ----------------------------------------------

  CollectDeputyDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectDeputyDBData& from);
  void MergeFrom(const CollectDeputyDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::ProtoBuf::SingleDeputyDBData& data(int index) const;
  inline ::ProtoBuf::SingleDeputyDBData* mutable_data(int index);
  inline ::ProtoBuf::SingleDeputyDBData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CollectDeputyDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CollectDeputyDBData* default_instance_;
};
// -------------------------------------------------------------------

class MakeDeputyDBData : public ::google::protobuf::Message {
 public:
  MakeDeputyDBData();
  virtual ~MakeDeputyDBData();

  MakeDeputyDBData(const MakeDeputyDBData& from);

  inline MakeDeputyDBData& operator=(const MakeDeputyDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MakeDeputyDBData& default_instance();

  void Swap(MakeDeputyDBData* other);

  // implements Message ----------------------------------------------

  MakeDeputyDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MakeDeputyDBData& from);
  void MergeFrom(const MakeDeputyDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.SingleDeputyDBData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::ProtoBuf::SingleDeputyDBData& data(int index) const;
  inline ::ProtoBuf::SingleDeputyDBData* mutable_data(int index);
  inline ::ProtoBuf::SingleDeputyDBData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ProtoBuf.MakeDeputyDBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static MakeDeputyDBData* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDeputyDBData : public ::google::protobuf::Message {
 public:
  CharacterDeputyDBData();
  virtual ~CharacterDeputyDBData();

  CharacterDeputyDBData(const CharacterDeputyDBData& from);

  inline CharacterDeputyDBData& operator=(const CharacterDeputyDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDeputyDBData& default_instance();

  void Swap(CharacterDeputyDBData* other);

  // implements Message ----------------------------------------------

  CharacterDeputyDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDeputyDBData& from);
  void MergeFrom(const CharacterDeputyDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoBuf.CollectDeputyDBData collect = 1;
  inline bool has_collect() const;
  inline void clear_collect();
  static const int kCollectFieldNumber = 1;
  inline const ::ProtoBuf::CollectDeputyDBData& collect() const;
  inline ::ProtoBuf::CollectDeputyDBData* mutable_collect();
  inline ::ProtoBuf::CollectDeputyDBData* release_collect();
  inline void set_allocated_collect(::ProtoBuf::CollectDeputyDBData* collect);

  // optional .ProtoBuf.MakeDeputyDBData make = 2;
  inline bool has_make() const;
  inline void clear_make();
  static const int kMakeFieldNumber = 2;
  inline const ::ProtoBuf::MakeDeputyDBData& make() const;
  inline ::ProtoBuf::MakeDeputyDBData* mutable_make();
  inline ::ProtoBuf::MakeDeputyDBData* release_make();
  inline void set_allocated_make(::ProtoBuf::MakeDeputyDBData* make);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDeputyDBData)
 private:
  inline void set_has_collect();
  inline void clear_has_collect();
  inline void set_has_make();
  inline void clear_has_make();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CollectDeputyDBData* collect_;
  ::ProtoBuf::MakeDeputyDBData* make_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDeputyDBData* default_instance_;
};
// -------------------------------------------------------------------

class Vector3PB : public ::google::protobuf::Message {
 public:
  Vector3PB();
  virtual ~Vector3PB();

  Vector3PB(const Vector3PB& from);

  inline Vector3PB& operator=(const Vector3PB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3PB& default_instance();

  void Swap(Vector3PB* other);

  // implements Message ----------------------------------------------

  Vector3PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3PB& from);
  void MergeFrom(const Vector3PB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Vector3PB)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static Vector3PB* default_instance_;
};
// -------------------------------------------------------------------

class ActorMove : public ::google::protobuf::Message {
 public:
  ActorMove();
  virtual ~ActorMove();

  ActorMove(const ActorMove& from);

  inline ActorMove& operator=(const ActorMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorMove& default_instance();

  void Swap(ActorMove* other);

  // implements Message ----------------------------------------------

  ActorMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorMove& from);
  void MergeFrom(const ActorMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required .ProtoBuf.Vector3PB currentPos = 2;
  inline bool has_currentpos() const;
  inline void clear_currentpos();
  static const int kCurrentPosFieldNumber = 2;
  inline const ::ProtoBuf::Vector3PB& currentpos() const;
  inline ::ProtoBuf::Vector3PB* mutable_currentpos();
  inline ::ProtoBuf::Vector3PB* release_currentpos();
  inline void set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos);

  // repeated .ProtoBuf.Vector3PB path = 3;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::ProtoBuf::Vector3PB& path(int index) const;
  inline ::ProtoBuf::Vector3PB* mutable_path(int index);
  inline ::ProtoBuf::Vector3PB* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:ProtoBuf.ActorMove)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_currentpos();
  inline void clear_has_currentpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::Vector3PB* currentpos_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB > path_;
  ::google::protobuf::uint32 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static ActorMove* default_instance_;
};
// -------------------------------------------------------------------

class ActorSkillMove : public ::google::protobuf::Message {
 public:
  ActorSkillMove();
  virtual ~ActorSkillMove();

  ActorSkillMove(const ActorSkillMove& from);

  inline ActorSkillMove& operator=(const ActorSkillMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorSkillMove& default_instance();

  void Swap(ActorSkillMove* other);

  // implements Message ----------------------------------------------

  ActorSkillMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorSkillMove& from);
  void MergeFrom(const ActorSkillMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required .ProtoBuf.Vector3PB currentPos = 2;
  inline bool has_currentpos() const;
  inline void clear_currentpos();
  static const int kCurrentPosFieldNumber = 2;
  inline const ::ProtoBuf::Vector3PB& currentpos() const;
  inline ::ProtoBuf::Vector3PB* mutable_currentpos();
  inline ::ProtoBuf::Vector3PB* release_currentpos();
  inline void set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos);

  // repeated .ProtoBuf.Vector3PB path = 3;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::ProtoBuf::Vector3PB& path(int index) const;
  inline ::ProtoBuf::Vector3PB* mutable_path(int index);
  inline ::ProtoBuf::Vector3PB* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >*
      mutable_path();

  // required float speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline float speed() const;
  inline void set_speed(float value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ActorSkillMove)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_currentpos();
  inline void clear_has_currentpos();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::Vector3PB* currentpos_;
  ::google::protobuf::uint32 cid_;
  float speed_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB > path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static ActorSkillMove* default_instance_;
};
// -------------------------------------------------------------------

class ActorRockerMove : public ::google::protobuf::Message {
 public:
  ActorRockerMove();
  virtual ~ActorRockerMove();

  ActorRockerMove(const ActorRockerMove& from);

  inline ActorRockerMove& operator=(const ActorRockerMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorRockerMove& default_instance();

  void Swap(ActorRockerMove* other);

  // implements Message ----------------------------------------------

  ActorRockerMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorRockerMove& from);
  void MergeFrom(const ActorRockerMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActorRockerMove_Type Type;
  static const Type Up = ActorRockerMove_Type_Up;
  static const Type Down = ActorRockerMove_Type_Down;
  static const Type Stop = ActorRockerMove_Type_Stop;
  static const Type Block = ActorRockerMove_Type_Block;
  static const Type UpRoll = ActorRockerMove_Type_UpRoll;
  static const Type DownRoll = ActorRockerMove_Type_DownRoll;
  static inline bool Type_IsValid(int value) {
    return ActorRockerMove_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ActorRockerMove_Type_Type_MIN;
  static const Type Type_MAX =
    ActorRockerMove_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ActorRockerMove_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ActorRockerMove_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ActorRockerMove_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ActorRockerMove_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required .ProtoBuf.Vector3PB currentPos = 2;
  inline bool has_currentpos() const;
  inline void clear_currentpos();
  static const int kCurrentPosFieldNumber = 2;
  inline const ::ProtoBuf::Vector3PB& currentpos() const;
  inline ::ProtoBuf::Vector3PB* mutable_currentpos();
  inline ::ProtoBuf::Vector3PB* release_currentpos();
  inline void set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos);

  // required float currentRange = 3;
  inline bool has_currentrange() const;
  inline void clear_currentrange();
  static const int kCurrentRangeFieldNumber = 3;
  inline float currentrange() const;
  inline void set_currentrange(float value);

  // required .ProtoBuf.ActorRockerMove.Type moveType = 4;
  inline bool has_movetype() const;
  inline void clear_movetype();
  static const int kMoveTypeFieldNumber = 4;
  inline ::ProtoBuf::ActorRockerMove_Type movetype() const;
  inline void set_movetype(::ProtoBuf::ActorRockerMove_Type value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ActorRockerMove)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_currentpos();
  inline void clear_has_currentpos();
  inline void set_has_currentrange();
  inline void clear_has_currentrange();
  inline void set_has_movetype();
  inline void clear_has_movetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::Vector3PB* currentpos_;
  ::google::protobuf::uint32 cid_;
  float currentrange_;
  int movetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static ActorRockerMove* default_instance_;
};
// -------------------------------------------------------------------

class ActorPosUpDate : public ::google::protobuf::Message {
 public:
  ActorPosUpDate();
  virtual ~ActorPosUpDate();

  ActorPosUpDate(const ActorPosUpDate& from);

  inline ActorPosUpDate& operator=(const ActorPosUpDate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorPosUpDate& default_instance();

  void Swap(ActorPosUpDate* other);

  // implements Message ----------------------------------------------

  ActorPosUpDate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorPosUpDate& from);
  void MergeFrom(const ActorPosUpDate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required .ProtoBuf.Vector3PB currentPos = 2;
  inline bool has_currentpos() const;
  inline void clear_currentpos();
  static const int kCurrentPosFieldNumber = 2;
  inline const ::ProtoBuf::Vector3PB& currentpos() const;
  inline ::ProtoBuf::Vector3PB* mutable_currentpos();
  inline ::ProtoBuf::Vector3PB* release_currentpos();
  inline void set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos);

  // required .ProtoBuf.Vector3PB currentDir = 3;
  inline bool has_currentdir() const;
  inline void clear_currentdir();
  static const int kCurrentDirFieldNumber = 3;
  inline const ::ProtoBuf::Vector3PB& currentdir() const;
  inline ::ProtoBuf::Vector3PB* mutable_currentdir();
  inline ::ProtoBuf::Vector3PB* release_currentdir();
  inline void set_allocated_currentdir(::ProtoBuf::Vector3PB* currentdir);

  // optional uint32 isend = 4;
  inline bool has_isend() const;
  inline void clear_isend();
  static const int kIsendFieldNumber = 4;
  inline ::google::protobuf::uint32 isend() const;
  inline void set_isend(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ActorPosUpDate)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_currentpos();
  inline void clear_has_currentpos();
  inline void set_has_currentdir();
  inline void clear_has_currentdir();
  inline void set_has_isend();
  inline void clear_has_isend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::Vector3PB* currentpos_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 isend_;
  ::ProtoBuf::Vector3PB* currentdir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static ActorPosUpDate* default_instance_;
};
// -------------------------------------------------------------------

class CharSyncAttr : public ::google::protobuf::Message {
 public:
  CharSyncAttr();
  virtual ~CharSyncAttr();

  CharSyncAttr(const CharSyncAttr& from);

  inline CharSyncAttr& operator=(const CharSyncAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharSyncAttr& default_instance();

  void Swap(CharSyncAttr* other);

  // implements Message ----------------------------------------------

  CharSyncAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharSyncAttr& from);
  void MergeFrom(const CharSyncAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 attrid = 1;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttridFieldNumber = 1;
  inline ::google::protobuf::uint32 attrid() const;
  inline void set_attrid(::google::protobuf::uint32 value);

  // required uint32 attrval = 2;
  inline bool has_attrval() const;
  inline void clear_attrval();
  static const int kAttrvalFieldNumber = 2;
  inline ::google::protobuf::uint32 attrval() const;
  inline void set_attrval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharSyncAttr)
 private:
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_attrval();
  inline void clear_has_attrval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 attrid_;
  ::google::protobuf::uint32 attrval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharSyncAttr* default_instance_;
};
// -------------------------------------------------------------------

class SkillCell : public ::google::protobuf::Message {
 public:
  SkillCell();
  virtual ~SkillCell();

  SkillCell(const SkillCell& from);

  inline SkillCell& operator=(const SkillCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillCell& default_instance();

  void Swap(SkillCell* other);

  // implements Message ----------------------------------------------

  SkillCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillCell& from);
  void MergeFrom(const SkillCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // required uint32 skillLev = 2;
  inline bool has_skilllev() const;
  inline void clear_skilllev();
  static const int kSkillLevFieldNumber = 2;
  inline ::google::protobuf::uint32 skilllev() const;
  inline void set_skilllev(::google::protobuf::uint32 value);

  // optional uint64 cd = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline ::google::protobuf::uint64 cd() const;
  inline void set_cd(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SkillCell)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllev();
  inline void clear_has_skilllev();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllev_;
  ::google::protobuf::uint64 cd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static SkillCell* default_instance_;
};
// -------------------------------------------------------------------

class Attr : public ::google::protobuf::Message {
 public:
  Attr();
  virtual ~Attr();

  Attr(const Attr& from);

  inline Attr& operator=(const Attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attr& default_instance();

  void Swap(Attr* other);

  // implements Message ----------------------------------------------

  Attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attr& from);
  void MergeFrom(const Attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 AttrNum = 1;
  inline bool has_attrnum() const;
  inline void clear_attrnum();
  static const int kAttrNumFieldNumber = 1;
  inline ::google::protobuf::uint32 attrnum() const;
  inline void set_attrnum(::google::protobuf::uint32 value);

  // required uint32 Attrvalue = 2;
  inline bool has_attrvalue() const;
  inline void clear_attrvalue();
  static const int kAttrvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 attrvalue() const;
  inline void set_attrvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Attr)
 private:
  inline void set_has_attrnum();
  inline void clear_has_attrnum();
  inline void set_has_attrvalue();
  inline void clear_has_attrvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 attrnum_;
  ::google::protobuf::uint32 attrvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static Attr* default_instance_;
};
// -------------------------------------------------------------------

class DigPerfor : public ::google::protobuf::Message {
 public:
  DigPerfor();
  virtual ~DigPerfor();

  DigPerfor(const DigPerfor& from);

  inline DigPerfor& operator=(const DigPerfor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DigPerfor& default_instance();

  void Swap(DigPerfor* other);

  // implements Message ----------------------------------------------

  DigPerfor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DigPerfor& from);
  void MergeFrom(const DigPerfor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DigPerfor_Type Type;
  static const Type addHp = DigPerfor_Type_addHp;
  static const Type reduceHp = DigPerfor_Type_reduceHp;
  static const Type cirit = DigPerfor_Type_cirit;
  static const Type doge = DigPerfor_Type_doge;
  static inline bool Type_IsValid(int value) {
    return DigPerfor_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DigPerfor_Type_Type_MIN;
  static const Type Type_MAX =
    DigPerfor_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DigPerfor_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DigPerfor_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DigPerfor_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DigPerfor_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.DigPerfor)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static DigPerfor* default_instance_;
};
// -------------------------------------------------------------------

class IsCanTransSceneRouteReq : public ::google::protobuf::Message {
 public:
  IsCanTransSceneRouteReq();
  virtual ~IsCanTransSceneRouteReq();

  IsCanTransSceneRouteReq(const IsCanTransSceneRouteReq& from);

  inline IsCanTransSceneRouteReq& operator=(const IsCanTransSceneRouteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsCanTransSceneRouteReq& default_instance();

  void Swap(IsCanTransSceneRouteReq* other);

  // implements Message ----------------------------------------------

  IsCanTransSceneRouteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsCanTransSceneRouteReq& from);
  void MergeFrom(const IsCanTransSceneRouteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dstMapId = 1;
  inline bool has_dstmapid() const;
  inline void clear_dstmapid();
  static const int kDstMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dstmapid() const;
  inline void set_dstmapid(::google::protobuf::uint32 value);

  // required uint32 sceneRouteId = 2;
  inline bool has_scenerouteid() const;
  inline void clear_scenerouteid();
  static const int kSceneRouteIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scenerouteid() const;
  inline void set_scenerouteid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.IsCanTransSceneRouteReq)
 private:
  inline void set_has_dstmapid();
  inline void clear_has_dstmapid();
  inline void set_has_scenerouteid();
  inline void clear_has_scenerouteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dstmapid_;
  ::google::protobuf::uint32 scenerouteid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static IsCanTransSceneRouteReq* default_instance_;
};
// -------------------------------------------------------------------

class IsCanTransSceneReq : public ::google::protobuf::Message {
 public:
  IsCanTransSceneReq();
  virtual ~IsCanTransSceneReq();

  IsCanTransSceneReq(const IsCanTransSceneReq& from);

  inline IsCanTransSceneReq& operator=(const IsCanTransSceneReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsCanTransSceneReq& default_instance();

  void Swap(IsCanTransSceneReq* other);

  // implements Message ----------------------------------------------

  IsCanTransSceneReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsCanTransSceneReq& from);
  void MergeFrom(const IsCanTransSceneReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dstMapId = 1;
  inline bool has_dstmapid() const;
  inline void clear_dstmapid();
  static const int kDstMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dstmapid() const;
  inline void set_dstmapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.IsCanTransSceneReq)
 private:
  inline void set_has_dstmapid();
  inline void clear_has_dstmapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dstmapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static IsCanTransSceneReq* default_instance_;
};
// -------------------------------------------------------------------

class ItemSellProto : public ::google::protobuf::Message {
 public:
  ItemSellProto();
  virtual ~ItemSellProto();

  ItemSellProto(const ItemSellProto& from);

  inline ItemSellProto& operator=(const ItemSellProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemSellProto& default_instance();

  void Swap(ItemSellProto* other);

  // implements Message ----------------------------------------------

  ItemSellProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemSellProto& from);
  void MergeFrom(const ItemSellProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ItemSellProto)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static ItemSellProto* default_instance_;
};
// -------------------------------------------------------------------

class OneKeyDressProto : public ::google::protobuf::Message {
 public:
  OneKeyDressProto();
  virtual ~OneKeyDressProto();

  OneKeyDressProto(const OneKeyDressProto& from);

  inline OneKeyDressProto& operator=(const OneKeyDressProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneKeyDressProto& default_instance();

  void Swap(OneKeyDressProto* other);

  // implements Message ----------------------------------------------

  OneKeyDressProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneKeyDressProto& from);
  void MergeFrom(const OneKeyDressProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.OneKeyDressProto)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static OneKeyDressProto* default_instance_;
};
// -------------------------------------------------------------------

class RewardItemProto : public ::google::protobuf::Message {
 public:
  RewardItemProto();
  virtual ~RewardItemProto();

  RewardItemProto(const RewardItemProto& from);

  inline RewardItemProto& operator=(const RewardItemProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardItemProto& default_instance();

  void Swap(RewardItemProto* other);

  // implements Message ----------------------------------------------

  RewardItemProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardItemProto& from);
  void MergeFrom(const RewardItemProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.ItemProtoInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ProtoBuf::ItemProtoInfo& info(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_info(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.RewardItemProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static RewardItemProto* default_instance_;
};
// -------------------------------------------------------------------

class DuplicateProto : public ::google::protobuf::Message {
 public:
  DuplicateProto();
  virtual ~DuplicateProto();

  DuplicateProto(const DuplicateProto& from);

  inline DuplicateProto& operator=(const DuplicateProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplicateProto& default_instance();

  void Swap(DuplicateProto* other);

  // implements Message ----------------------------------------------

  DuplicateProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplicateProto& from);
  void MergeFrom(const DuplicateProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dupliate_id = 1;
  inline bool has_dupliate_id() const;
  inline void clear_dupliate_id();
  static const int kDupliateIdFieldNumber = 1;
  inline ::google::protobuf::int32 dupliate_id() const;
  inline void set_dupliate_id(::google::protobuf::int32 value);

  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 reward_count = 3;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 3;
  inline ::google::protobuf::int32 reward_count() const;
  inline void set_reward_count(::google::protobuf::int32 value);

  // optional int32 buy_count = 4;
  inline bool has_buy_count() const;
  inline void clear_buy_count();
  static const int kBuyCountFieldNumber = 4;
  inline ::google::protobuf::int32 buy_count() const;
  inline void set_buy_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.DuplicateProto)
 private:
  inline void set_has_dupliate_id();
  inline void clear_has_dupliate_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();
  inline void set_has_buy_count();
  inline void clear_has_buy_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dupliate_id_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 reward_count_;
  ::google::protobuf::int32 buy_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static DuplicateProto* default_instance_;
};
// -------------------------------------------------------------------

class RelationMember : public ::google::protobuf::Message {
 public:
  RelationMember();
  virtual ~RelationMember();

  RelationMember(const RelationMember& from);

  inline RelationMember& operator=(const RelationMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationMember& default_instance();

  void Swap(RelationMember* other);

  // implements Message ----------------------------------------------

  RelationMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelationMember& from);
  void MergeFrom(const RelationMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.RelationMember)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static RelationMember* default_instance_;
};
// -------------------------------------------------------------------

class RelationInfo : public ::google::protobuf::Message {
 public:
  RelationInfo();
  virtual ~RelationInfo();

  RelationInfo(const RelationInfo& from);

  inline RelationInfo& operator=(const RelationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationInfo& default_instance();

  void Swap(RelationInfo* other);

  // implements Message ----------------------------------------------

  RelationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelationInfo& from);
  void MergeFrom(const RelationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 groupIndex = 1;
  inline bool has_groupindex() const;
  inline void clear_groupindex();
  static const int kGroupIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 groupindex() const;
  inline void set_groupindex(::google::protobuf::uint32 value);

  // repeated .ProtoBuf.RelationMember members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::ProtoBuf::RelationMember& members(int index) const;
  inline ::ProtoBuf::RelationMember* mutable_members(int index);
  inline ::ProtoBuf::RelationMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationMember >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:ProtoBuf.RelationInfo)
 private:
  inline void set_has_groupindex();
  inline void clear_has_groupindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationMember > members_;
  ::google::protobuf::uint32 groupindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static RelationInfo* default_instance_;
};
// -------------------------------------------------------------------

class RelationPhysicalTab : public ::google::protobuf::Message {
 public:
  RelationPhysicalTab();
  virtual ~RelationPhysicalTab();

  RelationPhysicalTab(const RelationPhysicalTab& from);

  inline RelationPhysicalTab& operator=(const RelationPhysicalTab& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationPhysicalTab& default_instance();

  void Swap(RelationPhysicalTab* other);

  // implements Message ----------------------------------------------

  RelationPhysicalTab* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelationPhysicalTab& from);
  void MergeFrom(const RelationPhysicalTab& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 lastGivePlyTime = 2;
  inline bool has_lastgiveplytime() const;
  inline void clear_lastgiveplytime();
  static const int kLastGivePlyTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 lastgiveplytime() const;
  inline void set_lastgiveplytime(::google::protobuf::uint64 value);

  // optional uint32 lastGetPhyTime = 3;
  inline bool has_lastgetphytime() const;
  inline void clear_lastgetphytime();
  static const int kLastGetPhyTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 lastgetphytime() const;
  inline void set_lastgetphytime(::google::protobuf::uint32 value);

  // optional uint32 getPlyStatus = 4;
  inline bool has_getplystatus() const;
  inline void clear_getplystatus();
  static const int kGetPlyStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 getplystatus() const;
  inline void set_getplystatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.RelationPhysicalTab)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lastgiveplytime();
  inline void clear_has_lastgiveplytime();
  inline void set_has_lastgetphytime();
  inline void clear_has_lastgetphytime();
  inline void set_has_getplystatus();
  inline void clear_has_getplystatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 lastgiveplytime_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lastgetphytime_;
  ::google::protobuf::uint32 getplystatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static RelationPhysicalTab* default_instance_;
};
// -------------------------------------------------------------------

class RelationDBInfo : public ::google::protobuf::Message {
 public:
  RelationDBInfo();
  virtual ~RelationDBInfo();

  RelationDBInfo(const RelationDBInfo& from);

  inline RelationDBInfo& operator=(const RelationDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationDBInfo& default_instance();

  void Swap(RelationDBInfo* other);

  // implements Message ----------------------------------------------

  RelationDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelationDBInfo& from);
  void MergeFrom(const RelationDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.RelationInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ProtoBuf::RelationInfo& info(int index) const;
  inline ::ProtoBuf::RelationInfo* mutable_info(int index);
  inline ::ProtoBuf::RelationInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationInfo >*
      mutable_info();

  // repeated .ProtoBuf.RelationPhysicalTab physicalTab = 2;
  inline int physicaltab_size() const;
  inline void clear_physicaltab();
  static const int kPhysicalTabFieldNumber = 2;
  inline const ::ProtoBuf::RelationPhysicalTab& physicaltab(int index) const;
  inline ::ProtoBuf::RelationPhysicalTab* mutable_physicaltab(int index);
  inline ::ProtoBuf::RelationPhysicalTab* add_physicaltab();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationPhysicalTab >&
      physicaltab() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationPhysicalTab >*
      mutable_physicaltab();

  // repeated uint32 applyList = 3;
  inline int applylist_size() const;
  inline void clear_applylist();
  static const int kApplyListFieldNumber = 3;
  inline ::google::protobuf::uint32 applylist(int index) const;
  inline void set_applylist(int index, ::google::protobuf::uint32 value);
  inline void add_applylist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      applylist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_applylist();

  // optional uint32 giveTimes = 4;
  inline bool has_givetimes() const;
  inline void clear_givetimes();
  static const int kGiveTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 givetimes() const;
  inline void set_givetimes(::google::protobuf::uint32 value);

  // optional uint64 lastGivePlyTime = 5;
  inline bool has_lastgiveplytime() const;
  inline void clear_lastgiveplytime();
  static const int kLastGivePlyTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 lastgiveplytime() const;
  inline void set_lastgiveplytime(::google::protobuf::uint64 value);

  // optional uint32 progress = 6;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 6;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.RelationDBInfo)
 private:
  inline void set_has_givetimes();
  inline void clear_has_givetimes();
  inline void set_has_lastgiveplytime();
  inline void clear_has_lastgiveplytime();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationInfo > info_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationPhysicalTab > physicaltab_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > applylist_;
  ::google::protobuf::uint64 lastgiveplytime_;
  ::google::protobuf::uint32 givetimes_;
  ::google::protobuf::uint32 progress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static RelationDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterPlayerMiniInfo : public ::google::protobuf::Message {
 public:
  CharacterPlayerMiniInfo();
  virtual ~CharacterPlayerMiniInfo();

  CharacterPlayerMiniInfo(const CharacterPlayerMiniInfo& from);

  inline CharacterPlayerMiniInfo& operator=(const CharacterPlayerMiniInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterPlayerMiniInfo& default_instance();

  void Swap(CharacterPlayerMiniInfo* other);

  // implements Message ----------------------------------------------

  CharacterPlayerMiniInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterPlayerMiniInfo& from);
  void MergeFrom(const CharacterPlayerMiniInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 closeness = 5;
  inline bool has_closeness() const;
  inline void clear_closeness();
  static const int kClosenessFieldNumber = 5;
  inline ::google::protobuf::uint32 closeness() const;
  inline void set_closeness(::google::protobuf::uint32 value);

  // optional bool givePlysical = 6 [default = false];
  inline bool has_giveplysical() const;
  inline void clear_giveplysical();
  static const int kGivePlysicalFieldNumber = 6;
  inline bool giveplysical() const;
  inline void set_giveplysical(bool value);

  // optional uint32 getPlyStatus = 7 [default = 0];
  inline bool has_getplystatus() const;
  inline void clear_getplystatus();
  static const int kGetPlyStatusFieldNumber = 7;
  inline ::google::protobuf::uint32 getplystatus() const;
  inline void set_getplystatus(::google::protobuf::uint32 value);

  // optional uint32 recentType = 8;
  inline bool has_recenttype() const;
  inline void clear_recenttype();
  static const int kRecentTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 recenttype() const;
  inline void set_recenttype(::google::protobuf::uint32 value);

  // optional uint64 recentTime = 9;
  inline bool has_recenttime() const;
  inline void clear_recenttime();
  static const int kRecentTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 recenttime() const;
  inline void set_recenttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterPlayerMiniInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_closeness();
  inline void clear_has_closeness();
  inline void set_has_giveplysical();
  inline void clear_has_giveplysical();
  inline void set_has_getplystatus();
  inline void clear_has_getplystatus();
  inline void set_has_recenttype();
  inline void clear_has_recenttype();
  inline void set_has_recenttime();
  inline void clear_has_recenttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playername_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 closeness_;
  bool giveplysical_;
  ::google::protobuf::uint32 getplystatus_;
  ::google::protobuf::uint64 recenttime_;
  ::google::protobuf::uint32 recenttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterPlayerMiniInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDetailProtoInfo : public ::google::protobuf::Message {
 public:
  CharacterDetailProtoInfo();
  virtual ~CharacterDetailProtoInfo();

  CharacterDetailProtoInfo(const CharacterDetailProtoInfo& from);

  inline CharacterDetailProtoInfo& operator=(const CharacterDetailProtoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDetailProtoInfo& default_instance();

  void Swap(CharacterDetailProtoInfo* other);

  // implements Message ----------------------------------------------

  CharacterDetailProtoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDetailProtoInfo& from);
  void MergeFrom(const CharacterDetailProtoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::uint32 fight() const;
  inline void set_fight(::google::protobuf::uint32 value);

  // optional int32 prof = 5;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 6;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 6;
  inline const ::ProtoBuf::CharacterDBAttrDetailInfo& attr() const;
  inline ::ProtoBuf::CharacterDBAttrDetailInfo* mutable_attr();
  inline ::ProtoBuf::CharacterDBAttrDetailInfo* release_attr();
  inline void set_allocated_attr(::ProtoBuf::CharacterDBAttrDetailInfo* attr);

  // repeated .ProtoBuf.ItemProtoInfo equip = 7;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 7;
  inline const ::ProtoBuf::ItemProtoInfo& equip(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_equip(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_equip();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDetailProtoInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_attr();
  inline void clear_has_attr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 fight_;
  ::google::protobuf::int32 prof_;
  ::ProtoBuf::CharacterDBAttrDetailInfo* attr_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > equip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDetailProtoInfo* default_instance_;
};
// -------------------------------------------------------------------

class MailAttachmentList : public ::google::protobuf::Message {
 public:
  MailAttachmentList();
  virtual ~MailAttachmentList();

  MailAttachmentList(const MailAttachmentList& from);

  inline MailAttachmentList& operator=(const MailAttachmentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailAttachmentList& default_instance();

  void Swap(MailAttachmentList* other);

  // implements Message ----------------------------------------------

  MailAttachmentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailAttachmentList& from);
  void MergeFrom(const MailAttachmentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.ItemProtoInfo itemInfo = 1;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 1;
  inline const ::ProtoBuf::ItemProtoInfo& iteminfo(int index) const;
  inline ::ProtoBuf::ItemProtoInfo* mutable_iteminfo(int index);
  inline ::ProtoBuf::ItemProtoInfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
      mutable_iteminfo();

  // @@protoc_insertion_point(class_scope:ProtoBuf.MailAttachmentList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo > iteminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static MailAttachmentList* default_instance_;
};
// -------------------------------------------------------------------

class MailHead : public ::google::protobuf::Message {
 public:
  MailHead();
  virtual ~MailHead();

  MailHead(const MailHead& from);

  inline MailHead& operator=(const MailHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailHead& default_instance();

  void Swap(MailHead* other);

  // implements Message ----------------------------------------------

  MailHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailHead& from);
  void MergeFrom(const MailHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 sendPlayerId = 3;
  inline bool has_sendplayerid() const;
  inline void clear_sendplayerid();
  static const int kSendPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sendplayerid() const;
  inline void set_sendplayerid(::google::protobuf::uint32 value);

  // optional bytes sendPlayerName = 4;
  inline bool has_sendplayername() const;
  inline void clear_sendplayername();
  static const int kSendPlayerNameFieldNumber = 4;
  inline const ::std::string& sendplayername() const;
  inline void set_sendplayername(const ::std::string& value);
  inline void set_sendplayername(const char* value);
  inline void set_sendplayername(const void* value, size_t size);
  inline ::std::string* mutable_sendplayername();
  inline ::std::string* release_sendplayername();
  inline void set_allocated_sendplayername(::std::string* sendplayername);

  // optional uint32 destPlayerId = 5;
  inline bool has_destplayerid() const;
  inline void clear_destplayerid();
  static const int kDestPlayerIdFieldNumber = 5;
  inline ::google::protobuf::uint32 destplayerid() const;
  inline void set_destplayerid(::google::protobuf::uint32 value);

  // optional bytes topic = 6;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 6;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const void* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // optional uint32 createTime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional uint32 status = 8;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 attachmentNum = 9;
  inline bool has_attachmentnum() const;
  inline void clear_attachmentnum();
  static const int kAttachmentNumFieldNumber = 9;
  inline ::google::protobuf::uint32 attachmentnum() const;
  inline void set_attachmentnum(::google::protobuf::uint32 value);

  // optional int32 fetch = 10;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 10;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.MailHead)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sendplayerid();
  inline void clear_has_sendplayerid();
  inline void set_has_sendplayername();
  inline void clear_has_sendplayername();
  inline void set_has_destplayerid();
  inline void clear_has_destplayerid();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_attachmentnum();
  inline void clear_has_attachmentnum();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 type_;
  ::std::string* sendplayername_;
  ::google::protobuf::uint32 sendplayerid_;
  ::google::protobuf::uint32 destplayerid_;
  ::std::string* topic_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 attachmentnum_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static MailHead* default_instance_;
};
// -------------------------------------------------------------------

class MailInfo : public ::google::protobuf::Message {
 public:
  MailInfo();
  virtual ~MailInfo();

  MailInfo(const MailInfo& from);

  inline MailInfo& operator=(const MailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailInfo& default_instance();

  void Swap(MailInfo* other);

  // implements Message ----------------------------------------------

  MailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailInfo& from);
  void MergeFrom(const MailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoBuf.MailHead mailHead = 1;
  inline bool has_mailhead() const;
  inline void clear_mailhead();
  static const int kMailHeadFieldNumber = 1;
  inline const ::ProtoBuf::MailHead& mailhead() const;
  inline ::ProtoBuf::MailHead* mutable_mailhead();
  inline ::ProtoBuf::MailHead* release_mailhead();
  inline void set_allocated_mailhead(::ProtoBuf::MailHead* mailhead);

  // optional bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 diamond = 4;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 4;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // optional uint32 bindGold = 5;
  inline bool has_bindgold() const;
  inline void clear_bindgold();
  static const int kBindGoldFieldNumber = 5;
  inline ::google::protobuf::uint32 bindgold() const;
  inline void set_bindgold(::google::protobuf::uint32 value);

  // optional uint32 bindDiamond = 6;
  inline bool has_binddiamond() const;
  inline void clear_binddiamond();
  static const int kBindDiamondFieldNumber = 6;
  inline ::google::protobuf::uint32 binddiamond() const;
  inline void set_binddiamond(::google::protobuf::uint32 value);

  // optional uint32 sellType = 7;
  inline bool has_selltype() const;
  inline void clear_selltype();
  static const int kSellTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 selltype() const;
  inline void set_selltype(::google::protobuf::uint32 value);

  // optional uint32 sellNum = 8;
  inline bool has_sellnum() const;
  inline void clear_sellnum();
  static const int kSellNumFieldNumber = 8;
  inline ::google::protobuf::uint32 sellnum() const;
  inline void set_sellnum(::google::protobuf::uint32 value);

  // optional .ProtoBuf.MailAttachmentList attachmentList = 9;
  inline bool has_attachmentlist() const;
  inline void clear_attachmentlist();
  static const int kAttachmentListFieldNumber = 9;
  inline const ::ProtoBuf::MailAttachmentList& attachmentlist() const;
  inline ::ProtoBuf::MailAttachmentList* mutable_attachmentlist();
  inline ::ProtoBuf::MailAttachmentList* release_attachmentlist();
  inline void set_allocated_attachmentlist(::ProtoBuf::MailAttachmentList* attachmentlist);

  // @@protoc_insertion_point(class_scope:ProtoBuf.MailInfo)
 private:
  inline void set_has_mailhead();
  inline void clear_has_mailhead();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_bindgold();
  inline void clear_has_bindgold();
  inline void set_has_binddiamond();
  inline void clear_has_binddiamond();
  inline void set_has_selltype();
  inline void clear_has_selltype();
  inline void set_has_sellnum();
  inline void clear_has_sellnum();
  inline void set_has_attachmentlist();
  inline void clear_has_attachmentlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::MailHead* mailhead_;
  ::std::string* content_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 bindgold_;
  ::google::protobuf::uint32 binddiamond_;
  ::google::protobuf::uint32 selltype_;
  ::google::protobuf::uint32 sellnum_;
  ::ProtoBuf::MailAttachmentList* attachmentlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static MailInfo* default_instance_;
};
// -------------------------------------------------------------------

class MiniMailInfo : public ::google::protobuf::Message {
 public:
  MiniMailInfo();
  virtual ~MiniMailInfo();

  MiniMailInfo(const MiniMailInfo& from);

  inline MiniMailInfo& operator=(const MiniMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiniMailInfo& default_instance();

  void Swap(MiniMailInfo* other);

  // implements Message ----------------------------------------------

  MiniMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MiniMailInfo& from);
  void MergeFrom(const MiniMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoBuf.MailHead mailHead = 1;
  inline bool has_mailhead() const;
  inline void clear_mailhead();
  static const int kMailHeadFieldNumber = 1;
  inline const ::ProtoBuf::MailHead& mailhead() const;
  inline ::ProtoBuf::MailHead* mutable_mailhead();
  inline ::ProtoBuf::MailHead* release_mailhead();
  inline void set_allocated_mailhead(::ProtoBuf::MailHead* mailhead);

  // optional uint32 sellMoney = 2;
  inline bool has_sellmoney() const;
  inline void clear_sellmoney();
  static const int kSellMoneyFieldNumber = 2;
  inline ::google::protobuf::uint32 sellmoney() const;
  inline void set_sellmoney(::google::protobuf::uint32 value);

  // optional .ProtoBuf.MailAttachmentList attachmentList = 3;
  inline bool has_attachmentlist() const;
  inline void clear_attachmentlist();
  static const int kAttachmentListFieldNumber = 3;
  inline const ::ProtoBuf::MailAttachmentList& attachmentlist() const;
  inline ::ProtoBuf::MailAttachmentList* mutable_attachmentlist();
  inline ::ProtoBuf::MailAttachmentList* release_attachmentlist();
  inline void set_allocated_attachmentlist(::ProtoBuf::MailAttachmentList* attachmentlist);

  // @@protoc_insertion_point(class_scope:ProtoBuf.MiniMailInfo)
 private:
  inline void set_has_mailhead();
  inline void clear_has_mailhead();
  inline void set_has_sellmoney();
  inline void clear_has_sellmoney();
  inline void set_has_attachmentlist();
  inline void clear_has_attachmentlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::MailHead* mailhead_;
  ::ProtoBuf::MailAttachmentList* attachmentlist_;
  ::google::protobuf::uint32 sellmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fComProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fComProtocol_2eproto();

  void InitAsDefaultInstance();
  static MiniMailInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// EmptyMessage

// -------------------------------------------------------------------

// RegisterServiceRequest

// required uint32 service_type = 1;
inline bool RegisterServiceRequest::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterServiceRequest::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterServiceRequest::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterServiceRequest::clear_service_type() {
  service_type_ = 0u;
  clear_has_service_type();
}
inline ::google::protobuf::uint32 RegisterServiceRequest::service_type() const {
  return service_type_;
}
inline void RegisterServiceRequest::set_service_type(::google::protobuf::uint32 value) {
  set_has_service_type();
  service_type_ = value;
}

// required uint32 group_id = 2;
inline bool RegisterServiceRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterServiceRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterServiceRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterServiceRequest::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 RegisterServiceRequest::group_id() const {
  return group_id_;
}
inline void RegisterServiceRequest::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
}

// required uint32 service_id = 3;
inline bool RegisterServiceRequest::has_service_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterServiceRequest::set_has_service_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterServiceRequest::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterServiceRequest::clear_service_id() {
  service_id_ = 0u;
  clear_has_service_id();
}
inline ::google::protobuf::uint32 RegisterServiceRequest::service_id() const {
  return service_id_;
}
inline void RegisterServiceRequest::set_service_id(::google::protobuf::uint32 value) {
  set_has_service_id();
  service_id_ = value;
}

// required string listen_ip = 4;
inline bool RegisterServiceRequest::has_listen_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterServiceRequest::set_has_listen_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterServiceRequest::clear_has_listen_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterServiceRequest::clear_listen_ip() {
  if (listen_ip_ != &::google::protobuf::internal::kEmptyString) {
    listen_ip_->clear();
  }
  clear_has_listen_ip();
}
inline const ::std::string& RegisterServiceRequest::listen_ip() const {
  return *listen_ip_;
}
inline void RegisterServiceRequest::set_listen_ip(const ::std::string& value) {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  listen_ip_->assign(value);
}
inline void RegisterServiceRequest::set_listen_ip(const char* value) {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  listen_ip_->assign(value);
}
inline void RegisterServiceRequest::set_listen_ip(const char* value, size_t size) {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  listen_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterServiceRequest::mutable_listen_ip() {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  return listen_ip_;
}
inline ::std::string* RegisterServiceRequest::release_listen_ip() {
  clear_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = listen_ip_;
    listen_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterServiceRequest::set_allocated_listen_ip(::std::string* listen_ip) {
  if (listen_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete listen_ip_;
  }
  if (listen_ip) {
    set_has_listen_ip();
    listen_ip_ = listen_ip;
  } else {
    clear_has_listen_ip();
    listen_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 listen_port = 5;
inline bool RegisterServiceRequest::has_listen_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterServiceRequest::set_has_listen_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterServiceRequest::clear_has_listen_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterServiceRequest::clear_listen_port() {
  listen_port_ = 0u;
  clear_has_listen_port();
}
inline ::google::protobuf::uint32 RegisterServiceRequest::listen_port() const {
  return listen_port_;
}
inline void RegisterServiceRequest::set_listen_port(::google::protobuf::uint32 value) {
  set_has_listen_port();
  listen_port_ = value;
}

// -------------------------------------------------------------------

// ValueCurrency

// required int32 coinType = 1;
inline bool ValueCurrency::has_cointype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueCurrency::set_has_cointype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueCurrency::clear_has_cointype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValueCurrency::clear_cointype() {
  cointype_ = 0;
  clear_has_cointype();
}
inline ::google::protobuf::int32 ValueCurrency::cointype() const {
  return cointype_;
}
inline void ValueCurrency::set_cointype(::google::protobuf::int32 value) {
  set_has_cointype();
  cointype_ = value;
}

// required int32 coinValue = 2;
inline bool ValueCurrency::has_coinvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueCurrency::set_has_coinvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueCurrency::clear_has_coinvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValueCurrency::clear_coinvalue() {
  coinvalue_ = 0;
  clear_has_coinvalue();
}
inline ::google::protobuf::int32 ValueCurrency::coinvalue() const {
  return coinvalue_;
}
inline void ValueCurrency::set_coinvalue(::google::protobuf::int32 value) {
  set_has_coinvalue();
  coinvalue_ = value;
}

// -------------------------------------------------------------------

// CharacterDBPvpData

// optional uint32 pk_mode = 1;
inline bool CharacterDBPvpData::has_pk_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBPvpData::set_has_pk_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBPvpData::clear_has_pk_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBPvpData::clear_pk_mode() {
  pk_mode_ = 0u;
  clear_has_pk_mode();
}
inline ::google::protobuf::uint32 CharacterDBPvpData::pk_mode() const {
  return pk_mode_;
}
inline void CharacterDBPvpData::set_pk_mode(::google::protobuf::uint32 value) {
  set_has_pk_mode();
  pk_mode_ = value;
}

// optional uint32 pk_killing_value = 2;
inline bool CharacterDBPvpData::has_pk_killing_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBPvpData::set_has_pk_killing_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBPvpData::clear_has_pk_killing_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBPvpData::clear_pk_killing_value() {
  pk_killing_value_ = 0u;
  clear_has_pk_killing_value();
}
inline ::google::protobuf::uint32 CharacterDBPvpData::pk_killing_value() const {
  return pk_killing_value_;
}
inline void CharacterDBPvpData::set_pk_killing_value(::google::protobuf::uint32 value) {
  set_has_pk_killing_value();
  pk_killing_value_ = value;
}

// -------------------------------------------------------------------

// CharacterDBBaseInfo

// required string channelId = 1;
inline bool CharacterDBBaseInfo::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBBaseInfo::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBBaseInfo::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBBaseInfo::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& CharacterDBBaseInfo::channelid() const {
  return *channelid_;
}
inline void CharacterDBBaseInfo::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterDBBaseInfo::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterDBBaseInfo::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDBBaseInfo::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* CharacterDBBaseInfo::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDBBaseInfo::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string userId = 2;
inline bool CharacterDBBaseInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBBaseInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBBaseInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBBaseInfo::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& CharacterDBBaseInfo::userid() const {
  return *userid_;
}
inline void CharacterDBBaseInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CharacterDBBaseInfo::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CharacterDBBaseInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDBBaseInfo::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* CharacterDBBaseInfo::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDBBaseInfo::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string userName = 3;
inline bool CharacterDBBaseInfo::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBBaseInfo::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBBaseInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBBaseInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& CharacterDBBaseInfo::username() const {
  return *username_;
}
inline void CharacterDBBaseInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CharacterDBBaseInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CharacterDBBaseInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDBBaseInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* CharacterDBBaseInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDBBaseInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 createTime = 4;
inline bool CharacterDBBaseInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBBaseInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBBaseInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBBaseInfo::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 CharacterDBBaseInfo::createtime() const {
  return createtime_;
}
inline void CharacterDBBaseInfo::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
}

// required uint64 lastSaveTime = 5;
inline bool CharacterDBBaseInfo::has_lastsavetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDBBaseInfo::set_has_lastsavetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDBBaseInfo::clear_has_lastsavetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDBBaseInfo::clear_lastsavetime() {
  lastsavetime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastsavetime();
}
inline ::google::protobuf::uint64 CharacterDBBaseInfo::lastsavetime() const {
  return lastsavetime_;
}
inline void CharacterDBBaseInfo::set_lastsavetime(::google::protobuf::uint64 value) {
  set_has_lastsavetime();
  lastsavetime_ = value;
}

// required uint64 onlineTime = 6;
inline bool CharacterDBBaseInfo::has_onlinetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDBBaseInfo::set_has_onlinetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDBBaseInfo::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDBBaseInfo::clear_onlinetime() {
  onlinetime_ = GOOGLE_ULONGLONG(0);
  clear_has_onlinetime();
}
inline ::google::protobuf::uint64 CharacterDBBaseInfo::onlinetime() const {
  return onlinetime_;
}
inline void CharacterDBBaseInfo::set_onlinetime(::google::protobuf::uint64 value) {
  set_has_onlinetime();
  onlinetime_ = value;
}

// required uint64 loginTime = 7;
inline bool CharacterDBBaseInfo::has_logintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterDBBaseInfo::set_has_logintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterDBBaseInfo::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterDBBaseInfo::clear_logintime() {
  logintime_ = GOOGLE_ULONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::uint64 CharacterDBBaseInfo::logintime() const {
  return logintime_;
}
inline void CharacterDBBaseInfo::set_logintime(::google::protobuf::uint64 value) {
  set_has_logintime();
  logintime_ = value;
}

// required uint64 logoutTime = 8;
inline bool CharacterDBBaseInfo::has_logouttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterDBBaseInfo::set_has_logouttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterDBBaseInfo::clear_has_logouttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterDBBaseInfo::clear_logouttime() {
  logouttime_ = GOOGLE_ULONGLONG(0);
  clear_has_logouttime();
}
inline ::google::protobuf::uint64 CharacterDBBaseInfo::logouttime() const {
  return logouttime_;
}
inline void CharacterDBBaseInfo::set_logouttime(::google::protobuf::uint64 value) {
  set_has_logouttime();
  logouttime_ = value;
}

// repeated .ProtoBuf.ValueCurrency currency = 9;
inline int CharacterDBBaseInfo::currency_size() const {
  return currency_.size();
}
inline void CharacterDBBaseInfo::clear_currency() {
  currency_.Clear();
}
inline const ::ProtoBuf::ValueCurrency& CharacterDBBaseInfo::currency(int index) const {
  return currency_.Get(index);
}
inline ::ProtoBuf::ValueCurrency* CharacterDBBaseInfo::mutable_currency(int index) {
  return currency_.Mutable(index);
}
inline ::ProtoBuf::ValueCurrency* CharacterDBBaseInfo::add_currency() {
  return currency_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ValueCurrency >&
CharacterDBBaseInfo::currency() const {
  return currency_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ValueCurrency >*
CharacterDBBaseInfo::mutable_currency() {
  return &currency_;
}

// required string name = 10;
inline bool CharacterDBBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CharacterDBBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CharacterDBBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CharacterDBBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CharacterDBBaseInfo::name() const {
  return *name_;
}
inline void CharacterDBBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharacterDBBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharacterDBBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDBBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CharacterDBBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDBBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 sex = 11;
inline bool CharacterDBBaseInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CharacterDBBaseInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CharacterDBBaseInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CharacterDBBaseInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::sex() const {
  return sex_;
}
inline void CharacterDBBaseInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// required uint32 prof = 12;
inline bool CharacterDBBaseInfo::has_prof() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CharacterDBBaseInfo::set_has_prof() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CharacterDBBaseInfo::clear_has_prof() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CharacterDBBaseInfo::clear_prof() {
  prof_ = 0u;
  clear_has_prof();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::prof() const {
  return prof_;
}
inline void CharacterDBBaseInfo::set_prof(::google::protobuf::uint32 value) {
  set_has_prof();
  prof_ = value;
}

// required uint32 level = 13;
inline bool CharacterDBBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CharacterDBBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CharacterDBBaseInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::level() const {
  return level_;
}
inline void CharacterDBBaseInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required int64 exp = 14;
inline bool CharacterDBBaseInfo::has_exp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_exp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CharacterDBBaseInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CharacterDBBaseInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 CharacterDBBaseInfo::exp() const {
  return exp_;
}
inline void CharacterDBBaseInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 hp = 15;
inline bool CharacterDBBaseInfo::has_hp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_hp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CharacterDBBaseInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CharacterDBBaseInfo::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::hp() const {
  return hp_;
}
inline void CharacterDBBaseInfo::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// required uint32 fightPower = 16;
inline bool CharacterDBBaseInfo::has_fightpower() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_fightpower() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CharacterDBBaseInfo::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CharacterDBBaseInfo::clear_fightpower() {
  fightpower_ = 0u;
  clear_has_fightpower();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::fightpower() const {
  return fightpower_;
}
inline void CharacterDBBaseInfo::set_fightpower(::google::protobuf::uint32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// required uint32 enter_scene_id = 17;
inline bool CharacterDBBaseInfo::has_enter_scene_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_enter_scene_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CharacterDBBaseInfo::clear_has_enter_scene_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CharacterDBBaseInfo::clear_enter_scene_id() {
  enter_scene_id_ = 0u;
  clear_has_enter_scene_id();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::enter_scene_id() const {
  return enter_scene_id_;
}
inline void CharacterDBBaseInfo::set_enter_scene_id(::google::protobuf::uint32 value) {
  set_has_enter_scene_id();
  enter_scene_id_ = value;
}

// required float enterPosX = 18;
inline bool CharacterDBBaseInfo::has_enterposx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_enterposx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CharacterDBBaseInfo::clear_has_enterposx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CharacterDBBaseInfo::clear_enterposx() {
  enterposx_ = 0;
  clear_has_enterposx();
}
inline float CharacterDBBaseInfo::enterposx() const {
  return enterposx_;
}
inline void CharacterDBBaseInfo::set_enterposx(float value) {
  set_has_enterposx();
  enterposx_ = value;
}

// required float enterPosY = 19;
inline bool CharacterDBBaseInfo::has_enterposy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_enterposy() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CharacterDBBaseInfo::clear_has_enterposy() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CharacterDBBaseInfo::clear_enterposy() {
  enterposy_ = 0;
  clear_has_enterposy();
}
inline float CharacterDBBaseInfo::enterposy() const {
  return enterposy_;
}
inline void CharacterDBBaseInfo::set_enterposy(float value) {
  set_has_enterposy();
  enterposy_ = value;
}

// required float enterPosZ = 20;
inline bool CharacterDBBaseInfo::has_enterposz() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_enterposz() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CharacterDBBaseInfo::clear_has_enterposz() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CharacterDBBaseInfo::clear_enterposz() {
  enterposz_ = 0;
  clear_has_enterposz();
}
inline float CharacterDBBaseInfo::enterposz() const {
  return enterposz_;
}
inline void CharacterDBBaseInfo::set_enterposz(float value) {
  set_has_enterposz();
  enterposz_ = value;
}

// required uint32 race = 21;
inline bool CharacterDBBaseInfo::has_race() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_race() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CharacterDBBaseInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CharacterDBBaseInfo::clear_race() {
  race_ = 0u;
  clear_has_race();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::race() const {
  return race_;
}
inline void CharacterDBBaseInfo::set_race(::google::protobuf::uint32 value) {
  set_has_race();
  race_ = value;
}

// required uint32 enter_map_id = 22;
inline bool CharacterDBBaseInfo::has_enter_map_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_enter_map_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CharacterDBBaseInfo::clear_has_enter_map_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CharacterDBBaseInfo::clear_enter_map_id() {
  enter_map_id_ = 0u;
  clear_has_enter_map_id();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::enter_map_id() const {
  return enter_map_id_;
}
inline void CharacterDBBaseInfo::set_enter_map_id(::google::protobuf::uint32 value) {
  set_has_enter_map_id();
  enter_map_id_ = value;
}

// optional uint64 lastReviveTime = 23;
inline bool CharacterDBBaseInfo::has_lastrevivetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_lastrevivetime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CharacterDBBaseInfo::clear_has_lastrevivetime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CharacterDBBaseInfo::clear_lastrevivetime() {
  lastrevivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastrevivetime();
}
inline ::google::protobuf::uint64 CharacterDBBaseInfo::lastrevivetime() const {
  return lastrevivetime_;
}
inline void CharacterDBBaseInfo::set_lastrevivetime(::google::protobuf::uint64 value) {
  set_has_lastrevivetime();
  lastrevivetime_ = value;
}

// optional uint32 curState = 24;
inline bool CharacterDBBaseInfo::has_curstate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_curstate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CharacterDBBaseInfo::clear_has_curstate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CharacterDBBaseInfo::clear_curstate() {
  curstate_ = 0u;
  clear_has_curstate();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::curstate() const {
  return curstate_;
}
inline void CharacterDBBaseInfo::set_curstate(::google::protobuf::uint32 value) {
  set_has_curstate();
  curstate_ = value;
}

// optional uint32 lastSceneId = 25;
inline bool CharacterDBBaseInfo::has_lastsceneid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_lastsceneid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CharacterDBBaseInfo::clear_has_lastsceneid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CharacterDBBaseInfo::clear_lastsceneid() {
  lastsceneid_ = 0u;
  clear_has_lastsceneid();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::lastsceneid() const {
  return lastsceneid_;
}
inline void CharacterDBBaseInfo::set_lastsceneid(::google::protobuf::uint32 value) {
  set_has_lastsceneid();
  lastsceneid_ = value;
}

// optional uint32 lastMapId = 26;
inline bool CharacterDBBaseInfo::has_lastmapid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_lastmapid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CharacterDBBaseInfo::clear_has_lastmapid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CharacterDBBaseInfo::clear_lastmapid() {
  lastmapid_ = 0u;
  clear_has_lastmapid();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::lastmapid() const {
  return lastmapid_;
}
inline void CharacterDBBaseInfo::set_lastmapid(::google::protobuf::uint32 value) {
  set_has_lastmapid();
  lastmapid_ = value;
}

// optional float lastPosX = 27;
inline bool CharacterDBBaseInfo::has_lastposx() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_lastposx() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CharacterDBBaseInfo::clear_has_lastposx() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CharacterDBBaseInfo::clear_lastposx() {
  lastposx_ = 0;
  clear_has_lastposx();
}
inline float CharacterDBBaseInfo::lastposx() const {
  return lastposx_;
}
inline void CharacterDBBaseInfo::set_lastposx(float value) {
  set_has_lastposx();
  lastposx_ = value;
}

// optional float lastPosY = 28;
inline bool CharacterDBBaseInfo::has_lastposy() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_lastposy() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CharacterDBBaseInfo::clear_has_lastposy() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CharacterDBBaseInfo::clear_lastposy() {
  lastposy_ = 0;
  clear_has_lastposy();
}
inline float CharacterDBBaseInfo::lastposy() const {
  return lastposy_;
}
inline void CharacterDBBaseInfo::set_lastposy(float value) {
  set_has_lastposy();
  lastposy_ = value;
}

// optional float lastPosZ = 29;
inline bool CharacterDBBaseInfo::has_lastposz() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_lastposz() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CharacterDBBaseInfo::clear_has_lastposz() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CharacterDBBaseInfo::clear_lastposz() {
  lastposz_ = 0;
  clear_has_lastposz();
}
inline float CharacterDBBaseInfo::lastposz() const {
  return lastposz_;
}
inline void CharacterDBBaseInfo::set_lastposz(float value) {
  set_has_lastposz();
  lastposz_ = value;
}

// optional uint32 gold = 30;
inline bool CharacterDBBaseInfo::has_gold() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_gold() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CharacterDBBaseInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CharacterDBBaseInfo::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::gold() const {
  return gold_;
}
inline void CharacterDBBaseInfo::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 bindgold = 31;
inline bool CharacterDBBaseInfo::has_bindgold() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_bindgold() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CharacterDBBaseInfo::clear_has_bindgold() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CharacterDBBaseInfo::clear_bindgold() {
  bindgold_ = 0u;
  clear_has_bindgold();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::bindgold() const {
  return bindgold_;
}
inline void CharacterDBBaseInfo::set_bindgold(::google::protobuf::uint32 value) {
  set_has_bindgold();
  bindgold_ = value;
}

// optional uint32 diamond = 32;
inline bool CharacterDBBaseInfo::has_diamond() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_diamond() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CharacterDBBaseInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CharacterDBBaseInfo::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::diamond() const {
  return diamond_;
}
inline void CharacterDBBaseInfo::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional uint32 binddiamond = 33;
inline bool CharacterDBBaseInfo::has_binddiamond() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CharacterDBBaseInfo::set_has_binddiamond() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CharacterDBBaseInfo::clear_has_binddiamond() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CharacterDBBaseInfo::clear_binddiamond() {
  binddiamond_ = 0u;
  clear_has_binddiamond();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::binddiamond() const {
  return binddiamond_;
}
inline void CharacterDBBaseInfo::set_binddiamond(::google::protobuf::uint32 value) {
  set_has_binddiamond();
  binddiamond_ = value;
}

// optional uint32 power = 34;
inline bool CharacterDBBaseInfo::has_power() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CharacterDBBaseInfo::set_has_power() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CharacterDBBaseInfo::clear_has_power() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CharacterDBBaseInfo::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::power() const {
  return power_;
}
inline void CharacterDBBaseInfo::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// optional uint32 intelligence = 35;
inline bool CharacterDBBaseInfo::has_intelligence() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CharacterDBBaseInfo::set_has_intelligence() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CharacterDBBaseInfo::clear_has_intelligence() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CharacterDBBaseInfo::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::intelligence() const {
  return intelligence_;
}
inline void CharacterDBBaseInfo::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
}

// optional uint32 agility = 36;
inline bool CharacterDBBaseInfo::has_agility() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CharacterDBBaseInfo::set_has_agility() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CharacterDBBaseInfo::clear_has_agility() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CharacterDBBaseInfo::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::agility() const {
  return agility_;
}
inline void CharacterDBBaseInfo::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
}

// optional uint32 physique = 37;
inline bool CharacterDBBaseInfo::has_physique() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CharacterDBBaseInfo::set_has_physique() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CharacterDBBaseInfo::clear_has_physique() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CharacterDBBaseInfo::clear_physique() {
  physique_ = 0u;
  clear_has_physique();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::physique() const {
  return physique_;
}
inline void CharacterDBBaseInfo::set_physique(::google::protobuf::uint32 value) {
  set_has_physique();
  physique_ = value;
}

// optional uint32 endurance = 38;
inline bool CharacterDBBaseInfo::has_endurance() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CharacterDBBaseInfo::set_has_endurance() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CharacterDBBaseInfo::clear_has_endurance() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CharacterDBBaseInfo::clear_endurance() {
  endurance_ = 0u;
  clear_has_endurance();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::endurance() const {
  return endurance_;
}
inline void CharacterDBBaseInfo::set_endurance(::google::protobuf::uint32 value) {
  set_has_endurance();
  endurance_ = value;
}

// optional uint32 precision = 39;
inline bool CharacterDBBaseInfo::has_precision() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CharacterDBBaseInfo::set_has_precision() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CharacterDBBaseInfo::clear_has_precision() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CharacterDBBaseInfo::clear_precision() {
  precision_ = 0u;
  clear_has_precision();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::precision() const {
  return precision_;
}
inline void CharacterDBBaseInfo::set_precision(::google::protobuf::uint32 value) {
  set_has_precision();
  precision_ = value;
}

// optional uint32 mp = 40;
inline bool CharacterDBBaseInfo::has_mp() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CharacterDBBaseInfo::set_has_mp() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CharacterDBBaseInfo::clear_has_mp() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CharacterDBBaseInfo::clear_mp() {
  mp_ = 0u;
  clear_has_mp();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::mp() const {
  return mp_;
}
inline void CharacterDBBaseInfo::set_mp(::google::protobuf::uint32 value) {
  set_has_mp();
  mp_ = value;
}

// optional uint32 vip = 41;
inline bool CharacterDBBaseInfo::has_vip() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CharacterDBBaseInfo::set_has_vip() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CharacterDBBaseInfo::clear_has_vip() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CharacterDBBaseInfo::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::vip() const {
  return vip_;
}
inline void CharacterDBBaseInfo::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// optional uint32 camp = 42;
inline bool CharacterDBBaseInfo::has_camp() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CharacterDBBaseInfo::set_has_camp() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CharacterDBBaseInfo::clear_has_camp() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CharacterDBBaseInfo::clear_camp() {
  camp_ = 0u;
  clear_has_camp();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::camp() const {
  return camp_;
}
inline void CharacterDBBaseInfo::set_camp(::google::protobuf::uint32 value) {
  set_has_camp();
  camp_ = value;
}

// optional uint32 camplev = 43;
inline bool CharacterDBBaseInfo::has_camplev() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CharacterDBBaseInfo::set_has_camplev() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CharacterDBBaseInfo::clear_has_camplev() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CharacterDBBaseInfo::clear_camplev() {
  camplev_ = 0u;
  clear_has_camplev();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::camplev() const {
  return camplev_;
}
inline void CharacterDBBaseInfo::set_camplev(::google::protobuf::uint32 value) {
  set_has_camplev();
  camplev_ = value;
}

// optional uint32 married = 44;
inline bool CharacterDBBaseInfo::has_married() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CharacterDBBaseInfo::set_has_married() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CharacterDBBaseInfo::clear_has_married() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CharacterDBBaseInfo::clear_married() {
  married_ = 0u;
  clear_has_married();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::married() const {
  return married_;
}
inline void CharacterDBBaseInfo::set_married(::google::protobuf::uint32 value) {
  set_has_married();
  married_ = value;
}

// optional uint32 campkilling = 45;
inline bool CharacterDBBaseInfo::has_campkilling() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_campkilling() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CharacterDBBaseInfo::clear_has_campkilling() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CharacterDBBaseInfo::clear_campkilling() {
  campkilling_ = 0u;
  clear_has_campkilling();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::campkilling() const {
  return campkilling_;
}
inline void CharacterDBBaseInfo::set_campkilling(::google::protobuf::uint32 value) {
  set_has_campkilling();
  campkilling_ = value;
}

// optional uint32 hostilekilling = 46;
inline bool CharacterDBBaseInfo::has_hostilekilling() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_hostilekilling() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CharacterDBBaseInfo::clear_has_hostilekilling() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CharacterDBBaseInfo::clear_hostilekilling() {
  hostilekilling_ = 0u;
  clear_has_hostilekilling();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::hostilekilling() const {
  return hostilekilling_;
}
inline void CharacterDBBaseInfo::set_hostilekilling(::google::protobuf::uint32 value) {
  set_has_hostilekilling();
  hostilekilling_ = value;
}

// optional uint32 stamina = 47;
inline bool CharacterDBBaseInfo::has_stamina() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_stamina() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CharacterDBBaseInfo::clear_has_stamina() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CharacterDBBaseInfo::clear_stamina() {
  stamina_ = 0u;
  clear_has_stamina();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::stamina() const {
  return stamina_;
}
inline void CharacterDBBaseInfo::set_stamina(::google::protobuf::uint32 value) {
  set_has_stamina();
  stamina_ = value;
}

// optional uint32 attr_point = 48;
inline bool CharacterDBBaseInfo::has_attr_point() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_attr_point() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CharacterDBBaseInfo::clear_has_attr_point() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CharacterDBBaseInfo::clear_attr_point() {
  attr_point_ = 0u;
  clear_has_attr_point();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::attr_point() const {
  return attr_point_;
}
inline void CharacterDBBaseInfo::set_attr_point(::google::protobuf::uint32 value) {
  set_has_attr_point();
  attr_point_ = value;
}

// optional uint32 pointPower = 49;
inline bool CharacterDBBaseInfo::has_pointpower() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_pointpower() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CharacterDBBaseInfo::clear_has_pointpower() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CharacterDBBaseInfo::clear_pointpower() {
  pointpower_ = 0u;
  clear_has_pointpower();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::pointpower() const {
  return pointpower_;
}
inline void CharacterDBBaseInfo::set_pointpower(::google::protobuf::uint32 value) {
  set_has_pointpower();
  pointpower_ = value;
}

// optional uint32 pointIntelligence = 50;
inline bool CharacterDBBaseInfo::has_pointintelligence() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_pointintelligence() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CharacterDBBaseInfo::clear_has_pointintelligence() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CharacterDBBaseInfo::clear_pointintelligence() {
  pointintelligence_ = 0u;
  clear_has_pointintelligence();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::pointintelligence() const {
  return pointintelligence_;
}
inline void CharacterDBBaseInfo::set_pointintelligence(::google::protobuf::uint32 value) {
  set_has_pointintelligence();
  pointintelligence_ = value;
}

// optional uint32 pointAgility = 51;
inline bool CharacterDBBaseInfo::has_pointagility() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_pointagility() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CharacterDBBaseInfo::clear_has_pointagility() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CharacterDBBaseInfo::clear_pointagility() {
  pointagility_ = 0u;
  clear_has_pointagility();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::pointagility() const {
  return pointagility_;
}
inline void CharacterDBBaseInfo::set_pointagility(::google::protobuf::uint32 value) {
  set_has_pointagility();
  pointagility_ = value;
}

// optional uint32 pointPhysique = 52;
inline bool CharacterDBBaseInfo::has_pointphysique() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_pointphysique() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CharacterDBBaseInfo::clear_has_pointphysique() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CharacterDBBaseInfo::clear_pointphysique() {
  pointphysique_ = 0u;
  clear_has_pointphysique();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::pointphysique() const {
  return pointphysique_;
}
inline void CharacterDBBaseInfo::set_pointphysique(::google::protobuf::uint32 value) {
  set_has_pointphysique();
  pointphysique_ = value;
}

// optional uint32 pointEndurance = 53;
inline bool CharacterDBBaseInfo::has_pointendurance() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_pointendurance() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CharacterDBBaseInfo::clear_has_pointendurance() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CharacterDBBaseInfo::clear_pointendurance() {
  pointendurance_ = 0u;
  clear_has_pointendurance();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::pointendurance() const {
  return pointendurance_;
}
inline void CharacterDBBaseInfo::set_pointendurance(::google::protobuf::uint32 value) {
  set_has_pointendurance();
  pointendurance_ = value;
}

// optional uint32 pointPrecision = 54;
inline bool CharacterDBBaseInfo::has_pointprecision() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_pointprecision() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CharacterDBBaseInfo::clear_has_pointprecision() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CharacterDBBaseInfo::clear_pointprecision() {
  pointprecision_ = 0u;
  clear_has_pointprecision();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::pointprecision() const {
  return pointprecision_;
}
inline void CharacterDBBaseInfo::set_pointprecision(::google::protobuf::uint32 value) {
  set_has_pointprecision();
  pointprecision_ = value;
}

// optional uint32 autoPower = 55;
inline bool CharacterDBBaseInfo::has_autopower() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_autopower() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CharacterDBBaseInfo::clear_has_autopower() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CharacterDBBaseInfo::clear_autopower() {
  autopower_ = 0u;
  clear_has_autopower();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::autopower() const {
  return autopower_;
}
inline void CharacterDBBaseInfo::set_autopower(::google::protobuf::uint32 value) {
  set_has_autopower();
  autopower_ = value;
}

// optional uint32 autoIntelligence = 56;
inline bool CharacterDBBaseInfo::has_autointelligence() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_autointelligence() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CharacterDBBaseInfo::clear_has_autointelligence() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CharacterDBBaseInfo::clear_autointelligence() {
  autointelligence_ = 0u;
  clear_has_autointelligence();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::autointelligence() const {
  return autointelligence_;
}
inline void CharacterDBBaseInfo::set_autointelligence(::google::protobuf::uint32 value) {
  set_has_autointelligence();
  autointelligence_ = value;
}

// optional uint32 autoAgility = 57;
inline bool CharacterDBBaseInfo::has_autoagility() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_autoagility() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CharacterDBBaseInfo::clear_has_autoagility() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CharacterDBBaseInfo::clear_autoagility() {
  autoagility_ = 0u;
  clear_has_autoagility();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::autoagility() const {
  return autoagility_;
}
inline void CharacterDBBaseInfo::set_autoagility(::google::protobuf::uint32 value) {
  set_has_autoagility();
  autoagility_ = value;
}

// optional uint32 autoPhysique = 58;
inline bool CharacterDBBaseInfo::has_autophysique() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_autophysique() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CharacterDBBaseInfo::clear_has_autophysique() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CharacterDBBaseInfo::clear_autophysique() {
  autophysique_ = 0u;
  clear_has_autophysique();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::autophysique() const {
  return autophysique_;
}
inline void CharacterDBBaseInfo::set_autophysique(::google::protobuf::uint32 value) {
  set_has_autophysique();
  autophysique_ = value;
}

// optional uint32 autoEndurance = 59;
inline bool CharacterDBBaseInfo::has_autoendurance() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_autoendurance() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CharacterDBBaseInfo::clear_has_autoendurance() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CharacterDBBaseInfo::clear_autoendurance() {
  autoendurance_ = 0u;
  clear_has_autoendurance();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::autoendurance() const {
  return autoendurance_;
}
inline void CharacterDBBaseInfo::set_autoendurance(::google::protobuf::uint32 value) {
  set_has_autoendurance();
  autoendurance_ = value;
}

// optional uint32 autoPrecision = 60;
inline bool CharacterDBBaseInfo::has_autoprecision() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_autoprecision() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CharacterDBBaseInfo::clear_has_autoprecision() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CharacterDBBaseInfo::clear_autoprecision() {
  autoprecision_ = 0u;
  clear_has_autoprecision();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::autoprecision() const {
  return autoprecision_;
}
inline void CharacterDBBaseInfo::set_autoprecision(::google::protobuf::uint32 value) {
  set_has_autoprecision();
  autoprecision_ = value;
}

// optional uint32 autoPoint = 61;
inline bool CharacterDBBaseInfo::has_autopoint() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_autopoint() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CharacterDBBaseInfo::clear_has_autopoint() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CharacterDBBaseInfo::clear_autopoint() {
  autopoint_ = 0u;
  clear_has_autopoint();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::autopoint() const {
  return autopoint_;
}
inline void CharacterDBBaseInfo::set_autopoint(::google::protobuf::uint32 value) {
  set_has_autopoint();
  autopoint_ = value;
}

// optional uint32 duplicate_id = 62;
inline bool CharacterDBBaseInfo::has_duplicate_id() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_duplicate_id() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CharacterDBBaseInfo::clear_has_duplicate_id() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CharacterDBBaseInfo::clear_duplicate_id() {
  duplicate_id_ = 0u;
  clear_has_duplicate_id();
}
inline ::google::protobuf::uint32 CharacterDBBaseInfo::duplicate_id() const {
  return duplicate_id_;
}
inline void CharacterDBBaseInfo::set_duplicate_id(::google::protobuf::uint32 value) {
  set_has_duplicate_id();
  duplicate_id_ = value;
}

// optional int32 official = 63;
inline bool CharacterDBBaseInfo::has_official() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_official() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CharacterDBBaseInfo::clear_has_official() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CharacterDBBaseInfo::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 CharacterDBBaseInfo::official() const {
  return official_;
}
inline void CharacterDBBaseInfo::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
}

// optional int32 knight = 64;
inline bool CharacterDBBaseInfo::has_knight() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CharacterDBBaseInfo::set_has_knight() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CharacterDBBaseInfo::clear_has_knight() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CharacterDBBaseInfo::clear_knight() {
  knight_ = 0;
  clear_has_knight();
}
inline ::google::protobuf::int32 CharacterDBBaseInfo::knight() const {
  return knight_;
}
inline void CharacterDBBaseInfo::set_knight(::google::protobuf::int32 value) {
  set_has_knight();
  knight_ = value;
}

// optional .ProtoBuf.CharacterDBPvpData pvpData = 65;
inline bool CharacterDBBaseInfo::has_pvpdata() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CharacterDBBaseInfo::set_has_pvpdata() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CharacterDBBaseInfo::clear_has_pvpdata() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CharacterDBBaseInfo::clear_pvpdata() {
  if (pvpdata_ != NULL) pvpdata_->::ProtoBuf::CharacterDBPvpData::Clear();
  clear_has_pvpdata();
}
inline const ::ProtoBuf::CharacterDBPvpData& CharacterDBBaseInfo::pvpdata() const {
  return pvpdata_ != NULL ? *pvpdata_ : *default_instance_->pvpdata_;
}
inline ::ProtoBuf::CharacterDBPvpData* CharacterDBBaseInfo::mutable_pvpdata() {
  set_has_pvpdata();
  if (pvpdata_ == NULL) pvpdata_ = new ::ProtoBuf::CharacterDBPvpData;
  return pvpdata_;
}
inline ::ProtoBuf::CharacterDBPvpData* CharacterDBBaseInfo::release_pvpdata() {
  clear_has_pvpdata();
  ::ProtoBuf::CharacterDBPvpData* temp = pvpdata_;
  pvpdata_ = NULL;
  return temp;
}
inline void CharacterDBBaseInfo::set_allocated_pvpdata(::ProtoBuf::CharacterDBPvpData* pvpdata) {
  delete pvpdata_;
  pvpdata_ = pvpdata;
  if (pvpdata) {
    set_has_pvpdata();
  } else {
    clear_has_pvpdata();
  }
}

// -------------------------------------------------------------------

// CharacterDBTaskData

// repeated .ProtoBuf.CharacterDBEffPreCondition effPreCondition = 1;
inline int CharacterDBTaskData::effprecondition_size() const {
  return effprecondition_.size();
}
inline void CharacterDBTaskData::clear_effprecondition() {
  effprecondition_.Clear();
}
inline const ::ProtoBuf::CharacterDBEffPreCondition& CharacterDBTaskData::effprecondition(int index) const {
  return effprecondition_.Get(index);
}
inline ::ProtoBuf::CharacterDBEffPreCondition* CharacterDBTaskData::mutable_effprecondition(int index) {
  return effprecondition_.Mutable(index);
}
inline ::ProtoBuf::CharacterDBEffPreCondition* CharacterDBTaskData::add_effprecondition() {
  return effprecondition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBEffPreCondition >&
CharacterDBTaskData::effprecondition() const {
  return effprecondition_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBEffPreCondition >*
CharacterDBTaskData::mutable_effprecondition() {
  return &effprecondition_;
}

// repeated .ProtoBuf.CharacterDBSubmittedMission submitMission = 2;
inline int CharacterDBTaskData::submitmission_size() const {
  return submitmission_.size();
}
inline void CharacterDBTaskData::clear_submitmission() {
  submitmission_.Clear();
}
inline const ::ProtoBuf::CharacterDBSubmittedMission& CharacterDBTaskData::submitmission(int index) const {
  return submitmission_.Get(index);
}
inline ::ProtoBuf::CharacterDBSubmittedMission* CharacterDBTaskData::mutable_submitmission(int index) {
  return submitmission_.Mutable(index);
}
inline ::ProtoBuf::CharacterDBSubmittedMission* CharacterDBTaskData::add_submitmission() {
  return submitmission_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSubmittedMission >&
CharacterDBTaskData::submitmission() const {
  return submitmission_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSubmittedMission >*
CharacterDBTaskData::mutable_submitmission() {
  return &submitmission_;
}

// repeated .ProtoBuf.CharacterDBWithoutPreComplete withoutPreComplete = 3;
inline int CharacterDBTaskData::withoutprecomplete_size() const {
  return withoutprecomplete_.size();
}
inline void CharacterDBTaskData::clear_withoutprecomplete() {
  withoutprecomplete_.Clear();
}
inline const ::ProtoBuf::CharacterDBWithoutPreComplete& CharacterDBTaskData::withoutprecomplete(int index) const {
  return withoutprecomplete_.Get(index);
}
inline ::ProtoBuf::CharacterDBWithoutPreComplete* CharacterDBTaskData::mutable_withoutprecomplete(int index) {
  return withoutprecomplete_.Mutable(index);
}
inline ::ProtoBuf::CharacterDBWithoutPreComplete* CharacterDBTaskData::add_withoutprecomplete() {
  return withoutprecomplete_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBWithoutPreComplete >&
CharacterDBTaskData::withoutprecomplete() const {
  return withoutprecomplete_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBWithoutPreComplete >*
CharacterDBTaskData::mutable_withoutprecomplete() {
  return &withoutprecomplete_;
}

// repeated .ProtoBuf.CharacterDBMissionTrack missionTrack = 4;
inline int CharacterDBTaskData::missiontrack_size() const {
  return missiontrack_.size();
}
inline void CharacterDBTaskData::clear_missiontrack() {
  missiontrack_.Clear();
}
inline const ::ProtoBuf::CharacterDBMissionTrack& CharacterDBTaskData::missiontrack(int index) const {
  return missiontrack_.Get(index);
}
inline ::ProtoBuf::CharacterDBMissionTrack* CharacterDBTaskData::mutable_missiontrack(int index) {
  return missiontrack_.Mutable(index);
}
inline ::ProtoBuf::CharacterDBMissionTrack* CharacterDBTaskData::add_missiontrack() {
  return missiontrack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBMissionTrack >&
CharacterDBTaskData::missiontrack() const {
  return missiontrack_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBMissionTrack >*
CharacterDBTaskData::mutable_missiontrack() {
  return &missiontrack_;
}

// repeated uint32 assignList = 5;
inline int CharacterDBTaskData::assignlist_size() const {
  return assignlist_.size();
}
inline void CharacterDBTaskData::clear_assignlist() {
  assignlist_.Clear();
}
inline ::google::protobuf::uint32 CharacterDBTaskData::assignlist(int index) const {
  return assignlist_.Get(index);
}
inline void CharacterDBTaskData::set_assignlist(int index, ::google::protobuf::uint32 value) {
  assignlist_.Set(index, value);
}
inline void CharacterDBTaskData::add_assignlist(::google::protobuf::uint32 value) {
  assignlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CharacterDBTaskData::assignlist() const {
  return assignlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CharacterDBTaskData::mutable_assignlist() {
  return &assignlist_;
}

// optional .ProtoBuf.CharacterDBCampMissionInfo campMissionInfo = 6;
inline bool CharacterDBTaskData::has_campmissioninfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDBTaskData::set_has_campmissioninfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDBTaskData::clear_has_campmissioninfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDBTaskData::clear_campmissioninfo() {
  if (campmissioninfo_ != NULL) campmissioninfo_->::ProtoBuf::CharacterDBCampMissionInfo::Clear();
  clear_has_campmissioninfo();
}
inline const ::ProtoBuf::CharacterDBCampMissionInfo& CharacterDBTaskData::campmissioninfo() const {
  return campmissioninfo_ != NULL ? *campmissioninfo_ : *default_instance_->campmissioninfo_;
}
inline ::ProtoBuf::CharacterDBCampMissionInfo* CharacterDBTaskData::mutable_campmissioninfo() {
  set_has_campmissioninfo();
  if (campmissioninfo_ == NULL) campmissioninfo_ = new ::ProtoBuf::CharacterDBCampMissionInfo;
  return campmissioninfo_;
}
inline ::ProtoBuf::CharacterDBCampMissionInfo* CharacterDBTaskData::release_campmissioninfo() {
  clear_has_campmissioninfo();
  ::ProtoBuf::CharacterDBCampMissionInfo* temp = campmissioninfo_;
  campmissioninfo_ = NULL;
  return temp;
}
inline void CharacterDBTaskData::set_allocated_campmissioninfo(::ProtoBuf::CharacterDBCampMissionInfo* campmissioninfo) {
  delete campmissioninfo_;
  campmissioninfo_ = campmissioninfo;
  if (campmissioninfo) {
    set_has_campmissioninfo();
  } else {
    clear_has_campmissioninfo();
  }
}

// optional .ProtoBuf.CharacterDBLoopMissionInfo loopMissionInfo = 7;
inline bool CharacterDBTaskData::has_loopmissioninfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterDBTaskData::set_has_loopmissioninfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterDBTaskData::clear_has_loopmissioninfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterDBTaskData::clear_loopmissioninfo() {
  if (loopmissioninfo_ != NULL) loopmissioninfo_->::ProtoBuf::CharacterDBLoopMissionInfo::Clear();
  clear_has_loopmissioninfo();
}
inline const ::ProtoBuf::CharacterDBLoopMissionInfo& CharacterDBTaskData::loopmissioninfo() const {
  return loopmissioninfo_ != NULL ? *loopmissioninfo_ : *default_instance_->loopmissioninfo_;
}
inline ::ProtoBuf::CharacterDBLoopMissionInfo* CharacterDBTaskData::mutable_loopmissioninfo() {
  set_has_loopmissioninfo();
  if (loopmissioninfo_ == NULL) loopmissioninfo_ = new ::ProtoBuf::CharacterDBLoopMissionInfo;
  return loopmissioninfo_;
}
inline ::ProtoBuf::CharacterDBLoopMissionInfo* CharacterDBTaskData::release_loopmissioninfo() {
  clear_has_loopmissioninfo();
  ::ProtoBuf::CharacterDBLoopMissionInfo* temp = loopmissioninfo_;
  loopmissioninfo_ = NULL;
  return temp;
}
inline void CharacterDBTaskData::set_allocated_loopmissioninfo(::ProtoBuf::CharacterDBLoopMissionInfo* loopmissioninfo) {
  delete loopmissioninfo_;
  loopmissioninfo_ = loopmissioninfo;
  if (loopmissioninfo) {
    set_has_loopmissioninfo();
  } else {
    clear_has_loopmissioninfo();
  }
}

// -------------------------------------------------------------------

// CharacterDBEffPreCondition

// optional uint32 missionId = 1;
inline bool CharacterDBEffPreCondition::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBEffPreCondition::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBEffPreCondition::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBEffPreCondition::clear_missionid() {
  missionid_ = 0u;
  clear_has_missionid();
}
inline ::google::protobuf::uint32 CharacterDBEffPreCondition::missionid() const {
  return missionid_;
}
inline void CharacterDBEffPreCondition::set_missionid(::google::protobuf::uint32 value) {
  set_has_missionid();
  missionid_ = value;
}

// optional uint32 time = 2;
inline bool CharacterDBEffPreCondition::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBEffPreCondition::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBEffPreCondition::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBEffPreCondition::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CharacterDBEffPreCondition::time() const {
  return time_;
}
inline void CharacterDBEffPreCondition::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CharacterDBSubmittedMission

// optional uint32 missionId = 1;
inline bool CharacterDBSubmittedMission::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBSubmittedMission::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBSubmittedMission::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBSubmittedMission::clear_missionid() {
  missionid_ = 0u;
  clear_has_missionid();
}
inline ::google::protobuf::uint32 CharacterDBSubmittedMission::missionid() const {
  return missionid_;
}
inline void CharacterDBSubmittedMission::set_missionid(::google::protobuf::uint32 value) {
  set_has_missionid();
  missionid_ = value;
}

// optional uint32 times = 2;
inline bool CharacterDBSubmittedMission::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBSubmittedMission::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBSubmittedMission::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBSubmittedMission::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 CharacterDBSubmittedMission::times() const {
  return times_;
}
inline void CharacterDBSubmittedMission::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// CharacterDBWithoutPreComplete

// optional uint32 missionId = 1;
inline bool CharacterDBWithoutPreComplete::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBWithoutPreComplete::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBWithoutPreComplete::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBWithoutPreComplete::clear_missionid() {
  missionid_ = 0u;
  clear_has_missionid();
}
inline ::google::protobuf::uint32 CharacterDBWithoutPreComplete::missionid() const {
  return missionid_;
}
inline void CharacterDBWithoutPreComplete::set_missionid(::google::protobuf::uint32 value) {
  set_has_missionid();
  missionid_ = value;
}

// optional uint32 finishYearDay = 2;
inline bool CharacterDBWithoutPreComplete::has_finishyearday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBWithoutPreComplete::set_has_finishyearday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBWithoutPreComplete::clear_has_finishyearday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBWithoutPreComplete::clear_finishyearday() {
  finishyearday_ = 0u;
  clear_has_finishyearday();
}
inline ::google::protobuf::uint32 CharacterDBWithoutPreComplete::finishyearday() const {
  return finishyearday_;
}
inline void CharacterDBWithoutPreComplete::set_finishyearday(::google::protobuf::uint32 value) {
  set_has_finishyearday();
  finishyearday_ = value;
}

// optional uint32 count = 3;
inline bool CharacterDBWithoutPreComplete::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBWithoutPreComplete::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBWithoutPreComplete::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBWithoutPreComplete::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CharacterDBWithoutPreComplete::count() const {
  return count_;
}
inline void CharacterDBWithoutPreComplete::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional bool acceptable = 4;
inline bool CharacterDBWithoutPreComplete::has_acceptable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBWithoutPreComplete::set_has_acceptable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBWithoutPreComplete::clear_has_acceptable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBWithoutPreComplete::clear_acceptable() {
  acceptable_ = false;
  clear_has_acceptable();
}
inline bool CharacterDBWithoutPreComplete::acceptable() const {
  return acceptable_;
}
inline void CharacterDBWithoutPreComplete::set_acceptable(bool value) {
  set_has_acceptable();
  acceptable_ = value;
}

// -------------------------------------------------------------------

// CharacterDBMissionItemInfo

// optional uint32 type = 1;
inline bool CharacterDBMissionItemInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBMissionItemInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBMissionItemInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CharacterDBMissionItemInfo::type() const {
  return type_;
}
inline void CharacterDBMissionItemInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 id = 2;
inline bool CharacterDBMissionItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBMissionItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBMissionItemInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CharacterDBMissionItemInfo::id() const {
  return id_;
}
inline void CharacterDBMissionItemInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 currentValue = 3;
inline bool CharacterDBMissionItemInfo::has_currentvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_currentvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBMissionItemInfo::clear_has_currentvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBMissionItemInfo::clear_currentvalue() {
  currentvalue_ = 0u;
  clear_has_currentvalue();
}
inline ::google::protobuf::uint32 CharacterDBMissionItemInfo::currentvalue() const {
  return currentvalue_;
}
inline void CharacterDBMissionItemInfo::set_currentvalue(::google::protobuf::uint32 value) {
  set_has_currentvalue();
  currentvalue_ = value;
}

// optional uint32 finalValue = 4;
inline bool CharacterDBMissionItemInfo::has_finalvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_finalvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBMissionItemInfo::clear_has_finalvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBMissionItemInfo::clear_finalvalue() {
  finalvalue_ = 0u;
  clear_has_finalvalue();
}
inline ::google::protobuf::uint32 CharacterDBMissionItemInfo::finalvalue() const {
  return finalvalue_;
}
inline void CharacterDBMissionItemInfo::set_finalvalue(::google::protobuf::uint32 value) {
  set_has_finalvalue();
  finalvalue_ = value;
}

// optional bool completedFlag = 5;
inline bool CharacterDBMissionItemInfo::has_completedflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_completedflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDBMissionItemInfo::clear_has_completedflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDBMissionItemInfo::clear_completedflag() {
  completedflag_ = false;
  clear_has_completedflag();
}
inline bool CharacterDBMissionItemInfo::completedflag() const {
  return completedflag_;
}
inline void CharacterDBMissionItemInfo::set_completedflag(bool value) {
  set_has_completedflag();
  completedflag_ = value;
}

// optional uint32 parma1 = 6;
inline bool CharacterDBMissionItemInfo::has_parma1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_parma1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDBMissionItemInfo::clear_has_parma1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDBMissionItemInfo::clear_parma1() {
  parma1_ = 0u;
  clear_has_parma1();
}
inline ::google::protobuf::uint32 CharacterDBMissionItemInfo::parma1() const {
  return parma1_;
}
inline void CharacterDBMissionItemInfo::set_parma1(::google::protobuf::uint32 value) {
  set_has_parma1();
  parma1_ = value;
}

// optional uint32 parma2 = 7;
inline bool CharacterDBMissionItemInfo::has_parma2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_parma2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterDBMissionItemInfo::clear_has_parma2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterDBMissionItemInfo::clear_parma2() {
  parma2_ = 0u;
  clear_has_parma2();
}
inline ::google::protobuf::uint32 CharacterDBMissionItemInfo::parma2() const {
  return parma2_;
}
inline void CharacterDBMissionItemInfo::set_parma2(::google::protobuf::uint32 value) {
  set_has_parma2();
  parma2_ = value;
}

// optional uint32 parma3 = 8;
inline bool CharacterDBMissionItemInfo::has_parma3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterDBMissionItemInfo::set_has_parma3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterDBMissionItemInfo::clear_has_parma3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterDBMissionItemInfo::clear_parma3() {
  parma3_ = 0u;
  clear_has_parma3();
}
inline ::google::protobuf::uint32 CharacterDBMissionItemInfo::parma3() const {
  return parma3_;
}
inline void CharacterDBMissionItemInfo::set_parma3(::google::protobuf::uint32 value) {
  set_has_parma3();
  parma3_ = value;
}

// -------------------------------------------------------------------

// CharacterDBMissionTrack

// optional uint32 missionId = 1;
inline bool CharacterDBMissionTrack::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBMissionTrack::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBMissionTrack::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBMissionTrack::clear_missionid() {
  missionid_ = 0u;
  clear_has_missionid();
}
inline ::google::protobuf::uint32 CharacterDBMissionTrack::missionid() const {
  return missionid_;
}
inline void CharacterDBMissionTrack::set_missionid(::google::protobuf::uint32 value) {
  set_has_missionid();
  missionid_ = value;
}

// optional uint32 status = 2;
inline bool CharacterDBMissionTrack::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBMissionTrack::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBMissionTrack::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBMissionTrack::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CharacterDBMissionTrack::status() const {
  return status_;
}
inline void CharacterDBMissionTrack::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 version = 3;
inline bool CharacterDBMissionTrack::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBMissionTrack::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBMissionTrack::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBMissionTrack::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CharacterDBMissionTrack::version() const {
  return version_;
}
inline void CharacterDBMissionTrack::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional uint32 acceptMissionTime = 4;
inline bool CharacterDBMissionTrack::has_acceptmissiontime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBMissionTrack::set_has_acceptmissiontime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBMissionTrack::clear_has_acceptmissiontime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBMissionTrack::clear_acceptmissiontime() {
  acceptmissiontime_ = 0u;
  clear_has_acceptmissiontime();
}
inline ::google::protobuf::uint32 CharacterDBMissionTrack::acceptmissiontime() const {
  return acceptmissiontime_;
}
inline void CharacterDBMissionTrack::set_acceptmissiontime(::google::protobuf::uint32 value) {
  set_has_acceptmissiontime();
  acceptmissiontime_ = value;
}

// optional uint32 submittedMissionTime = 5;
inline bool CharacterDBMissionTrack::has_submittedmissiontime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDBMissionTrack::set_has_submittedmissiontime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDBMissionTrack::clear_has_submittedmissiontime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDBMissionTrack::clear_submittedmissiontime() {
  submittedmissiontime_ = 0u;
  clear_has_submittedmissiontime();
}
inline ::google::protobuf::uint32 CharacterDBMissionTrack::submittedmissiontime() const {
  return submittedmissiontime_;
}
inline void CharacterDBMissionTrack::set_submittedmissiontime(::google::protobuf::uint32 value) {
  set_has_submittedmissiontime();
  submittedmissiontime_ = value;
}

// optional .ProtoBuf.CharacterDBMissionItemInfo itemInfo = 6;
inline bool CharacterDBMissionTrack::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDBMissionTrack::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDBMissionTrack::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDBMissionTrack::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::ProtoBuf::CharacterDBMissionItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::ProtoBuf::CharacterDBMissionItemInfo& CharacterDBMissionTrack::iteminfo() const {
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::ProtoBuf::CharacterDBMissionItemInfo* CharacterDBMissionTrack::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::ProtoBuf::CharacterDBMissionItemInfo;
  return iteminfo_;
}
inline ::ProtoBuf::CharacterDBMissionItemInfo* CharacterDBMissionTrack::release_iteminfo() {
  clear_has_iteminfo();
  ::ProtoBuf::CharacterDBMissionItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void CharacterDBMissionTrack::set_allocated_iteminfo(::ProtoBuf::CharacterDBMissionItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
}

// -------------------------------------------------------------------

// CharacterDBSignleCampMission

// optional uint32 missionId = 1;
inline bool CharacterDBSignleCampMission::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBSignleCampMission::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBSignleCampMission::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBSignleCampMission::clear_missionid() {
  missionid_ = 0u;
  clear_has_missionid();
}
inline ::google::protobuf::uint32 CharacterDBSignleCampMission::missionid() const {
  return missionid_;
}
inline void CharacterDBSignleCampMission::set_missionid(::google::protobuf::uint32 value) {
  set_has_missionid();
  missionid_ = value;
}

// optional uint32 quality = 2;
inline bool CharacterDBSignleCampMission::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBSignleCampMission::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBSignleCampMission::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBSignleCampMission::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 CharacterDBSignleCampMission::quality() const {
  return quality_;
}
inline void CharacterDBSignleCampMission::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// optional bool isAccept = 3;
inline bool CharacterDBSignleCampMission::has_isaccept() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBSignleCampMission::set_has_isaccept() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBSignleCampMission::clear_has_isaccept() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBSignleCampMission::clear_isaccept() {
  isaccept_ = false;
  clear_has_isaccept();
}
inline bool CharacterDBSignleCampMission::isaccept() const {
  return isaccept_;
}
inline void CharacterDBSignleCampMission::set_isaccept(bool value) {
  set_has_isaccept();
  isaccept_ = value;
}

// -------------------------------------------------------------------

// CharacterDBCampMissionInfo

// repeated .ProtoBuf.CharacterDBSignleCampMission campSingleMission = 1;
inline int CharacterDBCampMissionInfo::campsinglemission_size() const {
  return campsinglemission_.size();
}
inline void CharacterDBCampMissionInfo::clear_campsinglemission() {
  campsinglemission_.Clear();
}
inline const ::ProtoBuf::CharacterDBSignleCampMission& CharacterDBCampMissionInfo::campsinglemission(int index) const {
  return campsinglemission_.Get(index);
}
inline ::ProtoBuf::CharacterDBSignleCampMission* CharacterDBCampMissionInfo::mutable_campsinglemission(int index) {
  return campsinglemission_.Mutable(index);
}
inline ::ProtoBuf::CharacterDBSignleCampMission* CharacterDBCampMissionInfo::add_campsinglemission() {
  return campsinglemission_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSignleCampMission >&
CharacterDBCampMissionInfo::campsinglemission() const {
  return campsinglemission_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSignleCampMission >*
CharacterDBCampMissionInfo::mutable_campsinglemission() {
  return &campsinglemission_;
}

// optional uint32 campRefreshTime = 2;
inline bool CharacterDBCampMissionInfo::has_camprefreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBCampMissionInfo::set_has_camprefreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBCampMissionInfo::clear_has_camprefreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBCampMissionInfo::clear_camprefreshtime() {
  camprefreshtime_ = 0u;
  clear_has_camprefreshtime();
}
inline ::google::protobuf::uint32 CharacterDBCampMissionInfo::camprefreshtime() const {
  return camprefreshtime_;
}
inline void CharacterDBCampMissionInfo::set_camprefreshtime(::google::protobuf::uint32 value) {
  set_has_camprefreshtime();
  camprefreshtime_ = value;
}

// optional uint32 campTimes = 3;
inline bool CharacterDBCampMissionInfo::has_camptimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBCampMissionInfo::set_has_camptimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBCampMissionInfo::clear_has_camptimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBCampMissionInfo::clear_camptimes() {
  camptimes_ = 0u;
  clear_has_camptimes();
}
inline ::google::protobuf::uint32 CharacterDBCampMissionInfo::camptimes() const {
  return camptimes_;
}
inline void CharacterDBCampMissionInfo::set_camptimes(::google::protobuf::uint32 value) {
  set_has_camptimes();
  camptimes_ = value;
}

// optional uint32 boxProgress = 4;
inline bool CharacterDBCampMissionInfo::has_boxprogress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBCampMissionInfo::set_has_boxprogress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBCampMissionInfo::clear_has_boxprogress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBCampMissionInfo::clear_boxprogress() {
  boxprogress_ = 0u;
  clear_has_boxprogress();
}
inline ::google::protobuf::uint32 CharacterDBCampMissionInfo::boxprogress() const {
  return boxprogress_;
}
inline void CharacterDBCampMissionInfo::set_boxprogress(::google::protobuf::uint32 value) {
  set_has_boxprogress();
  boxprogress_ = value;
}

// optional bool campOpen = 5;
inline bool CharacterDBCampMissionInfo::has_campopen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDBCampMissionInfo::set_has_campopen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDBCampMissionInfo::clear_has_campopen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDBCampMissionInfo::clear_campopen() {
  campopen_ = false;
  clear_has_campopen();
}
inline bool CharacterDBCampMissionInfo::campopen() const {
  return campopen_;
}
inline void CharacterDBCampMissionInfo::set_campopen(bool value) {
  set_has_campopen();
  campopen_ = value;
}

// -------------------------------------------------------------------

// CharacterDBLoopMissionInfo

// optional uint32 loopCount = 1;
inline bool CharacterDBLoopMissionInfo::has_loopcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBLoopMissionInfo::set_has_loopcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBLoopMissionInfo::clear_has_loopcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBLoopMissionInfo::clear_loopcount() {
  loopcount_ = 0u;
  clear_has_loopcount();
}
inline ::google::protobuf::uint32 CharacterDBLoopMissionInfo::loopcount() const {
  return loopcount_;
}
inline void CharacterDBLoopMissionInfo::set_loopcount(::google::protobuf::uint32 value) {
  set_has_loopcount();
  loopcount_ = value;
}

// optional uint32 loopFinishCount = 2;
inline bool CharacterDBLoopMissionInfo::has_loopfinishcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBLoopMissionInfo::set_has_loopfinishcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBLoopMissionInfo::clear_has_loopfinishcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBLoopMissionInfo::clear_loopfinishcount() {
  loopfinishcount_ = 0u;
  clear_has_loopfinishcount();
}
inline ::google::protobuf::uint32 CharacterDBLoopMissionInfo::loopfinishcount() const {
  return loopfinishcount_;
}
inline void CharacterDBLoopMissionInfo::set_loopfinishcount(::google::protobuf::uint32 value) {
  set_has_loopfinishcount();
  loopfinishcount_ = value;
}

// optional bool loopOpen = 3;
inline bool CharacterDBLoopMissionInfo::has_loopopen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBLoopMissionInfo::set_has_loopopen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBLoopMissionInfo::clear_has_loopopen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBLoopMissionInfo::clear_loopopen() {
  loopopen_ = false;
  clear_has_loopopen();
}
inline bool CharacterDBLoopMissionInfo::loopopen() const {
  return loopopen_;
}
inline void CharacterDBLoopMissionInfo::set_loopopen(bool value) {
  set_has_loopopen();
  loopopen_ = value;
}

// optional uint32 loopMissionId = 4;
inline bool CharacterDBLoopMissionInfo::has_loopmissionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBLoopMissionInfo::set_has_loopmissionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBLoopMissionInfo::clear_has_loopmissionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBLoopMissionInfo::clear_loopmissionid() {
  loopmissionid_ = 0u;
  clear_has_loopmissionid();
}
inline ::google::protobuf::uint32 CharacterDBLoopMissionInfo::loopmissionid() const {
  return loopmissionid_;
}
inline void CharacterDBLoopMissionInfo::set_loopmissionid(::google::protobuf::uint32 value) {
  set_has_loopmissionid();
  loopmissionid_ = value;
}

// -------------------------------------------------------------------

// CharacterDBSkillItem

// required int32 skillID = 1;
inline bool CharacterDBSkillItem::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBSkillItem::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBSkillItem::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBSkillItem::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 CharacterDBSkillItem::skillid() const {
  return skillid_;
}
inline void CharacterDBSkillItem::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required int32 skillLevel = 2;
inline bool CharacterDBSkillItem::has_skilllevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBSkillItem::set_has_skilllevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBSkillItem::clear_has_skilllevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBSkillItem::clear_skilllevel() {
  skilllevel_ = 0;
  clear_has_skilllevel();
}
inline ::google::protobuf::int32 CharacterDBSkillItem::skilllevel() const {
  return skilllevel_;
}
inline void CharacterDBSkillItem::set_skilllevel(::google::protobuf::int32 value) {
  set_has_skilllevel();
  skilllevel_ = value;
}

// optional uint64 cd = 3;
inline bool CharacterDBSkillItem::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBSkillItem::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBSkillItem::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBSkillItem::clear_cd() {
  cd_ = GOOGLE_ULONGLONG(0);
  clear_has_cd();
}
inline ::google::protobuf::uint64 CharacterDBSkillItem::cd() const {
  return cd_;
}
inline void CharacterDBSkillItem::set_cd(::google::protobuf::uint64 value) {
  set_has_cd();
  cd_ = value;
}

// -------------------------------------------------------------------

// CharacterDBSkillData

// repeated .ProtoBuf.CharacterDBSkillItem skillList = 1;
inline int CharacterDBSkillData::skilllist_size() const {
  return skilllist_.size();
}
inline void CharacterDBSkillData::clear_skilllist() {
  skilllist_.Clear();
}
inline const ::ProtoBuf::CharacterDBSkillItem& CharacterDBSkillData::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline ::ProtoBuf::CharacterDBSkillItem* CharacterDBSkillData::mutable_skilllist(int index) {
  return skilllist_.Mutable(index);
}
inline ::ProtoBuf::CharacterDBSkillItem* CharacterDBSkillData::add_skilllist() {
  return skilllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSkillItem >&
CharacterDBSkillData::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBSkillItem >*
CharacterDBSkillData::mutable_skilllist() {
  return &skilllist_;
}

// repeated uint32 skillAttrs = 2;
inline int CharacterDBSkillData::skillattrs_size() const {
  return skillattrs_.size();
}
inline void CharacterDBSkillData::clear_skillattrs() {
  skillattrs_.Clear();
}
inline ::google::protobuf::uint32 CharacterDBSkillData::skillattrs(int index) const {
  return skillattrs_.Get(index);
}
inline void CharacterDBSkillData::set_skillattrs(int index, ::google::protobuf::uint32 value) {
  skillattrs_.Set(index, value);
}
inline void CharacterDBSkillData::add_skillattrs(::google::protobuf::uint32 value) {
  skillattrs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CharacterDBSkillData::skillattrs() const {
  return skillattrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CharacterDBSkillData::mutable_skillattrs() {
  return &skillattrs_;
}

// -------------------------------------------------------------------

// CharacterDBAttrDetailInfo

// optional uint32 max_hp = 1;
inline bool CharacterDBAttrDetailInfo::has_max_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_max_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBAttrDetailInfo::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBAttrDetailInfo::clear_max_hp() {
  max_hp_ = 0u;
  clear_has_max_hp();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::max_hp() const {
  return max_hp_;
}
inline void CharacterDBAttrDetailInfo::set_max_hp(::google::protobuf::uint32 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional uint32 intelligence = 2;
inline bool CharacterDBAttrDetailInfo::has_intelligence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_intelligence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBAttrDetailInfo::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBAttrDetailInfo::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::intelligence() const {
  return intelligence_;
}
inline void CharacterDBAttrDetailInfo::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
}

// optional uint32 agility = 3;
inline bool CharacterDBAttrDetailInfo::has_agility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_agility() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBAttrDetailInfo::clear_has_agility() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBAttrDetailInfo::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::agility() const {
  return agility_;
}
inline void CharacterDBAttrDetailInfo::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
}

// optional uint32 physique = 4;
inline bool CharacterDBAttrDetailInfo::has_physique() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_physique() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBAttrDetailInfo::clear_has_physique() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBAttrDetailInfo::clear_physique() {
  physique_ = 0u;
  clear_has_physique();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::physique() const {
  return physique_;
}
inline void CharacterDBAttrDetailInfo::set_physique(::google::protobuf::uint32 value) {
  set_has_physique();
  physique_ = value;
}

// optional uint32 endurance = 5;
inline bool CharacterDBAttrDetailInfo::has_endurance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_endurance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDBAttrDetailInfo::clear_has_endurance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDBAttrDetailInfo::clear_endurance() {
  endurance_ = 0u;
  clear_has_endurance();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::endurance() const {
  return endurance_;
}
inline void CharacterDBAttrDetailInfo::set_endurance(::google::protobuf::uint32 value) {
  set_has_endurance();
  endurance_ = value;
}

// optional uint32 precision = 6;
inline bool CharacterDBAttrDetailInfo::has_precision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_precision() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDBAttrDetailInfo::clear_has_precision() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDBAttrDetailInfo::clear_precision() {
  precision_ = 0u;
  clear_has_precision();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::precision() const {
  return precision_;
}
inline void CharacterDBAttrDetailInfo::set_precision(::google::protobuf::uint32 value) {
  set_has_precision();
  precision_ = value;
}

// optional uint32 max_mp = 7;
inline bool CharacterDBAttrDetailInfo::has_max_mp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_max_mp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterDBAttrDetailInfo::clear_has_max_mp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterDBAttrDetailInfo::clear_max_mp() {
  max_mp_ = 0u;
  clear_has_max_mp();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::max_mp() const {
  return max_mp_;
}
inline void CharacterDBAttrDetailInfo::set_max_mp(::google::protobuf::uint32 value) {
  set_has_max_mp();
  max_mp_ = value;
}

// optional uint32 ap = 8;
inline bool CharacterDBAttrDetailInfo::has_ap() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_ap() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterDBAttrDetailInfo::clear_has_ap() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterDBAttrDetailInfo::clear_ap() {
  ap_ = 0u;
  clear_has_ap();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::ap() const {
  return ap_;
}
inline void CharacterDBAttrDetailInfo::set_ap(::google::protobuf::uint32 value) {
  set_has_ap();
  ap_ = value;
}

// optional uint32 mat = 9;
inline bool CharacterDBAttrDetailInfo::has_mat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_mat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CharacterDBAttrDetailInfo::clear_has_mat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CharacterDBAttrDetailInfo::clear_mat() {
  mat_ = 0u;
  clear_has_mat();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::mat() const {
  return mat_;
}
inline void CharacterDBAttrDetailInfo::set_mat(::google::protobuf::uint32 value) {
  set_has_mat();
  mat_ = value;
}

// optional uint32 dp = 10;
inline bool CharacterDBAttrDetailInfo::has_dp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_dp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CharacterDBAttrDetailInfo::clear_has_dp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CharacterDBAttrDetailInfo::clear_dp() {
  dp_ = 0u;
  clear_has_dp();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::dp() const {
  return dp_;
}
inline void CharacterDBAttrDetailInfo::set_dp(::google::protobuf::uint32 value) {
  set_has_dp();
  dp_ = value;
}

// optional uint32 mdp = 11;
inline bool CharacterDBAttrDetailInfo::has_mdp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_mdp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CharacterDBAttrDetailInfo::clear_has_mdp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CharacterDBAttrDetailInfo::clear_mdp() {
  mdp_ = 0u;
  clear_has_mdp();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::mdp() const {
  return mdp_;
}
inline void CharacterDBAttrDetailInfo::set_mdp(::google::protobuf::uint32 value) {
  set_has_mdp();
  mdp_ = value;
}

// optional uint32 hit = 12;
inline bool CharacterDBAttrDetailInfo::has_hit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_hit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CharacterDBAttrDetailInfo::clear_has_hit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CharacterDBAttrDetailInfo::clear_hit() {
  hit_ = 0u;
  clear_has_hit();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::hit() const {
  return hit_;
}
inline void CharacterDBAttrDetailInfo::set_hit(::google::protobuf::uint32 value) {
  set_has_hit();
  hit_ = value;
}

// optional uint32 dodge = 13;
inline bool CharacterDBAttrDetailInfo::has_dodge() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_dodge() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_dodge() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CharacterDBAttrDetailInfo::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::dodge() const {
  return dodge_;
}
inline void CharacterDBAttrDetailInfo::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// optional uint32 crit = 14;
inline bool CharacterDBAttrDetailInfo::has_crit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_crit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_crit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CharacterDBAttrDetailInfo::clear_crit() {
  crit_ = 0u;
  clear_has_crit();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::crit() const {
  return crit_;
}
inline void CharacterDBAttrDetailInfo::set_crit(::google::protobuf::uint32 value) {
  set_has_crit();
  crit_ = value;
}

// optional uint32 toughness = 15;
inline bool CharacterDBAttrDetailInfo::has_toughness() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_toughness() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_toughness() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CharacterDBAttrDetailInfo::clear_toughness() {
  toughness_ = 0u;
  clear_has_toughness();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::toughness() const {
  return toughness_;
}
inline void CharacterDBAttrDetailInfo::set_toughness(::google::protobuf::uint32 value) {
  set_has_toughness();
  toughness_ = value;
}

// optional uint32 crit_rate = 16;
inline bool CharacterDBAttrDetailInfo::has_crit_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_crit_rate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_crit_rate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CharacterDBAttrDetailInfo::clear_crit_rate() {
  crit_rate_ = 0u;
  clear_has_crit_rate();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::crit_rate() const {
  return crit_rate_;
}
inline void CharacterDBAttrDetailInfo::set_crit_rate(::google::protobuf::uint32 value) {
  set_has_crit_rate();
  crit_rate_ = value;
}

// optional uint32 crit_extradamage = 17;
inline bool CharacterDBAttrDetailInfo::has_crit_extradamage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_crit_extradamage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_crit_extradamage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CharacterDBAttrDetailInfo::clear_crit_extradamage() {
  crit_extradamage_ = 0u;
  clear_has_crit_extradamage();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::crit_extradamage() const {
  return crit_extradamage_;
}
inline void CharacterDBAttrDetailInfo::set_crit_extradamage(::google::protobuf::uint32 value) {
  set_has_crit_extradamage();
  crit_extradamage_ = value;
}

// optional uint32 crit_reducedamage = 18;
inline bool CharacterDBAttrDetailInfo::has_crit_reducedamage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_crit_reducedamage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_crit_reducedamage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CharacterDBAttrDetailInfo::clear_crit_reducedamage() {
  crit_reducedamage_ = 0u;
  clear_has_crit_reducedamage();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::crit_reducedamage() const {
  return crit_reducedamage_;
}
inline void CharacterDBAttrDetailInfo::set_crit_reducedamage(::google::protobuf::uint32 value) {
  set_has_crit_reducedamage();
  crit_reducedamage_ = value;
}

// optional uint32 extra_damage = 19;
inline bool CharacterDBAttrDetailInfo::has_extra_damage() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_extra_damage() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_extra_damage() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CharacterDBAttrDetailInfo::clear_extra_damage() {
  extra_damage_ = 0u;
  clear_has_extra_damage();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::extra_damage() const {
  return extra_damage_;
}
inline void CharacterDBAttrDetailInfo::set_extra_damage(::google::protobuf::uint32 value) {
  set_has_extra_damage();
  extra_damage_ = value;
}

// optional uint32 reduce_damage = 20;
inline bool CharacterDBAttrDetailInfo::has_reduce_damage() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_reduce_damage() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_reduce_damage() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CharacterDBAttrDetailInfo::clear_reduce_damage() {
  reduce_damage_ = 0u;
  clear_has_reduce_damage();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::reduce_damage() const {
  return reduce_damage_;
}
inline void CharacterDBAttrDetailInfo::set_reduce_damage(::google::protobuf::uint32 value) {
  set_has_reduce_damage();
  reduce_damage_ = value;
}

// optional uint32 apdamagerate = 21;
inline bool CharacterDBAttrDetailInfo::has_apdamagerate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_apdamagerate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_apdamagerate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CharacterDBAttrDetailInfo::clear_apdamagerate() {
  apdamagerate_ = 0u;
  clear_has_apdamagerate();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::apdamagerate() const {
  return apdamagerate_;
}
inline void CharacterDBAttrDetailInfo::set_apdamagerate(::google::protobuf::uint32 value) {
  set_has_apdamagerate();
  apdamagerate_ = value;
}

// optional uint32 apreducedamage = 22;
inline bool CharacterDBAttrDetailInfo::has_apreducedamage() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_apreducedamage() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_apreducedamage() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CharacterDBAttrDetailInfo::clear_apreducedamage() {
  apreducedamage_ = 0u;
  clear_has_apreducedamage();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::apreducedamage() const {
  return apreducedamage_;
}
inline void CharacterDBAttrDetailInfo::set_apreducedamage(::google::protobuf::uint32 value) {
  set_has_apreducedamage();
  apreducedamage_ = value;
}

// optional uint32 freezeres = 23;
inline bool CharacterDBAttrDetailInfo::has_freezeres() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_freezeres() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_freezeres() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CharacterDBAttrDetailInfo::clear_freezeres() {
  freezeres_ = 0u;
  clear_has_freezeres();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::freezeres() const {
  return freezeres_;
}
inline void CharacterDBAttrDetailInfo::set_freezeres(::google::protobuf::uint32 value) {
  set_has_freezeres();
  freezeres_ = value;
}

// optional uint32 burners = 24;
inline bool CharacterDBAttrDetailInfo::has_burners() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_burners() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_burners() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CharacterDBAttrDetailInfo::clear_burners() {
  burners_ = 0u;
  clear_has_burners();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::burners() const {
  return burners_;
}
inline void CharacterDBAttrDetailInfo::set_burners(::google::protobuf::uint32 value) {
  set_has_burners();
  burners_ = value;
}

// optional uint32 weakres = 25;
inline bool CharacterDBAttrDetailInfo::has_weakres() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_weakres() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_weakres() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CharacterDBAttrDetailInfo::clear_weakres() {
  weakres_ = 0u;
  clear_has_weakres();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::weakres() const {
  return weakres_;
}
inline void CharacterDBAttrDetailInfo::set_weakres(::google::protobuf::uint32 value) {
  set_has_weakres();
  weakres_ = value;
}

// optional uint32 fastingres = 26;
inline bool CharacterDBAttrDetailInfo::has_fastingres() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_fastingres() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_fastingres() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CharacterDBAttrDetailInfo::clear_fastingres() {
  fastingres_ = 0u;
  clear_has_fastingres();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::fastingres() const {
  return fastingres_;
}
inline void CharacterDBAttrDetailInfo::set_fastingres(::google::protobuf::uint32 value) {
  set_has_fastingres();
  fastingres_ = value;
}

// optional uint32 funkres = 27;
inline bool CharacterDBAttrDetailInfo::has_funkres() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CharacterDBAttrDetailInfo::set_has_funkres() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CharacterDBAttrDetailInfo::clear_has_funkres() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CharacterDBAttrDetailInfo::clear_funkres() {
  funkres_ = 0u;
  clear_has_funkres();
}
inline ::google::protobuf::uint32 CharacterDBAttrDetailInfo::funkres() const {
  return funkres_;
}
inline void CharacterDBAttrDetailInfo::set_funkres(::google::protobuf::uint32 value) {
  set_has_funkres();
  funkres_ = value;
}

// -------------------------------------------------------------------

// CharacterDBExtendData

// optional .ProtoBuf.CharacterDBAttrDetailInfo attr_detail = 1;
inline bool CharacterDBExtendData::has_attr_detail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBExtendData::set_has_attr_detail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBExtendData::clear_has_attr_detail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBExtendData::clear_attr_detail() {
  if (attr_detail_ != NULL) attr_detail_->::ProtoBuf::CharacterDBAttrDetailInfo::Clear();
  clear_has_attr_detail();
}
inline const ::ProtoBuf::CharacterDBAttrDetailInfo& CharacterDBExtendData::attr_detail() const {
  return attr_detail_ != NULL ? *attr_detail_ : *default_instance_->attr_detail_;
}
inline ::ProtoBuf::CharacterDBAttrDetailInfo* CharacterDBExtendData::mutable_attr_detail() {
  set_has_attr_detail();
  if (attr_detail_ == NULL) attr_detail_ = new ::ProtoBuf::CharacterDBAttrDetailInfo;
  return attr_detail_;
}
inline ::ProtoBuf::CharacterDBAttrDetailInfo* CharacterDBExtendData::release_attr_detail() {
  clear_has_attr_detail();
  ::ProtoBuf::CharacterDBAttrDetailInfo* temp = attr_detail_;
  attr_detail_ = NULL;
  return temp;
}
inline void CharacterDBExtendData::set_allocated_attr_detail(::ProtoBuf::CharacterDBAttrDetailInfo* attr_detail) {
  delete attr_detail_;
  attr_detail_ = attr_detail;
  if (attr_detail) {
    set_has_attr_detail();
  } else {
    clear_has_attr_detail();
  }
}

// -------------------------------------------------------------------

// CharacterDBInfo

// required uint32 charId = 1;
inline bool CharacterDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterDBInfo::charid() const {
  return charid_;
}
inline void CharacterDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required uint32 groupId = 2;
inline bool CharacterDBInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBInfo::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 CharacterDBInfo::groupid() const {
  return groupid_;
}
inline void CharacterDBInfo::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required .ProtoBuf.CharacterDBBaseInfo baseData = 3;
inline bool CharacterDBInfo::has_basedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBInfo::set_has_basedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBInfo::clear_has_basedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBInfo::clear_basedata() {
  if (basedata_ != NULL) basedata_->::ProtoBuf::CharacterDBBaseInfo::Clear();
  clear_has_basedata();
}
inline const ::ProtoBuf::CharacterDBBaseInfo& CharacterDBInfo::basedata() const {
  return basedata_ != NULL ? *basedata_ : *default_instance_->basedata_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* CharacterDBInfo::mutable_basedata() {
  set_has_basedata();
  if (basedata_ == NULL) basedata_ = new ::ProtoBuf::CharacterDBBaseInfo;
  return basedata_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* CharacterDBInfo::release_basedata() {
  clear_has_basedata();
  ::ProtoBuf::CharacterDBBaseInfo* temp = basedata_;
  basedata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_basedata(::ProtoBuf::CharacterDBBaseInfo* basedata) {
  delete basedata_;
  basedata_ = basedata;
  if (basedata) {
    set_has_basedata();
  } else {
    clear_has_basedata();
  }
}

// optional .ProtoBuf.CharacterDBPackageData itemData = 4;
inline bool CharacterDBInfo::has_itemdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBInfo::set_has_itemdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBInfo::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBInfo::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::ProtoBuf::CharacterDBPackageData::Clear();
  clear_has_itemdata();
}
inline const ::ProtoBuf::CharacterDBPackageData& CharacterDBInfo::itemdata() const {
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::ProtoBuf::CharacterDBPackageData* CharacterDBInfo::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::ProtoBuf::CharacterDBPackageData;
  return itemdata_;
}
inline ::ProtoBuf::CharacterDBPackageData* CharacterDBInfo::release_itemdata() {
  clear_has_itemdata();
  ::ProtoBuf::CharacterDBPackageData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_itemdata(::ProtoBuf::CharacterDBPackageData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
}

// optional .ProtoBuf.CharacterDBTaskData taskData = 5;
inline bool CharacterDBInfo::has_taskdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDBInfo::set_has_taskdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDBInfo::clear_has_taskdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDBInfo::clear_taskdata() {
  if (taskdata_ != NULL) taskdata_->::ProtoBuf::CharacterDBTaskData::Clear();
  clear_has_taskdata();
}
inline const ::ProtoBuf::CharacterDBTaskData& CharacterDBInfo::taskdata() const {
  return taskdata_ != NULL ? *taskdata_ : *default_instance_->taskdata_;
}
inline ::ProtoBuf::CharacterDBTaskData* CharacterDBInfo::mutable_taskdata() {
  set_has_taskdata();
  if (taskdata_ == NULL) taskdata_ = new ::ProtoBuf::CharacterDBTaskData;
  return taskdata_;
}
inline ::ProtoBuf::CharacterDBTaskData* CharacterDBInfo::release_taskdata() {
  clear_has_taskdata();
  ::ProtoBuf::CharacterDBTaskData* temp = taskdata_;
  taskdata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_taskdata(::ProtoBuf::CharacterDBTaskData* taskdata) {
  delete taskdata_;
  taskdata_ = taskdata;
  if (taskdata) {
    set_has_taskdata();
  } else {
    clear_has_taskdata();
  }
}

// optional .ProtoBuf.CharacterDBSkillData skillData = 6;
inline bool CharacterDBInfo::has_skilldata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDBInfo::set_has_skilldata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDBInfo::clear_has_skilldata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDBInfo::clear_skilldata() {
  if (skilldata_ != NULL) skilldata_->::ProtoBuf::CharacterDBSkillData::Clear();
  clear_has_skilldata();
}
inline const ::ProtoBuf::CharacterDBSkillData& CharacterDBInfo::skilldata() const {
  return skilldata_ != NULL ? *skilldata_ : *default_instance_->skilldata_;
}
inline ::ProtoBuf::CharacterDBSkillData* CharacterDBInfo::mutable_skilldata() {
  set_has_skilldata();
  if (skilldata_ == NULL) skilldata_ = new ::ProtoBuf::CharacterDBSkillData;
  return skilldata_;
}
inline ::ProtoBuf::CharacterDBSkillData* CharacterDBInfo::release_skilldata() {
  clear_has_skilldata();
  ::ProtoBuf::CharacterDBSkillData* temp = skilldata_;
  skilldata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_skilldata(::ProtoBuf::CharacterDBSkillData* skilldata) {
  delete skilldata_;
  skilldata_ = skilldata;
  if (skilldata) {
    set_has_skilldata();
  } else {
    clear_has_skilldata();
  }
}

// optional .ProtoBuf.CharacterDBExtendData extendData = 7;
inline bool CharacterDBInfo::has_extenddata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterDBInfo::set_has_extenddata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterDBInfo::clear_has_extenddata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterDBInfo::clear_extenddata() {
  if (extenddata_ != NULL) extenddata_->::ProtoBuf::CharacterDBExtendData::Clear();
  clear_has_extenddata();
}
inline const ::ProtoBuf::CharacterDBExtendData& CharacterDBInfo::extenddata() const {
  return extenddata_ != NULL ? *extenddata_ : *default_instance_->extenddata_;
}
inline ::ProtoBuf::CharacterDBExtendData* CharacterDBInfo::mutable_extenddata() {
  set_has_extenddata();
  if (extenddata_ == NULL) extenddata_ = new ::ProtoBuf::CharacterDBExtendData;
  return extenddata_;
}
inline ::ProtoBuf::CharacterDBExtendData* CharacterDBInfo::release_extenddata() {
  clear_has_extenddata();
  ::ProtoBuf::CharacterDBExtendData* temp = extenddata_;
  extenddata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_extenddata(::ProtoBuf::CharacterDBExtendData* extenddata) {
  delete extenddata_;
  extenddata_ = extenddata;
  if (extenddata) {
    set_has_extenddata();
  } else {
    clear_has_extenddata();
  }
}

// optional .ProtoBuf.CharacterDBEquipData equipData = 8;
inline bool CharacterDBInfo::has_equipdata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterDBInfo::set_has_equipdata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterDBInfo::clear_has_equipdata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterDBInfo::clear_equipdata() {
  if (equipdata_ != NULL) equipdata_->::ProtoBuf::CharacterDBEquipData::Clear();
  clear_has_equipdata();
}
inline const ::ProtoBuf::CharacterDBEquipData& CharacterDBInfo::equipdata() const {
  return equipdata_ != NULL ? *equipdata_ : *default_instance_->equipdata_;
}
inline ::ProtoBuf::CharacterDBEquipData* CharacterDBInfo::mutable_equipdata() {
  set_has_equipdata();
  if (equipdata_ == NULL) equipdata_ = new ::ProtoBuf::CharacterDBEquipData;
  return equipdata_;
}
inline ::ProtoBuf::CharacterDBEquipData* CharacterDBInfo::release_equipdata() {
  clear_has_equipdata();
  ::ProtoBuf::CharacterDBEquipData* temp = equipdata_;
  equipdata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_equipdata(::ProtoBuf::CharacterDBEquipData* equipdata) {
  delete equipdata_;
  equipdata_ = equipdata;
  if (equipdata) {
    set_has_equipdata();
  } else {
    clear_has_equipdata();
  }
}

// optional .ProtoBuf.CharacterDBDuplicateData duplicateData = 9;
inline bool CharacterDBInfo::has_duplicatedata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CharacterDBInfo::set_has_duplicatedata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CharacterDBInfo::clear_has_duplicatedata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CharacterDBInfo::clear_duplicatedata() {
  if (duplicatedata_ != NULL) duplicatedata_->::ProtoBuf::CharacterDBDuplicateData::Clear();
  clear_has_duplicatedata();
}
inline const ::ProtoBuf::CharacterDBDuplicateData& CharacterDBInfo::duplicatedata() const {
  return duplicatedata_ != NULL ? *duplicatedata_ : *default_instance_->duplicatedata_;
}
inline ::ProtoBuf::CharacterDBDuplicateData* CharacterDBInfo::mutable_duplicatedata() {
  set_has_duplicatedata();
  if (duplicatedata_ == NULL) duplicatedata_ = new ::ProtoBuf::CharacterDBDuplicateData;
  return duplicatedata_;
}
inline ::ProtoBuf::CharacterDBDuplicateData* CharacterDBInfo::release_duplicatedata() {
  clear_has_duplicatedata();
  ::ProtoBuf::CharacterDBDuplicateData* temp = duplicatedata_;
  duplicatedata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_duplicatedata(::ProtoBuf::CharacterDBDuplicateData* duplicatedata) {
  delete duplicatedata_;
  duplicatedata_ = duplicatedata;
  if (duplicatedata) {
    set_has_duplicatedata();
  } else {
    clear_has_duplicatedata();
  }
}

// optional .ProtoBuf.CharacterAchievementDBData achievementData = 10;
inline bool CharacterDBInfo::has_achievementdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CharacterDBInfo::set_has_achievementdata() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CharacterDBInfo::clear_has_achievementdata() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CharacterDBInfo::clear_achievementdata() {
  if (achievementdata_ != NULL) achievementdata_->::ProtoBuf::CharacterAchievementDBData::Clear();
  clear_has_achievementdata();
}
inline const ::ProtoBuf::CharacterAchievementDBData& CharacterDBInfo::achievementdata() const {
  return achievementdata_ != NULL ? *achievementdata_ : *default_instance_->achievementdata_;
}
inline ::ProtoBuf::CharacterAchievementDBData* CharacterDBInfo::mutable_achievementdata() {
  set_has_achievementdata();
  if (achievementdata_ == NULL) achievementdata_ = new ::ProtoBuf::CharacterAchievementDBData;
  return achievementdata_;
}
inline ::ProtoBuf::CharacterAchievementDBData* CharacterDBInfo::release_achievementdata() {
  clear_has_achievementdata();
  ::ProtoBuf::CharacterAchievementDBData* temp = achievementdata_;
  achievementdata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_achievementdata(::ProtoBuf::CharacterAchievementDBData* achievementdata) {
  delete achievementdata_;
  achievementdata_ = achievementdata;
  if (achievementdata) {
    set_has_achievementdata();
  } else {
    clear_has_achievementdata();
  }
}

// optional .ProtoBuf.CharacterDeputyDBData deputyData = 11;
inline bool CharacterDBInfo::has_deputydata() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CharacterDBInfo::set_has_deputydata() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CharacterDBInfo::clear_has_deputydata() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CharacterDBInfo::clear_deputydata() {
  if (deputydata_ != NULL) deputydata_->::ProtoBuf::CharacterDeputyDBData::Clear();
  clear_has_deputydata();
}
inline const ::ProtoBuf::CharacterDeputyDBData& CharacterDBInfo::deputydata() const {
  return deputydata_ != NULL ? *deputydata_ : *default_instance_->deputydata_;
}
inline ::ProtoBuf::CharacterDeputyDBData* CharacterDBInfo::mutable_deputydata() {
  set_has_deputydata();
  if (deputydata_ == NULL) deputydata_ = new ::ProtoBuf::CharacterDeputyDBData;
  return deputydata_;
}
inline ::ProtoBuf::CharacterDeputyDBData* CharacterDBInfo::release_deputydata() {
  clear_has_deputydata();
  ::ProtoBuf::CharacterDeputyDBData* temp = deputydata_;
  deputydata_ = NULL;
  return temp;
}
inline void CharacterDBInfo::set_allocated_deputydata(::ProtoBuf::CharacterDeputyDBData* deputydata) {
  delete deputydata_;
  deputydata_ = deputydata;
  if (deputydata) {
    set_has_deputydata();
  } else {
    clear_has_deputydata();
  }
}

// -------------------------------------------------------------------

// CharacterDBSimpleInfo

// required uint32 charId = 1;
inline bool CharacterDBSimpleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBSimpleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBSimpleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::charid() const {
  return charid_;
}
inline void CharacterDBSimpleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required string name = 2;
inline bool CharacterDBSimpleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDBSimpleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDBSimpleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CharacterDBSimpleInfo::name() const {
  return *name_;
}
inline void CharacterDBSimpleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharacterDBSimpleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharacterDBSimpleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDBSimpleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CharacterDBSimpleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDBSimpleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 sex = 3;
inline bool CharacterDBSimpleInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBSimpleInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBSimpleInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::sex() const {
  return sex_;
}
inline void CharacterDBSimpleInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// required uint32 prof = 4;
inline bool CharacterDBSimpleInfo::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDBSimpleInfo::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDBSimpleInfo::clear_prof() {
  prof_ = 0u;
  clear_has_prof();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::prof() const {
  return prof_;
}
inline void CharacterDBSimpleInfo::set_prof(::google::protobuf::uint32 value) {
  set_has_prof();
  prof_ = value;
}

// required uint32 level = 5;
inline bool CharacterDBSimpleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDBSimpleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDBSimpleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::level() const {
  return level_;
}
inline void CharacterDBSimpleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 race = 6;
inline bool CharacterDBSimpleInfo::has_race() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_race() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDBSimpleInfo::clear_has_race() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDBSimpleInfo::clear_race() {
  race_ = 0u;
  clear_has_race();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::race() const {
  return race_;
}
inline void CharacterDBSimpleInfo::set_race(::google::protobuf::uint32 value) {
  set_has_race();
  race_ = value;
}

// optional int64 exp = 7;
inline bool CharacterDBSimpleInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterDBSimpleInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterDBSimpleInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 CharacterDBSimpleInfo::exp() const {
  return exp_;
}
inline void CharacterDBSimpleInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 hp = 8;
inline bool CharacterDBSimpleInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterDBSimpleInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterDBSimpleInfo::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::hp() const {
  return hp_;
}
inline void CharacterDBSimpleInfo::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 fightPower = 9;
inline bool CharacterDBSimpleInfo::has_fightpower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_fightpower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CharacterDBSimpleInfo::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CharacterDBSimpleInfo::clear_fightpower() {
  fightpower_ = 0u;
  clear_has_fightpower();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::fightpower() const {
  return fightpower_;
}
inline void CharacterDBSimpleInfo::set_fightpower(::google::protobuf::uint32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// optional uint32 weapon_id = 10;
inline bool CharacterDBSimpleInfo::has_weapon_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_weapon_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CharacterDBSimpleInfo::clear_has_weapon_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CharacterDBSimpleInfo::clear_weapon_id() {
  weapon_id_ = 0u;
  clear_has_weapon_id();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::weapon_id() const {
  return weapon_id_;
}
inline void CharacterDBSimpleInfo::set_weapon_id(::google::protobuf::uint32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
}

// optional uint32 clothes_id = 11;
inline bool CharacterDBSimpleInfo::has_clothes_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_clothes_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CharacterDBSimpleInfo::clear_has_clothes_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CharacterDBSimpleInfo::clear_clothes_id() {
  clothes_id_ = 0u;
  clear_has_clothes_id();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::clothes_id() const {
  return clothes_id_;
}
inline void CharacterDBSimpleInfo::set_clothes_id(::google::protobuf::uint32 value) {
  set_has_clothes_id();
  clothes_id_ = value;
}

// optional uint32 wing_id = 12;
inline bool CharacterDBSimpleInfo::has_wing_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_wing_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CharacterDBSimpleInfo::clear_has_wing_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CharacterDBSimpleInfo::clear_wing_id() {
  wing_id_ = 0u;
  clear_has_wing_id();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::wing_id() const {
  return wing_id_;
}
inline void CharacterDBSimpleInfo::set_wing_id(::google::protobuf::uint32 value) {
  set_has_wing_id();
  wing_id_ = value;
}

// repeated uint32 fashion_id = 13;
inline int CharacterDBSimpleInfo::fashion_id_size() const {
  return fashion_id_.size();
}
inline void CharacterDBSimpleInfo::clear_fashion_id() {
  fashion_id_.Clear();
}
inline ::google::protobuf::uint32 CharacterDBSimpleInfo::fashion_id(int index) const {
  return fashion_id_.Get(index);
}
inline void CharacterDBSimpleInfo::set_fashion_id(int index, ::google::protobuf::uint32 value) {
  fashion_id_.Set(index, value);
}
inline void CharacterDBSimpleInfo::add_fashion_id(::google::protobuf::uint32 value) {
  fashion_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CharacterDBSimpleInfo::fashion_id() const {
  return fashion_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CharacterDBSimpleInfo::mutable_fashion_id() {
  return &fashion_id_;
}

// optional int32 camp = 14;
inline bool CharacterDBSimpleInfo::has_camp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_camp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CharacterDBSimpleInfo::clear_has_camp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CharacterDBSimpleInfo::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 CharacterDBSimpleInfo::camp() const {
  return camp_;
}
inline void CharacterDBSimpleInfo::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional int32 official = 15;
inline bool CharacterDBSimpleInfo::has_official() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_official() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CharacterDBSimpleInfo::clear_has_official() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CharacterDBSimpleInfo::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 CharacterDBSimpleInfo::official() const {
  return official_;
}
inline void CharacterDBSimpleInfo::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
}

// optional int32 knight = 16;
inline bool CharacterDBSimpleInfo::has_knight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CharacterDBSimpleInfo::set_has_knight() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CharacterDBSimpleInfo::clear_has_knight() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CharacterDBSimpleInfo::clear_knight() {
  knight_ = 0;
  clear_has_knight();
}
inline ::google::protobuf::int32 CharacterDBSimpleInfo::knight() const {
  return knight_;
}
inline void CharacterDBSimpleInfo::set_knight(::google::protobuf::int32 value) {
  set_has_knight();
  knight_ = value;
}

// -------------------------------------------------------------------

// ItemProtoInfo

// required uint32 item_id = 1;
inline bool ItemProtoInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemProtoInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemProtoInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemProtoInfo::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 ItemProtoInfo::item_id() const {
  return item_id_;
}
inline void ItemProtoInfo::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_num = 2;
inline bool ItemProtoInfo::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemProtoInfo::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemProtoInfo::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemProtoInfo::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 ItemProtoInfo::item_num() const {
  return item_num_;
}
inline void ItemProtoInfo::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
}

// optional int32 bind = 3;
inline bool ItemProtoInfo::has_bind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemProtoInfo::set_has_bind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemProtoInfo::clear_has_bind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemProtoInfo::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 ItemProtoInfo::bind() const {
  return bind_;
}
inline void ItemProtoInfo::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// optional int32 strenlev = 4;
inline bool ItemProtoInfo::has_strenlev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemProtoInfo::set_has_strenlev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemProtoInfo::clear_has_strenlev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemProtoInfo::clear_strenlev() {
  strenlev_ = 0;
  clear_has_strenlev();
}
inline ::google::protobuf::int32 ItemProtoInfo::strenlev() const {
  return strenlev_;
}
inline void ItemProtoInfo::set_strenlev(::google::protobuf::int32 value) {
  set_has_strenlev();
  strenlev_ = value;
}

// optional int32 refinelev = 5;
inline bool ItemProtoInfo::has_refinelev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemProtoInfo::set_has_refinelev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemProtoInfo::clear_has_refinelev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemProtoInfo::clear_refinelev() {
  refinelev_ = 0;
  clear_has_refinelev();
}
inline ::google::protobuf::int32 ItemProtoInfo::refinelev() const {
  return refinelev_;
}
inline void ItemProtoInfo::set_refinelev(::google::protobuf::int32 value) {
  set_has_refinelev();
  refinelev_ = value;
}

// optional int32 holy = 6;
inline bool ItemProtoInfo::has_holy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemProtoInfo::set_has_holy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemProtoInfo::clear_has_holy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemProtoInfo::clear_holy() {
  holy_ = 0;
  clear_has_holy();
}
inline ::google::protobuf::int32 ItemProtoInfo::holy() const {
  return holy_;
}
inline void ItemProtoInfo::set_holy(::google::protobuf::int32 value) {
  set_has_holy();
  holy_ = value;
}

// repeated .ProtoBuf.Attr refineex = 7;
inline int ItemProtoInfo::refineex_size() const {
  return refineex_.size();
}
inline void ItemProtoInfo::clear_refineex() {
  refineex_.Clear();
}
inline const ::ProtoBuf::Attr& ItemProtoInfo::refineex(int index) const {
  return refineex_.Get(index);
}
inline ::ProtoBuf::Attr* ItemProtoInfo::mutable_refineex(int index) {
  return refineex_.Mutable(index);
}
inline ::ProtoBuf::Attr* ItemProtoInfo::add_refineex() {
  return refineex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >&
ItemProtoInfo::refineex() const {
  return refineex_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >*
ItemProtoInfo::mutable_refineex() {
  return &refineex_;
}

// repeated .ProtoBuf.Attr baseattr = 8;
inline int ItemProtoInfo::baseattr_size() const {
  return baseattr_.size();
}
inline void ItemProtoInfo::clear_baseattr() {
  baseattr_.Clear();
}
inline const ::ProtoBuf::Attr& ItemProtoInfo::baseattr(int index) const {
  return baseattr_.Get(index);
}
inline ::ProtoBuf::Attr* ItemProtoInfo::mutable_baseattr(int index) {
  return baseattr_.Mutable(index);
}
inline ::ProtoBuf::Attr* ItemProtoInfo::add_baseattr() {
  return baseattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >&
ItemProtoInfo::baseattr() const {
  return baseattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Attr >*
ItemProtoInfo::mutable_baseattr() {
  return &baseattr_;
}

// repeated uint32 inlay = 9;
inline int ItemProtoInfo::inlay_size() const {
  return inlay_.size();
}
inline void ItemProtoInfo::clear_inlay() {
  inlay_.Clear();
}
inline ::google::protobuf::uint32 ItemProtoInfo::inlay(int index) const {
  return inlay_.Get(index);
}
inline void ItemProtoInfo::set_inlay(int index, ::google::protobuf::uint32 value) {
  inlay_.Set(index, value);
}
inline void ItemProtoInfo::add_inlay(::google::protobuf::uint32 value) {
  inlay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ItemProtoInfo::inlay() const {
  return inlay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ItemProtoInfo::mutable_inlay() {
  return &inlay_;
}

// optional int32 index = 10;
inline bool ItemProtoInfo::has_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ItemProtoInfo::set_has_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ItemProtoInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ItemProtoInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ItemProtoInfo::index() const {
  return index_;
}
inline void ItemProtoInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 fight = 11;
inline bool ItemProtoInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ItemProtoInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ItemProtoInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ItemProtoInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 ItemProtoInfo::fight() const {
  return fight_;
}
inline void ItemProtoInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional string maker = 12;
inline bool ItemProtoInfo::has_maker() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ItemProtoInfo::set_has_maker() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ItemProtoInfo::clear_has_maker() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ItemProtoInfo::clear_maker() {
  if (maker_ != &::google::protobuf::internal::kEmptyString) {
    maker_->clear();
  }
  clear_has_maker();
}
inline const ::std::string& ItemProtoInfo::maker() const {
  return *maker_;
}
inline void ItemProtoInfo::set_maker(const ::std::string& value) {
  set_has_maker();
  if (maker_ == &::google::protobuf::internal::kEmptyString) {
    maker_ = new ::std::string;
  }
  maker_->assign(value);
}
inline void ItemProtoInfo::set_maker(const char* value) {
  set_has_maker();
  if (maker_ == &::google::protobuf::internal::kEmptyString) {
    maker_ = new ::std::string;
  }
  maker_->assign(value);
}
inline void ItemProtoInfo::set_maker(const char* value, size_t size) {
  set_has_maker();
  if (maker_ == &::google::protobuf::internal::kEmptyString) {
    maker_ = new ::std::string;
  }
  maker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemProtoInfo::mutable_maker() {
  set_has_maker();
  if (maker_ == &::google::protobuf::internal::kEmptyString) {
    maker_ = new ::std::string;
  }
  return maker_;
}
inline ::std::string* ItemProtoInfo::release_maker() {
  clear_has_maker();
  if (maker_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maker_;
    maker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ItemProtoInfo::set_allocated_maker(::std::string* maker) {
  if (maker_ != &::google::protobuf::internal::kEmptyString) {
    delete maker_;
  }
  if (maker) {
    set_has_maker();
    maker_ = maker;
  } else {
    clear_has_maker();
    maker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FashionProtoInfo

// required uint32 fashion_id = 1;
inline bool FashionProtoInfo::has_fashion_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FashionProtoInfo::set_has_fashion_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FashionProtoInfo::clear_has_fashion_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FashionProtoInfo::clear_fashion_id() {
  fashion_id_ = 0u;
  clear_has_fashion_id();
}
inline ::google::protobuf::uint32 FashionProtoInfo::fashion_id() const {
  return fashion_id_;
}
inline void FashionProtoInfo::set_fashion_id(::google::protobuf::uint32 value) {
  set_has_fashion_id();
  fashion_id_ = value;
}

// optional uint64 left_sec = 2;
inline bool FashionProtoInfo::has_left_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FashionProtoInfo::set_has_left_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FashionProtoInfo::clear_has_left_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FashionProtoInfo::clear_left_sec() {
  left_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_left_sec();
}
inline ::google::protobuf::uint64 FashionProtoInfo::left_sec() const {
  return left_sec_;
}
inline void FashionProtoInfo::set_left_sec(::google::protobuf::uint64 value) {
  set_has_left_sec();
  left_sec_ = value;
}

// -------------------------------------------------------------------

// CharacterDBPackageData

// required int32 expand_num = 1;
inline bool CharacterDBPackageData::has_expand_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDBPackageData::set_has_expand_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDBPackageData::clear_has_expand_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDBPackageData::clear_expand_num() {
  expand_num_ = 0;
  clear_has_expand_num();
}
inline ::google::protobuf::int32 CharacterDBPackageData::expand_num() const {
  return expand_num_;
}
inline void CharacterDBPackageData::set_expand_num(::google::protobuf::int32 value) {
  set_has_expand_num();
  expand_num_ = value;
}

// repeated .ProtoBuf.ItemProtoInfo equip = 2;
inline int CharacterDBPackageData::equip_size() const {
  return equip_.size();
}
inline void CharacterDBPackageData::clear_equip() {
  equip_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& CharacterDBPackageData::equip(int index) const {
  return equip_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
CharacterDBPackageData::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
CharacterDBPackageData::mutable_equip() {
  return &equip_;
}

// repeated .ProtoBuf.ItemProtoInfo daily = 3;
inline int CharacterDBPackageData::daily_size() const {
  return daily_.size();
}
inline void CharacterDBPackageData::clear_daily() {
  daily_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& CharacterDBPackageData::daily(int index) const {
  return daily_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::mutable_daily(int index) {
  return daily_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::add_daily() {
  return daily_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
CharacterDBPackageData::daily() const {
  return daily_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
CharacterDBPackageData::mutable_daily() {
  return &daily_;
}

// repeated .ProtoBuf.ItemProtoInfo material = 4;
inline int CharacterDBPackageData::material_size() const {
  return material_.size();
}
inline void CharacterDBPackageData::clear_material() {
  material_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& CharacterDBPackageData::material(int index) const {
  return material_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::mutable_material(int index) {
  return material_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::add_material() {
  return material_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
CharacterDBPackageData::material() const {
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
CharacterDBPackageData::mutable_material() {
  return &material_;
}

// repeated .ProtoBuf.ItemProtoInfo task = 5;
inline int CharacterDBPackageData::task_size() const {
  return task_.size();
}
inline void CharacterDBPackageData::clear_task() {
  task_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& CharacterDBPackageData::task(int index) const {
  return task_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBPackageData::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
CharacterDBPackageData::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
CharacterDBPackageData::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// CharacterDBEquipData

// repeated .ProtoBuf.ItemProtoInfo equip = 1;
inline int CharacterDBEquipData::equip_size() const {
  return equip_.size();
}
inline void CharacterDBEquipData::clear_equip() {
  equip_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& CharacterDBEquipData::equip(int index) const {
  return equip_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBEquipData::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDBEquipData::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
CharacterDBEquipData::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
CharacterDBEquipData::mutable_equip() {
  return &equip_;
}

// -------------------------------------------------------------------

// CharacterDBFashionData

// repeated .ProtoBuf.FashionProtoInfo data = 1;
inline int CharacterDBFashionData::data_size() const {
  return data_.size();
}
inline void CharacterDBFashionData::clear_data() {
  data_.Clear();
}
inline const ::ProtoBuf::FashionProtoInfo& CharacterDBFashionData::data(int index) const {
  return data_.Get(index);
}
inline ::ProtoBuf::FashionProtoInfo* CharacterDBFashionData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ProtoBuf::FashionProtoInfo* CharacterDBFashionData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >&
CharacterDBFashionData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >*
CharacterDBFashionData::mutable_data() {
  return &data_;
}

// repeated .ProtoBuf.FashionProtoInfo dress = 2;
inline int CharacterDBFashionData::dress_size() const {
  return dress_.size();
}
inline void CharacterDBFashionData::clear_dress() {
  dress_.Clear();
}
inline const ::ProtoBuf::FashionProtoInfo& CharacterDBFashionData::dress(int index) const {
  return dress_.Get(index);
}
inline ::ProtoBuf::FashionProtoInfo* CharacterDBFashionData::mutable_dress(int index) {
  return dress_.Mutable(index);
}
inline ::ProtoBuf::FashionProtoInfo* CharacterDBFashionData::add_dress() {
  return dress_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >&
CharacterDBFashionData::dress() const {
  return dress_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FashionProtoInfo >*
CharacterDBFashionData::mutable_dress() {
  return &dress_;
}

// optional int32 open = 3;
inline bool CharacterDBFashionData::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDBFashionData::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDBFashionData::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDBFashionData::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 CharacterDBFashionData::open() const {
  return open_;
}
inline void CharacterDBFashionData::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// DuplicateSingleProto

// required int32 dupliate_id = 1;
inline bool DuplicateSingleProto::has_dupliate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DuplicateSingleProto::set_has_dupliate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DuplicateSingleProto::clear_has_dupliate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DuplicateSingleProto::clear_dupliate_id() {
  dupliate_id_ = 0;
  clear_has_dupliate_id();
}
inline ::google::protobuf::int32 DuplicateSingleProto::dupliate_id() const {
  return dupliate_id_;
}
inline void DuplicateSingleProto::set_dupliate_id(::google::protobuf::int32 value) {
  set_has_dupliate_id();
  dupliate_id_ = value;
}

// optional int32 star = 2;
inline bool DuplicateSingleProto::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DuplicateSingleProto::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DuplicateSingleProto::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DuplicateSingleProto::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 DuplicateSingleProto::star() const {
  return star_;
}
inline void DuplicateSingleProto::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 reward_count = 3;
inline bool DuplicateSingleProto::has_reward_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DuplicateSingleProto::set_has_reward_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DuplicateSingleProto::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DuplicateSingleProto::clear_reward_count() {
  reward_count_ = 0;
  clear_has_reward_count();
}
inline ::google::protobuf::int32 DuplicateSingleProto::reward_count() const {
  return reward_count_;
}
inline void DuplicateSingleProto::set_reward_count(::google::protobuf::int32 value) {
  set_has_reward_count();
  reward_count_ = value;
}

// optional uint64 last_fresh = 4;
inline bool DuplicateSingleProto::has_last_fresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DuplicateSingleProto::set_has_last_fresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DuplicateSingleProto::clear_has_last_fresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DuplicateSingleProto::clear_last_fresh() {
  last_fresh_ = GOOGLE_ULONGLONG(0);
  clear_has_last_fresh();
}
inline ::google::protobuf::uint64 DuplicateSingleProto::last_fresh() const {
  return last_fresh_;
}
inline void DuplicateSingleProto::set_last_fresh(::google::protobuf::uint64 value) {
  set_has_last_fresh();
  last_fresh_ = value;
}

// optional int32 buy_count = 5;
inline bool DuplicateSingleProto::has_buy_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DuplicateSingleProto::set_has_buy_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DuplicateSingleProto::clear_has_buy_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DuplicateSingleProto::clear_buy_count() {
  buy_count_ = 0;
  clear_has_buy_count();
}
inline ::google::protobuf::int32 DuplicateSingleProto::buy_count() const {
  return buy_count_;
}
inline void DuplicateSingleProto::set_buy_count(::google::protobuf::int32 value) {
  set_has_buy_count();
  buy_count_ = value;
}

// -------------------------------------------------------------------

// CharacterDBDuplicateData

// repeated .ProtoBuf.DuplicateSingleProto duplicate = 1;
inline int CharacterDBDuplicateData::duplicate_size() const {
  return duplicate_.size();
}
inline void CharacterDBDuplicateData::clear_duplicate() {
  duplicate_.Clear();
}
inline const ::ProtoBuf::DuplicateSingleProto& CharacterDBDuplicateData::duplicate(int index) const {
  return duplicate_.Get(index);
}
inline ::ProtoBuf::DuplicateSingleProto* CharacterDBDuplicateData::mutable_duplicate(int index) {
  return duplicate_.Mutable(index);
}
inline ::ProtoBuf::DuplicateSingleProto* CharacterDBDuplicateData::add_duplicate() {
  return duplicate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::DuplicateSingleProto >&
CharacterDBDuplicateData::duplicate() const {
  return duplicate_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::DuplicateSingleProto >*
CharacterDBDuplicateData::mutable_duplicate() {
  return &duplicate_;
}

// -------------------------------------------------------------------

// CharacterDBMailData

// repeated .ProtoBuf.MailInfo mailList = 1;
inline int CharacterDBMailData::maillist_size() const {
  return maillist_.size();
}
inline void CharacterDBMailData::clear_maillist() {
  maillist_.Clear();
}
inline const ::ProtoBuf::MailInfo& CharacterDBMailData::maillist(int index) const {
  return maillist_.Get(index);
}
inline ::ProtoBuf::MailInfo* CharacterDBMailData::mutable_maillist(int index) {
  return maillist_.Mutable(index);
}
inline ::ProtoBuf::MailInfo* CharacterDBMailData::add_maillist() {
  return maillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
CharacterDBMailData::maillist() const {
  return maillist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
CharacterDBMailData::mutable_maillist() {
  return &maillist_;
}

// -------------------------------------------------------------------

// SingleCampRankDBInfo

// optional uint32 charid = 1;
inline bool SingleCampRankDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleCampRankDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleCampRankDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleCampRankDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 SingleCampRankDBInfo::charid() const {
  return charid_;
}
inline void SingleCampRankDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 level = 2;
inline bool SingleCampRankDBInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleCampRankDBInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleCampRankDBInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleCampRankDBInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SingleCampRankDBInfo::level() const {
  return level_;
}
inline void SingleCampRankDBInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 fight = 3;
inline bool SingleCampRankDBInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleCampRankDBInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleCampRankDBInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleCampRankDBInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 SingleCampRankDBInfo::fight() const {
  return fight_;
}
inline void SingleCampRankDBInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 official = 4;
inline bool SingleCampRankDBInfo::has_official() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleCampRankDBInfo::set_has_official() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleCampRankDBInfo::clear_has_official() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleCampRankDBInfo::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 SingleCampRankDBInfo::official() const {
  return official_;
}
inline void SingleCampRankDBInfo::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
}

// optional int32 knight = 5;
inline bool SingleCampRankDBInfo::has_knight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleCampRankDBInfo::set_has_knight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleCampRankDBInfo::clear_has_knight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleCampRankDBInfo::clear_knight() {
  knight_ = 0;
  clear_has_knight();
}
inline ::google::protobuf::int32 SingleCampRankDBInfo::knight() const {
  return knight_;
}
inline void SingleCampRankDBInfo::set_knight(::google::protobuf::int32 value) {
  set_has_knight();
  knight_ = value;
}

// -------------------------------------------------------------------

// CampRankDBData

// repeated .ProtoBuf.SingleCampRankDBInfo rank = 1;
inline int CampRankDBData::rank_size() const {
  return rank_.size();
}
inline void CampRankDBData::clear_rank() {
  rank_.Clear();
}
inline const ::ProtoBuf::SingleCampRankDBInfo& CampRankDBData::rank(int index) const {
  return rank_.Get(index);
}
inline ::ProtoBuf::SingleCampRankDBInfo* CampRankDBData::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::ProtoBuf::SingleCampRankDBInfo* CampRankDBData::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampRankDBInfo >&
CampRankDBData::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampRankDBInfo >*
CampRankDBData::mutable_rank() {
  return &rank_;
}

// -------------------------------------------------------------------

// SingleCampDBData

// optional int32 camp_id = 1;
inline bool SingleCampDBData::has_camp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleCampDBData::set_has_camp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleCampDBData::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleCampDBData::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 SingleCampDBData::camp_id() const {
  return camp_id_;
}
inline void SingleCampDBData::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// optional uint32 leader_id = 2;
inline bool SingleCampDBData::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleCampDBData::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleCampDBData::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleCampDBData::clear_leader_id() {
  leader_id_ = 0u;
  clear_has_leader_id();
}
inline ::google::protobuf::uint32 SingleCampDBData::leader_id() const {
  return leader_id_;
}
inline void SingleCampDBData::set_leader_id(::google::protobuf::uint32 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// optional string notice = 3;
inline bool SingleCampDBData::has_notice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleCampDBData::set_has_notice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleCampDBData::clear_has_notice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleCampDBData::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& SingleCampDBData::notice() const {
  return *notice_;
}
inline void SingleCampDBData::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void SingleCampDBData::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void SingleCampDBData::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleCampDBData::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* SingleCampDBData::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SingleCampDBData::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 last_notice = 4;
inline bool SingleCampDBData::has_last_notice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleCampDBData::set_has_last_notice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleCampDBData::clear_has_last_notice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleCampDBData::clear_last_notice() {
  last_notice_ = GOOGLE_ULONGLONG(0);
  clear_has_last_notice();
}
inline ::google::protobuf::uint64 SingleCampDBData::last_notice() const {
  return last_notice_;
}
inline void SingleCampDBData::set_last_notice(::google::protobuf::uint64 value) {
  set_has_last_notice();
  last_notice_ = value;
}

// optional uint64 last_fresh = 5;
inline bool SingleCampDBData::has_last_fresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleCampDBData::set_has_last_fresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleCampDBData::clear_has_last_fresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleCampDBData::clear_last_fresh() {
  last_fresh_ = GOOGLE_ULONGLONG(0);
  clear_has_last_fresh();
}
inline ::google::protobuf::uint64 SingleCampDBData::last_fresh() const {
  return last_fresh_;
}
inline void SingleCampDBData::set_last_fresh(::google::protobuf::uint64 value) {
  set_has_last_fresh();
  last_fresh_ = value;
}

// optional uint32 active_num = 6;
inline bool SingleCampDBData::has_active_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SingleCampDBData::set_has_active_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SingleCampDBData::clear_has_active_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SingleCampDBData::clear_active_num() {
  active_num_ = 0u;
  clear_has_active_num();
}
inline ::google::protobuf::uint32 SingleCampDBData::active_num() const {
  return active_num_;
}
inline void SingleCampDBData::set_active_num(::google::protobuf::uint32 value) {
  set_has_active_num();
  active_num_ = value;
}

// optional uint64 total_fight = 7;
inline bool SingleCampDBData::has_total_fight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SingleCampDBData::set_has_total_fight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SingleCampDBData::clear_has_total_fight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SingleCampDBData::clear_total_fight() {
  total_fight_ = GOOGLE_ULONGLONG(0);
  clear_has_total_fight();
}
inline ::google::protobuf::uint64 SingleCampDBData::total_fight() const {
  return total_fight_;
}
inline void SingleCampDBData::set_total_fight(::google::protobuf::uint64 value) {
  set_has_total_fight();
  total_fight_ = value;
}

// optional .ProtoBuf.CampRankDBData lev_rank = 8;
inline bool SingleCampDBData::has_lev_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SingleCampDBData::set_has_lev_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SingleCampDBData::clear_has_lev_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SingleCampDBData::clear_lev_rank() {
  if (lev_rank_ != NULL) lev_rank_->::ProtoBuf::CampRankDBData::Clear();
  clear_has_lev_rank();
}
inline const ::ProtoBuf::CampRankDBData& SingleCampDBData::lev_rank() const {
  return lev_rank_ != NULL ? *lev_rank_ : *default_instance_->lev_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::mutable_lev_rank() {
  set_has_lev_rank();
  if (lev_rank_ == NULL) lev_rank_ = new ::ProtoBuf::CampRankDBData;
  return lev_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::release_lev_rank() {
  clear_has_lev_rank();
  ::ProtoBuf::CampRankDBData* temp = lev_rank_;
  lev_rank_ = NULL;
  return temp;
}
inline void SingleCampDBData::set_allocated_lev_rank(::ProtoBuf::CampRankDBData* lev_rank) {
  delete lev_rank_;
  lev_rank_ = lev_rank;
  if (lev_rank) {
    set_has_lev_rank();
  } else {
    clear_has_lev_rank();
  }
}

// optional .ProtoBuf.CampRankDBData fight_rank = 9;
inline bool SingleCampDBData::has_fight_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SingleCampDBData::set_has_fight_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SingleCampDBData::clear_has_fight_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SingleCampDBData::clear_fight_rank() {
  if (fight_rank_ != NULL) fight_rank_->::ProtoBuf::CampRankDBData::Clear();
  clear_has_fight_rank();
}
inline const ::ProtoBuf::CampRankDBData& SingleCampDBData::fight_rank() const {
  return fight_rank_ != NULL ? *fight_rank_ : *default_instance_->fight_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::mutable_fight_rank() {
  set_has_fight_rank();
  if (fight_rank_ == NULL) fight_rank_ = new ::ProtoBuf::CampRankDBData;
  return fight_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::release_fight_rank() {
  clear_has_fight_rank();
  ::ProtoBuf::CampRankDBData* temp = fight_rank_;
  fight_rank_ = NULL;
  return temp;
}
inline void SingleCampDBData::set_allocated_fight_rank(::ProtoBuf::CampRankDBData* fight_rank) {
  delete fight_rank_;
  fight_rank_ = fight_rank;
  if (fight_rank) {
    set_has_fight_rank();
  } else {
    clear_has_fight_rank();
  }
}

// optional .ProtoBuf.CampRankDBData official_rank = 10;
inline bool SingleCampDBData::has_official_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SingleCampDBData::set_has_official_rank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SingleCampDBData::clear_has_official_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SingleCampDBData::clear_official_rank() {
  if (official_rank_ != NULL) official_rank_->::ProtoBuf::CampRankDBData::Clear();
  clear_has_official_rank();
}
inline const ::ProtoBuf::CampRankDBData& SingleCampDBData::official_rank() const {
  return official_rank_ != NULL ? *official_rank_ : *default_instance_->official_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::mutable_official_rank() {
  set_has_official_rank();
  if (official_rank_ == NULL) official_rank_ = new ::ProtoBuf::CampRankDBData;
  return official_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::release_official_rank() {
  clear_has_official_rank();
  ::ProtoBuf::CampRankDBData* temp = official_rank_;
  official_rank_ = NULL;
  return temp;
}
inline void SingleCampDBData::set_allocated_official_rank(::ProtoBuf::CampRankDBData* official_rank) {
  delete official_rank_;
  official_rank_ = official_rank;
  if (official_rank) {
    set_has_official_rank();
  } else {
    clear_has_official_rank();
  }
}

// optional .ProtoBuf.CampRankDBData knight_rank = 11;
inline bool SingleCampDBData::has_knight_rank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SingleCampDBData::set_has_knight_rank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SingleCampDBData::clear_has_knight_rank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SingleCampDBData::clear_knight_rank() {
  if (knight_rank_ != NULL) knight_rank_->::ProtoBuf::CampRankDBData::Clear();
  clear_has_knight_rank();
}
inline const ::ProtoBuf::CampRankDBData& SingleCampDBData::knight_rank() const {
  return knight_rank_ != NULL ? *knight_rank_ : *default_instance_->knight_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::mutable_knight_rank() {
  set_has_knight_rank();
  if (knight_rank_ == NULL) knight_rank_ = new ::ProtoBuf::CampRankDBData;
  return knight_rank_;
}
inline ::ProtoBuf::CampRankDBData* SingleCampDBData::release_knight_rank() {
  clear_has_knight_rank();
  ::ProtoBuf::CampRankDBData* temp = knight_rank_;
  knight_rank_ = NULL;
  return temp;
}
inline void SingleCampDBData::set_allocated_knight_rank(::ProtoBuf::CampRankDBData* knight_rank) {
  delete knight_rank_;
  knight_rank_ = knight_rank;
  if (knight_rank) {
    set_has_knight_rank();
  } else {
    clear_has_knight_rank();
  }
}

// -------------------------------------------------------------------

// AllCampDBData

// repeated .ProtoBuf.SingleCampDBData all_camp_data = 1;
inline int AllCampDBData::all_camp_data_size() const {
  return all_camp_data_.size();
}
inline void AllCampDBData::clear_all_camp_data() {
  all_camp_data_.Clear();
}
inline const ::ProtoBuf::SingleCampDBData& AllCampDBData::all_camp_data(int index) const {
  return all_camp_data_.Get(index);
}
inline ::ProtoBuf::SingleCampDBData* AllCampDBData::mutable_all_camp_data(int index) {
  return all_camp_data_.Mutable(index);
}
inline ::ProtoBuf::SingleCampDBData* AllCampDBData::add_all_camp_data() {
  return all_camp_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampDBData >&
AllCampDBData::all_camp_data() const {
  return all_camp_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCampDBData >*
AllCampDBData::mutable_all_camp_data() {
  return &all_camp_data_;
}

// -------------------------------------------------------------------

// GlobalDBData

// required int32 type_id = 1;
inline bool GlobalDBData::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBData::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBData::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBData::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBData::type_id() const {
  return type_id_;
}
inline void GlobalDBData::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional bytes global_data = 2;
inline bool GlobalDBData::has_global_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBData::set_has_global_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBData::clear_has_global_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBData::clear_global_data() {
  if (global_data_ != &::google::protobuf::internal::kEmptyString) {
    global_data_->clear();
  }
  clear_has_global_data();
}
inline const ::std::string& GlobalDBData::global_data() const {
  return *global_data_;
}
inline void GlobalDBData::set_global_data(const ::std::string& value) {
  set_has_global_data();
  if (global_data_ == &::google::protobuf::internal::kEmptyString) {
    global_data_ = new ::std::string;
  }
  global_data_->assign(value);
}
inline void GlobalDBData::set_global_data(const char* value) {
  set_has_global_data();
  if (global_data_ == &::google::protobuf::internal::kEmptyString) {
    global_data_ = new ::std::string;
  }
  global_data_->assign(value);
}
inline void GlobalDBData::set_global_data(const void* value, size_t size) {
  set_has_global_data();
  if (global_data_ == &::google::protobuf::internal::kEmptyString) {
    global_data_ = new ::std::string;
  }
  global_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GlobalDBData::mutable_global_data() {
  set_has_global_data();
  if (global_data_ == &::google::protobuf::internal::kEmptyString) {
    global_data_ = new ::std::string;
  }
  return global_data_;
}
inline ::std::string* GlobalDBData::release_global_data() {
  clear_has_global_data();
  if (global_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = global_data_;
    global_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GlobalDBData::set_allocated_global_data(::std::string* global_data) {
  if (global_data_ != &::google::protobuf::internal::kEmptyString) {
    delete global_data_;
  }
  if (global_data) {
    set_has_global_data();
    global_data_ = global_data;
  } else {
    clear_has_global_data();
    global_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CharacterCampDBData

// optional uint32 contribute = 1;
inline bool CharacterCampDBData::has_contribute() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterCampDBData::set_has_contribute() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterCampDBData::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterCampDBData::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 CharacterCampDBData::contribute() const {
  return contribute_;
}
inline void CharacterCampDBData::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional uint32 total_contribute = 2;
inline bool CharacterCampDBData::has_total_contribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterCampDBData::set_has_total_contribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterCampDBData::clear_has_total_contribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterCampDBData::clear_total_contribute() {
  total_contribute_ = 0u;
  clear_has_total_contribute();
}
inline ::google::protobuf::uint32 CharacterCampDBData::total_contribute() const {
  return total_contribute_;
}
inline void CharacterCampDBData::set_total_contribute(::google::protobuf::uint32 value) {
  set_has_total_contribute();
  total_contribute_ = value;
}

// optional uint32 prestige = 3;
inline bool CharacterCampDBData::has_prestige() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterCampDBData::set_has_prestige() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterCampDBData::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterCampDBData::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 CharacterCampDBData::prestige() const {
  return prestige_;
}
inline void CharacterCampDBData::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
}

// optional uint64 last_join = 4;
inline bool CharacterCampDBData::has_last_join() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterCampDBData::set_has_last_join() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterCampDBData::clear_has_last_join() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterCampDBData::clear_last_join() {
  last_join_ = GOOGLE_ULONGLONG(0);
  clear_has_last_join();
}
inline ::google::protobuf::uint64 CharacterCampDBData::last_join() const {
  return last_join_;
}
inline void CharacterCampDBData::set_last_join(::google::protobuf::uint64 value) {
  set_has_last_join();
  last_join_ = value;
}

// optional uint32 charid = 5;
inline bool CharacterCampDBData::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterCampDBData::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterCampDBData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterCampDBData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterCampDBData::charid() const {
  return charid_;
}
inline void CharacterCampDBData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// MallInfo

// optional uint32 mall_id = 1;
inline bool MallInfo::has_mall_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MallInfo::set_has_mall_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MallInfo::clear_has_mall_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MallInfo::clear_mall_id() {
  mall_id_ = 0u;
  clear_has_mall_id();
}
inline ::google::protobuf::uint32 MallInfo::mall_id() const {
  return mall_id_;
}
inline void MallInfo::set_mall_id(::google::protobuf::uint32 value) {
  set_has_mall_id();
  mall_id_ = value;
}

// optional uint32 buy_amount = 2;
inline bool MallInfo::has_buy_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MallInfo::set_has_buy_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MallInfo::clear_has_buy_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MallInfo::clear_buy_amount() {
  buy_amount_ = 0u;
  clear_has_buy_amount();
}
inline ::google::protobuf::uint32 MallInfo::buy_amount() const {
  return buy_amount_;
}
inline void MallInfo::set_buy_amount(::google::protobuf::uint32 value) {
  set_has_buy_amount();
  buy_amount_ = value;
}

// optional uint32 goods_amount = 3;
inline bool MallInfo::has_goods_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MallInfo::set_has_goods_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MallInfo::clear_has_goods_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MallInfo::clear_goods_amount() {
  goods_amount_ = 0u;
  clear_has_goods_amount();
}
inline ::google::protobuf::uint32 MallInfo::goods_amount() const {
  return goods_amount_;
}
inline void MallInfo::set_goods_amount(::google::protobuf::uint32 value) {
  set_has_goods_amount();
  goods_amount_ = value;
}

// optional uint64 goods_time = 4;
inline bool MallInfo::has_goods_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MallInfo::set_has_goods_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MallInfo::clear_has_goods_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MallInfo::clear_goods_time() {
  goods_time_ = GOOGLE_ULONGLONG(0);
  clear_has_goods_time();
}
inline ::google::protobuf::uint64 MallInfo::goods_time() const {
  return goods_time_;
}
inline void MallInfo::set_goods_time(::google::protobuf::uint64 value) {
  set_has_goods_time();
  goods_time_ = value;
}

// optional uint64 buy_time = 5;
inline bool MallInfo::has_buy_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MallInfo::set_has_buy_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MallInfo::clear_has_buy_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MallInfo::clear_buy_time() {
  buy_time_ = GOOGLE_ULONGLONG(0);
  clear_has_buy_time();
}
inline ::google::protobuf::uint64 MallInfo::buy_time() const {
  return buy_time_;
}
inline void MallInfo::set_buy_time(::google::protobuf::uint64 value) {
  set_has_buy_time();
  buy_time_ = value;
}

// optional uint64 open_time = 6;
inline bool MallInfo::has_open_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MallInfo::set_has_open_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MallInfo::clear_has_open_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MallInfo::clear_open_time() {
  open_time_ = GOOGLE_ULONGLONG(0);
  clear_has_open_time();
}
inline ::google::protobuf::uint64 MallInfo::open_time() const {
  return open_time_;
}
inline void MallInfo::set_open_time(::google::protobuf::uint64 value) {
  set_has_open_time();
  open_time_ = value;
}

// optional uint64 open_cool_time = 7;
inline bool MallInfo::has_open_cool_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MallInfo::set_has_open_cool_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MallInfo::clear_has_open_cool_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MallInfo::clear_open_cool_time() {
  open_cool_time_ = GOOGLE_ULONGLONG(0);
  clear_has_open_cool_time();
}
inline ::google::protobuf::uint64 MallInfo::open_cool_time() const {
  return open_cool_time_;
}
inline void MallInfo::set_open_cool_time(::google::protobuf::uint64 value) {
  set_has_open_cool_time();
  open_cool_time_ = value;
}

// -------------------------------------------------------------------

// AllMallDBData

// optional uint64 last_logout = 1;
inline bool AllMallDBData::has_last_logout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllMallDBData::set_has_last_logout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllMallDBData::clear_has_last_logout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllMallDBData::clear_last_logout() {
  last_logout_ = GOOGLE_ULONGLONG(0);
  clear_has_last_logout();
}
inline ::google::protobuf::uint64 AllMallDBData::last_logout() const {
  return last_logout_;
}
inline void AllMallDBData::set_last_logout(::google::protobuf::uint64 value) {
  set_has_last_logout();
  last_logout_ = value;
}

// repeated .ProtoBuf.MallInfo all_mall_data = 2;
inline int AllMallDBData::all_mall_data_size() const {
  return all_mall_data_.size();
}
inline void AllMallDBData::clear_all_mall_data() {
  all_mall_data_.Clear();
}
inline const ::ProtoBuf::MallInfo& AllMallDBData::all_mall_data(int index) const {
  return all_mall_data_.Get(index);
}
inline ::ProtoBuf::MallInfo* AllMallDBData::mutable_all_mall_data(int index) {
  return all_mall_data_.Mutable(index);
}
inline ::ProtoBuf::MallInfo* AllMallDBData::add_all_mall_data() {
  return all_mall_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MallInfo >&
AllMallDBData::all_mall_data() const {
  return all_mall_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MallInfo >*
AllMallDBData::mutable_all_mall_data() {
  return &all_mall_data_;
}

// -------------------------------------------------------------------

// SingleCharacterMallDB

// optional uint32 charid = 1;
inline bool SingleCharacterMallDB::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleCharacterMallDB::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleCharacterMallDB::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleCharacterMallDB::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 SingleCharacterMallDB::charid() const {
  return charid_;
}
inline void SingleCharacterMallDB::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .ProtoBuf.AllMallDBData info = 2;
inline bool SingleCharacterMallDB::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleCharacterMallDB::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleCharacterMallDB::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleCharacterMallDB::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::AllMallDBData::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::AllMallDBData& SingleCharacterMallDB::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::AllMallDBData* SingleCharacterMallDB::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::AllMallDBData;
  return info_;
}
inline ::ProtoBuf::AllMallDBData* SingleCharacterMallDB::release_info() {
  clear_has_info();
  ::ProtoBuf::AllMallDBData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SingleCharacterMallDB::set_allocated_info(::ProtoBuf::AllMallDBData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// SingleAchievementDBData

// optional uint32 id = 1;
inline bool SingleAchievementDBData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleAchievementDBData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleAchievementDBData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleAchievementDBData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SingleAchievementDBData::id() const {
  return id_;
}
inline void SingleAchievementDBData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 status = 2;
inline bool SingleAchievementDBData::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleAchievementDBData::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleAchievementDBData::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleAchievementDBData::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 SingleAchievementDBData::status() const {
  return status_;
}
inline void SingleAchievementDBData::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 completeCount = 3;
inline bool SingleAchievementDBData::has_completecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleAchievementDBData::set_has_completecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleAchievementDBData::clear_has_completecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleAchievementDBData::clear_completecount() {
  completecount_ = 0u;
  clear_has_completecount();
}
inline ::google::protobuf::uint32 SingleAchievementDBData::completecount() const {
  return completecount_;
}
inline void SingleAchievementDBData::set_completecount(::google::protobuf::uint32 value) {
  set_has_completecount();
  completecount_ = value;
}

// -------------------------------------------------------------------

// GroupAchievementDBData

// optional uint32 sortType = 1;
inline bool GroupAchievementDBData::has_sorttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupAchievementDBData::set_has_sorttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupAchievementDBData::clear_has_sorttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupAchievementDBData::clear_sorttype() {
  sorttype_ = 0u;
  clear_has_sorttype();
}
inline ::google::protobuf::uint32 GroupAchievementDBData::sorttype() const {
  return sorttype_;
}
inline void GroupAchievementDBData::set_sorttype(::google::protobuf::uint32 value) {
  set_has_sorttype();
  sorttype_ = value;
}

// repeated .ProtoBuf.SingleAchievementDBData achievementInfoList = 2;
inline int GroupAchievementDBData::achievementinfolist_size() const {
  return achievementinfolist_.size();
}
inline void GroupAchievementDBData::clear_achievementinfolist() {
  achievementinfolist_.Clear();
}
inline const ::ProtoBuf::SingleAchievementDBData& GroupAchievementDBData::achievementinfolist(int index) const {
  return achievementinfolist_.Get(index);
}
inline ::ProtoBuf::SingleAchievementDBData* GroupAchievementDBData::mutable_achievementinfolist(int index) {
  return achievementinfolist_.Mutable(index);
}
inline ::ProtoBuf::SingleAchievementDBData* GroupAchievementDBData::add_achievementinfolist() {
  return achievementinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleAchievementDBData >&
GroupAchievementDBData::achievementinfolist() const {
  return achievementinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleAchievementDBData >*
GroupAchievementDBData::mutable_achievementinfolist() {
  return &achievementinfolist_;
}

// optional uint32 achievementReward = 3;
inline bool GroupAchievementDBData::has_achievementreward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupAchievementDBData::set_has_achievementreward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupAchievementDBData::clear_has_achievementreward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupAchievementDBData::clear_achievementreward() {
  achievementreward_ = 0u;
  clear_has_achievementreward();
}
inline ::google::protobuf::uint32 GroupAchievementDBData::achievementreward() const {
  return achievementreward_;
}
inline void GroupAchievementDBData::set_achievementreward(::google::protobuf::uint32 value) {
  set_has_achievementreward();
  achievementreward_ = value;
}

// -------------------------------------------------------------------

// CharacterAchievementDBData

// repeated .ProtoBuf.GroupAchievementDBData groupAchievementData = 1;
inline int CharacterAchievementDBData::groupachievementdata_size() const {
  return groupachievementdata_.size();
}
inline void CharacterAchievementDBData::clear_groupachievementdata() {
  groupachievementdata_.Clear();
}
inline const ::ProtoBuf::GroupAchievementDBData& CharacterAchievementDBData::groupachievementdata(int index) const {
  return groupachievementdata_.Get(index);
}
inline ::ProtoBuf::GroupAchievementDBData* CharacterAchievementDBData::mutable_groupachievementdata(int index) {
  return groupachievementdata_.Mutable(index);
}
inline ::ProtoBuf::GroupAchievementDBData* CharacterAchievementDBData::add_groupachievementdata() {
  return groupachievementdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::GroupAchievementDBData >&
CharacterAchievementDBData::groupachievementdata() const {
  return groupachievementdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::GroupAchievementDBData >*
CharacterAchievementDBData::mutable_groupachievementdata() {
  return &groupachievementdata_;
}

// -------------------------------------------------------------------

// SingleDeputyDBData

// required int32 type = 1;
inline bool SingleDeputyDBData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleDeputyDBData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleDeputyDBData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleDeputyDBData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SingleDeputyDBData::type() const {
  return type_;
}
inline void SingleDeputyDBData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 skill_lvl = 2;
inline bool SingleDeputyDBData::has_skill_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleDeputyDBData::set_has_skill_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleDeputyDBData::clear_has_skill_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleDeputyDBData::clear_skill_lvl() {
  skill_lvl_ = 0;
  clear_has_skill_lvl();
}
inline ::google::protobuf::int32 SingleDeputyDBData::skill_lvl() const {
  return skill_lvl_;
}
inline void SingleDeputyDBData::set_skill_lvl(::google::protobuf::int32 value) {
  set_has_skill_lvl();
  skill_lvl_ = value;
}

// optional int32 lvl_val = 3;
inline bool SingleDeputyDBData::has_lvl_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleDeputyDBData::set_has_lvl_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleDeputyDBData::clear_has_lvl_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleDeputyDBData::clear_lvl_val() {
  lvl_val_ = 0;
  clear_has_lvl_val();
}
inline ::google::protobuf::int32 SingleDeputyDBData::lvl_val() const {
  return lvl_val_;
}
inline void SingleDeputyDBData::set_lvl_val(::google::protobuf::int32 value) {
  set_has_lvl_val();
  lvl_val_ = value;
}

// -------------------------------------------------------------------

// CollectDeputyDBData

// repeated .ProtoBuf.SingleDeputyDBData data = 1;
inline int CollectDeputyDBData::data_size() const {
  return data_.size();
}
inline void CollectDeputyDBData::clear_data() {
  data_.Clear();
}
inline const ::ProtoBuf::SingleDeputyDBData& CollectDeputyDBData::data(int index) const {
  return data_.Get(index);
}
inline ::ProtoBuf::SingleDeputyDBData* CollectDeputyDBData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ProtoBuf::SingleDeputyDBData* CollectDeputyDBData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >&
CollectDeputyDBData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >*
CollectDeputyDBData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// MakeDeputyDBData

// repeated .ProtoBuf.SingleDeputyDBData data = 1;
inline int MakeDeputyDBData::data_size() const {
  return data_.size();
}
inline void MakeDeputyDBData::clear_data() {
  data_.Clear();
}
inline const ::ProtoBuf::SingleDeputyDBData& MakeDeputyDBData::data(int index) const {
  return data_.Get(index);
}
inline ::ProtoBuf::SingleDeputyDBData* MakeDeputyDBData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ProtoBuf::SingleDeputyDBData* MakeDeputyDBData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >&
MakeDeputyDBData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleDeputyDBData >*
MakeDeputyDBData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// CharacterDeputyDBData

// optional .ProtoBuf.CollectDeputyDBData collect = 1;
inline bool CharacterDeputyDBData::has_collect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDeputyDBData::set_has_collect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDeputyDBData::clear_has_collect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDeputyDBData::clear_collect() {
  if (collect_ != NULL) collect_->::ProtoBuf::CollectDeputyDBData::Clear();
  clear_has_collect();
}
inline const ::ProtoBuf::CollectDeputyDBData& CharacterDeputyDBData::collect() const {
  return collect_ != NULL ? *collect_ : *default_instance_->collect_;
}
inline ::ProtoBuf::CollectDeputyDBData* CharacterDeputyDBData::mutable_collect() {
  set_has_collect();
  if (collect_ == NULL) collect_ = new ::ProtoBuf::CollectDeputyDBData;
  return collect_;
}
inline ::ProtoBuf::CollectDeputyDBData* CharacterDeputyDBData::release_collect() {
  clear_has_collect();
  ::ProtoBuf::CollectDeputyDBData* temp = collect_;
  collect_ = NULL;
  return temp;
}
inline void CharacterDeputyDBData::set_allocated_collect(::ProtoBuf::CollectDeputyDBData* collect) {
  delete collect_;
  collect_ = collect;
  if (collect) {
    set_has_collect();
  } else {
    clear_has_collect();
  }
}

// optional .ProtoBuf.MakeDeputyDBData make = 2;
inline bool CharacterDeputyDBData::has_make() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDeputyDBData::set_has_make() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDeputyDBData::clear_has_make() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDeputyDBData::clear_make() {
  if (make_ != NULL) make_->::ProtoBuf::MakeDeputyDBData::Clear();
  clear_has_make();
}
inline const ::ProtoBuf::MakeDeputyDBData& CharacterDeputyDBData::make() const {
  return make_ != NULL ? *make_ : *default_instance_->make_;
}
inline ::ProtoBuf::MakeDeputyDBData* CharacterDeputyDBData::mutable_make() {
  set_has_make();
  if (make_ == NULL) make_ = new ::ProtoBuf::MakeDeputyDBData;
  return make_;
}
inline ::ProtoBuf::MakeDeputyDBData* CharacterDeputyDBData::release_make() {
  clear_has_make();
  ::ProtoBuf::MakeDeputyDBData* temp = make_;
  make_ = NULL;
  return temp;
}
inline void CharacterDeputyDBData::set_allocated_make(::ProtoBuf::MakeDeputyDBData* make) {
  delete make_;
  make_ = make;
  if (make) {
    set_has_make();
  } else {
    clear_has_make();
  }
}

// -------------------------------------------------------------------

// Vector3PB

// required float x = 1;
inline bool Vector3PB::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3PB::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3PB::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3PB::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3PB::x() const {
  return x_;
}
inline void Vector3PB::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Vector3PB::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3PB::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3PB::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3PB::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3PB::y() const {
  return y_;
}
inline void Vector3PB::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Vector3PB::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3PB::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3PB::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3PB::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3PB::z() const {
  return z_;
}
inline void Vector3PB::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// ActorMove

// required uint32 cid = 1;
inline bool ActorMove::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActorMove::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActorMove::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActorMove::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ActorMove::cid() const {
  return cid_;
}
inline void ActorMove::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
}

// required .ProtoBuf.Vector3PB currentPos = 2;
inline bool ActorMove::has_currentpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActorMove::set_has_currentpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActorMove::clear_has_currentpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActorMove::clear_currentpos() {
  if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
  clear_has_currentpos();
}
inline const ::ProtoBuf::Vector3PB& ActorMove::currentpos() const {
  return currentpos_ != NULL ? *currentpos_ : *default_instance_->currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorMove::mutable_currentpos() {
  set_has_currentpos();
  if (currentpos_ == NULL) currentpos_ = new ::ProtoBuf::Vector3PB;
  return currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorMove::release_currentpos() {
  clear_has_currentpos();
  ::ProtoBuf::Vector3PB* temp = currentpos_;
  currentpos_ = NULL;
  return temp;
}
inline void ActorMove::set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos) {
  delete currentpos_;
  currentpos_ = currentpos;
  if (currentpos) {
    set_has_currentpos();
  } else {
    clear_has_currentpos();
  }
}

// repeated .ProtoBuf.Vector3PB path = 3;
inline int ActorMove::path_size() const {
  return path_.size();
}
inline void ActorMove::clear_path() {
  path_.Clear();
}
inline const ::ProtoBuf::Vector3PB& ActorMove::path(int index) const {
  return path_.Get(index);
}
inline ::ProtoBuf::Vector3PB* ActorMove::mutable_path(int index) {
  return path_.Mutable(index);
}
inline ::ProtoBuf::Vector3PB* ActorMove::add_path() {
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >&
ActorMove::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >*
ActorMove::mutable_path() {
  return &path_;
}

// -------------------------------------------------------------------

// ActorSkillMove

// required uint32 cid = 1;
inline bool ActorSkillMove::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActorSkillMove::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActorSkillMove::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActorSkillMove::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ActorSkillMove::cid() const {
  return cid_;
}
inline void ActorSkillMove::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
}

// required .ProtoBuf.Vector3PB currentPos = 2;
inline bool ActorSkillMove::has_currentpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActorSkillMove::set_has_currentpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActorSkillMove::clear_has_currentpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActorSkillMove::clear_currentpos() {
  if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
  clear_has_currentpos();
}
inline const ::ProtoBuf::Vector3PB& ActorSkillMove::currentpos() const {
  return currentpos_ != NULL ? *currentpos_ : *default_instance_->currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorSkillMove::mutable_currentpos() {
  set_has_currentpos();
  if (currentpos_ == NULL) currentpos_ = new ::ProtoBuf::Vector3PB;
  return currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorSkillMove::release_currentpos() {
  clear_has_currentpos();
  ::ProtoBuf::Vector3PB* temp = currentpos_;
  currentpos_ = NULL;
  return temp;
}
inline void ActorSkillMove::set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos) {
  delete currentpos_;
  currentpos_ = currentpos;
  if (currentpos) {
    set_has_currentpos();
  } else {
    clear_has_currentpos();
  }
}

// repeated .ProtoBuf.Vector3PB path = 3;
inline int ActorSkillMove::path_size() const {
  return path_.size();
}
inline void ActorSkillMove::clear_path() {
  path_.Clear();
}
inline const ::ProtoBuf::Vector3PB& ActorSkillMove::path(int index) const {
  return path_.Get(index);
}
inline ::ProtoBuf::Vector3PB* ActorSkillMove::mutable_path(int index) {
  return path_.Mutable(index);
}
inline ::ProtoBuf::Vector3PB* ActorSkillMove::add_path() {
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >&
ActorSkillMove::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::Vector3PB >*
ActorSkillMove::mutable_path() {
  return &path_;
}

// required float speed = 4;
inline bool ActorSkillMove::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActorSkillMove::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActorSkillMove::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActorSkillMove::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float ActorSkillMove::speed() const {
  return speed_;
}
inline void ActorSkillMove::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// -------------------------------------------------------------------

// ActorRockerMove

// required uint32 cid = 1;
inline bool ActorRockerMove::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActorRockerMove::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActorRockerMove::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActorRockerMove::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ActorRockerMove::cid() const {
  return cid_;
}
inline void ActorRockerMove::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
}

// required .ProtoBuf.Vector3PB currentPos = 2;
inline bool ActorRockerMove::has_currentpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActorRockerMove::set_has_currentpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActorRockerMove::clear_has_currentpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActorRockerMove::clear_currentpos() {
  if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
  clear_has_currentpos();
}
inline const ::ProtoBuf::Vector3PB& ActorRockerMove::currentpos() const {
  return currentpos_ != NULL ? *currentpos_ : *default_instance_->currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorRockerMove::mutable_currentpos() {
  set_has_currentpos();
  if (currentpos_ == NULL) currentpos_ = new ::ProtoBuf::Vector3PB;
  return currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorRockerMove::release_currentpos() {
  clear_has_currentpos();
  ::ProtoBuf::Vector3PB* temp = currentpos_;
  currentpos_ = NULL;
  return temp;
}
inline void ActorRockerMove::set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos) {
  delete currentpos_;
  currentpos_ = currentpos;
  if (currentpos) {
    set_has_currentpos();
  } else {
    clear_has_currentpos();
  }
}

// required float currentRange = 3;
inline bool ActorRockerMove::has_currentrange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActorRockerMove::set_has_currentrange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActorRockerMove::clear_has_currentrange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActorRockerMove::clear_currentrange() {
  currentrange_ = 0;
  clear_has_currentrange();
}
inline float ActorRockerMove::currentrange() const {
  return currentrange_;
}
inline void ActorRockerMove::set_currentrange(float value) {
  set_has_currentrange();
  currentrange_ = value;
}

// required .ProtoBuf.ActorRockerMove.Type moveType = 4;
inline bool ActorRockerMove::has_movetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActorRockerMove::set_has_movetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActorRockerMove::clear_has_movetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActorRockerMove::clear_movetype() {
  movetype_ = 1;
  clear_has_movetype();
}
inline ::ProtoBuf::ActorRockerMove_Type ActorRockerMove::movetype() const {
  return static_cast< ::ProtoBuf::ActorRockerMove_Type >(movetype_);
}
inline void ActorRockerMove::set_movetype(::ProtoBuf::ActorRockerMove_Type value) {
  assert(::ProtoBuf::ActorRockerMove_Type_IsValid(value));
  set_has_movetype();
  movetype_ = value;
}

// -------------------------------------------------------------------

// ActorPosUpDate

// required uint32 cid = 1;
inline bool ActorPosUpDate::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActorPosUpDate::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActorPosUpDate::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActorPosUpDate::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 ActorPosUpDate::cid() const {
  return cid_;
}
inline void ActorPosUpDate::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
}

// required .ProtoBuf.Vector3PB currentPos = 2;
inline bool ActorPosUpDate::has_currentpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActorPosUpDate::set_has_currentpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActorPosUpDate::clear_has_currentpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActorPosUpDate::clear_currentpos() {
  if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
  clear_has_currentpos();
}
inline const ::ProtoBuf::Vector3PB& ActorPosUpDate::currentpos() const {
  return currentpos_ != NULL ? *currentpos_ : *default_instance_->currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorPosUpDate::mutable_currentpos() {
  set_has_currentpos();
  if (currentpos_ == NULL) currentpos_ = new ::ProtoBuf::Vector3PB;
  return currentpos_;
}
inline ::ProtoBuf::Vector3PB* ActorPosUpDate::release_currentpos() {
  clear_has_currentpos();
  ::ProtoBuf::Vector3PB* temp = currentpos_;
  currentpos_ = NULL;
  return temp;
}
inline void ActorPosUpDate::set_allocated_currentpos(::ProtoBuf::Vector3PB* currentpos) {
  delete currentpos_;
  currentpos_ = currentpos;
  if (currentpos) {
    set_has_currentpos();
  } else {
    clear_has_currentpos();
  }
}

// required .ProtoBuf.Vector3PB currentDir = 3;
inline bool ActorPosUpDate::has_currentdir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActorPosUpDate::set_has_currentdir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActorPosUpDate::clear_has_currentdir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActorPosUpDate::clear_currentdir() {
  if (currentdir_ != NULL) currentdir_->::ProtoBuf::Vector3PB::Clear();
  clear_has_currentdir();
}
inline const ::ProtoBuf::Vector3PB& ActorPosUpDate::currentdir() const {
  return currentdir_ != NULL ? *currentdir_ : *default_instance_->currentdir_;
}
inline ::ProtoBuf::Vector3PB* ActorPosUpDate::mutable_currentdir() {
  set_has_currentdir();
  if (currentdir_ == NULL) currentdir_ = new ::ProtoBuf::Vector3PB;
  return currentdir_;
}
inline ::ProtoBuf::Vector3PB* ActorPosUpDate::release_currentdir() {
  clear_has_currentdir();
  ::ProtoBuf::Vector3PB* temp = currentdir_;
  currentdir_ = NULL;
  return temp;
}
inline void ActorPosUpDate::set_allocated_currentdir(::ProtoBuf::Vector3PB* currentdir) {
  delete currentdir_;
  currentdir_ = currentdir;
  if (currentdir) {
    set_has_currentdir();
  } else {
    clear_has_currentdir();
  }
}

// optional uint32 isend = 4;
inline bool ActorPosUpDate::has_isend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActorPosUpDate::set_has_isend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActorPosUpDate::clear_has_isend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActorPosUpDate::clear_isend() {
  isend_ = 0u;
  clear_has_isend();
}
inline ::google::protobuf::uint32 ActorPosUpDate::isend() const {
  return isend_;
}
inline void ActorPosUpDate::set_isend(::google::protobuf::uint32 value) {
  set_has_isend();
  isend_ = value;
}

// -------------------------------------------------------------------

// CharSyncAttr

// required uint32 attrid = 1;
inline bool CharSyncAttr::has_attrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharSyncAttr::set_has_attrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharSyncAttr::clear_has_attrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharSyncAttr::clear_attrid() {
  attrid_ = 0u;
  clear_has_attrid();
}
inline ::google::protobuf::uint32 CharSyncAttr::attrid() const {
  return attrid_;
}
inline void CharSyncAttr::set_attrid(::google::protobuf::uint32 value) {
  set_has_attrid();
  attrid_ = value;
}

// required uint32 attrval = 2;
inline bool CharSyncAttr::has_attrval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharSyncAttr::set_has_attrval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharSyncAttr::clear_has_attrval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharSyncAttr::clear_attrval() {
  attrval_ = 0u;
  clear_has_attrval();
}
inline ::google::protobuf::uint32 CharSyncAttr::attrval() const {
  return attrval_;
}
inline void CharSyncAttr::set_attrval(::google::protobuf::uint32 value) {
  set_has_attrval();
  attrval_ = value;
}

// -------------------------------------------------------------------

// SkillCell

// required uint32 skillId = 1;
inline bool SkillCell::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillCell::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillCell::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillCell::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 SkillCell::skillid() const {
  return skillid_;
}
inline void SkillCell::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// required uint32 skillLev = 2;
inline bool SkillCell::has_skilllev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillCell::set_has_skilllev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillCell::clear_has_skilllev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillCell::clear_skilllev() {
  skilllev_ = 0u;
  clear_has_skilllev();
}
inline ::google::protobuf::uint32 SkillCell::skilllev() const {
  return skilllev_;
}
inline void SkillCell::set_skilllev(::google::protobuf::uint32 value) {
  set_has_skilllev();
  skilllev_ = value;
}

// optional uint64 cd = 3;
inline bool SkillCell::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillCell::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillCell::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillCell::clear_cd() {
  cd_ = GOOGLE_ULONGLONG(0);
  clear_has_cd();
}
inline ::google::protobuf::uint64 SkillCell::cd() const {
  return cd_;
}
inline void SkillCell::set_cd(::google::protobuf::uint64 value) {
  set_has_cd();
  cd_ = value;
}

// -------------------------------------------------------------------

// Attr

// required uint32 AttrNum = 1;
inline bool Attr::has_attrnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attr::set_has_attrnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attr::clear_has_attrnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attr::clear_attrnum() {
  attrnum_ = 0u;
  clear_has_attrnum();
}
inline ::google::protobuf::uint32 Attr::attrnum() const {
  return attrnum_;
}
inline void Attr::set_attrnum(::google::protobuf::uint32 value) {
  set_has_attrnum();
  attrnum_ = value;
}

// required uint32 Attrvalue = 2;
inline bool Attr::has_attrvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attr::set_has_attrvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attr::clear_has_attrvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attr::clear_attrvalue() {
  attrvalue_ = 0u;
  clear_has_attrvalue();
}
inline ::google::protobuf::uint32 Attr::attrvalue() const {
  return attrvalue_;
}
inline void Attr::set_attrvalue(::google::protobuf::uint32 value) {
  set_has_attrvalue();
  attrvalue_ = value;
}

// -------------------------------------------------------------------

// DigPerfor

// required uint32 type = 1;
inline bool DigPerfor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DigPerfor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DigPerfor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DigPerfor::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 DigPerfor::type() const {
  return type_;
}
inline void DigPerfor::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 value = 2;
inline bool DigPerfor::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DigPerfor::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DigPerfor::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DigPerfor::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 DigPerfor::value() const {
  return value_;
}
inline void DigPerfor::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// IsCanTransSceneRouteReq

// required uint32 dstMapId = 1;
inline bool IsCanTransSceneRouteReq::has_dstmapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsCanTransSceneRouteReq::set_has_dstmapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsCanTransSceneRouteReq::clear_has_dstmapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsCanTransSceneRouteReq::clear_dstmapid() {
  dstmapid_ = 0u;
  clear_has_dstmapid();
}
inline ::google::protobuf::uint32 IsCanTransSceneRouteReq::dstmapid() const {
  return dstmapid_;
}
inline void IsCanTransSceneRouteReq::set_dstmapid(::google::protobuf::uint32 value) {
  set_has_dstmapid();
  dstmapid_ = value;
}

// required uint32 sceneRouteId = 2;
inline bool IsCanTransSceneRouteReq::has_scenerouteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IsCanTransSceneRouteReq::set_has_scenerouteid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IsCanTransSceneRouteReq::clear_has_scenerouteid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IsCanTransSceneRouteReq::clear_scenerouteid() {
  scenerouteid_ = 0u;
  clear_has_scenerouteid();
}
inline ::google::protobuf::uint32 IsCanTransSceneRouteReq::scenerouteid() const {
  return scenerouteid_;
}
inline void IsCanTransSceneRouteReq::set_scenerouteid(::google::protobuf::uint32 value) {
  set_has_scenerouteid();
  scenerouteid_ = value;
}

// -------------------------------------------------------------------

// IsCanTransSceneReq

// required uint32 dstMapId = 1;
inline bool IsCanTransSceneReq::has_dstmapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsCanTransSceneReq::set_has_dstmapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsCanTransSceneReq::clear_has_dstmapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsCanTransSceneReq::clear_dstmapid() {
  dstmapid_ = 0u;
  clear_has_dstmapid();
}
inline ::google::protobuf::uint32 IsCanTransSceneReq::dstmapid() const {
  return dstmapid_;
}
inline void IsCanTransSceneReq::set_dstmapid(::google::protobuf::uint32 value) {
  set_has_dstmapid();
  dstmapid_ = value;
}

// -------------------------------------------------------------------

// ItemSellProto

// required uint32 index = 1;
inline bool ItemSellProto::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemSellProto::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemSellProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemSellProto::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ItemSellProto::index() const {
  return index_;
}
inline void ItemSellProto::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 num = 2;
inline bool ItemSellProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemSellProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemSellProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemSellProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ItemSellProto::num() const {
  return num_;
}
inline void ItemSellProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// OneKeyDressProto

// required int32 index = 1;
inline bool OneKeyDressProto::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneKeyDressProto::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneKeyDressProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneKeyDressProto::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 OneKeyDressProto::index() const {
  return index_;
}
inline void OneKeyDressProto::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 pos = 2;
inline bool OneKeyDressProto::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneKeyDressProto::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneKeyDressProto::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneKeyDressProto::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 OneKeyDressProto::pos() const {
  return pos_;
}
inline void OneKeyDressProto::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// RewardItemProto

// repeated .ProtoBuf.ItemProtoInfo info = 1;
inline int RewardItemProto::info_size() const {
  return info_.size();
}
inline void RewardItemProto::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& RewardItemProto::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* RewardItemProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* RewardItemProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
RewardItemProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
RewardItemProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// DuplicateProto

// required int32 dupliate_id = 1;
inline bool DuplicateProto::has_dupliate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DuplicateProto::set_has_dupliate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DuplicateProto::clear_has_dupliate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DuplicateProto::clear_dupliate_id() {
  dupliate_id_ = 0;
  clear_has_dupliate_id();
}
inline ::google::protobuf::int32 DuplicateProto::dupliate_id() const {
  return dupliate_id_;
}
inline void DuplicateProto::set_dupliate_id(::google::protobuf::int32 value) {
  set_has_dupliate_id();
  dupliate_id_ = value;
}

// optional int32 star = 2;
inline bool DuplicateProto::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DuplicateProto::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DuplicateProto::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DuplicateProto::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 DuplicateProto::star() const {
  return star_;
}
inline void DuplicateProto::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 reward_count = 3;
inline bool DuplicateProto::has_reward_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DuplicateProto::set_has_reward_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DuplicateProto::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DuplicateProto::clear_reward_count() {
  reward_count_ = 0;
  clear_has_reward_count();
}
inline ::google::protobuf::int32 DuplicateProto::reward_count() const {
  return reward_count_;
}
inline void DuplicateProto::set_reward_count(::google::protobuf::int32 value) {
  set_has_reward_count();
  reward_count_ = value;
}

// optional int32 buy_count = 4;
inline bool DuplicateProto::has_buy_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DuplicateProto::set_has_buy_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DuplicateProto::clear_has_buy_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DuplicateProto::clear_buy_count() {
  buy_count_ = 0;
  clear_has_buy_count();
}
inline ::google::protobuf::int32 DuplicateProto::buy_count() const {
  return buy_count_;
}
inline void DuplicateProto::set_buy_count(::google::protobuf::int32 value) {
  set_has_buy_count();
  buy_count_ = value;
}

// -------------------------------------------------------------------

// RelationMember

// optional uint32 id = 1;
inline bool RelationMember::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelationMember::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelationMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelationMember::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RelationMember::id() const {
  return id_;
}
inline void RelationMember::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// RelationInfo

// optional uint32 groupIndex = 1;
inline bool RelationInfo::has_groupindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelationInfo::set_has_groupindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelationInfo::clear_has_groupindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelationInfo::clear_groupindex() {
  groupindex_ = 0u;
  clear_has_groupindex();
}
inline ::google::protobuf::uint32 RelationInfo::groupindex() const {
  return groupindex_;
}
inline void RelationInfo::set_groupindex(::google::protobuf::uint32 value) {
  set_has_groupindex();
  groupindex_ = value;
}

// repeated .ProtoBuf.RelationMember members = 2;
inline int RelationInfo::members_size() const {
  return members_.size();
}
inline void RelationInfo::clear_members() {
  members_.Clear();
}
inline const ::ProtoBuf::RelationMember& RelationInfo::members(int index) const {
  return members_.Get(index);
}
inline ::ProtoBuf::RelationMember* RelationInfo::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::ProtoBuf::RelationMember* RelationInfo::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationMember >&
RelationInfo::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationMember >*
RelationInfo::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// RelationPhysicalTab

// optional uint32 id = 1;
inline bool RelationPhysicalTab::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelationPhysicalTab::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelationPhysicalTab::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelationPhysicalTab::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RelationPhysicalTab::id() const {
  return id_;
}
inline void RelationPhysicalTab::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 lastGivePlyTime = 2;
inline bool RelationPhysicalTab::has_lastgiveplytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelationPhysicalTab::set_has_lastgiveplytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelationPhysicalTab::clear_has_lastgiveplytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelationPhysicalTab::clear_lastgiveplytime() {
  lastgiveplytime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastgiveplytime();
}
inline ::google::protobuf::uint64 RelationPhysicalTab::lastgiveplytime() const {
  return lastgiveplytime_;
}
inline void RelationPhysicalTab::set_lastgiveplytime(::google::protobuf::uint64 value) {
  set_has_lastgiveplytime();
  lastgiveplytime_ = value;
}

// optional uint32 lastGetPhyTime = 3;
inline bool RelationPhysicalTab::has_lastgetphytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelationPhysicalTab::set_has_lastgetphytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelationPhysicalTab::clear_has_lastgetphytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelationPhysicalTab::clear_lastgetphytime() {
  lastgetphytime_ = 0u;
  clear_has_lastgetphytime();
}
inline ::google::protobuf::uint32 RelationPhysicalTab::lastgetphytime() const {
  return lastgetphytime_;
}
inline void RelationPhysicalTab::set_lastgetphytime(::google::protobuf::uint32 value) {
  set_has_lastgetphytime();
  lastgetphytime_ = value;
}

// optional uint32 getPlyStatus = 4;
inline bool RelationPhysicalTab::has_getplystatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelationPhysicalTab::set_has_getplystatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelationPhysicalTab::clear_has_getplystatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelationPhysicalTab::clear_getplystatus() {
  getplystatus_ = 0u;
  clear_has_getplystatus();
}
inline ::google::protobuf::uint32 RelationPhysicalTab::getplystatus() const {
  return getplystatus_;
}
inline void RelationPhysicalTab::set_getplystatus(::google::protobuf::uint32 value) {
  set_has_getplystatus();
  getplystatus_ = value;
}

// -------------------------------------------------------------------

// RelationDBInfo

// repeated .ProtoBuf.RelationInfo info = 1;
inline int RelationDBInfo::info_size() const {
  return info_.size();
}
inline void RelationDBInfo::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::RelationInfo& RelationDBInfo::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::RelationInfo* RelationDBInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::RelationInfo* RelationDBInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationInfo >&
RelationDBInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationInfo >*
RelationDBInfo::mutable_info() {
  return &info_;
}

// repeated .ProtoBuf.RelationPhysicalTab physicalTab = 2;
inline int RelationDBInfo::physicaltab_size() const {
  return physicaltab_.size();
}
inline void RelationDBInfo::clear_physicaltab() {
  physicaltab_.Clear();
}
inline const ::ProtoBuf::RelationPhysicalTab& RelationDBInfo::physicaltab(int index) const {
  return physicaltab_.Get(index);
}
inline ::ProtoBuf::RelationPhysicalTab* RelationDBInfo::mutable_physicaltab(int index) {
  return physicaltab_.Mutable(index);
}
inline ::ProtoBuf::RelationPhysicalTab* RelationDBInfo::add_physicaltab() {
  return physicaltab_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationPhysicalTab >&
RelationDBInfo::physicaltab() const {
  return physicaltab_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::RelationPhysicalTab >*
RelationDBInfo::mutable_physicaltab() {
  return &physicaltab_;
}

// repeated uint32 applyList = 3;
inline int RelationDBInfo::applylist_size() const {
  return applylist_.size();
}
inline void RelationDBInfo::clear_applylist() {
  applylist_.Clear();
}
inline ::google::protobuf::uint32 RelationDBInfo::applylist(int index) const {
  return applylist_.Get(index);
}
inline void RelationDBInfo::set_applylist(int index, ::google::protobuf::uint32 value) {
  applylist_.Set(index, value);
}
inline void RelationDBInfo::add_applylist(::google::protobuf::uint32 value) {
  applylist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RelationDBInfo::applylist() const {
  return applylist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RelationDBInfo::mutable_applylist() {
  return &applylist_;
}

// optional uint32 giveTimes = 4;
inline bool RelationDBInfo::has_givetimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelationDBInfo::set_has_givetimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelationDBInfo::clear_has_givetimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelationDBInfo::clear_givetimes() {
  givetimes_ = 0u;
  clear_has_givetimes();
}
inline ::google::protobuf::uint32 RelationDBInfo::givetimes() const {
  return givetimes_;
}
inline void RelationDBInfo::set_givetimes(::google::protobuf::uint32 value) {
  set_has_givetimes();
  givetimes_ = value;
}

// optional uint64 lastGivePlyTime = 5;
inline bool RelationDBInfo::has_lastgiveplytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelationDBInfo::set_has_lastgiveplytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelationDBInfo::clear_has_lastgiveplytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelationDBInfo::clear_lastgiveplytime() {
  lastgiveplytime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastgiveplytime();
}
inline ::google::protobuf::uint64 RelationDBInfo::lastgiveplytime() const {
  return lastgiveplytime_;
}
inline void RelationDBInfo::set_lastgiveplytime(::google::protobuf::uint64 value) {
  set_has_lastgiveplytime();
  lastgiveplytime_ = value;
}

// optional uint32 progress = 6;
inline bool RelationDBInfo::has_progress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelationDBInfo::set_has_progress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelationDBInfo::clear_has_progress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelationDBInfo::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 RelationDBInfo::progress() const {
  return progress_;
}
inline void RelationDBInfo::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
}

// -------------------------------------------------------------------

// CharacterPlayerMiniInfo

// optional uint32 playerId = 1;
inline bool CharacterPlayerMiniInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterPlayerMiniInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterPlayerMiniInfo::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 CharacterPlayerMiniInfo::playerid() const {
  return playerid_;
}
inline void CharacterPlayerMiniInfo::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string playerName = 2;
inline bool CharacterPlayerMiniInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterPlayerMiniInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterPlayerMiniInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& CharacterPlayerMiniInfo::playername() const {
  return *playername_;
}
inline void CharacterPlayerMiniInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CharacterPlayerMiniInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void CharacterPlayerMiniInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterPlayerMiniInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* CharacterPlayerMiniInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterPlayerMiniInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 3;
inline bool CharacterPlayerMiniInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterPlayerMiniInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterPlayerMiniInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 CharacterPlayerMiniInfo::sex() const {
  return sex_;
}
inline void CharacterPlayerMiniInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 4;
inline bool CharacterPlayerMiniInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterPlayerMiniInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterPlayerMiniInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CharacterPlayerMiniInfo::level() const {
  return level_;
}
inline void CharacterPlayerMiniInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 closeness = 5;
inline bool CharacterPlayerMiniInfo::has_closeness() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_closeness() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterPlayerMiniInfo::clear_has_closeness() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterPlayerMiniInfo::clear_closeness() {
  closeness_ = 0u;
  clear_has_closeness();
}
inline ::google::protobuf::uint32 CharacterPlayerMiniInfo::closeness() const {
  return closeness_;
}
inline void CharacterPlayerMiniInfo::set_closeness(::google::protobuf::uint32 value) {
  set_has_closeness();
  closeness_ = value;
}

// optional bool givePlysical = 6 [default = false];
inline bool CharacterPlayerMiniInfo::has_giveplysical() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_giveplysical() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterPlayerMiniInfo::clear_has_giveplysical() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterPlayerMiniInfo::clear_giveplysical() {
  giveplysical_ = false;
  clear_has_giveplysical();
}
inline bool CharacterPlayerMiniInfo::giveplysical() const {
  return giveplysical_;
}
inline void CharacterPlayerMiniInfo::set_giveplysical(bool value) {
  set_has_giveplysical();
  giveplysical_ = value;
}

// optional uint32 getPlyStatus = 7 [default = 0];
inline bool CharacterPlayerMiniInfo::has_getplystatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_getplystatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterPlayerMiniInfo::clear_has_getplystatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterPlayerMiniInfo::clear_getplystatus() {
  getplystatus_ = 0u;
  clear_has_getplystatus();
}
inline ::google::protobuf::uint32 CharacterPlayerMiniInfo::getplystatus() const {
  return getplystatus_;
}
inline void CharacterPlayerMiniInfo::set_getplystatus(::google::protobuf::uint32 value) {
  set_has_getplystatus();
  getplystatus_ = value;
}

// optional uint32 recentType = 8;
inline bool CharacterPlayerMiniInfo::has_recenttype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_recenttype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharacterPlayerMiniInfo::clear_has_recenttype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharacterPlayerMiniInfo::clear_recenttype() {
  recenttype_ = 0u;
  clear_has_recenttype();
}
inline ::google::protobuf::uint32 CharacterPlayerMiniInfo::recenttype() const {
  return recenttype_;
}
inline void CharacterPlayerMiniInfo::set_recenttype(::google::protobuf::uint32 value) {
  set_has_recenttype();
  recenttype_ = value;
}

// optional uint64 recentTime = 9;
inline bool CharacterPlayerMiniInfo::has_recenttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CharacterPlayerMiniInfo::set_has_recenttime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CharacterPlayerMiniInfo::clear_has_recenttime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CharacterPlayerMiniInfo::clear_recenttime() {
  recenttime_ = GOOGLE_ULONGLONG(0);
  clear_has_recenttime();
}
inline ::google::protobuf::uint64 CharacterPlayerMiniInfo::recenttime() const {
  return recenttime_;
}
inline void CharacterPlayerMiniInfo::set_recenttime(::google::protobuf::uint64 value) {
  set_has_recenttime();
  recenttime_ = value;
}

// -------------------------------------------------------------------

// CharacterDetailProtoInfo

// optional uint32 charId = 1;
inline bool CharacterDetailProtoInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDetailProtoInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDetailProtoInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDetailProtoInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterDetailProtoInfo::charid() const {
  return charid_;
}
inline void CharacterDetailProtoInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool CharacterDetailProtoInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDetailProtoInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDetailProtoInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDetailProtoInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CharacterDetailProtoInfo::name() const {
  return *name_;
}
inline void CharacterDetailProtoInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharacterDetailProtoInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharacterDetailProtoInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDetailProtoInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CharacterDetailProtoInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDetailProtoInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool CharacterDetailProtoInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDetailProtoInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDetailProtoInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDetailProtoInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CharacterDetailProtoInfo::level() const {
  return level_;
}
inline void CharacterDetailProtoInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 fight = 4;
inline bool CharacterDetailProtoInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDetailProtoInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDetailProtoInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDetailProtoInfo::clear_fight() {
  fight_ = 0u;
  clear_has_fight();
}
inline ::google::protobuf::uint32 CharacterDetailProtoInfo::fight() const {
  return fight_;
}
inline void CharacterDetailProtoInfo::set_fight(::google::protobuf::uint32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 prof = 5;
inline bool CharacterDetailProtoInfo::has_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDetailProtoInfo::set_has_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDetailProtoInfo::clear_has_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDetailProtoInfo::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 CharacterDetailProtoInfo::prof() const {
  return prof_;
}
inline void CharacterDetailProtoInfo::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 6;
inline bool CharacterDetailProtoInfo::has_attr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDetailProtoInfo::set_has_attr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDetailProtoInfo::clear_has_attr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDetailProtoInfo::clear_attr() {
  if (attr_ != NULL) attr_->::ProtoBuf::CharacterDBAttrDetailInfo::Clear();
  clear_has_attr();
}
inline const ::ProtoBuf::CharacterDBAttrDetailInfo& CharacterDetailProtoInfo::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::ProtoBuf::CharacterDBAttrDetailInfo* CharacterDetailProtoInfo::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::ProtoBuf::CharacterDBAttrDetailInfo;
  return attr_;
}
inline ::ProtoBuf::CharacterDBAttrDetailInfo* CharacterDetailProtoInfo::release_attr() {
  clear_has_attr();
  ::ProtoBuf::CharacterDBAttrDetailInfo* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void CharacterDetailProtoInfo::set_allocated_attr(::ProtoBuf::CharacterDBAttrDetailInfo* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// repeated .ProtoBuf.ItemProtoInfo equip = 7;
inline int CharacterDetailProtoInfo::equip_size() const {
  return equip_.size();
}
inline void CharacterDetailProtoInfo::clear_equip() {
  equip_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& CharacterDetailProtoInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDetailProtoInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* CharacterDetailProtoInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
CharacterDetailProtoInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
CharacterDetailProtoInfo::mutable_equip() {
  return &equip_;
}

// -------------------------------------------------------------------

// MailAttachmentList

// repeated .ProtoBuf.ItemProtoInfo itemInfo = 1;
inline int MailAttachmentList::iteminfo_size() const {
  return iteminfo_.size();
}
inline void MailAttachmentList::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::ProtoBuf::ItemProtoInfo& MailAttachmentList::iteminfo(int index) const {
  return iteminfo_.Get(index);
}
inline ::ProtoBuf::ItemProtoInfo* MailAttachmentList::mutable_iteminfo(int index) {
  return iteminfo_.Mutable(index);
}
inline ::ProtoBuf::ItemProtoInfo* MailAttachmentList::add_iteminfo() {
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >&
MailAttachmentList::iteminfo() const {
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::ItemProtoInfo >*
MailAttachmentList::mutable_iteminfo() {
  return &iteminfo_;
}

// -------------------------------------------------------------------

// MailHead

// optional uint32 mailId = 1;
inline bool MailHead::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailHead::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailHead::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailHead::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 MailHead::mailid() const {
  return mailid_;
}
inline void MailHead::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// optional uint32 type = 2;
inline bool MailHead::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailHead::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailHead::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailHead::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 MailHead::type() const {
  return type_;
}
inline void MailHead::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 sendPlayerId = 3;
inline bool MailHead::has_sendplayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailHead::set_has_sendplayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailHead::clear_has_sendplayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailHead::clear_sendplayerid() {
  sendplayerid_ = 0u;
  clear_has_sendplayerid();
}
inline ::google::protobuf::uint32 MailHead::sendplayerid() const {
  return sendplayerid_;
}
inline void MailHead::set_sendplayerid(::google::protobuf::uint32 value) {
  set_has_sendplayerid();
  sendplayerid_ = value;
}

// optional bytes sendPlayerName = 4;
inline bool MailHead::has_sendplayername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailHead::set_has_sendplayername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailHead::clear_has_sendplayername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailHead::clear_sendplayername() {
  if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
    sendplayername_->clear();
  }
  clear_has_sendplayername();
}
inline const ::std::string& MailHead::sendplayername() const {
  return *sendplayername_;
}
inline void MailHead::set_sendplayername(const ::std::string& value) {
  set_has_sendplayername();
  if (sendplayername_ == &::google::protobuf::internal::kEmptyString) {
    sendplayername_ = new ::std::string;
  }
  sendplayername_->assign(value);
}
inline void MailHead::set_sendplayername(const char* value) {
  set_has_sendplayername();
  if (sendplayername_ == &::google::protobuf::internal::kEmptyString) {
    sendplayername_ = new ::std::string;
  }
  sendplayername_->assign(value);
}
inline void MailHead::set_sendplayername(const void* value, size_t size) {
  set_has_sendplayername();
  if (sendplayername_ == &::google::protobuf::internal::kEmptyString) {
    sendplayername_ = new ::std::string;
  }
  sendplayername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailHead::mutable_sendplayername() {
  set_has_sendplayername();
  if (sendplayername_ == &::google::protobuf::internal::kEmptyString) {
    sendplayername_ = new ::std::string;
  }
  return sendplayername_;
}
inline ::std::string* MailHead::release_sendplayername() {
  clear_has_sendplayername();
  if (sendplayername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendplayername_;
    sendplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailHead::set_allocated_sendplayername(::std::string* sendplayername) {
  if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendplayername_;
  }
  if (sendplayername) {
    set_has_sendplayername();
    sendplayername_ = sendplayername;
  } else {
    clear_has_sendplayername();
    sendplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 destPlayerId = 5;
inline bool MailHead::has_destplayerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailHead::set_has_destplayerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailHead::clear_has_destplayerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailHead::clear_destplayerid() {
  destplayerid_ = 0u;
  clear_has_destplayerid();
}
inline ::google::protobuf::uint32 MailHead::destplayerid() const {
  return destplayerid_;
}
inline void MailHead::set_destplayerid(::google::protobuf::uint32 value) {
  set_has_destplayerid();
  destplayerid_ = value;
}

// optional bytes topic = 6;
inline bool MailHead::has_topic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailHead::set_has_topic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailHead::clear_has_topic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailHead::clear_topic() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& MailHead::topic() const {
  return *topic_;
}
inline void MailHead::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void MailHead::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void MailHead::set_topic(const void* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailHead::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  return topic_;
}
inline ::std::string* MailHead::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailHead::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 createTime = 7;
inline bool MailHead::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailHead::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailHead::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailHead::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 MailHead::createtime() const {
  return createtime_;
}
inline void MailHead::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional uint32 status = 8;
inline bool MailHead::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailHead::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailHead::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailHead::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 MailHead::status() const {
  return status_;
}
inline void MailHead::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 attachmentNum = 9;
inline bool MailHead::has_attachmentnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MailHead::set_has_attachmentnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MailHead::clear_has_attachmentnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MailHead::clear_attachmentnum() {
  attachmentnum_ = 0u;
  clear_has_attachmentnum();
}
inline ::google::protobuf::uint32 MailHead::attachmentnum() const {
  return attachmentnum_;
}
inline void MailHead::set_attachmentnum(::google::protobuf::uint32 value) {
  set_has_attachmentnum();
  attachmentnum_ = value;
}

// optional int32 fetch = 10;
inline bool MailHead::has_fetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MailHead::set_has_fetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MailHead::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MailHead::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 MailHead::fetch() const {
  return fetch_;
}
inline void MailHead::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// MailInfo

// optional .ProtoBuf.MailHead mailHead = 1;
inline bool MailInfo::has_mailhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailInfo::set_has_mailhead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailInfo::clear_has_mailhead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailInfo::clear_mailhead() {
  if (mailhead_ != NULL) mailhead_->::ProtoBuf::MailHead::Clear();
  clear_has_mailhead();
}
inline const ::ProtoBuf::MailHead& MailInfo::mailhead() const {
  return mailhead_ != NULL ? *mailhead_ : *default_instance_->mailhead_;
}
inline ::ProtoBuf::MailHead* MailInfo::mutable_mailhead() {
  set_has_mailhead();
  if (mailhead_ == NULL) mailhead_ = new ::ProtoBuf::MailHead;
  return mailhead_;
}
inline ::ProtoBuf::MailHead* MailInfo::release_mailhead() {
  clear_has_mailhead();
  ::ProtoBuf::MailHead* temp = mailhead_;
  mailhead_ = NULL;
  return temp;
}
inline void MailInfo::set_allocated_mailhead(::ProtoBuf::MailHead* mailhead) {
  delete mailhead_;
  mailhead_ = mailhead;
  if (mailhead) {
    set_has_mailhead();
  } else {
    clear_has_mailhead();
  }
}

// optional bytes content = 2;
inline bool MailInfo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailInfo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MailInfo::content() const {
  return *content_;
}
inline void MailInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailInfo::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MailInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gold = 3;
inline bool MailInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailInfo::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 MailInfo::gold() const {
  return gold_;
}
inline void MailInfo::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 diamond = 4;
inline bool MailInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailInfo::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 MailInfo::diamond() const {
  return diamond_;
}
inline void MailInfo::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional uint32 bindGold = 5;
inline bool MailInfo::has_bindgold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailInfo::set_has_bindgold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailInfo::clear_has_bindgold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailInfo::clear_bindgold() {
  bindgold_ = 0u;
  clear_has_bindgold();
}
inline ::google::protobuf::uint32 MailInfo::bindgold() const {
  return bindgold_;
}
inline void MailInfo::set_bindgold(::google::protobuf::uint32 value) {
  set_has_bindgold();
  bindgold_ = value;
}

// optional uint32 bindDiamond = 6;
inline bool MailInfo::has_binddiamond() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailInfo::set_has_binddiamond() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailInfo::clear_has_binddiamond() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailInfo::clear_binddiamond() {
  binddiamond_ = 0u;
  clear_has_binddiamond();
}
inline ::google::protobuf::uint32 MailInfo::binddiamond() const {
  return binddiamond_;
}
inline void MailInfo::set_binddiamond(::google::protobuf::uint32 value) {
  set_has_binddiamond();
  binddiamond_ = value;
}

// optional uint32 sellType = 7;
inline bool MailInfo::has_selltype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailInfo::set_has_selltype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailInfo::clear_has_selltype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailInfo::clear_selltype() {
  selltype_ = 0u;
  clear_has_selltype();
}
inline ::google::protobuf::uint32 MailInfo::selltype() const {
  return selltype_;
}
inline void MailInfo::set_selltype(::google::protobuf::uint32 value) {
  set_has_selltype();
  selltype_ = value;
}

// optional uint32 sellNum = 8;
inline bool MailInfo::has_sellnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailInfo::set_has_sellnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailInfo::clear_has_sellnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailInfo::clear_sellnum() {
  sellnum_ = 0u;
  clear_has_sellnum();
}
inline ::google::protobuf::uint32 MailInfo::sellnum() const {
  return sellnum_;
}
inline void MailInfo::set_sellnum(::google::protobuf::uint32 value) {
  set_has_sellnum();
  sellnum_ = value;
}

// optional .ProtoBuf.MailAttachmentList attachmentList = 9;
inline bool MailInfo::has_attachmentlist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MailInfo::set_has_attachmentlist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MailInfo::clear_has_attachmentlist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MailInfo::clear_attachmentlist() {
  if (attachmentlist_ != NULL) attachmentlist_->::ProtoBuf::MailAttachmentList::Clear();
  clear_has_attachmentlist();
}
inline const ::ProtoBuf::MailAttachmentList& MailInfo::attachmentlist() const {
  return attachmentlist_ != NULL ? *attachmentlist_ : *default_instance_->attachmentlist_;
}
inline ::ProtoBuf::MailAttachmentList* MailInfo::mutable_attachmentlist() {
  set_has_attachmentlist();
  if (attachmentlist_ == NULL) attachmentlist_ = new ::ProtoBuf::MailAttachmentList;
  return attachmentlist_;
}
inline ::ProtoBuf::MailAttachmentList* MailInfo::release_attachmentlist() {
  clear_has_attachmentlist();
  ::ProtoBuf::MailAttachmentList* temp = attachmentlist_;
  attachmentlist_ = NULL;
  return temp;
}
inline void MailInfo::set_allocated_attachmentlist(::ProtoBuf::MailAttachmentList* attachmentlist) {
  delete attachmentlist_;
  attachmentlist_ = attachmentlist;
  if (attachmentlist) {
    set_has_attachmentlist();
  } else {
    clear_has_attachmentlist();
  }
}

// -------------------------------------------------------------------

// MiniMailInfo

// optional .ProtoBuf.MailHead mailHead = 1;
inline bool MiniMailInfo::has_mailhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MiniMailInfo::set_has_mailhead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MiniMailInfo::clear_has_mailhead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MiniMailInfo::clear_mailhead() {
  if (mailhead_ != NULL) mailhead_->::ProtoBuf::MailHead::Clear();
  clear_has_mailhead();
}
inline const ::ProtoBuf::MailHead& MiniMailInfo::mailhead() const {
  return mailhead_ != NULL ? *mailhead_ : *default_instance_->mailhead_;
}
inline ::ProtoBuf::MailHead* MiniMailInfo::mutable_mailhead() {
  set_has_mailhead();
  if (mailhead_ == NULL) mailhead_ = new ::ProtoBuf::MailHead;
  return mailhead_;
}
inline ::ProtoBuf::MailHead* MiniMailInfo::release_mailhead() {
  clear_has_mailhead();
  ::ProtoBuf::MailHead* temp = mailhead_;
  mailhead_ = NULL;
  return temp;
}
inline void MiniMailInfo::set_allocated_mailhead(::ProtoBuf::MailHead* mailhead) {
  delete mailhead_;
  mailhead_ = mailhead;
  if (mailhead) {
    set_has_mailhead();
  } else {
    clear_has_mailhead();
  }
}

// optional uint32 sellMoney = 2;
inline bool MiniMailInfo::has_sellmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiniMailInfo::set_has_sellmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiniMailInfo::clear_has_sellmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiniMailInfo::clear_sellmoney() {
  sellmoney_ = 0u;
  clear_has_sellmoney();
}
inline ::google::protobuf::uint32 MiniMailInfo::sellmoney() const {
  return sellmoney_;
}
inline void MiniMailInfo::set_sellmoney(::google::protobuf::uint32 value) {
  set_has_sellmoney();
  sellmoney_ = value;
}

// optional .ProtoBuf.MailAttachmentList attachmentList = 3;
inline bool MiniMailInfo::has_attachmentlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MiniMailInfo::set_has_attachmentlist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MiniMailInfo::clear_has_attachmentlist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MiniMailInfo::clear_attachmentlist() {
  if (attachmentlist_ != NULL) attachmentlist_->::ProtoBuf::MailAttachmentList::Clear();
  clear_has_attachmentlist();
}
inline const ::ProtoBuf::MailAttachmentList& MiniMailInfo::attachmentlist() const {
  return attachmentlist_ != NULL ? *attachmentlist_ : *default_instance_->attachmentlist_;
}
inline ::ProtoBuf::MailAttachmentList* MiniMailInfo::mutable_attachmentlist() {
  set_has_attachmentlist();
  if (attachmentlist_ == NULL) attachmentlist_ = new ::ProtoBuf::MailAttachmentList;
  return attachmentlist_;
}
inline ::ProtoBuf::MailAttachmentList* MiniMailInfo::release_attachmentlist() {
  clear_has_attachmentlist();
  ::ProtoBuf::MailAttachmentList* temp = attachmentlist_;
  attachmentlist_ = NULL;
  return temp;
}
inline void MiniMailInfo::set_allocated_attachmentlist(::ProtoBuf::MailAttachmentList* attachmentlist) {
  delete attachmentlist_;
  attachmentlist_ = attachmentlist;
  if (attachmentlist) {
    set_has_attachmentlist();
  } else {
    clear_has_attachmentlist();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::ActorRockerMove_Type>() {
  return ::ProtoBuf::ActorRockerMove_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::DigPerfor_Type>() {
  return ::ProtoBuf::DigPerfor_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::PlayerAttr>() {
  return ::ProtoBuf::PlayerAttr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::MonsterAttr>() {
  return ::ProtoBuf::MonsterAttr_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::CreatureState>() {
  return ::ProtoBuf::CreatureState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBuffer_2fComProtocol_2eproto__INCLUDED
