// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Achievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Achievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* CGGetAchievementInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAchievementInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientAchievementSortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientAchievementSortInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAchievementInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAchievementInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAchievementRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAchievementRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAchievementRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAchievementRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAchievementBoxRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAchievementBoxRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAchievementBoxRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAchievementBoxRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientAchievementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientAchievementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAchievementNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAchievementNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGAchievementNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGAchievementNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Achievement.proto");
  GOOGLE_CHECK(file != NULL);
  CGGetAchievementInfoReq_descriptor_ = file->message_type(0);
  static const int CGGetAchievementInfoReq_offsets_[1] = {
  };
  CGGetAchievementInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAchievementInfoReq_descriptor_,
      CGGetAchievementInfoReq::default_instance_,
      CGGetAchievementInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAchievementInfoReq));
  ClientAchievementSortInfo_descriptor_ = file->message_type(1);
  static const int ClientAchievementSortInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementSortInfo, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementSortInfo, achievementinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementSortInfo, achievementprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementSortInfo, achievementreward_),
  };
  ClientAchievementSortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientAchievementSortInfo_descriptor_,
      ClientAchievementSortInfo::default_instance_,
      ClientAchievementSortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementSortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementSortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientAchievementSortInfo));
  GCGetAchievementInfoRsp_descriptor_ = file->message_type(2);
  static const int GCGetAchievementInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementInfoRsp, achievementlist_),
  };
  GCGetAchievementInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAchievementInfoRsp_descriptor_,
      GCGetAchievementInfoRsp::default_instance_,
      GCGetAchievementInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAchievementInfoRsp));
  CGGetAchievementRewardReq_descriptor_ = file->message_type(3);
  static const int CGGetAchievementRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementRewardReq, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementRewardReq, achievementid_),
  };
  CGGetAchievementRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAchievementRewardReq_descriptor_,
      CGGetAchievementRewardReq::default_instance_,
      CGGetAchievementRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAchievementRewardReq));
  GCGetAchievementRewardRsp_descriptor_ = file->message_type(4);
  static const int GCGetAchievementRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementRewardRsp, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementRewardRsp, achievementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementRewardRsp, ret_),
  };
  GCGetAchievementRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAchievementRewardRsp_descriptor_,
      GCGetAchievementRewardRsp::default_instance_,
      GCGetAchievementRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAchievementRewardRsp));
  CGGetAchievementBoxRewardReq_descriptor_ = file->message_type(5);
  static const int CGGetAchievementBoxRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementBoxRewardReq, prizeid_),
  };
  CGGetAchievementBoxRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAchievementBoxRewardReq_descriptor_,
      CGGetAchievementBoxRewardReq::default_instance_,
      CGGetAchievementBoxRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementBoxRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementBoxRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAchievementBoxRewardReq));
  CGGetAchievementBoxRewardRsp_descriptor_ = file->message_type(6);
  static const int CGGetAchievementBoxRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementBoxRewardRsp, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementBoxRewardRsp, ret_),
  };
  CGGetAchievementBoxRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAchievementBoxRewardRsp_descriptor_,
      CGGetAchievementBoxRewardRsp::default_instance_,
      CGGetAchievementBoxRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementBoxRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementBoxRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAchievementBoxRewardRsp));
  ClientAchievementInfo_descriptor_ = file->message_type(7);
  static const int ClientAchievementInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementInfo, completecount_),
  };
  ClientAchievementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientAchievementInfo_descriptor_,
      ClientAchievementInfo::default_instance_,
      ClientAchievementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientAchievementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientAchievementInfo));
  GCAchievementNotify_descriptor_ = file->message_type(8);
  static const int GCAchievementNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAchievementNotify, changeachievementlist_),
  };
  GCAchievementNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAchievementNotify_descriptor_,
      GCAchievementNotify::default_instance_,
      GCAchievementNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAchievementNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAchievementNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAchievementNotify));
  WGAchievementNotify_descriptor_ = file->message_type(9);
  static const int WGAchievementNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGAchievementNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGAchievementNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGAchievementNotify, parametertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGAchievementNotify, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGAchievementNotify, count_),
  };
  WGAchievementNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGAchievementNotify_descriptor_,
      WGAchievementNotify::default_instance_,
      WGAchievementNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGAchievementNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGAchievementNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGAchievementNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fAchievement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAchievementInfoReq_descriptor_, &CGGetAchievementInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientAchievementSortInfo_descriptor_, &ClientAchievementSortInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAchievementInfoRsp_descriptor_, &GCGetAchievementInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAchievementRewardReq_descriptor_, &CGGetAchievementRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAchievementRewardRsp_descriptor_, &GCGetAchievementRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAchievementBoxRewardReq_descriptor_, &CGGetAchievementBoxRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAchievementBoxRewardRsp_descriptor_, &CGGetAchievementBoxRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientAchievementInfo_descriptor_, &ClientAchievementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAchievementNotify_descriptor_, &GCAchievementNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGAchievementNotify_descriptor_, &WGAchievementNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto() {
  delete CGGetAchievementInfoReq::default_instance_;
  delete CGGetAchievementInfoReq_reflection_;
  delete ClientAchievementSortInfo::default_instance_;
  delete ClientAchievementSortInfo_reflection_;
  delete GCGetAchievementInfoRsp::default_instance_;
  delete GCGetAchievementInfoRsp_reflection_;
  delete CGGetAchievementRewardReq::default_instance_;
  delete CGGetAchievementRewardReq_reflection_;
  delete GCGetAchievementRewardRsp::default_instance_;
  delete GCGetAchievementRewardRsp_reflection_;
  delete CGGetAchievementBoxRewardReq::default_instance_;
  delete CGGetAchievementBoxRewardReq_reflection_;
  delete CGGetAchievementBoxRewardRsp::default_instance_;
  delete CGGetAchievementBoxRewardRsp_reflection_;
  delete ClientAchievementInfo::default_instance_;
  delete ClientAchievementInfo_reflection_;
  delete GCAchievementNotify::default_instance_;
  delete GCAchievementNotify_reflection_;
  delete WGAchievementNotify::default_instance_;
  delete WGAchievementNotify_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035ProtoBuffer/Achievement.proto\022\010ProtoBu"
    "f\032\035ProtoBuffer/ComProtocol.proto\032#ProtoB"
    "uffer/ClientToServerCmd.proto\032\026Common/Co"
    "mDefine.proto\"\031\n\027CGGetAchievementInfoReq"
    "\"\243\001\n\031ClientAchievementSortInfo\022\020\n\010sortTy"
    "pe\030\001 \001(\r\022<\n\023achievementInfoList\030\002 \003(\0132\037."
    "ProtoBuf.ClientAchievementInfo\022\033\n\023achiev"
    "ementProgress\030\003 \001(\r\022\031\n\021achievementReward"
    "\030\004 \001(\r\"W\n\027GCGetAchievementInfoRsp\022<\n\017ach"
    "ievementList\030\001 \003(\0132#.ProtoBuf.ClientAchi"
    "evementSortInfo\"D\n\031CGGetAchievementRewar"
    "dReq\022\020\n\010sortType\030\001 \001(\r\022\025\n\rachievementId\030"
    "\002 \001(\r\"Q\n\031GCGetAchievementRewardRsp\022\020\n\010so"
    "rtType\030\001 \001(\r\022\025\n\rachievementId\030\002 \001(\r\022\013\n\003r"
    "et\030\003 \001(\r\"/\n\034CGGetAchievementBoxRewardReq"
    "\022\017\n\007prizeId\030\001 \001(\r\"<\n\034CGGetAchievementBox"
    "RewardRsp\022\017\n\007prizeId\030\001 \001(\r\022\013\n\003ret\030\002 \001(\r\""
    "J\n\025ClientAchievementInfo\022\n\n\002id\030\001 \001(\r\022\016\n\006"
    "status\030\002 \001(\r\022\025\n\rcompleteCount\030\003 \001(\r\"U\n\023G"
    "CAchievementNotify\022>\n\025changeAchievementL"
    "ist\030\001 \003(\0132\037.ProtoBuf.ClientAchievementIn"
    "fo\"l\n\023WGAchievementNotify\022\016\n\006charId\030\001 \001("
    "\r\022\014\n\004type\030\002 \001(\r\022\025\n\rparameterType\030\003 \001(\r\022\021"
    "\n\tparameter\030\004 \001(\r\022\r\n\005count\030\005 \001(\r", 952);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Achievement.proto", &protobuf_RegisterTypes);
  CGGetAchievementInfoReq::default_instance_ = new CGGetAchievementInfoReq();
  ClientAchievementSortInfo::default_instance_ = new ClientAchievementSortInfo();
  GCGetAchievementInfoRsp::default_instance_ = new GCGetAchievementInfoRsp();
  CGGetAchievementRewardReq::default_instance_ = new CGGetAchievementRewardReq();
  GCGetAchievementRewardRsp::default_instance_ = new GCGetAchievementRewardRsp();
  CGGetAchievementBoxRewardReq::default_instance_ = new CGGetAchievementBoxRewardReq();
  CGGetAchievementBoxRewardRsp::default_instance_ = new CGGetAchievementBoxRewardRsp();
  ClientAchievementInfo::default_instance_ = new ClientAchievementInfo();
  GCAchievementNotify::default_instance_ = new GCAchievementNotify();
  WGAchievementNotify::default_instance_ = new WGAchievementNotify();
  CGGetAchievementInfoReq::default_instance_->InitAsDefaultInstance();
  ClientAchievementSortInfo::default_instance_->InitAsDefaultInstance();
  GCGetAchievementInfoRsp::default_instance_->InitAsDefaultInstance();
  CGGetAchievementRewardReq::default_instance_->InitAsDefaultInstance();
  GCGetAchievementRewardRsp::default_instance_->InitAsDefaultInstance();
  CGGetAchievementBoxRewardReq::default_instance_->InitAsDefaultInstance();
  CGGetAchievementBoxRewardRsp::default_instance_->InitAsDefaultInstance();
  ClientAchievementInfo::default_instance_->InitAsDefaultInstance();
  GCAchievementNotify::default_instance_->InitAsDefaultInstance();
  WGAchievementNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fAchievement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fAchievement_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fAchievement_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fAchievement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetAchievementInfoReq::CGGetAchievementInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGGetAchievementInfoReq::InitAsDefaultInstance() {
}

CGGetAchievementInfoReq::CGGetAchievementInfoReq(const CGGetAchievementInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGGetAchievementInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAchievementInfoReq::~CGGetAchievementInfoReq() {
  SharedDtor();
}

void CGGetAchievementInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAchievementInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAchievementInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAchievementInfoReq_descriptor_;
}

const CGGetAchievementInfoReq& CGGetAchievementInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

CGGetAchievementInfoReq* CGGetAchievementInfoReq::default_instance_ = NULL;

CGGetAchievementInfoReq* CGGetAchievementInfoReq::New() const {
  return new CGGetAchievementInfoReq;
}

void CGGetAchievementInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAchievementInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGGetAchievementInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGGetAchievementInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGGetAchievementInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAchievementInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAchievementInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAchievementInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAchievementInfoReq::MergeFrom(const CGGetAchievementInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAchievementInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAchievementInfoReq::CopyFrom(const CGGetAchievementInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAchievementInfoReq::IsInitialized() const {

  return true;
}

void CGGetAchievementInfoReq::Swap(CGGetAchievementInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAchievementInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAchievementInfoReq_descriptor_;
  metadata.reflection = CGGetAchievementInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientAchievementSortInfo::kSortTypeFieldNumber;
const int ClientAchievementSortInfo::kAchievementInfoListFieldNumber;
const int ClientAchievementSortInfo::kAchievementProgressFieldNumber;
const int ClientAchievementSortInfo::kAchievementRewardFieldNumber;
#endif  // !_MSC_VER

ClientAchievementSortInfo::ClientAchievementSortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientAchievementSortInfo::InitAsDefaultInstance() {
}

ClientAchievementSortInfo::ClientAchievementSortInfo(const ClientAchievementSortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientAchievementSortInfo::SharedCtor() {
  _cached_size_ = 0;
  sorttype_ = 0u;
  achievementprogress_ = 0u;
  achievementreward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientAchievementSortInfo::~ClientAchievementSortInfo() {
  SharedDtor();
}

void ClientAchievementSortInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientAchievementSortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientAchievementSortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAchievementSortInfo_descriptor_;
}

const ClientAchievementSortInfo& ClientAchievementSortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

ClientAchievementSortInfo* ClientAchievementSortInfo::default_instance_ = NULL;

ClientAchievementSortInfo* ClientAchievementSortInfo::New() const {
  return new ClientAchievementSortInfo;
}

void ClientAchievementSortInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sorttype_ = 0u;
    achievementprogress_ = 0u;
    achievementreward_ = 0u;
  }
  achievementinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientAchievementSortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sortType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sorttype_)));
          set_has_sorttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievementInfoList;
        break;
      }

      // repeated .ProtoBuf.ClientAchievementInfo achievementInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievementInfoList;
        if (input->ExpectTag(24)) goto parse_achievementProgress;
        break;
      }

      // optional uint32 achievementProgress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementprogress_)));
          set_has_achievementprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_achievementReward;
        break;
      }

      // optional uint32 achievementReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementreward_)));
          set_has_achievementreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientAchievementSortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sorttype(), output);
  }

  // repeated .ProtoBuf.ClientAchievementInfo achievementInfoList = 2;
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achievementinfolist(i), output);
  }

  // optional uint32 achievementProgress = 3;
  if (has_achievementprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->achievementprogress(), output);
  }

  // optional uint32 achievementReward = 4;
  if (has_achievementreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->achievementreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientAchievementSortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sorttype(), target);
  }

  // repeated .ProtoBuf.ClientAchievementInfo achievementInfoList = 2;
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achievementinfolist(i), target);
  }

  // optional uint32 achievementProgress = 3;
  if (has_achievementprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->achievementprogress(), target);
  }

  // optional uint32 achievementReward = 4;
  if (has_achievementreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->achievementreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientAchievementSortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sortType = 1;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sorttype());
    }

    // optional uint32 achievementProgress = 3;
    if (has_achievementprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementprogress());
    }

    // optional uint32 achievementReward = 4;
    if (has_achievementreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementreward());
    }

  }
  // repeated .ProtoBuf.ClientAchievementInfo achievementInfoList = 2;
  total_size += 1 * this->achievementinfolist_size();
  for (int i = 0; i < this->achievementinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientAchievementSortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientAchievementSortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientAchievementSortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientAchievementSortInfo::MergeFrom(const ClientAchievementSortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementinfolist_.MergeFrom(from.achievementinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttype()) {
      set_sorttype(from.sorttype());
    }
    if (from.has_achievementprogress()) {
      set_achievementprogress(from.achievementprogress());
    }
    if (from.has_achievementreward()) {
      set_achievementreward(from.achievementreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientAchievementSortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAchievementSortInfo::CopyFrom(const ClientAchievementSortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAchievementSortInfo::IsInitialized() const {

  return true;
}

void ClientAchievementSortInfo::Swap(ClientAchievementSortInfo* other) {
  if (other != this) {
    std::swap(sorttype_, other->sorttype_);
    achievementinfolist_.Swap(&other->achievementinfolist_);
    std::swap(achievementprogress_, other->achievementprogress_);
    std::swap(achievementreward_, other->achievementreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientAchievementSortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientAchievementSortInfo_descriptor_;
  metadata.reflection = ClientAchievementSortInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAchievementInfoRsp::kAchievementListFieldNumber;
#endif  // !_MSC_VER

GCGetAchievementInfoRsp::GCGetAchievementInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCGetAchievementInfoRsp::InitAsDefaultInstance() {
}

GCGetAchievementInfoRsp::GCGetAchievementInfoRsp(const GCGetAchievementInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCGetAchievementInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAchievementInfoRsp::~GCGetAchievementInfoRsp() {
  SharedDtor();
}

void GCGetAchievementInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetAchievementInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAchievementInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAchievementInfoRsp_descriptor_;
}

const GCGetAchievementInfoRsp& GCGetAchievementInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

GCGetAchievementInfoRsp* GCGetAchievementInfoRsp::default_instance_ = NULL;

GCGetAchievementInfoRsp* GCGetAchievementInfoRsp::New() const {
  return new GCGetAchievementInfoRsp;
}

void GCGetAchievementInfoRsp::Clear() {
  achievementlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAchievementInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ClientAchievementSortInfo achievementList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievementList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievementlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievementList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCGetAchievementInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ClientAchievementSortInfo achievementList = 1;
  for (int i = 0; i < this->achievementlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievementlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCGetAchievementInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ClientAchievementSortInfo achievementList = 1;
  for (int i = 0; i < this->achievementlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievementlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCGetAchievementInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ClientAchievementSortInfo achievementList = 1;
  total_size += 1 * this->achievementlist_size();
  for (int i = 0; i < this->achievementlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievementlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAchievementInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAchievementInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAchievementInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAchievementInfoRsp::MergeFrom(const GCGetAchievementInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementlist_.MergeFrom(from.achievementlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAchievementInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAchievementInfoRsp::CopyFrom(const GCGetAchievementInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAchievementInfoRsp::IsInitialized() const {

  return true;
}

void GCGetAchievementInfoRsp::Swap(GCGetAchievementInfoRsp* other) {
  if (other != this) {
    achievementlist_.Swap(&other->achievementlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAchievementInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAchievementInfoRsp_descriptor_;
  metadata.reflection = GCGetAchievementInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetAchievementRewardReq::kSortTypeFieldNumber;
const int CGGetAchievementRewardReq::kAchievementIdFieldNumber;
#endif  // !_MSC_VER

CGGetAchievementRewardReq::CGGetAchievementRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGGetAchievementRewardReq::InitAsDefaultInstance() {
}

CGGetAchievementRewardReq::CGGetAchievementRewardReq(const CGGetAchievementRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGGetAchievementRewardReq::SharedCtor() {
  _cached_size_ = 0;
  sorttype_ = 0u;
  achievementid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAchievementRewardReq::~CGGetAchievementRewardReq() {
  SharedDtor();
}

void CGGetAchievementRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAchievementRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAchievementRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAchievementRewardReq_descriptor_;
}

const CGGetAchievementRewardReq& CGGetAchievementRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

CGGetAchievementRewardReq* CGGetAchievementRewardReq::default_instance_ = NULL;

CGGetAchievementRewardReq* CGGetAchievementRewardReq::New() const {
  return new CGGetAchievementRewardReq;
}

void CGGetAchievementRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sorttype_ = 0u;
    achievementid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAchievementRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sortType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sorttype_)));
          set_has_sorttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievementId;
        break;
      }

      // optional uint32 achievementId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGGetAchievementRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sorttype(), output);
  }

  // optional uint32 achievementId = 2;
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->achievementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGGetAchievementRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sorttype(), target);
  }

  // optional uint32 achievementId = 2;
  if (has_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->achievementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGGetAchievementRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sortType = 1;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sorttype());
    }

    // optional uint32 achievementId = 2;
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAchievementRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAchievementRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAchievementRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAchievementRewardReq::MergeFrom(const CGGetAchievementRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttype()) {
      set_sorttype(from.sorttype());
    }
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAchievementRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAchievementRewardReq::CopyFrom(const CGGetAchievementRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAchievementRewardReq::IsInitialized() const {

  return true;
}

void CGGetAchievementRewardReq::Swap(CGGetAchievementRewardReq* other) {
  if (other != this) {
    std::swap(sorttype_, other->sorttype_);
    std::swap(achievementid_, other->achievementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAchievementRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAchievementRewardReq_descriptor_;
  metadata.reflection = CGGetAchievementRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAchievementRewardRsp::kSortTypeFieldNumber;
const int GCGetAchievementRewardRsp::kAchievementIdFieldNumber;
const int GCGetAchievementRewardRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GCGetAchievementRewardRsp::GCGetAchievementRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCGetAchievementRewardRsp::InitAsDefaultInstance() {
}

GCGetAchievementRewardRsp::GCGetAchievementRewardRsp(const GCGetAchievementRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCGetAchievementRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  sorttype_ = 0u;
  achievementid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAchievementRewardRsp::~GCGetAchievementRewardRsp() {
  SharedDtor();
}

void GCGetAchievementRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetAchievementRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAchievementRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAchievementRewardRsp_descriptor_;
}

const GCGetAchievementRewardRsp& GCGetAchievementRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

GCGetAchievementRewardRsp* GCGetAchievementRewardRsp::default_instance_ = NULL;

GCGetAchievementRewardRsp* GCGetAchievementRewardRsp::New() const {
  return new GCGetAchievementRewardRsp;
}

void GCGetAchievementRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sorttype_ = 0u;
    achievementid_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAchievementRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sortType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sorttype_)));
          set_has_sorttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievementId;
        break;
      }

      // optional uint32 achievementId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCGetAchievementRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sorttype(), output);
  }

  // optional uint32 achievementId = 2;
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->achievementid(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCGetAchievementRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sortType = 1;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sorttype(), target);
  }

  // optional uint32 achievementId = 2;
  if (has_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->achievementid(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCGetAchievementRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sortType = 1;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sorttype());
    }

    // optional uint32 achievementId = 2;
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementid());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAchievementRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAchievementRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAchievementRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAchievementRewardRsp::MergeFrom(const GCGetAchievementRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttype()) {
      set_sorttype(from.sorttype());
    }
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAchievementRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAchievementRewardRsp::CopyFrom(const GCGetAchievementRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAchievementRewardRsp::IsInitialized() const {

  return true;
}

void GCGetAchievementRewardRsp::Swap(GCGetAchievementRewardRsp* other) {
  if (other != this) {
    std::swap(sorttype_, other->sorttype_);
    std::swap(achievementid_, other->achievementid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAchievementRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAchievementRewardRsp_descriptor_;
  metadata.reflection = GCGetAchievementRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetAchievementBoxRewardReq::kPrizeIdFieldNumber;
#endif  // !_MSC_VER

CGGetAchievementBoxRewardReq::CGGetAchievementBoxRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGGetAchievementBoxRewardReq::InitAsDefaultInstance() {
}

CGGetAchievementBoxRewardReq::CGGetAchievementBoxRewardReq(const CGGetAchievementBoxRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGGetAchievementBoxRewardReq::SharedCtor() {
  _cached_size_ = 0;
  prizeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAchievementBoxRewardReq::~CGGetAchievementBoxRewardReq() {
  SharedDtor();
}

void CGGetAchievementBoxRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAchievementBoxRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAchievementBoxRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAchievementBoxRewardReq_descriptor_;
}

const CGGetAchievementBoxRewardReq& CGGetAchievementBoxRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

CGGetAchievementBoxRewardReq* CGGetAchievementBoxRewardReq::default_instance_ = NULL;

CGGetAchievementBoxRewardReq* CGGetAchievementBoxRewardReq::New() const {
  return new CGGetAchievementBoxRewardReq;
}

void CGGetAchievementBoxRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAchievementBoxRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prizeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGGetAchievementBoxRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prizeId = 1;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prizeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGGetAchievementBoxRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prizeId = 1;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prizeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGGetAchievementBoxRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prizeId = 1;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAchievementBoxRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAchievementBoxRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAchievementBoxRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAchievementBoxRewardReq::MergeFrom(const CGGetAchievementBoxRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAchievementBoxRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAchievementBoxRewardReq::CopyFrom(const CGGetAchievementBoxRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAchievementBoxRewardReq::IsInitialized() const {

  return true;
}

void CGGetAchievementBoxRewardReq::Swap(CGGetAchievementBoxRewardReq* other) {
  if (other != this) {
    std::swap(prizeid_, other->prizeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAchievementBoxRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAchievementBoxRewardReq_descriptor_;
  metadata.reflection = CGGetAchievementBoxRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetAchievementBoxRewardRsp::kPrizeIdFieldNumber;
const int CGGetAchievementBoxRewardRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CGGetAchievementBoxRewardRsp::CGGetAchievementBoxRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGGetAchievementBoxRewardRsp::InitAsDefaultInstance() {
}

CGGetAchievementBoxRewardRsp::CGGetAchievementBoxRewardRsp(const CGGetAchievementBoxRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGGetAchievementBoxRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  prizeid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAchievementBoxRewardRsp::~CGGetAchievementBoxRewardRsp() {
  SharedDtor();
}

void CGGetAchievementBoxRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAchievementBoxRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAchievementBoxRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAchievementBoxRewardRsp_descriptor_;
}

const CGGetAchievementBoxRewardRsp& CGGetAchievementBoxRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

CGGetAchievementBoxRewardRsp* CGGetAchievementBoxRewardRsp::default_instance_ = NULL;

CGGetAchievementBoxRewardRsp* CGGetAchievementBoxRewardRsp::New() const {
  return new CGGetAchievementBoxRewardRsp;
}

void CGGetAchievementBoxRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizeid_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAchievementBoxRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prizeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGGetAchievementBoxRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prizeId = 1;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prizeid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGGetAchievementBoxRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prizeId = 1;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prizeid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGGetAchievementBoxRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prizeId = 1;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAchievementBoxRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAchievementBoxRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAchievementBoxRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAchievementBoxRewardRsp::MergeFrom(const CGGetAchievementBoxRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAchievementBoxRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAchievementBoxRewardRsp::CopyFrom(const CGGetAchievementBoxRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAchievementBoxRewardRsp::IsInitialized() const {

  return true;
}

void CGGetAchievementBoxRewardRsp::Swap(CGGetAchievementBoxRewardRsp* other) {
  if (other != this) {
    std::swap(prizeid_, other->prizeid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAchievementBoxRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAchievementBoxRewardRsp_descriptor_;
  metadata.reflection = CGGetAchievementBoxRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientAchievementInfo::kIdFieldNumber;
const int ClientAchievementInfo::kStatusFieldNumber;
const int ClientAchievementInfo::kCompleteCountFieldNumber;
#endif  // !_MSC_VER

ClientAchievementInfo::ClientAchievementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientAchievementInfo::InitAsDefaultInstance() {
}

ClientAchievementInfo::ClientAchievementInfo(const ClientAchievementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientAchievementInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  completecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientAchievementInfo::~ClientAchievementInfo() {
  SharedDtor();
}

void ClientAchievementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientAchievementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientAchievementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientAchievementInfo_descriptor_;
}

const ClientAchievementInfo& ClientAchievementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

ClientAchievementInfo* ClientAchievementInfo::default_instance_ = NULL;

ClientAchievementInfo* ClientAchievementInfo::New() const {
  return new ClientAchievementInfo;
}

void ClientAchievementInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    status_ = 0u;
    completecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientAchievementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_completeCount;
        break;
      }

      // optional uint32 completeCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completecount_)));
          set_has_completecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientAchievementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 completeCount = 3;
  if (has_completecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientAchievementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 completeCount = 3;
  if (has_completecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientAchievementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 completeCount = 3;
    if (has_completecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientAchievementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientAchievementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientAchievementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientAchievementInfo::MergeFrom(const ClientAchievementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_completecount()) {
      set_completecount(from.completecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientAchievementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAchievementInfo::CopyFrom(const ClientAchievementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAchievementInfo::IsInitialized() const {

  return true;
}

void ClientAchievementInfo::Swap(ClientAchievementInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(completecount_, other->completecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientAchievementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientAchievementInfo_descriptor_;
  metadata.reflection = ClientAchievementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAchievementNotify::kChangeAchievementListFieldNumber;
#endif  // !_MSC_VER

GCAchievementNotify::GCAchievementNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCAchievementNotify::InitAsDefaultInstance() {
}

GCAchievementNotify::GCAchievementNotify(const GCAchievementNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCAchievementNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAchievementNotify::~GCAchievementNotify() {
  SharedDtor();
}

void GCAchievementNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAchievementNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAchievementNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAchievementNotify_descriptor_;
}

const GCAchievementNotify& GCAchievementNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

GCAchievementNotify* GCAchievementNotify::default_instance_ = NULL;

GCAchievementNotify* GCAchievementNotify::New() const {
  return new GCAchievementNotify;
}

void GCAchievementNotify::Clear() {
  changeachievementlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAchievementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.ClientAchievementInfo changeAchievementList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeAchievementList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changeachievementlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_changeAchievementList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCAchievementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.ClientAchievementInfo changeAchievementList = 1;
  for (int i = 0; i < this->changeachievementlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changeachievementlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCAchievementNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.ClientAchievementInfo changeAchievementList = 1;
  for (int i = 0; i < this->changeachievementlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changeachievementlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCAchievementNotify::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.ClientAchievementInfo changeAchievementList = 1;
  total_size += 1 * this->changeachievementlist_size();
  for (int i = 0; i < this->changeachievementlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changeachievementlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAchievementNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAchievementNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAchievementNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAchievementNotify::MergeFrom(const GCAchievementNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeachievementlist_.MergeFrom(from.changeachievementlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAchievementNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAchievementNotify::CopyFrom(const GCAchievementNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAchievementNotify::IsInitialized() const {

  return true;
}

void GCAchievementNotify::Swap(GCAchievementNotify* other) {
  if (other != this) {
    changeachievementlist_.Swap(&other->changeachievementlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAchievementNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAchievementNotify_descriptor_;
  metadata.reflection = GCAchievementNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGAchievementNotify::kCharIdFieldNumber;
const int WGAchievementNotify::kTypeFieldNumber;
const int WGAchievementNotify::kParameterTypeFieldNumber;
const int WGAchievementNotify::kParameterFieldNumber;
const int WGAchievementNotify::kCountFieldNumber;
#endif  // !_MSC_VER

WGAchievementNotify::WGAchievementNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGAchievementNotify::InitAsDefaultInstance() {
}

WGAchievementNotify::WGAchievementNotify(const WGAchievementNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGAchievementNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  type_ = 0u;
  parametertype_ = 0u;
  parameter_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGAchievementNotify::~WGAchievementNotify() {
  SharedDtor();
}

void WGAchievementNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGAchievementNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGAchievementNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGAchievementNotify_descriptor_;
}

const WGAchievementNotify& WGAchievementNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fAchievement_2eproto();
  return *default_instance_;
}

WGAchievementNotify* WGAchievementNotify::default_instance_ = NULL;

WGAchievementNotify* WGAchievementNotify::New() const {
  return new WGAchievementNotify;
}

void WGAchievementNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    type_ = 0u;
    parametertype_ = 0u;
    parameter_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGAchievementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parameterType;
        break;
      }

      // optional uint32 parameterType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parametertype_)));
          set_has_parametertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parameter;
        break;
      }

      // optional uint32 parameter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGAchievementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 parameterType = 3;
  if (has_parametertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->parametertype(), output);
  }

  // optional uint32 parameter = 4;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parameter(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGAchievementNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 parameterType = 3;
  if (has_parametertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->parametertype(), target);
  }

  // optional uint32 parameter = 4;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parameter(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGAchievementNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 parameterType = 3;
    if (has_parametertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parametertype());
    }

    // optional uint32 parameter = 4;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parameter());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGAchievementNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGAchievementNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGAchievementNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGAchievementNotify::MergeFrom(const WGAchievementNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_parametertype()) {
      set_parametertype(from.parametertype());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGAchievementNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGAchievementNotify::CopyFrom(const WGAchievementNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGAchievementNotify::IsInitialized() const {

  return true;
}

void WGAchievementNotify::Swap(WGAchievementNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(parametertype_, other->parametertype_);
    std::swap(parameter_, other->parameter_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGAchievementNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGAchievementNotify_descriptor_;
  metadata.reflection = WGAchievementNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
