// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/DBProxyProtocol.proto

#ifndef PROTOBUF_ProtoBuffer_2fDBProxyProtocol_2eproto__INCLUDED
#define PROTOBUF_ProtoBuffer_2fDBProxyProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/ComDefine.pb.h"
#include "ProtoBuffer/ComProtocol.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

class AccountLoginDBRequest;
class AccountLoginDBResponse;
class AccountSetOnlineFlagDBRequest;
class CharacterRoleListDBRequest;
class CharacterRoleDBBaseInfo;
class CharacterRoleListDBResponse;
class OfflineCharacterDBRequest;
class OfflineCharacterDBInfo;
class OfflineCharacterDBResponse;
class AllFriendDBRequest;
class FriendDBInfo;
class AllFriendDBResponse;
class SaveFriendDBRequest;
class ActiveCharacterDBRequest;
class ActiveCharacterDBResponse;
class ActiveCharacterDBInfo;
class OfflineMailList;
class GlobalDBRequst;
class OfflineMailDBInfo;
class GlobalDBResponse;
class AllOfflineMailDBRequest;
class AllOfflineMailDBResponse;
class TradingMailDBInfo;
class AllTradingMailDBRequest;
class AllTradingMailDBResponse;
class CharacterMailDBRequest;
class CharacterMailDBResponse;
class MailDBInfo;
class SaveMailDBRequest;
class SaveOfflineDBRequest;
class MaxMailIDRequest;
class MaxMailIDResponse;
class DeleteCharacterMail;
class CharacterMallDBRequest;
class CharacterMallDBResponse;
class CharacterMallDBSaveReq;
class GlobalDBSetRequest;
class GlobalDBSetResponse;
class AllCharacterCampOfflineDBReq;
class AllCharacterCampOfflineDBRsp;
class CharacterCampDBReq;
class CharacterCampDBRsp;
class CharacterCampDBSetRequest;
class CharacterListRequest;
class CharacterListResponse;
class CreateCharacterRequest;
class CreateCharacterResponse;
class CharacterInfoRequest;
class CharacterInfoResponse;
class CharacterInfoUpdateRequest;
class CharacterInfoUpdateResponse;
class CharacterDelDBRequst;
class CharacterDelDBResponse;

enum CharacterRoleListDBResponse_Result {
  CharacterRoleListDBResponse_Result_SUCCESS = 0,
  CharacterRoleListDBResponse_Result_FAILED = 1,
  CharacterRoleListDBResponse_Result_UNKNOW = 2
};
bool CharacterRoleListDBResponse_Result_IsValid(int value);
const CharacterRoleListDBResponse_Result CharacterRoleListDBResponse_Result_Result_MIN = CharacterRoleListDBResponse_Result_SUCCESS;
const CharacterRoleListDBResponse_Result CharacterRoleListDBResponse_Result_Result_MAX = CharacterRoleListDBResponse_Result_UNKNOW;
const int CharacterRoleListDBResponse_Result_Result_ARRAYSIZE = CharacterRoleListDBResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharacterRoleListDBResponse_Result_descriptor();
inline const ::std::string& CharacterRoleListDBResponse_Result_Name(CharacterRoleListDBResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharacterRoleListDBResponse_Result_descriptor(), value);
}
inline bool CharacterRoleListDBResponse_Result_Parse(
    const ::std::string& name, CharacterRoleListDBResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterRoleListDBResponse_Result>(
    CharacterRoleListDBResponse_Result_descriptor(), name, value);
}
enum CharacterListResponse_Result {
  CharacterListResponse_Result_SUCCESS = 0,
  CharacterListResponse_Result_FAILED = 1,
  CharacterListResponse_Result_UNKNOW = 2
};
bool CharacterListResponse_Result_IsValid(int value);
const CharacterListResponse_Result CharacterListResponse_Result_Result_MIN = CharacterListResponse_Result_SUCCESS;
const CharacterListResponse_Result CharacterListResponse_Result_Result_MAX = CharacterListResponse_Result_UNKNOW;
const int CharacterListResponse_Result_Result_ARRAYSIZE = CharacterListResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharacterListResponse_Result_descriptor();
inline const ::std::string& CharacterListResponse_Result_Name(CharacterListResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharacterListResponse_Result_descriptor(), value);
}
inline bool CharacterListResponse_Result_Parse(
    const ::std::string& name, CharacterListResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterListResponse_Result>(
    CharacterListResponse_Result_descriptor(), name, value);
}
enum CreateCharacterResponse_Result {
  CreateCharacterResponse_Result_SUCCESS = 0,
  CreateCharacterResponse_Result_NAME_EXISTS = 1,
  CreateCharacterResponse_Result_TOO_MANAY_CHARACTER = 2,
  CreateCharacterResponse_Result_UNKNOW = 3
};
bool CreateCharacterResponse_Result_IsValid(int value);
const CreateCharacterResponse_Result CreateCharacterResponse_Result_Result_MIN = CreateCharacterResponse_Result_SUCCESS;
const CreateCharacterResponse_Result CreateCharacterResponse_Result_Result_MAX = CreateCharacterResponse_Result_UNKNOW;
const int CreateCharacterResponse_Result_Result_ARRAYSIZE = CreateCharacterResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateCharacterResponse_Result_descriptor();
inline const ::std::string& CreateCharacterResponse_Result_Name(CreateCharacterResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateCharacterResponse_Result_descriptor(), value);
}
inline bool CreateCharacterResponse_Result_Parse(
    const ::std::string& name, CreateCharacterResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateCharacterResponse_Result>(
    CreateCharacterResponse_Result_descriptor(), name, value);
}
enum CharacterInfoResponse_Result {
  CharacterInfoResponse_Result_SUCCESS = 0,
  CharacterInfoResponse_Result_NOT_EXIST = 1,
  CharacterInfoResponse_Result_FAILED = 2,
  CharacterInfoResponse_Result_UNKNOW = 3
};
bool CharacterInfoResponse_Result_IsValid(int value);
const CharacterInfoResponse_Result CharacterInfoResponse_Result_Result_MIN = CharacterInfoResponse_Result_SUCCESS;
const CharacterInfoResponse_Result CharacterInfoResponse_Result_Result_MAX = CharacterInfoResponse_Result_UNKNOW;
const int CharacterInfoResponse_Result_Result_ARRAYSIZE = CharacterInfoResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharacterInfoResponse_Result_descriptor();
inline const ::std::string& CharacterInfoResponse_Result_Name(CharacterInfoResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharacterInfoResponse_Result_descriptor(), value);
}
inline bool CharacterInfoResponse_Result_Parse(
    const ::std::string& name, CharacterInfoResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterInfoResponse_Result>(
    CharacterInfoResponse_Result_descriptor(), name, value);
}
enum CharacterInfoUpdateResponse_Result {
  CharacterInfoUpdateResponse_Result_SUCCESS = 0,
  CharacterInfoUpdateResponse_Result_FAILED = 1,
  CharacterInfoUpdateResponse_Result_UNKNOW = 2
};
bool CharacterInfoUpdateResponse_Result_IsValid(int value);
const CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse_Result_Result_MIN = CharacterInfoUpdateResponse_Result_SUCCESS;
const CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse_Result_Result_MAX = CharacterInfoUpdateResponse_Result_UNKNOW;
const int CharacterInfoUpdateResponse_Result_Result_ARRAYSIZE = CharacterInfoUpdateResponse_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharacterInfoUpdateResponse_Result_descriptor();
inline const ::std::string& CharacterInfoUpdateResponse_Result_Name(CharacterInfoUpdateResponse_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharacterInfoUpdateResponse_Result_descriptor(), value);
}
inline bool CharacterInfoUpdateResponse_Result_Parse(
    const ::std::string& name, CharacterInfoUpdateResponse_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterInfoUpdateResponse_Result>(
    CharacterInfoUpdateResponse_Result_descriptor(), name, value);
}
// ===================================================================

class AccountLoginDBRequest : public ::google::protobuf::Message {
 public:
  AccountLoginDBRequest();
  virtual ~AccountLoginDBRequest();

  AccountLoginDBRequest(const AccountLoginDBRequest& from);

  inline AccountLoginDBRequest& operator=(const AccountLoginDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLoginDBRequest& default_instance();

  void Swap(AccountLoginDBRequest* other);

  // implements Message ----------------------------------------------

  AccountLoginDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountLoginDBRequest& from);
  void MergeFrom(const AccountLoginDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string plat_user_id = 1;
  inline bool has_plat_user_id() const;
  inline void clear_plat_user_id();
  static const int kPlatUserIdFieldNumber = 1;
  inline const ::std::string& plat_user_id() const;
  inline void set_plat_user_id(const ::std::string& value);
  inline void set_plat_user_id(const char* value);
  inline void set_plat_user_id(const char* value, size_t size);
  inline ::std::string* mutable_plat_user_id();
  inline ::std::string* release_plat_user_id();
  inline void set_allocated_plat_user_id(::std::string* plat_user_id);

  // required string plat_user_name = 2;
  inline bool has_plat_user_name() const;
  inline void clear_plat_user_name();
  static const int kPlatUserNameFieldNumber = 2;
  inline const ::std::string& plat_user_name() const;
  inline void set_plat_user_name(const ::std::string& value);
  inline void set_plat_user_name(const char* value);
  inline void set_plat_user_name(const char* value, size_t size);
  inline ::std::string* mutable_plat_user_name();
  inline ::std::string* release_plat_user_name();
  inline void set_allocated_plat_user_name(::std::string* plat_user_name);

  // required string channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // required string channel_user_id = 4;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 4;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // required uint32 session_id = 5;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.AccountLoginDBRequest)
 private:
  inline void set_has_plat_user_id();
  inline void clear_has_plat_user_id();
  inline void set_has_plat_user_name();
  inline void clear_has_plat_user_name();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* plat_user_id_;
  ::std::string* plat_user_name_;
  ::std::string* channel_;
  ::std::string* channel_user_id_;
  ::google::protobuf::uint32 session_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AccountLoginDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class AccountLoginDBResponse : public ::google::protobuf::Message {
 public:
  AccountLoginDBResponse();
  virtual ~AccountLoginDBResponse();

  AccountLoginDBResponse(const AccountLoginDBResponse& from);

  inline AccountLoginDBResponse& operator=(const AccountLoginDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLoginDBResponse& default_instance();

  void Swap(AccountLoginDBResponse* other);

  // implements Message ----------------------------------------------

  AccountLoginDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountLoginDBResponse& from);
  void MergeFrom(const AccountLoginDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint32 session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // required string channel_user_id = 3;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 3;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // optional string plat_user_id = 4;
  inline bool has_plat_user_id() const;
  inline void clear_plat_user_id();
  static const int kPlatUserIdFieldNumber = 4;
  inline const ::std::string& plat_user_id() const;
  inline void set_plat_user_id(const ::std::string& value);
  inline void set_plat_user_id(const char* value);
  inline void set_plat_user_id(const char* value, size_t size);
  inline ::std::string* mutable_plat_user_id();
  inline ::std::string* release_plat_user_id();
  inline void set_allocated_plat_user_id(::std::string* plat_user_id);

  // optional string plat_user_name = 5;
  inline bool has_plat_user_name() const;
  inline void clear_plat_user_name();
  static const int kPlatUserNameFieldNumber = 5;
  inline const ::std::string& plat_user_name() const;
  inline void set_plat_user_name(const ::std::string& value);
  inline void set_plat_user_name(const char* value);
  inline void set_plat_user_name(const char* value, size_t size);
  inline ::std::string* mutable_plat_user_name();
  inline ::std::string* release_plat_user_name();
  inline void set_allocated_plat_user_name(::std::string* plat_user_name);

  // optional string channel = 6;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 6;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional int32 byonline = 7;
  inline bool has_byonline() const;
  inline void clear_byonline();
  static const int kByonlineFieldNumber = 7;
  inline ::google::protobuf::int32 byonline() const;
  inline void set_byonline(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.AccountLoginDBResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_plat_user_id();
  inline void clear_has_plat_user_id();
  inline void set_has_plat_user_name();
  inline void clear_has_plat_user_name();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_byonline();
  inline void clear_has_byonline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 session_id_;
  ::std::string* channel_user_id_;
  ::std::string* plat_user_id_;
  ::std::string* plat_user_name_;
  ::std::string* channel_;
  ::google::protobuf::int32 byonline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AccountLoginDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class AccountSetOnlineFlagDBRequest : public ::google::protobuf::Message {
 public:
  AccountSetOnlineFlagDBRequest();
  virtual ~AccountSetOnlineFlagDBRequest();

  AccountSetOnlineFlagDBRequest(const AccountSetOnlineFlagDBRequest& from);

  inline AccountSetOnlineFlagDBRequest& operator=(const AccountSetOnlineFlagDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountSetOnlineFlagDBRequest& default_instance();

  void Swap(AccountSetOnlineFlagDBRequest* other);

  // implements Message ----------------------------------------------

  AccountSetOnlineFlagDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountSetOnlineFlagDBRequest& from);
  void MergeFrom(const AccountSetOnlineFlagDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel_user_id = 1;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 1;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // required int32 byonline = 2;
  inline bool has_byonline() const;
  inline void clear_byonline();
  static const int kByonlineFieldNumber = 2;
  inline ::google::protobuf::int32 byonline() const;
  inline void set_byonline(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.AccountSetOnlineFlagDBRequest)
 private:
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_byonline();
  inline void clear_has_byonline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channel_user_id_;
  ::google::protobuf::int32 byonline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AccountSetOnlineFlagDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterRoleListDBRequest : public ::google::protobuf::Message {
 public:
  CharacterRoleListDBRequest();
  virtual ~CharacterRoleListDBRequest();

  CharacterRoleListDBRequest(const CharacterRoleListDBRequest& from);

  inline CharacterRoleListDBRequest& operator=(const CharacterRoleListDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterRoleListDBRequest& default_instance();

  void Swap(CharacterRoleListDBRequest* other);

  // implements Message ----------------------------------------------

  CharacterRoleListDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterRoleListDBRequest& from);
  void MergeFrom(const CharacterRoleListDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel_user_id = 1;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 1;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterRoleListDBRequest)
 private:
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channel_user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterRoleListDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterRoleDBBaseInfo : public ::google::protobuf::Message {
 public:
  CharacterRoleDBBaseInfo();
  virtual ~CharacterRoleDBBaseInfo();

  CharacterRoleDBBaseInfo(const CharacterRoleDBBaseInfo& from);

  inline CharacterRoleDBBaseInfo& operator=(const CharacterRoleDBBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterRoleDBBaseInfo& default_instance();

  void Swap(CharacterRoleDBBaseInfo* other);

  // implements Message ----------------------------------------------

  CharacterRoleDBBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterRoleDBBaseInfo& from);
  void MergeFrom(const CharacterRoleDBBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 2;
  inline const ::ProtoBuf::CharacterDBBaseInfo& baseinfo() const;
  inline ::ProtoBuf::CharacterDBBaseInfo* mutable_baseinfo();
  inline ::ProtoBuf::CharacterDBBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::ProtoBuf::CharacterDBBaseInfo* baseinfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterRoleDBBaseInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CharacterDBBaseInfo* baseinfo_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterRoleDBBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharacterRoleListDBResponse : public ::google::protobuf::Message {
 public:
  CharacterRoleListDBResponse();
  virtual ~CharacterRoleListDBResponse();

  CharacterRoleListDBResponse(const CharacterRoleListDBResponse& from);

  inline CharacterRoleListDBResponse& operator=(const CharacterRoleListDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterRoleListDBResponse& default_instance();

  void Swap(CharacterRoleListDBResponse* other);

  // implements Message ----------------------------------------------

  CharacterRoleListDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterRoleListDBResponse& from);
  void MergeFrom(const CharacterRoleListDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CharacterRoleListDBResponse_Result Result;
  static const Result SUCCESS = CharacterRoleListDBResponse_Result_SUCCESS;
  static const Result FAILED = CharacterRoleListDBResponse_Result_FAILED;
  static const Result UNKNOW = CharacterRoleListDBResponse_Result_UNKNOW;
  static inline bool Result_IsValid(int value) {
    return CharacterRoleListDBResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CharacterRoleListDBResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CharacterRoleListDBResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CharacterRoleListDBResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CharacterRoleListDBResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CharacterRoleListDBResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CharacterRoleListDBResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ProtoBuf.CharacterRoleListDBResponse.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ProtoBuf::CharacterRoleListDBResponse_Result result() const;
  inline void set_result(::ProtoBuf::CharacterRoleListDBResponse_Result value);

  // required string channel_user_id = 2;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 2;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // repeated .ProtoBuf.CharacterRoleDBBaseInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::CharacterRoleDBBaseInfo& info(int index) const;
  inline ::ProtoBuf::CharacterRoleDBBaseInfo* mutable_info(int index);
  inline ::ProtoBuf::CharacterRoleDBBaseInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterRoleDBBaseInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterRoleDBBaseInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterRoleListDBResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channel_user_id_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterRoleDBBaseInfo > info_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterRoleListDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class OfflineCharacterDBRequest : public ::google::protobuf::Message {
 public:
  OfflineCharacterDBRequest();
  virtual ~OfflineCharacterDBRequest();

  OfflineCharacterDBRequest(const OfflineCharacterDBRequest& from);

  inline OfflineCharacterDBRequest& operator=(const OfflineCharacterDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineCharacterDBRequest& default_instance();

  void Swap(OfflineCharacterDBRequest* other);

  // implements Message ----------------------------------------------

  OfflineCharacterDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineCharacterDBRequest& from);
  void MergeFrom(const OfflineCharacterDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 retnum = 2;
  inline bool has_retnum() const;
  inline void clear_retnum();
  static const int kRetnumFieldNumber = 2;
  inline ::google::protobuf::int32 retnum() const;
  inline void set_retnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.OfflineCharacterDBRequest)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_retnum();
  inline void clear_has_retnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 retnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static OfflineCharacterDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class OfflineCharacterDBInfo : public ::google::protobuf::Message {
 public:
  OfflineCharacterDBInfo();
  virtual ~OfflineCharacterDBInfo();

  OfflineCharacterDBInfo(const OfflineCharacterDBInfo& from);

  inline OfflineCharacterDBInfo& operator=(const OfflineCharacterDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineCharacterDBInfo& default_instance();

  void Swap(OfflineCharacterDBInfo* other);

  // implements Message ----------------------------------------------

  OfflineCharacterDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineCharacterDBInfo& from);
  void MergeFrom(const OfflineCharacterDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 2;
  inline const ::ProtoBuf::CharacterDBBaseInfo& baseinfo() const;
  inline ::ProtoBuf::CharacterDBBaseInfo* mutable_baseinfo();
  inline ::ProtoBuf::CharacterDBBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::ProtoBuf::CharacterDBBaseInfo* baseinfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.OfflineCharacterDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CharacterDBBaseInfo* baseinfo_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static OfflineCharacterDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class OfflineCharacterDBResponse : public ::google::protobuf::Message {
 public:
  OfflineCharacterDBResponse();
  virtual ~OfflineCharacterDBResponse();

  OfflineCharacterDBResponse(const OfflineCharacterDBResponse& from);

  inline OfflineCharacterDBResponse& operator=(const OfflineCharacterDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineCharacterDBResponse& default_instance();

  void Swap(OfflineCharacterDBResponse* other);

  // implements Message ----------------------------------------------

  OfflineCharacterDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineCharacterDBResponse& from);
  void MergeFrom(const OfflineCharacterDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .ProtoBuf.OfflineCharacterDBInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::OfflineCharacterDBInfo& info(int index) const;
  inline ::ProtoBuf::OfflineCharacterDBInfo* mutable_info(int index);
  inline ::ProtoBuf::OfflineCharacterDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineCharacterDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineCharacterDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.OfflineCharacterDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineCharacterDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static OfflineCharacterDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllFriendDBRequest : public ::google::protobuf::Message {
 public:
  AllFriendDBRequest();
  virtual ~AllFriendDBRequest();

  AllFriendDBRequest(const AllFriendDBRequest& from);

  inline AllFriendDBRequest& operator=(const AllFriendDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllFriendDBRequest& default_instance();

  void Swap(AllFriendDBRequest* other);

  // implements Message ----------------------------------------------

  AllFriendDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllFriendDBRequest& from);
  void MergeFrom(const AllFriendDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 retnum = 2;
  inline bool has_retnum() const;
  inline void clear_retnum();
  static const int kRetnumFieldNumber = 2;
  inline ::google::protobuf::int32 retnum() const;
  inline void set_retnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllFriendDBRequest)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_retnum();
  inline void clear_has_retnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 retnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllFriendDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendDBInfo : public ::google::protobuf::Message {
 public:
  FriendDBInfo();
  virtual ~FriendDBInfo();

  FriendDBInfo(const FriendDBInfo& from);

  inline FriendDBInfo& operator=(const FriendDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendDBInfo& default_instance();

  void Swap(FriendDBInfo* other);

  // implements Message ----------------------------------------------

  FriendDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendDBInfo& from);
  void MergeFrom(const FriendDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required .ProtoBuf.RelationDBInfo data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::ProtoBuf::RelationDBInfo& data() const;
  inline ::ProtoBuf::RelationDBInfo* mutable_data();
  inline ::ProtoBuf::RelationDBInfo* release_data();
  inline void set_allocated_data(::ProtoBuf::RelationDBInfo* data);

  // @@protoc_insertion_point(class_scope:ProtoBuf.FriendDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::RelationDBInfo* data_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static FriendDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllFriendDBResponse : public ::google::protobuf::Message {
 public:
  AllFriendDBResponse();
  virtual ~AllFriendDBResponse();

  AllFriendDBResponse(const AllFriendDBResponse& from);

  inline AllFriendDBResponse& operator=(const AllFriendDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllFriendDBResponse& default_instance();

  void Swap(AllFriendDBResponse* other);

  // implements Message ----------------------------------------------

  AllFriendDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllFriendDBResponse& from);
  void MergeFrom(const AllFriendDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .ProtoBuf.FriendDBInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::FriendDBInfo& info(int index) const;
  inline ::ProtoBuf::FriendDBInfo* mutable_info(int index);
  inline ::ProtoBuf::FriendDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllFriendDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllFriendDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class SaveFriendDBRequest : public ::google::protobuf::Message {
 public:
  SaveFriendDBRequest();
  virtual ~SaveFriendDBRequest();

  SaveFriendDBRequest(const SaveFriendDBRequest& from);

  inline SaveFriendDBRequest& operator=(const SaveFriendDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveFriendDBRequest& default_instance();

  void Swap(SaveFriendDBRequest* other);

  // implements Message ----------------------------------------------

  SaveFriendDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveFriendDBRequest& from);
  void MergeFrom(const SaveFriendDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.FriendDBInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ProtoBuf::FriendDBInfo& info(int index) const;
  inline ::ProtoBuf::FriendDBInfo* mutable_info(int index);
  inline ::ProtoBuf::FriendDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.SaveFriendDBRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static SaveFriendDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActiveCharacterDBRequest : public ::google::protobuf::Message {
 public:
  ActiveCharacterDBRequest();
  virtual ~ActiveCharacterDBRequest();

  ActiveCharacterDBRequest(const ActiveCharacterDBRequest& from);

  inline ActiveCharacterDBRequest& operator=(const ActiveCharacterDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActiveCharacterDBRequest& default_instance();

  void Swap(ActiveCharacterDBRequest* other);

  // implements Message ----------------------------------------------

  ActiveCharacterDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActiveCharacterDBRequest& from);
  void MergeFrom(const ActiveCharacterDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 srcCharID = 1;
  inline bool has_srccharid() const;
  inline void clear_srccharid();
  static const int kSrcCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 srccharid() const;
  inline void set_srccharid(::google::protobuf::uint32 value);

  // required uint32 dstCharID = 2;
  inline bool has_dstcharid() const;
  inline void clear_dstcharid();
  static const int kDstCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 dstcharid() const;
  inline void set_dstcharid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ActiveCharacterDBRequest)
 private:
  inline void set_has_srccharid();
  inline void clear_has_srccharid();
  inline void set_has_dstcharid();
  inline void clear_has_dstcharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 srccharid_;
  ::google::protobuf::uint32 dstcharid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static ActiveCharacterDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActiveCharacterDBResponse : public ::google::protobuf::Message {
 public:
  ActiveCharacterDBResponse();
  virtual ~ActiveCharacterDBResponse();

  ActiveCharacterDBResponse(const ActiveCharacterDBResponse& from);

  inline ActiveCharacterDBResponse& operator=(const ActiveCharacterDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActiveCharacterDBResponse& default_instance();

  void Swap(ActiveCharacterDBResponse* other);

  // implements Message ----------------------------------------------

  ActiveCharacterDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActiveCharacterDBResponse& from);
  void MergeFrom(const ActiveCharacterDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required uint32 srcCharID = 2;
  inline bool has_srccharid() const;
  inline void clear_srccharid();
  static const int kSrcCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 srccharid() const;
  inline void set_srccharid(::google::protobuf::uint32 value);

  // optional .ProtoBuf.ActiveCharacterDBInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::ActiveCharacterDBInfo& info() const;
  inline ::ProtoBuf::ActiveCharacterDBInfo* mutable_info();
  inline ::ProtoBuf::ActiveCharacterDBInfo* release_info();
  inline void set_allocated_info(::ProtoBuf::ActiveCharacterDBInfo* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ActiveCharacterDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_srccharid();
  inline void clear_has_srccharid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 srccharid_;
  ::ProtoBuf::ActiveCharacterDBInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static ActiveCharacterDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActiveCharacterDBInfo : public ::google::protobuf::Message {
 public:
  ActiveCharacterDBInfo();
  virtual ~ActiveCharacterDBInfo();

  ActiveCharacterDBInfo(const ActiveCharacterDBInfo& from);

  inline ActiveCharacterDBInfo& operator=(const ActiveCharacterDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActiveCharacterDBInfo& default_instance();

  void Swap(ActiveCharacterDBInfo* other);

  // implements Message ----------------------------------------------

  ActiveCharacterDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActiveCharacterDBInfo& from);
  void MergeFrom(const ActiveCharacterDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .ProtoBuf.CharacterDBBaseInfo baseData = 2;
  inline bool has_basedata() const;
  inline void clear_basedata();
  static const int kBaseDataFieldNumber = 2;
  inline const ::ProtoBuf::CharacterDBBaseInfo& basedata() const;
  inline ::ProtoBuf::CharacterDBBaseInfo* mutable_basedata();
  inline ::ProtoBuf::CharacterDBBaseInfo* release_basedata();
  inline void set_allocated_basedata(::ProtoBuf::CharacterDBBaseInfo* basedata);

  // optional .ProtoBuf.CharacterDBEquipData equipData = 3;
  inline bool has_equipdata() const;
  inline void clear_equipdata();
  static const int kEquipDataFieldNumber = 3;
  inline const ::ProtoBuf::CharacterDBEquipData& equipdata() const;
  inline ::ProtoBuf::CharacterDBEquipData* mutable_equipdata();
  inline ::ProtoBuf::CharacterDBEquipData* release_equipdata();
  inline void set_allocated_equipdata(::ProtoBuf::CharacterDBEquipData* equipdata);

  // optional .ProtoBuf.CharacterDBExtendData extendData = 4;
  inline bool has_extenddata() const;
  inline void clear_extenddata();
  static const int kExtendDataFieldNumber = 4;
  inline const ::ProtoBuf::CharacterDBExtendData& extenddata() const;
  inline ::ProtoBuf::CharacterDBExtendData* mutable_extenddata();
  inline ::ProtoBuf::CharacterDBExtendData* release_extenddata();
  inline void set_allocated_extenddata(::ProtoBuf::CharacterDBExtendData* extenddata);

  // @@protoc_insertion_point(class_scope:ProtoBuf.ActiveCharacterDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_basedata();
  inline void clear_has_basedata();
  inline void set_has_equipdata();
  inline void clear_has_equipdata();
  inline void set_has_extenddata();
  inline void clear_has_extenddata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CharacterDBBaseInfo* basedata_;
  ::ProtoBuf::CharacterDBEquipData* equipdata_;
  ::ProtoBuf::CharacterDBExtendData* extenddata_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static ActiveCharacterDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class OfflineMailList : public ::google::protobuf::Message {
 public:
  OfflineMailList();
  virtual ~OfflineMailList();

  OfflineMailList(const OfflineMailList& from);

  inline OfflineMailList& operator=(const OfflineMailList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineMailList& default_instance();

  void Swap(OfflineMailList* other);

  // implements Message ----------------------------------------------

  OfflineMailList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineMailList& from);
  void MergeFrom(const OfflineMailList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.MailInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::ProtoBuf::MailInfo& data(int index) const;
  inline ::ProtoBuf::MailInfo* mutable_data(int index);
  inline ::ProtoBuf::MailInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ProtoBuf.OfflineMailList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static OfflineMailList* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBRequst : public ::google::protobuf::Message {
 public:
  GlobalDBRequst();
  virtual ~GlobalDBRequst();

  GlobalDBRequst(const GlobalDBRequst& from);

  inline GlobalDBRequst& operator=(const GlobalDBRequst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBRequst& default_instance();

  void Swap(GlobalDBRequst* other);

  // implements Message ----------------------------------------------

  GlobalDBRequst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBRequst& from);
  void MergeFrom(const GlobalDBRequst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.GlobalDBRequst)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBRequst* default_instance_;
};
// -------------------------------------------------------------------

class OfflineMailDBInfo : public ::google::protobuf::Message {
 public:
  OfflineMailDBInfo();
  virtual ~OfflineMailDBInfo();

  OfflineMailDBInfo(const OfflineMailDBInfo& from);

  inline OfflineMailDBInfo& operator=(const OfflineMailDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineMailDBInfo& default_instance();

  void Swap(OfflineMailDBInfo* other);

  // implements Message ----------------------------------------------

  OfflineMailDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineMailDBInfo& from);
  void MergeFrom(const OfflineMailDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .ProtoBuf.OfflineMailList data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::ProtoBuf::OfflineMailList& data() const;
  inline ::ProtoBuf::OfflineMailList* mutable_data();
  inline ::ProtoBuf::OfflineMailList* release_data();
  inline void set_allocated_data(::ProtoBuf::OfflineMailList* data);

  // @@protoc_insertion_point(class_scope:ProtoBuf.OfflineMailDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::OfflineMailList* data_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static OfflineMailDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBResponse : public ::google::protobuf::Message {
 public:
  GlobalDBResponse();
  virtual ~GlobalDBResponse();

  GlobalDBResponse(const GlobalDBResponse& from);

  inline GlobalDBResponse& operator=(const GlobalDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBResponse& default_instance();

  void Swap(GlobalDBResponse* other);

  // implements Message ----------------------------------------------

  GlobalDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBResponse& from);
  void MergeFrom(const GlobalDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ProtoBuf.GlobalDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 type_id_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllOfflineMailDBRequest : public ::google::protobuf::Message {
 public:
  AllOfflineMailDBRequest();
  virtual ~AllOfflineMailDBRequest();

  AllOfflineMailDBRequest(const AllOfflineMailDBRequest& from);

  inline AllOfflineMailDBRequest& operator=(const AllOfflineMailDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllOfflineMailDBRequest& default_instance();

  void Swap(AllOfflineMailDBRequest* other);

  // implements Message ----------------------------------------------

  AllOfflineMailDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllOfflineMailDBRequest& from);
  void MergeFrom(const AllOfflineMailDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 retnum = 2;
  inline bool has_retnum() const;
  inline void clear_retnum();
  static const int kRetnumFieldNumber = 2;
  inline ::google::protobuf::int32 retnum() const;
  inline void set_retnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllOfflineMailDBRequest)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_retnum();
  inline void clear_has_retnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 retnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllOfflineMailDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllOfflineMailDBResponse : public ::google::protobuf::Message {
 public:
  AllOfflineMailDBResponse();
  virtual ~AllOfflineMailDBResponse();

  AllOfflineMailDBResponse(const AllOfflineMailDBResponse& from);

  inline AllOfflineMailDBResponse& operator=(const AllOfflineMailDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllOfflineMailDBResponse& default_instance();

  void Swap(AllOfflineMailDBResponse* other);

  // implements Message ----------------------------------------------

  AllOfflineMailDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllOfflineMailDBResponse& from);
  void MergeFrom(const AllOfflineMailDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .ProtoBuf.OfflineMailDBInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::OfflineMailDBInfo& info(int index) const;
  inline ::ProtoBuf::OfflineMailDBInfo* mutable_info(int index);
  inline ::ProtoBuf::OfflineMailDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineMailDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineMailDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllOfflineMailDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineMailDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllOfflineMailDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class TradingMailDBInfo : public ::google::protobuf::Message {
 public:
  TradingMailDBInfo();
  virtual ~TradingMailDBInfo();

  TradingMailDBInfo(const TradingMailDBInfo& from);

  inline TradingMailDBInfo& operator=(const TradingMailDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradingMailDBInfo& default_instance();

  void Swap(TradingMailDBInfo* other);

  // implements Message ----------------------------------------------

  TradingMailDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradingMailDBInfo& from);
  void MergeFrom(const TradingMailDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required .ProtoBuf.MailInfo data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::ProtoBuf::MailInfo& data() const;
  inline ::ProtoBuf::MailInfo* mutable_data();
  inline ::ProtoBuf::MailInfo* release_data();
  inline void set_allocated_data(::ProtoBuf::MailInfo* data);

  // @@protoc_insertion_point(class_scope:ProtoBuf.TradingMailDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::MailInfo* data_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static TradingMailDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllTradingMailDBRequest : public ::google::protobuf::Message {
 public:
  AllTradingMailDBRequest();
  virtual ~AllTradingMailDBRequest();

  AllTradingMailDBRequest(const AllTradingMailDBRequest& from);

  inline AllTradingMailDBRequest& operator=(const AllTradingMailDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllTradingMailDBRequest& default_instance();

  void Swap(AllTradingMailDBRequest* other);

  // implements Message ----------------------------------------------

  AllTradingMailDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllTradingMailDBRequest& from);
  void MergeFrom(const AllTradingMailDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 retnum = 2;
  inline bool has_retnum() const;
  inline void clear_retnum();
  static const int kRetnumFieldNumber = 2;
  inline ::google::protobuf::int32 retnum() const;
  inline void set_retnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllTradingMailDBRequest)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_retnum();
  inline void clear_has_retnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 retnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllTradingMailDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class AllTradingMailDBResponse : public ::google::protobuf::Message {
 public:
  AllTradingMailDBResponse();
  virtual ~AllTradingMailDBResponse();

  AllTradingMailDBResponse(const AllTradingMailDBResponse& from);

  inline AllTradingMailDBResponse& operator=(const AllTradingMailDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllTradingMailDBResponse& default_instance();

  void Swap(AllTradingMailDBResponse* other);

  // implements Message ----------------------------------------------

  AllTradingMailDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllTradingMailDBResponse& from);
  void MergeFrom(const AllTradingMailDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .ProtoBuf.TradingMailDBInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::TradingMailDBInfo& info(int index) const;
  inline ::ProtoBuf::TradingMailDBInfo* mutable_info(int index);
  inline ::ProtoBuf::TradingMailDBInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::TradingMailDBInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::TradingMailDBInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllTradingMailDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::TradingMailDBInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllTradingMailDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class CharacterMailDBRequest : public ::google::protobuf::Message {
 public:
  CharacterMailDBRequest();
  virtual ~CharacterMailDBRequest();

  CharacterMailDBRequest(const CharacterMailDBRequest& from);

  inline CharacterMailDBRequest& operator=(const CharacterMailDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMailDBRequest& default_instance();

  void Swap(CharacterMailDBRequest* other);

  // implements Message ----------------------------------------------

  CharacterMailDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterMailDBRequest& from);
  void MergeFrom(const CharacterMailDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterMailDBRequest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterMailDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterMailDBResponse : public ::google::protobuf::Message {
 public:
  CharacterMailDBResponse();
  virtual ~CharacterMailDBResponse();

  CharacterMailDBResponse(const CharacterMailDBResponse& from);

  inline CharacterMailDBResponse& operator=(const CharacterMailDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMailDBResponse& default_instance();

  void Swap(CharacterMailDBResponse* other);

  // implements Message ----------------------------------------------

  CharacterMailDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterMailDBResponse& from);
  void MergeFrom(const CharacterMailDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .ProtoBuf.MailInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ProtoBuf::MailInfo& info(int index) const;
  inline ::ProtoBuf::MailInfo* mutable_info(int index);
  inline ::ProtoBuf::MailInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterMailDBResponse)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo > info_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterMailDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class MailDBInfo : public ::google::protobuf::Message {
 public:
  MailDBInfo();
  virtual ~MailDBInfo();

  MailDBInfo(const MailDBInfo& from);

  inline MailDBInfo& operator=(const MailDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailDBInfo& default_instance();

  void Swap(MailDBInfo* other);

  // implements Message ----------------------------------------------

  MailDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailDBInfo& from);
  void MergeFrom(const MailDBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .ProtoBuf.MailInfo data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::ProtoBuf::MailInfo& data(int index) const;
  inline ::ProtoBuf::MailInfo* mutable_data(int index);
  inline ::ProtoBuf::MailInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
      mutable_data();

  // repeated uint32 deleteMailIds = 3;
  inline int deletemailids_size() const;
  inline void clear_deletemailids();
  static const int kDeleteMailIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 deletemailids(int index) const;
  inline void set_deletemailids(int index, ::google::protobuf::uint32 value);
  inline void add_deletemailids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      deletemailids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_deletemailids();

  // @@protoc_insertion_point(class_scope:ProtoBuf.MailDBInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo > data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > deletemailids_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static MailDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class SaveMailDBRequest : public ::google::protobuf::Message {
 public:
  SaveMailDBRequest();
  virtual ~SaveMailDBRequest();

  SaveMailDBRequest(const SaveMailDBRequest& from);

  inline SaveMailDBRequest& operator=(const SaveMailDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveMailDBRequest& default_instance();

  void Swap(SaveMailDBRequest* other);

  // implements Message ----------------------------------------------

  SaveMailDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveMailDBRequest& from);
  void MergeFrom(const SaveMailDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoBuf.MailDBInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ProtoBuf::MailDBInfo& info() const;
  inline ::ProtoBuf::MailDBInfo* mutable_info();
  inline ::ProtoBuf::MailDBInfo* release_info();
  inline void set_allocated_info(::ProtoBuf::MailDBInfo* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SaveMailDBRequest)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::MailDBInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static SaveMailDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class SaveOfflineDBRequest : public ::google::protobuf::Message {
 public:
  SaveOfflineDBRequest();
  virtual ~SaveOfflineDBRequest();

  SaveOfflineDBRequest(const SaveOfflineDBRequest& from);

  inline SaveOfflineDBRequest& operator=(const SaveOfflineDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveOfflineDBRequest& default_instance();

  void Swap(SaveOfflineDBRequest* other);

  // implements Message ----------------------------------------------

  SaveOfflineDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveOfflineDBRequest& from);
  void MergeFrom(const SaveOfflineDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoBuf.OfflineMailDBInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ProtoBuf::OfflineMailDBInfo& info() const;
  inline ::ProtoBuf::OfflineMailDBInfo* mutable_info();
  inline ::ProtoBuf::OfflineMailDBInfo* release_info();
  inline void set_allocated_info(::ProtoBuf::OfflineMailDBInfo* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.SaveOfflineDBRequest)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::OfflineMailDBInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static SaveOfflineDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class MaxMailIDRequest : public ::google::protobuf::Message {
 public:
  MaxMailIDRequest();
  virtual ~MaxMailIDRequest();

  MaxMailIDRequest(const MaxMailIDRequest& from);

  inline MaxMailIDRequest& operator=(const MaxMailIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxMailIDRequest& default_instance();

  void Swap(MaxMailIDRequest* other);

  // implements Message ----------------------------------------------

  MaxMailIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxMailIDRequest& from);
  void MergeFrom(const MaxMailIDRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoBuf.MaxMailIDRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static MaxMailIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class MaxMailIDResponse : public ::google::protobuf::Message {
 public:
  MaxMailIDResponse();
  virtual ~MaxMailIDResponse();

  MaxMailIDResponse(const MaxMailIDResponse& from);

  inline MaxMailIDResponse& operator=(const MaxMailIDResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxMailIDResponse& default_instance();

  void Swap(MaxMailIDResponse* other);

  // implements Message ----------------------------------------------

  MaxMailIDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaxMailIDResponse& from);
  void MergeFrom(const MaxMailIDResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 maxMailId = 1;
  inline bool has_maxmailid() const;
  inline void clear_maxmailid();
  static const int kMaxMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 maxmailid() const;
  inline void set_maxmailid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.MaxMailIDResponse)
 private:
  inline void set_has_maxmailid();
  inline void clear_has_maxmailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 maxmailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static MaxMailIDResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCharacterMail : public ::google::protobuf::Message {
 public:
  DeleteCharacterMail();
  virtual ~DeleteCharacterMail();

  DeleteCharacterMail(const DeleteCharacterMail& from);

  inline DeleteCharacterMail& operator=(const DeleteCharacterMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCharacterMail& default_instance();

  void Swap(DeleteCharacterMail* other);

  // implements Message ----------------------------------------------

  DeleteCharacterMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCharacterMail& from);
  void MergeFrom(const DeleteCharacterMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.DeleteCharacterMail)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static DeleteCharacterMail* default_instance_;
};
// -------------------------------------------------------------------

class CharacterMallDBRequest : public ::google::protobuf::Message {
 public:
  CharacterMallDBRequest();
  virtual ~CharacterMallDBRequest();

  CharacterMallDBRequest(const CharacterMallDBRequest& from);

  inline CharacterMallDBRequest& operator=(const CharacterMallDBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMallDBRequest& default_instance();

  void Swap(CharacterMallDBRequest* other);

  // implements Message ----------------------------------------------

  CharacterMallDBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterMallDBRequest& from);
  void MergeFrom(const CharacterMallDBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterMallDBRequest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterMallDBRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterMallDBResponse : public ::google::protobuf::Message {
 public:
  CharacterMallDBResponse();
  virtual ~CharacterMallDBResponse();

  CharacterMallDBResponse(const CharacterMallDBResponse& from);

  inline CharacterMallDBResponse& operator=(const CharacterMallDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMallDBResponse& default_instance();

  void Swap(CharacterMallDBResponse* other);

  // implements Message ----------------------------------------------

  CharacterMallDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterMallDBResponse& from);
  void MergeFrom(const CharacterMallDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .ProtoBuf.AllMallDBData info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::AllMallDBData& info() const;
  inline ::ProtoBuf::AllMallDBData* mutable_info();
  inline ::ProtoBuf::AllMallDBData* release_info();
  inline void set_allocated_info(::ProtoBuf::AllMallDBData* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterMallDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 charid_;
  ::ProtoBuf::AllMallDBData* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterMallDBResponse* default_instance_;
};
// -------------------------------------------------------------------

class CharacterMallDBSaveReq : public ::google::protobuf::Message {
 public:
  CharacterMallDBSaveReq();
  virtual ~CharacterMallDBSaveReq();

  CharacterMallDBSaveReq(const CharacterMallDBSaveReq& from);

  inline CharacterMallDBSaveReq& operator=(const CharacterMallDBSaveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMallDBSaveReq& default_instance();

  void Swap(CharacterMallDBSaveReq* other);

  // implements Message ----------------------------------------------

  CharacterMallDBSaveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterMallDBSaveReq& from);
  void MergeFrom(const CharacterMallDBSaveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.SingleCharacterMallDB data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::ProtoBuf::SingleCharacterMallDB& data(int index) const;
  inline ::ProtoBuf::SingleCharacterMallDB* mutable_data(int index);
  inline ::ProtoBuf::SingleCharacterMallDB* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCharacterMallDB >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCharacterMallDB >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterMallDBSaveReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCharacterMallDB > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterMallDBSaveReq* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBSetRequest : public ::google::protobuf::Message {
 public:
  GlobalDBSetRequest();
  virtual ~GlobalDBSetRequest();

  GlobalDBSetRequest(const GlobalDBSetRequest& from);

  inline GlobalDBSetRequest& operator=(const GlobalDBSetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBSetRequest& default_instance();

  void Swap(GlobalDBSetRequest* other);

  // implements Message ----------------------------------------------

  GlobalDBSetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBSetRequest& from);
  void MergeFrom(const GlobalDBSetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ProtoBuf.GlobalDBSetRequest)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBSetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GlobalDBSetResponse : public ::google::protobuf::Message {
 public:
  GlobalDBSetResponse();
  virtual ~GlobalDBSetResponse();

  GlobalDBSetResponse(const GlobalDBSetResponse& from);

  inline GlobalDBSetResponse& operator=(const GlobalDBSetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalDBSetResponse& default_instance();

  void Swap(GlobalDBSetResponse* other);

  // implements Message ----------------------------------------------

  GlobalDBSetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalDBSetResponse& from);
  void MergeFrom(const GlobalDBSetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.GlobalDBSetResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_type_id();
  inline void clear_has_type_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 type_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static GlobalDBSetResponse* default_instance_;
};
// -------------------------------------------------------------------

class AllCharacterCampOfflineDBReq : public ::google::protobuf::Message {
 public:
  AllCharacterCampOfflineDBReq();
  virtual ~AllCharacterCampOfflineDBReq();

  AllCharacterCampOfflineDBReq(const AllCharacterCampOfflineDBReq& from);

  inline AllCharacterCampOfflineDBReq& operator=(const AllCharacterCampOfflineDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllCharacterCampOfflineDBReq& default_instance();

  void Swap(AllCharacterCampOfflineDBReq* other);

  // implements Message ----------------------------------------------

  AllCharacterCampOfflineDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllCharacterCampOfflineDBReq& from);
  void MergeFrom(const AllCharacterCampOfflineDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 retnum = 2;
  inline bool has_retnum() const;
  inline void clear_retnum();
  static const int kRetnumFieldNumber = 2;
  inline ::google::protobuf::int32 retnum() const;
  inline void set_retnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllCharacterCampOfflineDBReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_retnum();
  inline void clear_has_retnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 retnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllCharacterCampOfflineDBReq* default_instance_;
};
// -------------------------------------------------------------------

class AllCharacterCampOfflineDBRsp : public ::google::protobuf::Message {
 public:
  AllCharacterCampOfflineDBRsp();
  virtual ~AllCharacterCampOfflineDBRsp();

  AllCharacterCampOfflineDBRsp(const AllCharacterCampOfflineDBRsp& from);

  inline AllCharacterCampOfflineDBRsp& operator=(const AllCharacterCampOfflineDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllCharacterCampOfflineDBRsp& default_instance();

  void Swap(AllCharacterCampOfflineDBRsp* other);

  // implements Message ----------------------------------------------

  AllCharacterCampOfflineDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllCharacterCampOfflineDBRsp& from);
  void MergeFrom(const AllCharacterCampOfflineDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // repeated .ProtoBuf.CharacterCampDBData info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::CharacterCampDBData& info(int index) const;
  inline ::ProtoBuf::CharacterCampDBData* mutable_info(int index);
  inline ::ProtoBuf::CharacterCampDBData* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.AllCharacterCampOfflineDBRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllCharacterCampOfflineDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class CharacterCampDBReq : public ::google::protobuf::Message {
 public:
  CharacterCampDBReq();
  virtual ~CharacterCampDBReq();

  CharacterCampDBReq(const CharacterCampDBReq& from);

  inline CharacterCampDBReq& operator=(const CharacterCampDBReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterCampDBReq& default_instance();

  void Swap(CharacterCampDBReq* other);

  // implements Message ----------------------------------------------

  CharacterCampDBReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterCampDBReq& from);
  void MergeFrom(const CharacterCampDBReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterCampDBReq)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterCampDBReq* default_instance_;
};
// -------------------------------------------------------------------

class CharacterCampDBRsp : public ::google::protobuf::Message {
 public:
  CharacterCampDBRsp();
  virtual ~CharacterCampDBRsp();

  CharacterCampDBRsp(const CharacterCampDBRsp& from);

  inline CharacterCampDBRsp& operator=(const CharacterCampDBRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterCampDBRsp& default_instance();

  void Swap(CharacterCampDBRsp* other);

  // implements Message ----------------------------------------------

  CharacterCampDBRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterCampDBRsp& from);
  void MergeFrom(const CharacterCampDBRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .ProtoBuf.CharacterCampDBData info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::CharacterCampDBData& info() const;
  inline ::ProtoBuf::CharacterCampDBData* mutable_info();
  inline ::ProtoBuf::CharacterCampDBData* release_info();
  inline void set_allocated_info(::ProtoBuf::CharacterCampDBData* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterCampDBRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 charid_;
  ::ProtoBuf::CharacterCampDBData* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterCampDBRsp* default_instance_;
};
// -------------------------------------------------------------------

class CharacterCampDBSetRequest : public ::google::protobuf::Message {
 public:
  CharacterCampDBSetRequest();
  virtual ~CharacterCampDBSetRequest();

  CharacterCampDBSetRequest(const CharacterCampDBSetRequest& from);

  inline CharacterCampDBSetRequest& operator=(const CharacterCampDBSetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterCampDBSetRequest& default_instance();

  void Swap(CharacterCampDBSetRequest* other);

  // implements Message ----------------------------------------------

  CharacterCampDBSetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterCampDBSetRequest& from);
  void MergeFrom(const CharacterCampDBSetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoBuf.CharacterCampDBData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::ProtoBuf::CharacterCampDBData& data(int index) const;
  inline ::ProtoBuf::CharacterCampDBData* mutable_data(int index);
  inline ::ProtoBuf::CharacterCampDBData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterCampDBSetRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterCampDBSetRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterListRequest : public ::google::protobuf::Message {
 public:
  CharacterListRequest();
  virtual ~CharacterListRequest();

  CharacterListRequest(const CharacterListRequest& from);

  inline CharacterListRequest& operator=(const CharacterListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterListRequest& default_instance();

  void Swap(CharacterListRequest* other);

  // implements Message ----------------------------------------------

  CharacterListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterListRequest& from);
  void MergeFrom(const CharacterListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 requestid = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // required uint32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // required string channelid = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // required string userid = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // required string channel_user_id = 5;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 5;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterListRequest)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::std::string* channelid_;
  ::std::string* userid_;
  ::std::string* channel_user_id_;
  ::google::protobuf::uint32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterListRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterListResponse : public ::google::protobuf::Message {
 public:
  CharacterListResponse();
  virtual ~CharacterListResponse();

  CharacterListResponse(const CharacterListResponse& from);

  inline CharacterListResponse& operator=(const CharacterListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterListResponse& default_instance();

  void Swap(CharacterListResponse* other);

  // implements Message ----------------------------------------------

  CharacterListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterListResponse& from);
  void MergeFrom(const CharacterListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CharacterListResponse_Result Result;
  static const Result SUCCESS = CharacterListResponse_Result_SUCCESS;
  static const Result FAILED = CharacterListResponse_Result_FAILED;
  static const Result UNKNOW = CharacterListResponse_Result_UNKNOW;
  static inline bool Result_IsValid(int value) {
    return CharacterListResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CharacterListResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CharacterListResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CharacterListResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CharacterListResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CharacterListResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CharacterListResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ProtoBuf.CharacterListResponse.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ProtoBuf::CharacterListResponse_Result result() const;
  inline void set_result(::ProtoBuf::CharacterListResponse_Result value);

  // required uint64 requestid = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 2;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // repeated .ProtoBuf.CharacterDBInfo charInfoList = 3;
  inline int charinfolist_size() const;
  inline void clear_charinfolist();
  static const int kCharInfoListFieldNumber = 3;
  inline const ::ProtoBuf::CharacterDBInfo& charinfolist(int index) const;
  inline ::ProtoBuf::CharacterDBInfo* mutable_charinfolist(int index);
  inline ::ProtoBuf::CharacterDBInfo* add_charinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBInfo >&
      charinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBInfo >*
      mutable_charinfolist();

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterListResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_requestid();
  inline void clear_has_requestid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBInfo > charinfolist_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateCharacterRequest : public ::google::protobuf::Message {
 public:
  CreateCharacterRequest();
  virtual ~CreateCharacterRequest();

  CreateCharacterRequest(const CreateCharacterRequest& from);

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCharacterRequest& default_instance();

  void Swap(CreateCharacterRequest* other);

  // implements Message ----------------------------------------------

  CreateCharacterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateCharacterRequest& from);
  void MergeFrom(const CreateCharacterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 requestid = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // required uint32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // required string channelid = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string userid = 5;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 5;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // required string channel_user_id = 6;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 6;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // required .ProtoBuf.CharacterDBInfo charInfo = 7;
  inline bool has_charinfo() const;
  inline void clear_charinfo();
  static const int kCharInfoFieldNumber = 7;
  inline const ::ProtoBuf::CharacterDBInfo& charinfo() const;
  inline ::ProtoBuf::CharacterDBInfo* mutable_charinfo();
  inline ::ProtoBuf::CharacterDBInfo* release_charinfo();
  inline void set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CreateCharacterRequest)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_charinfo();
  inline void clear_has_charinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::std::string* channelid_;
  ::std::string* name_;
  ::std::string* userid_;
  ::std::string* channel_user_id_;
  ::ProtoBuf::CharacterDBInfo* charinfo_;
  ::google::protobuf::uint32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateCharacterRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateCharacterResponse : public ::google::protobuf::Message {
 public:
  CreateCharacterResponse();
  virtual ~CreateCharacterResponse();

  CreateCharacterResponse(const CreateCharacterResponse& from);

  inline CreateCharacterResponse& operator=(const CreateCharacterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCharacterResponse& default_instance();

  void Swap(CreateCharacterResponse* other);

  // implements Message ----------------------------------------------

  CreateCharacterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateCharacterResponse& from);
  void MergeFrom(const CreateCharacterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CreateCharacterResponse_Result Result;
  static const Result SUCCESS = CreateCharacterResponse_Result_SUCCESS;
  static const Result NAME_EXISTS = CreateCharacterResponse_Result_NAME_EXISTS;
  static const Result TOO_MANAY_CHARACTER = CreateCharacterResponse_Result_TOO_MANAY_CHARACTER;
  static const Result UNKNOW = CreateCharacterResponse_Result_UNKNOW;
  static inline bool Result_IsValid(int value) {
    return CreateCharacterResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CreateCharacterResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CreateCharacterResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CreateCharacterResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CreateCharacterResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CreateCharacterResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CreateCharacterResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ProtoBuf.CreateCharacterResponse.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ProtoBuf::CreateCharacterResponse_Result result() const;
  inline void set_result(::ProtoBuf::CreateCharacterResponse_Result value);

  // required uint64 requestid = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 2;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // optional .ProtoBuf.CharacterDBInfo charInfo = 3;
  inline bool has_charinfo() const;
  inline void clear_charinfo();
  static const int kCharInfoFieldNumber = 3;
  inline const ::ProtoBuf::CharacterDBInfo& charinfo() const;
  inline ::ProtoBuf::CharacterDBInfo* mutable_charinfo();
  inline ::ProtoBuf::CharacterDBInfo* release_charinfo();
  inline void set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CreateCharacterResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_charinfo();
  inline void clear_has_charinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::ProtoBuf::CharacterDBInfo* charinfo_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateCharacterResponse* default_instance_;
};
// -------------------------------------------------------------------

class CharacterInfoRequest : public ::google::protobuf::Message {
 public:
  CharacterInfoRequest();
  virtual ~CharacterInfoRequest();

  CharacterInfoRequest(const CharacterInfoRequest& from);

  inline CharacterInfoRequest& operator=(const CharacterInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterInfoRequest& default_instance();

  void Swap(CharacterInfoRequest* other);

  // implements Message ----------------------------------------------

  CharacterInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterInfoRequest& from);
  void MergeFrom(const CharacterInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 requestid = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // required uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required uint32 reqCharID = 3;
  inline bool has_reqcharid() const;
  inline void clear_reqcharid();
  static const int kReqCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 reqcharid() const;
  inline void set_reqcharid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterInfoRequest)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_reqcharid();
  inline void clear_has_reqcharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 reqcharid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterInfoResponse : public ::google::protobuf::Message {
 public:
  CharacterInfoResponse();
  virtual ~CharacterInfoResponse();

  CharacterInfoResponse(const CharacterInfoResponse& from);

  inline CharacterInfoResponse& operator=(const CharacterInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterInfoResponse& default_instance();

  void Swap(CharacterInfoResponse* other);

  // implements Message ----------------------------------------------

  CharacterInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterInfoResponse& from);
  void MergeFrom(const CharacterInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CharacterInfoResponse_Result Result;
  static const Result SUCCESS = CharacterInfoResponse_Result_SUCCESS;
  static const Result NOT_EXIST = CharacterInfoResponse_Result_NOT_EXIST;
  static const Result FAILED = CharacterInfoResponse_Result_FAILED;
  static const Result UNKNOW = CharacterInfoResponse_Result_UNKNOW;
  static inline bool Result_IsValid(int value) {
    return CharacterInfoResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CharacterInfoResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CharacterInfoResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CharacterInfoResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CharacterInfoResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CharacterInfoResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CharacterInfoResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ProtoBuf.CharacterInfoResponse.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ProtoBuf::CharacterInfoResponse_Result result() const;
  inline void set_result(::ProtoBuf::CharacterInfoResponse_Result value);

  // required uint64 requestid = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 2;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // required uint32 reqCharID = 3;
  inline bool has_reqcharid() const;
  inline void clear_reqcharid();
  static const int kReqCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 reqcharid() const;
  inline void set_reqcharid(::google::protobuf::uint32 value);

  // optional .ProtoBuf.CharacterDBInfo charInfo = 4;
  inline bool has_charinfo() const;
  inline void clear_charinfo();
  static const int kCharInfoFieldNumber = 4;
  inline const ::ProtoBuf::CharacterDBInfo& charinfo() const;
  inline ::ProtoBuf::CharacterDBInfo* mutable_charinfo();
  inline ::ProtoBuf::CharacterDBInfo* release_charinfo();
  inline void set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterInfoResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_reqcharid();
  inline void clear_has_reqcharid();
  inline void set_has_charinfo();
  inline void clear_has_charinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  int result_;
  ::google::protobuf::uint32 reqcharid_;
  ::ProtoBuf::CharacterDBInfo* charinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CharacterInfoUpdateRequest : public ::google::protobuf::Message {
 public:
  CharacterInfoUpdateRequest();
  virtual ~CharacterInfoUpdateRequest();

  CharacterInfoUpdateRequest(const CharacterInfoUpdateRequest& from);

  inline CharacterInfoUpdateRequest& operator=(const CharacterInfoUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterInfoUpdateRequest& default_instance();

  void Swap(CharacterInfoUpdateRequest* other);

  // implements Message ----------------------------------------------

  CharacterInfoUpdateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterInfoUpdateRequest& from);
  void MergeFrom(const CharacterInfoUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 requestid = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // required uint32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // required string channelid = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // required string userid = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // required string channel_user_id = 5;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 5;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // required .ProtoBuf.CharacterDBInfo charInfo = 6;
  inline bool has_charinfo() const;
  inline void clear_charinfo();
  static const int kCharInfoFieldNumber = 6;
  inline const ::ProtoBuf::CharacterDBInfo& charinfo() const;
  inline ::ProtoBuf::CharacterDBInfo* mutable_charinfo();
  inline ::ProtoBuf::CharacterDBInfo* release_charinfo();
  inline void set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterInfoUpdateRequest)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_charinfo();
  inline void clear_has_charinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::std::string* channelid_;
  ::std::string* userid_;
  ::std::string* channel_user_id_;
  ::ProtoBuf::CharacterDBInfo* charinfo_;
  ::google::protobuf::uint32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterInfoUpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class CharacterInfoUpdateResponse : public ::google::protobuf::Message {
 public:
  CharacterInfoUpdateResponse();
  virtual ~CharacterInfoUpdateResponse();

  CharacterInfoUpdateResponse(const CharacterInfoUpdateResponse& from);

  inline CharacterInfoUpdateResponse& operator=(const CharacterInfoUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterInfoUpdateResponse& default_instance();

  void Swap(CharacterInfoUpdateResponse* other);

  // implements Message ----------------------------------------------

  CharacterInfoUpdateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterInfoUpdateResponse& from);
  void MergeFrom(const CharacterInfoUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CharacterInfoUpdateResponse_Result Result;
  static const Result SUCCESS = CharacterInfoUpdateResponse_Result_SUCCESS;
  static const Result FAILED = CharacterInfoUpdateResponse_Result_FAILED;
  static const Result UNKNOW = CharacterInfoUpdateResponse_Result_UNKNOW;
  static inline bool Result_IsValid(int value) {
    return CharacterInfoUpdateResponse_Result_IsValid(value);
  }
  static const Result Result_MIN =
    CharacterInfoUpdateResponse_Result_Result_MIN;
  static const Result Result_MAX =
    CharacterInfoUpdateResponse_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    CharacterInfoUpdateResponse_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return CharacterInfoUpdateResponse_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return CharacterInfoUpdateResponse_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return CharacterInfoUpdateResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ProtoBuf.CharacterInfoUpdateResponse.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ProtoBuf::CharacterInfoUpdateResponse_Result result() const;
  inline void set_result(::ProtoBuf::CharacterInfoUpdateResponse_Result value);

  // required uint32 charId = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterInfoUpdateResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterInfoUpdateResponse* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDelDBRequst : public ::google::protobuf::Message {
 public:
  CharacterDelDBRequst();
  virtual ~CharacterDelDBRequst();

  CharacterDelDBRequst(const CharacterDelDBRequst& from);

  inline CharacterDelDBRequst& operator=(const CharacterDelDBRequst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDelDBRequst& default_instance();

  void Swap(CharacterDelDBRequst* other);

  // implements Message ----------------------------------------------

  CharacterDelDBRequst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDelDBRequst& from);
  void MergeFrom(const CharacterDelDBRequst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 requestid = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 1;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // required uint32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // required string channelid = 3;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // required string user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required string channel_user_id = 5;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 5;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // required uint32 charID = 6;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 6;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDelDBRequst)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::std::string* channelid_;
  ::std::string* user_id_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 charid_;
  ::std::string* channel_user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDelDBRequst* default_instance_;
};
// -------------------------------------------------------------------

class CharacterDelDBResponse : public ::google::protobuf::Message {
 public:
  CharacterDelDBResponse();
  virtual ~CharacterDelDBResponse();

  CharacterDelDBResponse(const CharacterDelDBResponse& from);

  inline CharacterDelDBResponse& operator=(const CharacterDelDBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterDelDBResponse& default_instance();

  void Swap(CharacterDelDBResponse* other);

  // implements Message ----------------------------------------------

  CharacterDelDBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterDelDBResponse& from);
  void MergeFrom(const CharacterDelDBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required uint64 requestid = 2;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestidFieldNumber = 2;
  inline ::google::protobuf::uint64 requestid() const;
  inline void set_requestid(::google::protobuf::uint64 value);

  // optional uint32 groupid = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 3;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional string channelid = 4;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 4;
  inline const ::std::string& channelid() const;
  inline void set_channelid(const ::std::string& value);
  inline void set_channelid(const char* value);
  inline void set_channelid(const char* value, size_t size);
  inline ::std::string* mutable_channelid();
  inline ::std::string* release_channelid();
  inline void set_allocated_channelid(::std::string* channelid);

  // optional string user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional string channel_user_id = 6;
  inline bool has_channel_user_id() const;
  inline void clear_channel_user_id();
  static const int kChannelUserIdFieldNumber = 6;
  inline const ::std::string& channel_user_id() const;
  inline void set_channel_user_id(const ::std::string& value);
  inline void set_channel_user_id(const char* value);
  inline void set_channel_user_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_user_id();
  inline ::std::string* release_channel_user_id();
  inline void set_allocated_channel_user_id(::std::string* channel_user_id);

  // optional uint32 charID = 7;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 7;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CharacterDelDBResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_channel_user_id();
  inline void clear_has_channel_user_id();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 requestid_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 groupid_;
  ::std::string* channelid_;
  ::std::string* user_id_;
  ::std::string* channel_user_id_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto();

  void InitAsDefaultInstance();
  static CharacterDelDBResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountLoginDBRequest

// required string plat_user_id = 1;
inline bool AccountLoginDBRequest::has_plat_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLoginDBRequest::set_has_plat_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLoginDBRequest::clear_has_plat_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLoginDBRequest::clear_plat_user_id() {
  if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
    plat_user_id_->clear();
  }
  clear_has_plat_user_id();
}
inline const ::std::string& AccountLoginDBRequest::plat_user_id() const {
  return *plat_user_id_;
}
inline void AccountLoginDBRequest::set_plat_user_id(const ::std::string& value) {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  plat_user_id_->assign(value);
}
inline void AccountLoginDBRequest::set_plat_user_id(const char* value) {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  plat_user_id_->assign(value);
}
inline void AccountLoginDBRequest::set_plat_user_id(const char* value, size_t size) {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  plat_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBRequest::mutable_plat_user_id() {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  return plat_user_id_;
}
inline ::std::string* AccountLoginDBRequest::release_plat_user_id() {
  clear_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plat_user_id_;
    plat_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBRequest::set_allocated_plat_user_id(::std::string* plat_user_id) {
  if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_id_;
  }
  if (plat_user_id) {
    set_has_plat_user_id();
    plat_user_id_ = plat_user_id;
  } else {
    clear_has_plat_user_id();
    plat_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string plat_user_name = 2;
inline bool AccountLoginDBRequest::has_plat_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLoginDBRequest::set_has_plat_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLoginDBRequest::clear_has_plat_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLoginDBRequest::clear_plat_user_name() {
  if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
    plat_user_name_->clear();
  }
  clear_has_plat_user_name();
}
inline const ::std::string& AccountLoginDBRequest::plat_user_name() const {
  return *plat_user_name_;
}
inline void AccountLoginDBRequest::set_plat_user_name(const ::std::string& value) {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  plat_user_name_->assign(value);
}
inline void AccountLoginDBRequest::set_plat_user_name(const char* value) {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  plat_user_name_->assign(value);
}
inline void AccountLoginDBRequest::set_plat_user_name(const char* value, size_t size) {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  plat_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBRequest::mutable_plat_user_name() {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  return plat_user_name_;
}
inline ::std::string* AccountLoginDBRequest::release_plat_user_name() {
  clear_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plat_user_name_;
    plat_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBRequest::set_allocated_plat_user_name(::std::string* plat_user_name) {
  if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_name_;
  }
  if (plat_user_name) {
    set_has_plat_user_name();
    plat_user_name_ = plat_user_name;
  } else {
    clear_has_plat_user_name();
    plat_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel = 3;
inline bool AccountLoginDBRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountLoginDBRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountLoginDBRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountLoginDBRequest::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& AccountLoginDBRequest::channel() const {
  return *channel_;
}
inline void AccountLoginDBRequest::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void AccountLoginDBRequest::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void AccountLoginDBRequest::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBRequest::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* AccountLoginDBRequest::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBRequest::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel_user_id = 4;
inline bool AccountLoginDBRequest::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountLoginDBRequest::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountLoginDBRequest::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountLoginDBRequest::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& AccountLoginDBRequest::channel_user_id() const {
  return *channel_user_id_;
}
inline void AccountLoginDBRequest::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void AccountLoginDBRequest::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void AccountLoginDBRequest::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBRequest::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* AccountLoginDBRequest::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBRequest::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 session_id = 5;
inline bool AccountLoginDBRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountLoginDBRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountLoginDBRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountLoginDBRequest::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 AccountLoginDBRequest::session_id() const {
  return session_id_;
}
inline void AccountLoginDBRequest::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// -------------------------------------------------------------------

// AccountLoginDBResponse

// required int32 result = 1;
inline bool AccountLoginDBResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLoginDBResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLoginDBResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLoginDBResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AccountLoginDBResponse::result() const {
  return result_;
}
inline void AccountLoginDBResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 session_id = 2;
inline bool AccountLoginDBResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLoginDBResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLoginDBResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLoginDBResponse::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 AccountLoginDBResponse::session_id() const {
  return session_id_;
}
inline void AccountLoginDBResponse::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required string channel_user_id = 3;
inline bool AccountLoginDBResponse::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountLoginDBResponse::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountLoginDBResponse::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountLoginDBResponse::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& AccountLoginDBResponse::channel_user_id() const {
  return *channel_user_id_;
}
inline void AccountLoginDBResponse::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void AccountLoginDBResponse::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void AccountLoginDBResponse::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBResponse::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* AccountLoginDBResponse::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBResponse::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string plat_user_id = 4;
inline bool AccountLoginDBResponse::has_plat_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountLoginDBResponse::set_has_plat_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountLoginDBResponse::clear_has_plat_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountLoginDBResponse::clear_plat_user_id() {
  if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
    plat_user_id_->clear();
  }
  clear_has_plat_user_id();
}
inline const ::std::string& AccountLoginDBResponse::plat_user_id() const {
  return *plat_user_id_;
}
inline void AccountLoginDBResponse::set_plat_user_id(const ::std::string& value) {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  plat_user_id_->assign(value);
}
inline void AccountLoginDBResponse::set_plat_user_id(const char* value) {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  plat_user_id_->assign(value);
}
inline void AccountLoginDBResponse::set_plat_user_id(const char* value, size_t size) {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  plat_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBResponse::mutable_plat_user_id() {
  set_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_id_ = new ::std::string;
  }
  return plat_user_id_;
}
inline ::std::string* AccountLoginDBResponse::release_plat_user_id() {
  clear_has_plat_user_id();
  if (plat_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plat_user_id_;
    plat_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBResponse::set_allocated_plat_user_id(::std::string* plat_user_id) {
  if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_id_;
  }
  if (plat_user_id) {
    set_has_plat_user_id();
    plat_user_id_ = plat_user_id;
  } else {
    clear_has_plat_user_id();
    plat_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string plat_user_name = 5;
inline bool AccountLoginDBResponse::has_plat_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountLoginDBResponse::set_has_plat_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountLoginDBResponse::clear_has_plat_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountLoginDBResponse::clear_plat_user_name() {
  if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
    plat_user_name_->clear();
  }
  clear_has_plat_user_name();
}
inline const ::std::string& AccountLoginDBResponse::plat_user_name() const {
  return *plat_user_name_;
}
inline void AccountLoginDBResponse::set_plat_user_name(const ::std::string& value) {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  plat_user_name_->assign(value);
}
inline void AccountLoginDBResponse::set_plat_user_name(const char* value) {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  plat_user_name_->assign(value);
}
inline void AccountLoginDBResponse::set_plat_user_name(const char* value, size_t size) {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  plat_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBResponse::mutable_plat_user_name() {
  set_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    plat_user_name_ = new ::std::string;
  }
  return plat_user_name_;
}
inline ::std::string* AccountLoginDBResponse::release_plat_user_name() {
  clear_has_plat_user_name();
  if (plat_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plat_user_name_;
    plat_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBResponse::set_allocated_plat_user_name(::std::string* plat_user_name) {
  if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_name_;
  }
  if (plat_user_name) {
    set_has_plat_user_name();
    plat_user_name_ = plat_user_name;
  } else {
    clear_has_plat_user_name();
    plat_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 6;
inline bool AccountLoginDBResponse::has_channel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountLoginDBResponse::set_has_channel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountLoginDBResponse::clear_has_channel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountLoginDBResponse::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& AccountLoginDBResponse::channel() const {
  return *channel_;
}
inline void AccountLoginDBResponse::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void AccountLoginDBResponse::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void AccountLoginDBResponse::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginDBResponse::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* AccountLoginDBResponse::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginDBResponse::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 byonline = 7;
inline bool AccountLoginDBResponse::has_byonline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountLoginDBResponse::set_has_byonline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountLoginDBResponse::clear_has_byonline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountLoginDBResponse::clear_byonline() {
  byonline_ = 0;
  clear_has_byonline();
}
inline ::google::protobuf::int32 AccountLoginDBResponse::byonline() const {
  return byonline_;
}
inline void AccountLoginDBResponse::set_byonline(::google::protobuf::int32 value) {
  set_has_byonline();
  byonline_ = value;
}

// -------------------------------------------------------------------

// AccountSetOnlineFlagDBRequest

// required string channel_user_id = 1;
inline bool AccountSetOnlineFlagDBRequest::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountSetOnlineFlagDBRequest::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountSetOnlineFlagDBRequest::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountSetOnlineFlagDBRequest::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& AccountSetOnlineFlagDBRequest::channel_user_id() const {
  return *channel_user_id_;
}
inline void AccountSetOnlineFlagDBRequest::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void AccountSetOnlineFlagDBRequest::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void AccountSetOnlineFlagDBRequest::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountSetOnlineFlagDBRequest::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* AccountSetOnlineFlagDBRequest::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountSetOnlineFlagDBRequest::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 byonline = 2;
inline bool AccountSetOnlineFlagDBRequest::has_byonline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountSetOnlineFlagDBRequest::set_has_byonline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountSetOnlineFlagDBRequest::clear_has_byonline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountSetOnlineFlagDBRequest::clear_byonline() {
  byonline_ = 0;
  clear_has_byonline();
}
inline ::google::protobuf::int32 AccountSetOnlineFlagDBRequest::byonline() const {
  return byonline_;
}
inline void AccountSetOnlineFlagDBRequest::set_byonline(::google::protobuf::int32 value) {
  set_has_byonline();
  byonline_ = value;
}

// -------------------------------------------------------------------

// CharacterRoleListDBRequest

// required string channel_user_id = 1;
inline bool CharacterRoleListDBRequest::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterRoleListDBRequest::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterRoleListDBRequest::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterRoleListDBRequest::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& CharacterRoleListDBRequest::channel_user_id() const {
  return *channel_user_id_;
}
inline void CharacterRoleListDBRequest::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterRoleListDBRequest::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterRoleListDBRequest::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterRoleListDBRequest::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* CharacterRoleListDBRequest::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterRoleListDBRequest::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CharacterRoleDBBaseInfo

// required uint32 charID = 1;
inline bool CharacterRoleDBBaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterRoleDBBaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterRoleDBBaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterRoleDBBaseInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterRoleDBBaseInfo::charid() const {
  return charid_;
}
inline void CharacterRoleDBBaseInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
inline bool CharacterRoleDBBaseInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterRoleDBBaseInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterRoleDBBaseInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterRoleDBBaseInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::ProtoBuf::CharacterDBBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::ProtoBuf::CharacterDBBaseInfo& CharacterRoleDBBaseInfo::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* CharacterRoleDBBaseInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::ProtoBuf::CharacterDBBaseInfo;
  return baseinfo_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* CharacterRoleDBBaseInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::ProtoBuf::CharacterDBBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void CharacterRoleDBBaseInfo::set_allocated_baseinfo(::ProtoBuf::CharacterDBBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// -------------------------------------------------------------------

// CharacterRoleListDBResponse

// required .ProtoBuf.CharacterRoleListDBResponse.Result result = 1;
inline bool CharacterRoleListDBResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterRoleListDBResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterRoleListDBResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterRoleListDBResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ProtoBuf::CharacterRoleListDBResponse_Result CharacterRoleListDBResponse::result() const {
  return static_cast< ::ProtoBuf::CharacterRoleListDBResponse_Result >(result_);
}
inline void CharacterRoleListDBResponse::set_result(::ProtoBuf::CharacterRoleListDBResponse_Result value) {
  assert(::ProtoBuf::CharacterRoleListDBResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// required string channel_user_id = 2;
inline bool CharacterRoleListDBResponse::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterRoleListDBResponse::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterRoleListDBResponse::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterRoleListDBResponse::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& CharacterRoleListDBResponse::channel_user_id() const {
  return *channel_user_id_;
}
inline void CharacterRoleListDBResponse::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterRoleListDBResponse::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterRoleListDBResponse::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterRoleListDBResponse::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* CharacterRoleListDBResponse::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterRoleListDBResponse::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ProtoBuf.CharacterRoleDBBaseInfo info = 3;
inline int CharacterRoleListDBResponse::info_size() const {
  return info_.size();
}
inline void CharacterRoleListDBResponse::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::CharacterRoleDBBaseInfo& CharacterRoleListDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::CharacterRoleDBBaseInfo* CharacterRoleListDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::CharacterRoleDBBaseInfo* CharacterRoleListDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterRoleDBBaseInfo >&
CharacterRoleListDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterRoleDBBaseInfo >*
CharacterRoleListDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// OfflineCharacterDBRequest

// required int32 offset = 1;
inline bool OfflineCharacterDBRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineCharacterDBRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineCharacterDBRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineCharacterDBRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 OfflineCharacterDBRequest::offset() const {
  return offset_;
}
inline void OfflineCharacterDBRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 retnum = 2;
inline bool OfflineCharacterDBRequest::has_retnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineCharacterDBRequest::set_has_retnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineCharacterDBRequest::clear_has_retnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineCharacterDBRequest::clear_retnum() {
  retnum_ = 0;
  clear_has_retnum();
}
inline ::google::protobuf::int32 OfflineCharacterDBRequest::retnum() const {
  return retnum_;
}
inline void OfflineCharacterDBRequest::set_retnum(::google::protobuf::int32 value) {
  set_has_retnum();
  retnum_ = value;
}

// -------------------------------------------------------------------

// OfflineCharacterDBInfo

// required uint32 charID = 1;
inline bool OfflineCharacterDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineCharacterDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineCharacterDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineCharacterDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 OfflineCharacterDBInfo::charid() const {
  return charid_;
}
inline void OfflineCharacterDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
inline bool OfflineCharacterDBInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineCharacterDBInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineCharacterDBInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineCharacterDBInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::ProtoBuf::CharacterDBBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::ProtoBuf::CharacterDBBaseInfo& OfflineCharacterDBInfo::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* OfflineCharacterDBInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::ProtoBuf::CharacterDBBaseInfo;
  return baseinfo_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* OfflineCharacterDBInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::ProtoBuf::CharacterDBBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void OfflineCharacterDBInfo::set_allocated_baseinfo(::ProtoBuf::CharacterDBBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// -------------------------------------------------------------------

// OfflineCharacterDBResponse

// required int32 retcode = 1;
inline bool OfflineCharacterDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineCharacterDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineCharacterDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineCharacterDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 OfflineCharacterDBResponse::retcode() const {
  return retcode_;
}
inline void OfflineCharacterDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 offset = 2;
inline bool OfflineCharacterDBResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineCharacterDBResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineCharacterDBResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineCharacterDBResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 OfflineCharacterDBResponse::offset() const {
  return offset_;
}
inline void OfflineCharacterDBResponse::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .ProtoBuf.OfflineCharacterDBInfo info = 3;
inline int OfflineCharacterDBResponse::info_size() const {
  return info_.size();
}
inline void OfflineCharacterDBResponse::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::OfflineCharacterDBInfo& OfflineCharacterDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::OfflineCharacterDBInfo* OfflineCharacterDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::OfflineCharacterDBInfo* OfflineCharacterDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineCharacterDBInfo >&
OfflineCharacterDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineCharacterDBInfo >*
OfflineCharacterDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// AllFriendDBRequest

// required int32 offset = 1;
inline bool AllFriendDBRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllFriendDBRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllFriendDBRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllFriendDBRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllFriendDBRequest::offset() const {
  return offset_;
}
inline void AllFriendDBRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 retnum = 2;
inline bool AllFriendDBRequest::has_retnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllFriendDBRequest::set_has_retnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllFriendDBRequest::clear_has_retnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllFriendDBRequest::clear_retnum() {
  retnum_ = 0;
  clear_has_retnum();
}
inline ::google::protobuf::int32 AllFriendDBRequest::retnum() const {
  return retnum_;
}
inline void AllFriendDBRequest::set_retnum(::google::protobuf::int32 value) {
  set_has_retnum();
  retnum_ = value;
}

// -------------------------------------------------------------------

// FriendDBInfo

// required uint32 charID = 1;
inline bool FriendDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 FriendDBInfo::charid() const {
  return charid_;
}
inline void FriendDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required .ProtoBuf.RelationDBInfo data = 2;
inline bool FriendDBInfo::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendDBInfo::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendDBInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendDBInfo::clear_data() {
  if (data_ != NULL) data_->::ProtoBuf::RelationDBInfo::Clear();
  clear_has_data();
}
inline const ::ProtoBuf::RelationDBInfo& FriendDBInfo::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::ProtoBuf::RelationDBInfo* FriendDBInfo::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::ProtoBuf::RelationDBInfo;
  return data_;
}
inline ::ProtoBuf::RelationDBInfo* FriendDBInfo::release_data() {
  clear_has_data();
  ::ProtoBuf::RelationDBInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FriendDBInfo::set_allocated_data(::ProtoBuf::RelationDBInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// AllFriendDBResponse

// required int32 retcode = 1;
inline bool AllFriendDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllFriendDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllFriendDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllFriendDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 AllFriendDBResponse::retcode() const {
  return retcode_;
}
inline void AllFriendDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 offset = 2;
inline bool AllFriendDBResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllFriendDBResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllFriendDBResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllFriendDBResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllFriendDBResponse::offset() const {
  return offset_;
}
inline void AllFriendDBResponse::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .ProtoBuf.FriendDBInfo info = 3;
inline int AllFriendDBResponse::info_size() const {
  return info_.size();
}
inline void AllFriendDBResponse::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::FriendDBInfo& AllFriendDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::FriendDBInfo* AllFriendDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::FriendDBInfo* AllFriendDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >&
AllFriendDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >*
AllFriendDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// SaveFriendDBRequest

// repeated .ProtoBuf.FriendDBInfo info = 1;
inline int SaveFriendDBRequest::info_size() const {
  return info_.size();
}
inline void SaveFriendDBRequest::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::FriendDBInfo& SaveFriendDBRequest::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::FriendDBInfo* SaveFriendDBRequest::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::FriendDBInfo* SaveFriendDBRequest::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >&
SaveFriendDBRequest::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::FriendDBInfo >*
SaveFriendDBRequest::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// ActiveCharacterDBRequest

// required uint32 srcCharID = 1;
inline bool ActiveCharacterDBRequest::has_srccharid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveCharacterDBRequest::set_has_srccharid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActiveCharacterDBRequest::clear_has_srccharid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActiveCharacterDBRequest::clear_srccharid() {
  srccharid_ = 0u;
  clear_has_srccharid();
}
inline ::google::protobuf::uint32 ActiveCharacterDBRequest::srccharid() const {
  return srccharid_;
}
inline void ActiveCharacterDBRequest::set_srccharid(::google::protobuf::uint32 value) {
  set_has_srccharid();
  srccharid_ = value;
}

// required uint32 dstCharID = 2;
inline bool ActiveCharacterDBRequest::has_dstcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveCharacterDBRequest::set_has_dstcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActiveCharacterDBRequest::clear_has_dstcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActiveCharacterDBRequest::clear_dstcharid() {
  dstcharid_ = 0u;
  clear_has_dstcharid();
}
inline ::google::protobuf::uint32 ActiveCharacterDBRequest::dstcharid() const {
  return dstcharid_;
}
inline void ActiveCharacterDBRequest::set_dstcharid(::google::protobuf::uint32 value) {
  set_has_dstcharid();
  dstcharid_ = value;
}

// -------------------------------------------------------------------

// ActiveCharacterDBResponse

// required int32 retcode = 1;
inline bool ActiveCharacterDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveCharacterDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActiveCharacterDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActiveCharacterDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 ActiveCharacterDBResponse::retcode() const {
  return retcode_;
}
inline void ActiveCharacterDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required uint32 srcCharID = 2;
inline bool ActiveCharacterDBResponse::has_srccharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveCharacterDBResponse::set_has_srccharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActiveCharacterDBResponse::clear_has_srccharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActiveCharacterDBResponse::clear_srccharid() {
  srccharid_ = 0u;
  clear_has_srccharid();
}
inline ::google::protobuf::uint32 ActiveCharacterDBResponse::srccharid() const {
  return srccharid_;
}
inline void ActiveCharacterDBResponse::set_srccharid(::google::protobuf::uint32 value) {
  set_has_srccharid();
  srccharid_ = value;
}

// optional .ProtoBuf.ActiveCharacterDBInfo info = 3;
inline bool ActiveCharacterDBResponse::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveCharacterDBResponse::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActiveCharacterDBResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActiveCharacterDBResponse::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::ActiveCharacterDBInfo::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::ActiveCharacterDBInfo& ActiveCharacterDBResponse::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::ActiveCharacterDBInfo* ActiveCharacterDBResponse::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::ActiveCharacterDBInfo;
  return info_;
}
inline ::ProtoBuf::ActiveCharacterDBInfo* ActiveCharacterDBResponse::release_info() {
  clear_has_info();
  ::ProtoBuf::ActiveCharacterDBInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ActiveCharacterDBResponse::set_allocated_info(::ProtoBuf::ActiveCharacterDBInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ActiveCharacterDBInfo

// required uint32 charID = 1;
inline bool ActiveCharacterDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveCharacterDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActiveCharacterDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActiveCharacterDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 ActiveCharacterDBInfo::charid() const {
  return charid_;
}
inline void ActiveCharacterDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .ProtoBuf.CharacterDBBaseInfo baseData = 2;
inline bool ActiveCharacterDBInfo::has_basedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveCharacterDBInfo::set_has_basedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActiveCharacterDBInfo::clear_has_basedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActiveCharacterDBInfo::clear_basedata() {
  if (basedata_ != NULL) basedata_->::ProtoBuf::CharacterDBBaseInfo::Clear();
  clear_has_basedata();
}
inline const ::ProtoBuf::CharacterDBBaseInfo& ActiveCharacterDBInfo::basedata() const {
  return basedata_ != NULL ? *basedata_ : *default_instance_->basedata_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* ActiveCharacterDBInfo::mutable_basedata() {
  set_has_basedata();
  if (basedata_ == NULL) basedata_ = new ::ProtoBuf::CharacterDBBaseInfo;
  return basedata_;
}
inline ::ProtoBuf::CharacterDBBaseInfo* ActiveCharacterDBInfo::release_basedata() {
  clear_has_basedata();
  ::ProtoBuf::CharacterDBBaseInfo* temp = basedata_;
  basedata_ = NULL;
  return temp;
}
inline void ActiveCharacterDBInfo::set_allocated_basedata(::ProtoBuf::CharacterDBBaseInfo* basedata) {
  delete basedata_;
  basedata_ = basedata;
  if (basedata) {
    set_has_basedata();
  } else {
    clear_has_basedata();
  }
}

// optional .ProtoBuf.CharacterDBEquipData equipData = 3;
inline bool ActiveCharacterDBInfo::has_equipdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveCharacterDBInfo::set_has_equipdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActiveCharacterDBInfo::clear_has_equipdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActiveCharacterDBInfo::clear_equipdata() {
  if (equipdata_ != NULL) equipdata_->::ProtoBuf::CharacterDBEquipData::Clear();
  clear_has_equipdata();
}
inline const ::ProtoBuf::CharacterDBEquipData& ActiveCharacterDBInfo::equipdata() const {
  return equipdata_ != NULL ? *equipdata_ : *default_instance_->equipdata_;
}
inline ::ProtoBuf::CharacterDBEquipData* ActiveCharacterDBInfo::mutable_equipdata() {
  set_has_equipdata();
  if (equipdata_ == NULL) equipdata_ = new ::ProtoBuf::CharacterDBEquipData;
  return equipdata_;
}
inline ::ProtoBuf::CharacterDBEquipData* ActiveCharacterDBInfo::release_equipdata() {
  clear_has_equipdata();
  ::ProtoBuf::CharacterDBEquipData* temp = equipdata_;
  equipdata_ = NULL;
  return temp;
}
inline void ActiveCharacterDBInfo::set_allocated_equipdata(::ProtoBuf::CharacterDBEquipData* equipdata) {
  delete equipdata_;
  equipdata_ = equipdata;
  if (equipdata) {
    set_has_equipdata();
  } else {
    clear_has_equipdata();
  }
}

// optional .ProtoBuf.CharacterDBExtendData extendData = 4;
inline bool ActiveCharacterDBInfo::has_extenddata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActiveCharacterDBInfo::set_has_extenddata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActiveCharacterDBInfo::clear_has_extenddata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActiveCharacterDBInfo::clear_extenddata() {
  if (extenddata_ != NULL) extenddata_->::ProtoBuf::CharacterDBExtendData::Clear();
  clear_has_extenddata();
}
inline const ::ProtoBuf::CharacterDBExtendData& ActiveCharacterDBInfo::extenddata() const {
  return extenddata_ != NULL ? *extenddata_ : *default_instance_->extenddata_;
}
inline ::ProtoBuf::CharacterDBExtendData* ActiveCharacterDBInfo::mutable_extenddata() {
  set_has_extenddata();
  if (extenddata_ == NULL) extenddata_ = new ::ProtoBuf::CharacterDBExtendData;
  return extenddata_;
}
inline ::ProtoBuf::CharacterDBExtendData* ActiveCharacterDBInfo::release_extenddata() {
  clear_has_extenddata();
  ::ProtoBuf::CharacterDBExtendData* temp = extenddata_;
  extenddata_ = NULL;
  return temp;
}
inline void ActiveCharacterDBInfo::set_allocated_extenddata(::ProtoBuf::CharacterDBExtendData* extenddata) {
  delete extenddata_;
  extenddata_ = extenddata;
  if (extenddata) {
    set_has_extenddata();
  } else {
    clear_has_extenddata();
  }
}

// -------------------------------------------------------------------

// OfflineMailList

// repeated .ProtoBuf.MailInfo data = 1;
inline int OfflineMailList::data_size() const {
  return data_.size();
}
inline void OfflineMailList::clear_data() {
  data_.Clear();
}
inline const ::ProtoBuf::MailInfo& OfflineMailList::data(int index) const {
  return data_.Get(index);
}
inline ::ProtoBuf::MailInfo* OfflineMailList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ProtoBuf::MailInfo* OfflineMailList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
OfflineMailList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
OfflineMailList::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GlobalDBRequst

// required int32 type_id = 1;
inline bool GlobalDBRequst::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBRequst::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBRequst::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBRequst::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBRequst::type_id() const {
  return type_id_;
}
inline void GlobalDBRequst::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// -------------------------------------------------------------------

// OfflineMailDBInfo

// required uint32 charID = 1;
inline bool OfflineMailDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineMailDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineMailDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineMailDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 OfflineMailDBInfo::charid() const {
  return charid_;
}
inline void OfflineMailDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .ProtoBuf.OfflineMailList data = 2;
inline bool OfflineMailDBInfo::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineMailDBInfo::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineMailDBInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineMailDBInfo::clear_data() {
  if (data_ != NULL) data_->::ProtoBuf::OfflineMailList::Clear();
  clear_has_data();
}
inline const ::ProtoBuf::OfflineMailList& OfflineMailDBInfo::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::ProtoBuf::OfflineMailList* OfflineMailDBInfo::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::ProtoBuf::OfflineMailList;
  return data_;
}
inline ::ProtoBuf::OfflineMailList* OfflineMailDBInfo::release_data() {
  clear_has_data();
  ::ProtoBuf::OfflineMailList* temp = data_;
  data_ = NULL;
  return temp;
}
inline void OfflineMailDBInfo::set_allocated_data(::ProtoBuf::OfflineMailList* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// GlobalDBResponse

// required int32 retcode = 1;
inline bool GlobalDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 GlobalDBResponse::retcode() const {
  return retcode_;
}
inline void GlobalDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 type_id = 2;
inline bool GlobalDBResponse::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBResponse::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBResponse::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBResponse::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBResponse::type_id() const {
  return type_id_;
}
inline void GlobalDBResponse::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional bytes data = 3;
inline bool GlobalDBResponse::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalDBResponse::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalDBResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalDBResponse::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& GlobalDBResponse::data() const {
  return *data_;
}
inline void GlobalDBResponse::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBResponse::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBResponse::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GlobalDBResponse::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* GlobalDBResponse::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GlobalDBResponse::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AllOfflineMailDBRequest

// required int32 offset = 1;
inline bool AllOfflineMailDBRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllOfflineMailDBRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllOfflineMailDBRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllOfflineMailDBRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllOfflineMailDBRequest::offset() const {
  return offset_;
}
inline void AllOfflineMailDBRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 retnum = 2;
inline bool AllOfflineMailDBRequest::has_retnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllOfflineMailDBRequest::set_has_retnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllOfflineMailDBRequest::clear_has_retnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllOfflineMailDBRequest::clear_retnum() {
  retnum_ = 0;
  clear_has_retnum();
}
inline ::google::protobuf::int32 AllOfflineMailDBRequest::retnum() const {
  return retnum_;
}
inline void AllOfflineMailDBRequest::set_retnum(::google::protobuf::int32 value) {
  set_has_retnum();
  retnum_ = value;
}

// -------------------------------------------------------------------

// AllOfflineMailDBResponse

// required int32 retcode = 1;
inline bool AllOfflineMailDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllOfflineMailDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllOfflineMailDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllOfflineMailDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 AllOfflineMailDBResponse::retcode() const {
  return retcode_;
}
inline void AllOfflineMailDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 offset = 2;
inline bool AllOfflineMailDBResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllOfflineMailDBResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllOfflineMailDBResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllOfflineMailDBResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllOfflineMailDBResponse::offset() const {
  return offset_;
}
inline void AllOfflineMailDBResponse::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .ProtoBuf.OfflineMailDBInfo info = 3;
inline int AllOfflineMailDBResponse::info_size() const {
  return info_.size();
}
inline void AllOfflineMailDBResponse::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::OfflineMailDBInfo& AllOfflineMailDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::OfflineMailDBInfo* AllOfflineMailDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::OfflineMailDBInfo* AllOfflineMailDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineMailDBInfo >&
AllOfflineMailDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::OfflineMailDBInfo >*
AllOfflineMailDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// TradingMailDBInfo

// required uint32 charID = 1;
inline bool TradingMailDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradingMailDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradingMailDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradingMailDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 TradingMailDBInfo::charid() const {
  return charid_;
}
inline void TradingMailDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required .ProtoBuf.MailInfo data = 2;
inline bool TradingMailDBInfo::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradingMailDBInfo::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradingMailDBInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradingMailDBInfo::clear_data() {
  if (data_ != NULL) data_->::ProtoBuf::MailInfo::Clear();
  clear_has_data();
}
inline const ::ProtoBuf::MailInfo& TradingMailDBInfo::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::ProtoBuf::MailInfo* TradingMailDBInfo::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::ProtoBuf::MailInfo;
  return data_;
}
inline ::ProtoBuf::MailInfo* TradingMailDBInfo::release_data() {
  clear_has_data();
  ::ProtoBuf::MailInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void TradingMailDBInfo::set_allocated_data(::ProtoBuf::MailInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// AllTradingMailDBRequest

// required int32 offset = 1;
inline bool AllTradingMailDBRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllTradingMailDBRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllTradingMailDBRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllTradingMailDBRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllTradingMailDBRequest::offset() const {
  return offset_;
}
inline void AllTradingMailDBRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 retnum = 2;
inline bool AllTradingMailDBRequest::has_retnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllTradingMailDBRequest::set_has_retnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllTradingMailDBRequest::clear_has_retnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllTradingMailDBRequest::clear_retnum() {
  retnum_ = 0;
  clear_has_retnum();
}
inline ::google::protobuf::int32 AllTradingMailDBRequest::retnum() const {
  return retnum_;
}
inline void AllTradingMailDBRequest::set_retnum(::google::protobuf::int32 value) {
  set_has_retnum();
  retnum_ = value;
}

// -------------------------------------------------------------------

// AllTradingMailDBResponse

// required int32 retcode = 1;
inline bool AllTradingMailDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllTradingMailDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllTradingMailDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllTradingMailDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 AllTradingMailDBResponse::retcode() const {
  return retcode_;
}
inline void AllTradingMailDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 offset = 2;
inline bool AllTradingMailDBResponse::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllTradingMailDBResponse::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllTradingMailDBResponse::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllTradingMailDBResponse::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllTradingMailDBResponse::offset() const {
  return offset_;
}
inline void AllTradingMailDBResponse::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .ProtoBuf.TradingMailDBInfo info = 3;
inline int AllTradingMailDBResponse::info_size() const {
  return info_.size();
}
inline void AllTradingMailDBResponse::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::TradingMailDBInfo& AllTradingMailDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::TradingMailDBInfo* AllTradingMailDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::TradingMailDBInfo* AllTradingMailDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::TradingMailDBInfo >&
AllTradingMailDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::TradingMailDBInfo >*
AllTradingMailDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// CharacterMailDBRequest

// optional uint32 charID = 1;
inline bool CharacterMailDBRequest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterMailDBRequest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterMailDBRequest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterMailDBRequest::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterMailDBRequest::charid() const {
  return charid_;
}
inline void CharacterMailDBRequest::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// CharacterMailDBResponse

// optional uint32 charID = 1;
inline bool CharacterMailDBResponse::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterMailDBResponse::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterMailDBResponse::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterMailDBResponse::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterMailDBResponse::charid() const {
  return charid_;
}
inline void CharacterMailDBResponse::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .ProtoBuf.MailInfo info = 2;
inline int CharacterMailDBResponse::info_size() const {
  return info_.size();
}
inline void CharacterMailDBResponse::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::MailInfo& CharacterMailDBResponse::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::MailInfo* CharacterMailDBResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::MailInfo* CharacterMailDBResponse::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
CharacterMailDBResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
CharacterMailDBResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// MailDBInfo

// required uint32 charID = 1;
inline bool MailDBInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailDBInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailDBInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailDBInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 MailDBInfo::charid() const {
  return charid_;
}
inline void MailDBInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .ProtoBuf.MailInfo data = 2;
inline int MailDBInfo::data_size() const {
  return data_.size();
}
inline void MailDBInfo::clear_data() {
  data_.Clear();
}
inline const ::ProtoBuf::MailInfo& MailDBInfo::data(int index) const {
  return data_.Get(index);
}
inline ::ProtoBuf::MailInfo* MailDBInfo::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ProtoBuf::MailInfo* MailDBInfo::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >&
MailDBInfo::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::MailInfo >*
MailDBInfo::mutable_data() {
  return &data_;
}

// repeated uint32 deleteMailIds = 3;
inline int MailDBInfo::deletemailids_size() const {
  return deletemailids_.size();
}
inline void MailDBInfo::clear_deletemailids() {
  deletemailids_.Clear();
}
inline ::google::protobuf::uint32 MailDBInfo::deletemailids(int index) const {
  return deletemailids_.Get(index);
}
inline void MailDBInfo::set_deletemailids(int index, ::google::protobuf::uint32 value) {
  deletemailids_.Set(index, value);
}
inline void MailDBInfo::add_deletemailids(::google::protobuf::uint32 value) {
  deletemailids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MailDBInfo::deletemailids() const {
  return deletemailids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MailDBInfo::mutable_deletemailids() {
  return &deletemailids_;
}

// -------------------------------------------------------------------

// SaveMailDBRequest

// optional .ProtoBuf.MailDBInfo info = 1;
inline bool SaveMailDBRequest::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveMailDBRequest::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveMailDBRequest::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveMailDBRequest::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::MailDBInfo::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::MailDBInfo& SaveMailDBRequest::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::MailDBInfo* SaveMailDBRequest::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::MailDBInfo;
  return info_;
}
inline ::ProtoBuf::MailDBInfo* SaveMailDBRequest::release_info() {
  clear_has_info();
  ::ProtoBuf::MailDBInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SaveMailDBRequest::set_allocated_info(::ProtoBuf::MailDBInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// SaveOfflineDBRequest

// optional .ProtoBuf.OfflineMailDBInfo info = 1;
inline bool SaveOfflineDBRequest::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveOfflineDBRequest::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveOfflineDBRequest::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveOfflineDBRequest::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::OfflineMailDBInfo::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::OfflineMailDBInfo& SaveOfflineDBRequest::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::OfflineMailDBInfo* SaveOfflineDBRequest::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::OfflineMailDBInfo;
  return info_;
}
inline ::ProtoBuf::OfflineMailDBInfo* SaveOfflineDBRequest::release_info() {
  clear_has_info();
  ::ProtoBuf::OfflineMailDBInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SaveOfflineDBRequest::set_allocated_info(::ProtoBuf::OfflineMailDBInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// MaxMailIDRequest

// -------------------------------------------------------------------

// MaxMailIDResponse

// optional uint32 maxMailId = 1;
inline bool MaxMailIDResponse::has_maxmailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaxMailIDResponse::set_has_maxmailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaxMailIDResponse::clear_has_maxmailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaxMailIDResponse::clear_maxmailid() {
  maxmailid_ = 0u;
  clear_has_maxmailid();
}
inline ::google::protobuf::uint32 MaxMailIDResponse::maxmailid() const {
  return maxmailid_;
}
inline void MaxMailIDResponse::set_maxmailid(::google::protobuf::uint32 value) {
  set_has_maxmailid();
  maxmailid_ = value;
}

// -------------------------------------------------------------------

// DeleteCharacterMail

// required uint32 charID = 1;
inline bool DeleteCharacterMail::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCharacterMail::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCharacterMail::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCharacterMail::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 DeleteCharacterMail::charid() const {
  return charid_;
}
inline void DeleteCharacterMail::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// CharacterMallDBRequest

// optional uint32 charid = 1;
inline bool CharacterMallDBRequest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterMallDBRequest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterMallDBRequest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterMallDBRequest::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterMallDBRequest::charid() const {
  return charid_;
}
inline void CharacterMallDBRequest::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// CharacterMallDBResponse

// required int32 retcode = 1;
inline bool CharacterMallDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterMallDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterMallDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterMallDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 CharacterMallDBResponse::retcode() const {
  return retcode_;
}
inline void CharacterMallDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional uint32 charid = 2;
inline bool CharacterMallDBResponse::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterMallDBResponse::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterMallDBResponse::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterMallDBResponse::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterMallDBResponse::charid() const {
  return charid_;
}
inline void CharacterMallDBResponse::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .ProtoBuf.AllMallDBData info = 3;
inline bool CharacterMallDBResponse::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterMallDBResponse::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterMallDBResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterMallDBResponse::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::AllMallDBData::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::AllMallDBData& CharacterMallDBResponse::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::AllMallDBData* CharacterMallDBResponse::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::AllMallDBData;
  return info_;
}
inline ::ProtoBuf::AllMallDBData* CharacterMallDBResponse::release_info() {
  clear_has_info();
  ::ProtoBuf::AllMallDBData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CharacterMallDBResponse::set_allocated_info(::ProtoBuf::AllMallDBData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// CharacterMallDBSaveReq

// repeated .ProtoBuf.SingleCharacterMallDB data = 1;
inline int CharacterMallDBSaveReq::data_size() const {
  return data_.size();
}
inline void CharacterMallDBSaveReq::clear_data() {
  data_.Clear();
}
inline const ::ProtoBuf::SingleCharacterMallDB& CharacterMallDBSaveReq::data(int index) const {
  return data_.Get(index);
}
inline ::ProtoBuf::SingleCharacterMallDB* CharacterMallDBSaveReq::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ProtoBuf::SingleCharacterMallDB* CharacterMallDBSaveReq::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCharacterMallDB >&
CharacterMallDBSaveReq::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::SingleCharacterMallDB >*
CharacterMallDBSaveReq::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// GlobalDBSetRequest

// required int32 type_id = 1;
inline bool GlobalDBSetRequest::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBSetRequest::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBSetRequest::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBSetRequest::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBSetRequest::type_id() const {
  return type_id_;
}
inline void GlobalDBSetRequest::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// optional bytes data = 2;
inline bool GlobalDBSetRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBSetRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBSetRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBSetRequest::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& GlobalDBSetRequest::data() const {
  return *data_;
}
inline void GlobalDBSetRequest::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBSetRequest::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void GlobalDBSetRequest::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GlobalDBSetRequest::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* GlobalDBSetRequest::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GlobalDBSetRequest::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GlobalDBSetResponse

// required int32 retcode = 1;
inline bool GlobalDBSetResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalDBSetResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalDBSetResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalDBSetResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 GlobalDBSetResponse::retcode() const {
  return retcode_;
}
inline void GlobalDBSetResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 type_id = 2;
inline bool GlobalDBSetResponse::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalDBSetResponse::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalDBSetResponse::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalDBSetResponse::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 GlobalDBSetResponse::type_id() const {
  return type_id_;
}
inline void GlobalDBSetResponse::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
}

// -------------------------------------------------------------------

// AllCharacterCampOfflineDBReq

// required int32 offset = 1;
inline bool AllCharacterCampOfflineDBReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllCharacterCampOfflineDBReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllCharacterCampOfflineDBReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllCharacterCampOfflineDBReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllCharacterCampOfflineDBReq::offset() const {
  return offset_;
}
inline void AllCharacterCampOfflineDBReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 retnum = 2;
inline bool AllCharacterCampOfflineDBReq::has_retnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllCharacterCampOfflineDBReq::set_has_retnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllCharacterCampOfflineDBReq::clear_has_retnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllCharacterCampOfflineDBReq::clear_retnum() {
  retnum_ = 0;
  clear_has_retnum();
}
inline ::google::protobuf::int32 AllCharacterCampOfflineDBReq::retnum() const {
  return retnum_;
}
inline void AllCharacterCampOfflineDBReq::set_retnum(::google::protobuf::int32 value) {
  set_has_retnum();
  retnum_ = value;
}

// -------------------------------------------------------------------

// AllCharacterCampOfflineDBRsp

// required int32 retcode = 1;
inline bool AllCharacterCampOfflineDBRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllCharacterCampOfflineDBRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllCharacterCampOfflineDBRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllCharacterCampOfflineDBRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 AllCharacterCampOfflineDBRsp::retcode() const {
  return retcode_;
}
inline void AllCharacterCampOfflineDBRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required int32 offset = 2;
inline bool AllCharacterCampOfflineDBRsp::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllCharacterCampOfflineDBRsp::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllCharacterCampOfflineDBRsp::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllCharacterCampOfflineDBRsp::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 AllCharacterCampOfflineDBRsp::offset() const {
  return offset_;
}
inline void AllCharacterCampOfflineDBRsp::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// repeated .ProtoBuf.CharacterCampDBData info = 3;
inline int AllCharacterCampOfflineDBRsp::info_size() const {
  return info_.size();
}
inline void AllCharacterCampOfflineDBRsp::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::CharacterCampDBData& AllCharacterCampOfflineDBRsp::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::CharacterCampDBData* AllCharacterCampOfflineDBRsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::CharacterCampDBData* AllCharacterCampOfflineDBRsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >&
AllCharacterCampOfflineDBRsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >*
AllCharacterCampOfflineDBRsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// CharacterCampDBReq

// required uint32 charid = 1;
inline bool CharacterCampDBReq::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterCampDBReq::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterCampDBReq::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterCampDBReq::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterCampDBReq::charid() const {
  return charid_;
}
inline void CharacterCampDBReq::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// CharacterCampDBRsp

// required int32 retcode = 1;
inline bool CharacterCampDBRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterCampDBRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterCampDBRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterCampDBRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 CharacterCampDBRsp::retcode() const {
  return retcode_;
}
inline void CharacterCampDBRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required uint32 charid = 2;
inline bool CharacterCampDBRsp::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterCampDBRsp::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterCampDBRsp::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterCampDBRsp::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterCampDBRsp::charid() const {
  return charid_;
}
inline void CharacterCampDBRsp::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .ProtoBuf.CharacterCampDBData info = 3;
inline bool CharacterCampDBRsp::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterCampDBRsp::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterCampDBRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterCampDBRsp::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::CharacterCampDBData::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::CharacterCampDBData& CharacterCampDBRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::CharacterCampDBData* CharacterCampDBRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::CharacterCampDBData;
  return info_;
}
inline ::ProtoBuf::CharacterCampDBData* CharacterCampDBRsp::release_info() {
  clear_has_info();
  ::ProtoBuf::CharacterCampDBData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CharacterCampDBRsp::set_allocated_info(::ProtoBuf::CharacterCampDBData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// CharacterCampDBSetRequest

// repeated .ProtoBuf.CharacterCampDBData data = 1;
inline int CharacterCampDBSetRequest::data_size() const {
  return data_.size();
}
inline void CharacterCampDBSetRequest::clear_data() {
  data_.Clear();
}
inline const ::ProtoBuf::CharacterCampDBData& CharacterCampDBSetRequest::data(int index) const {
  return data_.Get(index);
}
inline ::ProtoBuf::CharacterCampDBData* CharacterCampDBSetRequest::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ProtoBuf::CharacterCampDBData* CharacterCampDBSetRequest::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >&
CharacterCampDBSetRequest::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterCampDBData >*
CharacterCampDBSetRequest::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// CharacterListRequest

// required uint64 requestid = 1;
inline bool CharacterListRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterListRequest::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterListRequest::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterListRequest::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CharacterListRequest::requestid() const {
  return requestid_;
}
inline void CharacterListRequest::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// required uint32 groupid = 2;
inline bool CharacterListRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterListRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterListRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterListRequest::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 CharacterListRequest::groupid() const {
  return groupid_;
}
inline void CharacterListRequest::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string channelid = 3;
inline bool CharacterListRequest::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterListRequest::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterListRequest::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterListRequest::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& CharacterListRequest::channelid() const {
  return *channelid_;
}
inline void CharacterListRequest::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterListRequest::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterListRequest::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterListRequest::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* CharacterListRequest::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterListRequest::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string userid = 4;
inline bool CharacterListRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterListRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterListRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterListRequest::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& CharacterListRequest::userid() const {
  return *userid_;
}
inline void CharacterListRequest::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CharacterListRequest::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CharacterListRequest::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterListRequest::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* CharacterListRequest::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterListRequest::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel_user_id = 5;
inline bool CharacterListRequest::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterListRequest::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterListRequest::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterListRequest::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& CharacterListRequest::channel_user_id() const {
  return *channel_user_id_;
}
inline void CharacterListRequest::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterListRequest::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterListRequest::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterListRequest::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* CharacterListRequest::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterListRequest::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CharacterListResponse

// required .ProtoBuf.CharacterListResponse.Result result = 1;
inline bool CharacterListResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterListResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterListResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterListResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ProtoBuf::CharacterListResponse_Result CharacterListResponse::result() const {
  return static_cast< ::ProtoBuf::CharacterListResponse_Result >(result_);
}
inline void CharacterListResponse::set_result(::ProtoBuf::CharacterListResponse_Result value) {
  assert(::ProtoBuf::CharacterListResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// required uint64 requestid = 2;
inline bool CharacterListResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterListResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterListResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterListResponse::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CharacterListResponse::requestid() const {
  return requestid_;
}
inline void CharacterListResponse::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// repeated .ProtoBuf.CharacterDBInfo charInfoList = 3;
inline int CharacterListResponse::charinfolist_size() const {
  return charinfolist_.size();
}
inline void CharacterListResponse::clear_charinfolist() {
  charinfolist_.Clear();
}
inline const ::ProtoBuf::CharacterDBInfo& CharacterListResponse::charinfolist(int index) const {
  return charinfolist_.Get(index);
}
inline ::ProtoBuf::CharacterDBInfo* CharacterListResponse::mutable_charinfolist(int index) {
  return charinfolist_.Mutable(index);
}
inline ::ProtoBuf::CharacterDBInfo* CharacterListResponse::add_charinfolist() {
  return charinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBInfo >&
CharacterListResponse::charinfolist() const {
  return charinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CharacterDBInfo >*
CharacterListResponse::mutable_charinfolist() {
  return &charinfolist_;
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// required uint64 requestid = 1;
inline bool CreateCharacterRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCharacterRequest::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCharacterRequest::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCharacterRequest::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CreateCharacterRequest::requestid() const {
  return requestid_;
}
inline void CreateCharacterRequest::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// required uint32 groupid = 2;
inline bool CreateCharacterRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCharacterRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCharacterRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCharacterRequest::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 CreateCharacterRequest::groupid() const {
  return groupid_;
}
inline void CreateCharacterRequest::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string channelid = 3;
inline bool CreateCharacterRequest::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateCharacterRequest::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateCharacterRequest::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateCharacterRequest::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& CreateCharacterRequest::channelid() const {
  return *channelid_;
}
inline void CreateCharacterRequest::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CreateCharacterRequest::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CreateCharacterRequest::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateCharacterRequest::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* CreateCharacterRequest::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateCharacterRequest::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 4;
inline bool CreateCharacterRequest::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateCharacterRequest::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateCharacterRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateCharacterRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateCharacterRequest::name() const {
  return *name_;
}
inline void CreateCharacterRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateCharacterRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateCharacterRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateCharacterRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreateCharacterRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateCharacterRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string userid = 5;
inline bool CreateCharacterRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateCharacterRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateCharacterRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateCharacterRequest::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& CreateCharacterRequest::userid() const {
  return *userid_;
}
inline void CreateCharacterRequest::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CreateCharacterRequest::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CreateCharacterRequest::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateCharacterRequest::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* CreateCharacterRequest::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateCharacterRequest::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel_user_id = 6;
inline bool CreateCharacterRequest::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateCharacterRequest::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateCharacterRequest::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateCharacterRequest::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& CreateCharacterRequest::channel_user_id() const {
  return *channel_user_id_;
}
inline void CreateCharacterRequest::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CreateCharacterRequest::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CreateCharacterRequest::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateCharacterRequest::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* CreateCharacterRequest::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateCharacterRequest::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .ProtoBuf.CharacterDBInfo charInfo = 7;
inline bool CreateCharacterRequest::has_charinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateCharacterRequest::set_has_charinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateCharacterRequest::clear_has_charinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateCharacterRequest::clear_charinfo() {
  if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
  clear_has_charinfo();
}
inline const ::ProtoBuf::CharacterDBInfo& CreateCharacterRequest::charinfo() const {
  return charinfo_ != NULL ? *charinfo_ : *default_instance_->charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CreateCharacterRequest::mutable_charinfo() {
  set_has_charinfo();
  if (charinfo_ == NULL) charinfo_ = new ::ProtoBuf::CharacterDBInfo;
  return charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CreateCharacterRequest::release_charinfo() {
  clear_has_charinfo();
  ::ProtoBuf::CharacterDBInfo* temp = charinfo_;
  charinfo_ = NULL;
  return temp;
}
inline void CreateCharacterRequest::set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo) {
  delete charinfo_;
  charinfo_ = charinfo;
  if (charinfo) {
    set_has_charinfo();
  } else {
    clear_has_charinfo();
  }
}

// -------------------------------------------------------------------

// CreateCharacterResponse

// required .ProtoBuf.CreateCharacterResponse.Result result = 1;
inline bool CreateCharacterResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateCharacterResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateCharacterResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateCharacterResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ProtoBuf::CreateCharacterResponse_Result CreateCharacterResponse::result() const {
  return static_cast< ::ProtoBuf::CreateCharacterResponse_Result >(result_);
}
inline void CreateCharacterResponse::set_result(::ProtoBuf::CreateCharacterResponse_Result value) {
  assert(::ProtoBuf::CreateCharacterResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// required uint64 requestid = 2;
inline bool CreateCharacterResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateCharacterResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateCharacterResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateCharacterResponse::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CreateCharacterResponse::requestid() const {
  return requestid_;
}
inline void CreateCharacterResponse::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// optional .ProtoBuf.CharacterDBInfo charInfo = 3;
inline bool CreateCharacterResponse::has_charinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateCharacterResponse::set_has_charinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateCharacterResponse::clear_has_charinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateCharacterResponse::clear_charinfo() {
  if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
  clear_has_charinfo();
}
inline const ::ProtoBuf::CharacterDBInfo& CreateCharacterResponse::charinfo() const {
  return charinfo_ != NULL ? *charinfo_ : *default_instance_->charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CreateCharacterResponse::mutable_charinfo() {
  set_has_charinfo();
  if (charinfo_ == NULL) charinfo_ = new ::ProtoBuf::CharacterDBInfo;
  return charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CreateCharacterResponse::release_charinfo() {
  clear_has_charinfo();
  ::ProtoBuf::CharacterDBInfo* temp = charinfo_;
  charinfo_ = NULL;
  return temp;
}
inline void CreateCharacterResponse::set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo) {
  delete charinfo_;
  charinfo_ = charinfo;
  if (charinfo) {
    set_has_charinfo();
  } else {
    clear_has_charinfo();
  }
}

// -------------------------------------------------------------------

// CharacterInfoRequest

// required uint64 requestid = 1;
inline bool CharacterInfoRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterInfoRequest::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterInfoRequest::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterInfoRequest::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CharacterInfoRequest::requestid() const {
  return requestid_;
}
inline void CharacterInfoRequest::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// required uint32 charID = 2;
inline bool CharacterInfoRequest::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterInfoRequest::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterInfoRequest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterInfoRequest::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterInfoRequest::charid() const {
  return charid_;
}
inline void CharacterInfoRequest::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required uint32 reqCharID = 3;
inline bool CharacterInfoRequest::has_reqcharid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterInfoRequest::set_has_reqcharid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterInfoRequest::clear_has_reqcharid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterInfoRequest::clear_reqcharid() {
  reqcharid_ = 0u;
  clear_has_reqcharid();
}
inline ::google::protobuf::uint32 CharacterInfoRequest::reqcharid() const {
  return reqcharid_;
}
inline void CharacterInfoRequest::set_reqcharid(::google::protobuf::uint32 value) {
  set_has_reqcharid();
  reqcharid_ = value;
}

// -------------------------------------------------------------------

// CharacterInfoResponse

// required .ProtoBuf.CharacterInfoResponse.Result result = 1;
inline bool CharacterInfoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterInfoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterInfoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterInfoResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ProtoBuf::CharacterInfoResponse_Result CharacterInfoResponse::result() const {
  return static_cast< ::ProtoBuf::CharacterInfoResponse_Result >(result_);
}
inline void CharacterInfoResponse::set_result(::ProtoBuf::CharacterInfoResponse_Result value) {
  assert(::ProtoBuf::CharacterInfoResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// required uint64 requestid = 2;
inline bool CharacterInfoResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterInfoResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterInfoResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterInfoResponse::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CharacterInfoResponse::requestid() const {
  return requestid_;
}
inline void CharacterInfoResponse::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// required uint32 reqCharID = 3;
inline bool CharacterInfoResponse::has_reqcharid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterInfoResponse::set_has_reqcharid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterInfoResponse::clear_has_reqcharid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterInfoResponse::clear_reqcharid() {
  reqcharid_ = 0u;
  clear_has_reqcharid();
}
inline ::google::protobuf::uint32 CharacterInfoResponse::reqcharid() const {
  return reqcharid_;
}
inline void CharacterInfoResponse::set_reqcharid(::google::protobuf::uint32 value) {
  set_has_reqcharid();
  reqcharid_ = value;
}

// optional .ProtoBuf.CharacterDBInfo charInfo = 4;
inline bool CharacterInfoResponse::has_charinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterInfoResponse::set_has_charinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterInfoResponse::clear_has_charinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterInfoResponse::clear_charinfo() {
  if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
  clear_has_charinfo();
}
inline const ::ProtoBuf::CharacterDBInfo& CharacterInfoResponse::charinfo() const {
  return charinfo_ != NULL ? *charinfo_ : *default_instance_->charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CharacterInfoResponse::mutable_charinfo() {
  set_has_charinfo();
  if (charinfo_ == NULL) charinfo_ = new ::ProtoBuf::CharacterDBInfo;
  return charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CharacterInfoResponse::release_charinfo() {
  clear_has_charinfo();
  ::ProtoBuf::CharacterDBInfo* temp = charinfo_;
  charinfo_ = NULL;
  return temp;
}
inline void CharacterInfoResponse::set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo) {
  delete charinfo_;
  charinfo_ = charinfo;
  if (charinfo) {
    set_has_charinfo();
  } else {
    clear_has_charinfo();
  }
}

// -------------------------------------------------------------------

// CharacterInfoUpdateRequest

// required uint64 requestid = 1;
inline bool CharacterInfoUpdateRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterInfoUpdateRequest::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterInfoUpdateRequest::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterInfoUpdateRequest::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CharacterInfoUpdateRequest::requestid() const {
  return requestid_;
}
inline void CharacterInfoUpdateRequest::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// required uint32 groupid = 2;
inline bool CharacterInfoUpdateRequest::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterInfoUpdateRequest::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterInfoUpdateRequest::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterInfoUpdateRequest::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 CharacterInfoUpdateRequest::groupid() const {
  return groupid_;
}
inline void CharacterInfoUpdateRequest::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string channelid = 3;
inline bool CharacterInfoUpdateRequest::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterInfoUpdateRequest::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterInfoUpdateRequest::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterInfoUpdateRequest::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& CharacterInfoUpdateRequest::channelid() const {
  return *channelid_;
}
inline void CharacterInfoUpdateRequest::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterInfoUpdateRequest::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterInfoUpdateRequest::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterInfoUpdateRequest::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* CharacterInfoUpdateRequest::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterInfoUpdateRequest::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string userid = 4;
inline bool CharacterInfoUpdateRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterInfoUpdateRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterInfoUpdateRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterInfoUpdateRequest::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& CharacterInfoUpdateRequest::userid() const {
  return *userid_;
}
inline void CharacterInfoUpdateRequest::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CharacterInfoUpdateRequest::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void CharacterInfoUpdateRequest::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterInfoUpdateRequest::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* CharacterInfoUpdateRequest::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterInfoUpdateRequest::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel_user_id = 5;
inline bool CharacterInfoUpdateRequest::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterInfoUpdateRequest::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterInfoUpdateRequest::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterInfoUpdateRequest::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& CharacterInfoUpdateRequest::channel_user_id() const {
  return *channel_user_id_;
}
inline void CharacterInfoUpdateRequest::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterInfoUpdateRequest::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterInfoUpdateRequest::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterInfoUpdateRequest::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* CharacterInfoUpdateRequest::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterInfoUpdateRequest::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .ProtoBuf.CharacterDBInfo charInfo = 6;
inline bool CharacterInfoUpdateRequest::has_charinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterInfoUpdateRequest::set_has_charinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterInfoUpdateRequest::clear_has_charinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterInfoUpdateRequest::clear_charinfo() {
  if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
  clear_has_charinfo();
}
inline const ::ProtoBuf::CharacterDBInfo& CharacterInfoUpdateRequest::charinfo() const {
  return charinfo_ != NULL ? *charinfo_ : *default_instance_->charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CharacterInfoUpdateRequest::mutable_charinfo() {
  set_has_charinfo();
  if (charinfo_ == NULL) charinfo_ = new ::ProtoBuf::CharacterDBInfo;
  return charinfo_;
}
inline ::ProtoBuf::CharacterDBInfo* CharacterInfoUpdateRequest::release_charinfo() {
  clear_has_charinfo();
  ::ProtoBuf::CharacterDBInfo* temp = charinfo_;
  charinfo_ = NULL;
  return temp;
}
inline void CharacterInfoUpdateRequest::set_allocated_charinfo(::ProtoBuf::CharacterDBInfo* charinfo) {
  delete charinfo_;
  charinfo_ = charinfo;
  if (charinfo) {
    set_has_charinfo();
  } else {
    clear_has_charinfo();
  }
}

// -------------------------------------------------------------------

// CharacterInfoUpdateResponse

// required .ProtoBuf.CharacterInfoUpdateResponse.Result result = 1;
inline bool CharacterInfoUpdateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterInfoUpdateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterInfoUpdateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterInfoUpdateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ProtoBuf::CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse::result() const {
  return static_cast< ::ProtoBuf::CharacterInfoUpdateResponse_Result >(result_);
}
inline void CharacterInfoUpdateResponse::set_result(::ProtoBuf::CharacterInfoUpdateResponse_Result value) {
  assert(::ProtoBuf::CharacterInfoUpdateResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// required uint32 charId = 2;
inline bool CharacterInfoUpdateResponse::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterInfoUpdateResponse::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterInfoUpdateResponse::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterInfoUpdateResponse::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterInfoUpdateResponse::charid() const {
  return charid_;
}
inline void CharacterInfoUpdateResponse::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// CharacterDelDBRequst

// required uint64 requestid = 1;
inline bool CharacterDelDBRequst::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDelDBRequst::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDelDBRequst::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDelDBRequst::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CharacterDelDBRequst::requestid() const {
  return requestid_;
}
inline void CharacterDelDBRequst::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// required uint32 groupid = 2;
inline bool CharacterDelDBRequst::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDelDBRequst::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDelDBRequst::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDelDBRequst::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 CharacterDelDBRequst::groupid() const {
  return groupid_;
}
inline void CharacterDelDBRequst::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string channelid = 3;
inline bool CharacterDelDBRequst::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDelDBRequst::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDelDBRequst::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDelDBRequst::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& CharacterDelDBRequst::channelid() const {
  return *channelid_;
}
inline void CharacterDelDBRequst::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterDelDBRequst::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterDelDBRequst::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDelDBRequst::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* CharacterDelDBRequst::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDelDBRequst::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string user_id = 4;
inline bool CharacterDelDBRequst::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDelDBRequst::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDelDBRequst::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDelDBRequst::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& CharacterDelDBRequst::user_id() const {
  return *user_id_;
}
inline void CharacterDelDBRequst::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void CharacterDelDBRequst::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void CharacterDelDBRequst::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDelDBRequst::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* CharacterDelDBRequst::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDelDBRequst::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel_user_id = 5;
inline bool CharacterDelDBRequst::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDelDBRequst::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDelDBRequst::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDelDBRequst::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& CharacterDelDBRequst::channel_user_id() const {
  return *channel_user_id_;
}
inline void CharacterDelDBRequst::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterDelDBRequst::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterDelDBRequst::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDelDBRequst::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* CharacterDelDBRequst::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDelDBRequst::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 charID = 6;
inline bool CharacterDelDBRequst::has_charid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDelDBRequst::set_has_charid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDelDBRequst::clear_has_charid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDelDBRequst::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterDelDBRequst::charid() const {
  return charid_;
}
inline void CharacterDelDBRequst::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// CharacterDelDBResponse

// required int32 retcode = 1;
inline bool CharacterDelDBResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharacterDelDBResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharacterDelDBResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharacterDelDBResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 CharacterDelDBResponse::retcode() const {
  return retcode_;
}
inline void CharacterDelDBResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required uint64 requestid = 2;
inline bool CharacterDelDBResponse::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharacterDelDBResponse::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharacterDelDBResponse::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharacterDelDBResponse::clear_requestid() {
  requestid_ = GOOGLE_ULONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::uint64 CharacterDelDBResponse::requestid() const {
  return requestid_;
}
inline void CharacterDelDBResponse::set_requestid(::google::protobuf::uint64 value) {
  set_has_requestid();
  requestid_ = value;
}

// optional uint32 groupid = 3;
inline bool CharacterDelDBResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharacterDelDBResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharacterDelDBResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharacterDelDBResponse::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 CharacterDelDBResponse::groupid() const {
  return groupid_;
}
inline void CharacterDelDBResponse::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional string channelid = 4;
inline bool CharacterDelDBResponse::has_channelid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharacterDelDBResponse::set_has_channelid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharacterDelDBResponse::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharacterDelDBResponse::clear_channelid() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    channelid_->clear();
  }
  clear_has_channelid();
}
inline const ::std::string& CharacterDelDBResponse::channelid() const {
  return *channelid_;
}
inline void CharacterDelDBResponse::set_channelid(const ::std::string& value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterDelDBResponse::set_channelid(const char* value) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(value);
}
inline void CharacterDelDBResponse::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  channelid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDelDBResponse::mutable_channelid() {
  set_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    channelid_ = new ::std::string;
  }
  return channelid_;
}
inline ::std::string* CharacterDelDBResponse::release_channelid() {
  clear_has_channelid();
  if (channelid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channelid_;
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDelDBResponse::set_allocated_channelid(::std::string* channelid) {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (channelid) {
    set_has_channelid();
    channelid_ = channelid;
  } else {
    clear_has_channelid();
    channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_id = 5;
inline bool CharacterDelDBResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharacterDelDBResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharacterDelDBResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharacterDelDBResponse::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& CharacterDelDBResponse::user_id() const {
  return *user_id_;
}
inline void CharacterDelDBResponse::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void CharacterDelDBResponse::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void CharacterDelDBResponse::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDelDBResponse::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* CharacterDelDBResponse::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDelDBResponse::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel_user_id = 6;
inline bool CharacterDelDBResponse::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharacterDelDBResponse::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharacterDelDBResponse::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharacterDelDBResponse::clear_channel_user_id() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_user_id_->clear();
  }
  clear_has_channel_user_id();
}
inline const ::std::string& CharacterDelDBResponse::channel_user_id() const {
  return *channel_user_id_;
}
inline void CharacterDelDBResponse::set_channel_user_id(const ::std::string& value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterDelDBResponse::set_channel_user_id(const char* value) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(value);
}
inline void CharacterDelDBResponse::set_channel_user_id(const char* value, size_t size) {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  channel_user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharacterDelDBResponse::mutable_channel_user_id() {
  set_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_user_id_ = new ::std::string;
  }
  return channel_user_id_;
}
inline ::std::string* CharacterDelDBResponse::release_channel_user_id() {
  clear_has_channel_user_id();
  if (channel_user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_user_id_;
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharacterDelDBResponse::set_allocated_channel_user_id(::std::string* channel_user_id) {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channel_user_id) {
    set_has_channel_user_id();
    channel_user_id_ = channel_user_id;
  } else {
    clear_has_channel_user_id();
    channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 7;
inline bool CharacterDelDBResponse::has_charid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharacterDelDBResponse::set_has_charid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharacterDelDBResponse::clear_has_charid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharacterDelDBResponse::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CharacterDelDBResponse::charid() const {
  return charid_;
}
inline void CharacterDelDBResponse::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::CharacterRoleListDBResponse_Result>() {
  return ::ProtoBuf::CharacterRoleListDBResponse_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::CharacterListResponse_Result>() {
  return ::ProtoBuf::CharacterListResponse_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::CreateCharacterResponse_Result>() {
  return ::ProtoBuf::CreateCharacterResponse_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::CharacterInfoResponse_Result>() {
  return ::ProtoBuf::CharacterInfoResponse_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::CharacterInfoUpdateResponse_Result>() {
  return ::ProtoBuf::CharacterInfoUpdateResponse_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBuffer_2fDBProxyProtocol_2eproto__INCLUDED
