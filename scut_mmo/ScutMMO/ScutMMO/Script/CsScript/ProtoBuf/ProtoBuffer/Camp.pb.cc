// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Camp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Camp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* CampProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampProtoRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampProtoRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampProtoHonorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampProtoHonorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_JoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_JoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_JoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_JoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_ChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_ChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_ChangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_ChangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_CampInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_CampInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_CampInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_CampInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_RankInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_RankInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_RankInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_RankInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_HonorInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_HonorInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_HonorInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_HonorInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_PublishNoticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_PublishNoticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_PublishNoticeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_PublishNoticeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camp_BroadNoticeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camp_BroadNoticeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogic_CampCharInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogic_CampCharInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterToLogic_CheckNoticeCostReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterToLogic_CheckNoticeCostReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenter_CheckNoticeCostRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenter_CheckNoticeCostRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Camp.proto");
  GOOGLE_CHECK(file != NULL);
  CampProtoInfo_descriptor_ = file->message_type(0);
  static const int CampProtoInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoInfo, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoInfo, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoInfo, notice_cd_),
  };
  CampProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampProtoInfo_descriptor_,
      CampProtoInfo::default_instance_,
      CampProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampProtoInfo));
  CampProtoRankInfo_descriptor_ = file->message_type(1);
  static const int CampProtoRankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoRankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoRankInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoRankInfo, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoRankInfo, knight_),
  };
  CampProtoRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampProtoRankInfo_descriptor_,
      CampProtoRankInfo::default_instance_,
      CampProtoRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampProtoRankInfo));
  CampProtoHonorInfo_descriptor_ = file->message_type(2);
  static const int CampProtoHonorInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, knight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, total_contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, kill_enemy_camp_),
  };
  CampProtoHonorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampProtoHonorInfo_descriptor_,
      CampProtoHonorInfo::default_instance_,
      CampProtoHonorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampProtoHonorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampProtoHonorInfo));
  Camp_JoinReq_descriptor_ = file->message_type(3);
  static const int Camp_JoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_JoinReq, type_),
  };
  Camp_JoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_JoinReq_descriptor_,
      Camp_JoinReq::default_instance_,
      Camp_JoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_JoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_JoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_JoinReq));
  Camp_JoinRsp_descriptor_ = file->message_type(4);
  static const int Camp_JoinRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_JoinRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_JoinRsp, info_),
  };
  Camp_JoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_JoinRsp_descriptor_,
      Camp_JoinRsp::default_instance_,
      Camp_JoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_JoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_JoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_JoinRsp));
  Camp_ChangeReq_descriptor_ = file->message_type(5);
  static const int Camp_ChangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_ChangeReq, camp_id_),
  };
  Camp_ChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_ChangeReq_descriptor_,
      Camp_ChangeReq::default_instance_,
      Camp_ChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_ChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_ChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_ChangeReq));
  Camp_ChangeRsp_descriptor_ = file->message_type(6);
  static const int Camp_ChangeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_ChangeRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_ChangeRsp, info_),
  };
  Camp_ChangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_ChangeRsp_descriptor_,
      Camp_ChangeRsp::default_instance_,
      Camp_ChangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_ChangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_ChangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_ChangeRsp));
  Camp_CampInfoReq_descriptor_ = file->message_type(7);
  static const int Camp_CampInfoReq_offsets_[1] = {
  };
  Camp_CampInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_CampInfoReq_descriptor_,
      Camp_CampInfoReq::default_instance_,
      Camp_CampInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_CampInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_CampInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_CampInfoReq));
  Camp_CampInfoRsp_descriptor_ = file->message_type(8);
  static const int Camp_CampInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_CampInfoRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_CampInfoRsp, info_),
  };
  Camp_CampInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_CampInfoRsp_descriptor_,
      Camp_CampInfoRsp::default_instance_,
      Camp_CampInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_CampInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_CampInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_CampInfoRsp));
  Camp_RankInfoReq_descriptor_ = file->message_type(9);
  static const int Camp_RankInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoReq, rank_type_),
  };
  Camp_RankInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_RankInfoReq_descriptor_,
      Camp_RankInfoReq::default_instance_,
      Camp_RankInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_RankInfoReq));
  Camp_RankInfoRsp_descriptor_ = file->message_type(10);
  static const int Camp_RankInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoRsp, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoRsp, info_),
  };
  Camp_RankInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_RankInfoRsp_descriptor_,
      Camp_RankInfoRsp::default_instance_,
      Camp_RankInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_RankInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_RankInfoRsp));
  Camp_HonorInfoReq_descriptor_ = file->message_type(11);
  static const int Camp_HonorInfoReq_offsets_[1] = {
  };
  Camp_HonorInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_HonorInfoReq_descriptor_,
      Camp_HonorInfoReq::default_instance_,
      Camp_HonorInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_HonorInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_HonorInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_HonorInfoReq));
  Camp_HonorInfoRsp_descriptor_ = file->message_type(12);
  static const int Camp_HonorInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_HonorInfoRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_HonorInfoRsp, info_),
  };
  Camp_HonorInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_HonorInfoRsp_descriptor_,
      Camp_HonorInfoRsp::default_instance_,
      Camp_HonorInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_HonorInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_HonorInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_HonorInfoRsp));
  Camp_PublishNoticeReq_descriptor_ = file->message_type(13);
  static const int Camp_PublishNoticeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_PublishNoticeReq, notice_),
  };
  Camp_PublishNoticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_PublishNoticeReq_descriptor_,
      Camp_PublishNoticeReq::default_instance_,
      Camp_PublishNoticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_PublishNoticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_PublishNoticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_PublishNoticeReq));
  Camp_PublishNoticeRsp_descriptor_ = file->message_type(14);
  static const int Camp_PublishNoticeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_PublishNoticeRsp, retcode_),
  };
  Camp_PublishNoticeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_PublishNoticeRsp_descriptor_,
      Camp_PublishNoticeRsp::default_instance_,
      Camp_PublishNoticeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_PublishNoticeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_PublishNoticeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_PublishNoticeRsp));
  Camp_BroadNoticeRsp_descriptor_ = file->message_type(15);
  static const int Camp_BroadNoticeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_BroadNoticeRsp, notice_),
  };
  Camp_BroadNoticeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camp_BroadNoticeRsp_descriptor_,
      Camp_BroadNoticeRsp::default_instance_,
      Camp_BroadNoticeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_BroadNoticeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camp_BroadNoticeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camp_BroadNoticeRsp));
  CenterToLogic_CampCharInfo_descriptor_ = file->message_type(16);
  static const int CenterToLogic_CampCharInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CampCharInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CampCharInfo, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CampCharInfo, official_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CampCharInfo, knight_),
  };
  CenterToLogic_CampCharInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogic_CampCharInfo_descriptor_,
      CenterToLogic_CampCharInfo::default_instance_,
      CenterToLogic_CampCharInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CampCharInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CampCharInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogic_CampCharInfo));
  CenterToLogic_CheckNoticeCostReq_descriptor_ = file->message_type(17);
  static const int CenterToLogic_CheckNoticeCostReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CheckNoticeCostReq, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CheckNoticeCostReq, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CheckNoticeCostReq, diamond_),
  };
  CenterToLogic_CheckNoticeCostReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterToLogic_CheckNoticeCostReq_descriptor_,
      CenterToLogic_CheckNoticeCostReq::default_instance_,
      CenterToLogic_CheckNoticeCostReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CheckNoticeCostReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterToLogic_CheckNoticeCostReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterToLogic_CheckNoticeCostReq));
  LogicToCenter_CheckNoticeCostRsp_descriptor_ = file->message_type(18);
  static const int LogicToCenter_CheckNoticeCostRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CheckNoticeCostRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CheckNoticeCostRsp, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CheckNoticeCostRsp, camp_id_),
  };
  LogicToCenter_CheckNoticeCostRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenter_CheckNoticeCostRsp_descriptor_,
      LogicToCenter_CheckNoticeCostRsp::default_instance_,
      LogicToCenter_CheckNoticeCostRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CheckNoticeCostRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenter_CheckNoticeCostRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenter_CheckNoticeCostRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampProtoInfo_descriptor_, &CampProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampProtoRankInfo_descriptor_, &CampProtoRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampProtoHonorInfo_descriptor_, &CampProtoHonorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_JoinReq_descriptor_, &Camp_JoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_JoinRsp_descriptor_, &Camp_JoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_ChangeReq_descriptor_, &Camp_ChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_ChangeRsp_descriptor_, &Camp_ChangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_CampInfoReq_descriptor_, &Camp_CampInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_CampInfoRsp_descriptor_, &Camp_CampInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_RankInfoReq_descriptor_, &Camp_RankInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_RankInfoRsp_descriptor_, &Camp_RankInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_HonorInfoReq_descriptor_, &Camp_HonorInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_HonorInfoRsp_descriptor_, &Camp_HonorInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_PublishNoticeReq_descriptor_, &Camp_PublishNoticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_PublishNoticeRsp_descriptor_, &Camp_PublishNoticeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camp_BroadNoticeRsp_descriptor_, &Camp_BroadNoticeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogic_CampCharInfo_descriptor_, &CenterToLogic_CampCharInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterToLogic_CheckNoticeCostReq_descriptor_, &CenterToLogic_CheckNoticeCostReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenter_CheckNoticeCostRsp_descriptor_, &LogicToCenter_CheckNoticeCostRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto() {
  delete CampProtoInfo::default_instance_;
  delete CampProtoInfo_reflection_;
  delete CampProtoRankInfo::default_instance_;
  delete CampProtoRankInfo_reflection_;
  delete CampProtoHonorInfo::default_instance_;
  delete CampProtoHonorInfo_reflection_;
  delete Camp_JoinReq::default_instance_;
  delete Camp_JoinReq_reflection_;
  delete Camp_JoinRsp::default_instance_;
  delete Camp_JoinRsp_reflection_;
  delete Camp_ChangeReq::default_instance_;
  delete Camp_ChangeReq_reflection_;
  delete Camp_ChangeRsp::default_instance_;
  delete Camp_ChangeRsp_reflection_;
  delete Camp_CampInfoReq::default_instance_;
  delete Camp_CampInfoReq_reflection_;
  delete Camp_CampInfoRsp::default_instance_;
  delete Camp_CampInfoRsp_reflection_;
  delete Camp_RankInfoReq::default_instance_;
  delete Camp_RankInfoReq_reflection_;
  delete Camp_RankInfoRsp::default_instance_;
  delete Camp_RankInfoRsp_reflection_;
  delete Camp_HonorInfoReq::default_instance_;
  delete Camp_HonorInfoReq_reflection_;
  delete Camp_HonorInfoRsp::default_instance_;
  delete Camp_HonorInfoRsp_reflection_;
  delete Camp_PublishNoticeReq::default_instance_;
  delete Camp_PublishNoticeReq_reflection_;
  delete Camp_PublishNoticeRsp::default_instance_;
  delete Camp_PublishNoticeRsp_reflection_;
  delete Camp_BroadNoticeRsp::default_instance_;
  delete Camp_BroadNoticeRsp_reflection_;
  delete CenterToLogic_CampCharInfo::default_instance_;
  delete CenterToLogic_CampCharInfo_reflection_;
  delete CenterToLogic_CheckNoticeCostReq::default_instance_;
  delete CenterToLogic_CheckNoticeCostReq_reflection_;
  delete LogicToCenter_CheckNoticeCostRsp::default_instance_;
  delete LogicToCenter_CheckNoticeCostRsp_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoBuffer/Camp.proto\022\010ProtoBuf\032\035Prot"
    "oBuffer/ComProtocol.proto\032#ProtoBuffer/C"
    "lientToServerCmd.proto\032\026Common/ComDefine"
    ".proto\"X\n\rCampProtoInfo\022\017\n\007camp_id\030\001 \001(\005"
    "\022\023\n\013leader_name\030\002 \001(\t\022\016\n\006notice\030\003 \001(\t\022\021\n"
    "\tnotice_cd\030\004 \001(\004\"a\n\021CampProtoRankInfo\022\014\n"
    "\004name\030\001 \001(\t\022\r\n\005level\030\002 \001(\005\022\r\n\005fight\030\003 \001("
    "\r\022\020\n\010official\030\004 \001(\005\022\016\n\006knight\030\005 \001(\005\"\217\001\n\022"
    "CampProtoHonorInfo\022\020\n\010official\030\001 \001(\005\022\016\n\006"
    "knight\030\002 \001(\005\022\022\n\ncontribute\030\003 \001(\r\022\030\n\020tota"
    "l_contribute\030\004 \001(\r\022\020\n\010prestige\030\005 \001(\r\022\027\n\017"
    "kill_enemy_camp\030\006 \001(\r\"\034\n\014Camp_JoinReq\022\014\n"
    "\004type\030\001 \002(\005\"F\n\014Camp_JoinRsp\022\017\n\007retcode\030\001"
    " \002(\005\022%\n\004info\030\002 \001(\0132\027.ProtoBuf.CampProtoI"
    "nfo\"!\n\016Camp_ChangeReq\022\017\n\007camp_id\030\001 \002(\005\"H"
    "\n\016Camp_ChangeRsp\022\017\n\007retcode\030\001 \002(\005\022%\n\004inf"
    "o\030\002 \001(\0132\027.ProtoBuf.CampProtoInfo\"\022\n\020Camp"
    "_CampInfoReq\"J\n\020Camp_CampInfoRsp\022\017\n\007retc"
    "ode\030\001 \002(\005\022%\n\004info\030\002 \001(\0132\027.ProtoBuf.CampP"
    "rotoInfo\"%\n\020Camp_RankInfoReq\022\021\n\trank_typ"
    "e\030\001 \002(\005\"a\n\020Camp_RankInfoRsp\022\017\n\007retcode\030\001"
    " \002(\005\022\021\n\trank_type\030\002 \001(\005\022)\n\004info\030\003 \003(\0132\033."
    "ProtoBuf.CampProtoRankInfo\"\023\n\021Camp_Honor"
    "InfoReq\"P\n\021Camp_HonorInfoRsp\022\017\n\007retcode\030"
    "\001 \002(\005\022*\n\004info\030\002 \001(\0132\034.ProtoBuf.CampProto"
    "HonorInfo\"\'\n\025Camp_PublishNoticeReq\022\016\n\006no"
    "tice\030\001 \002(\t\"(\n\025Camp_PublishNoticeRsp\022\017\n\007r"
    "etcode\030\001 \002(\005\"%\n\023Camp_BroadNoticeRsp\022\016\n\006n"
    "otice\030\001 \002(\t\"_\n\032CenterToLogic_CampCharInf"
    "o\022\016\n\006charid\030\001 \002(\r\022\017\n\007camp_id\030\002 \002(\005\022\020\n\010of"
    "ficial\030\003 \002(\005\022\016\n\006knight\030\004 \002(\005\"U\n CenterTo"
    "Logic_CheckNoticeCostReq\022\017\n\007char_id\030\001 \002("
    "\r\022\017\n\007camp_id\030\002 \002(\005\022\017\n\007diamond\030\003 \002(\r\"U\n L"
    "ogicToCenter_CheckNoticeCostRsp\022\017\n\007retco"
    "de\030\001 \002(\005\022\017\n\007char_id\030\002 \002(\r\022\017\n\007camp_id\030\003 \002"
    "(\005", 1402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Camp.proto", &protobuf_RegisterTypes);
  CampProtoInfo::default_instance_ = new CampProtoInfo();
  CampProtoRankInfo::default_instance_ = new CampProtoRankInfo();
  CampProtoHonorInfo::default_instance_ = new CampProtoHonorInfo();
  Camp_JoinReq::default_instance_ = new Camp_JoinReq();
  Camp_JoinRsp::default_instance_ = new Camp_JoinRsp();
  Camp_ChangeReq::default_instance_ = new Camp_ChangeReq();
  Camp_ChangeRsp::default_instance_ = new Camp_ChangeRsp();
  Camp_CampInfoReq::default_instance_ = new Camp_CampInfoReq();
  Camp_CampInfoRsp::default_instance_ = new Camp_CampInfoRsp();
  Camp_RankInfoReq::default_instance_ = new Camp_RankInfoReq();
  Camp_RankInfoRsp::default_instance_ = new Camp_RankInfoRsp();
  Camp_HonorInfoReq::default_instance_ = new Camp_HonorInfoReq();
  Camp_HonorInfoRsp::default_instance_ = new Camp_HonorInfoRsp();
  Camp_PublishNoticeReq::default_instance_ = new Camp_PublishNoticeReq();
  Camp_PublishNoticeRsp::default_instance_ = new Camp_PublishNoticeRsp();
  Camp_BroadNoticeRsp::default_instance_ = new Camp_BroadNoticeRsp();
  CenterToLogic_CampCharInfo::default_instance_ = new CenterToLogic_CampCharInfo();
  CenterToLogic_CheckNoticeCostReq::default_instance_ = new CenterToLogic_CheckNoticeCostReq();
  LogicToCenter_CheckNoticeCostRsp::default_instance_ = new LogicToCenter_CheckNoticeCostRsp();
  CampProtoInfo::default_instance_->InitAsDefaultInstance();
  CampProtoRankInfo::default_instance_->InitAsDefaultInstance();
  CampProtoHonorInfo::default_instance_->InitAsDefaultInstance();
  Camp_JoinReq::default_instance_->InitAsDefaultInstance();
  Camp_JoinRsp::default_instance_->InitAsDefaultInstance();
  Camp_ChangeReq::default_instance_->InitAsDefaultInstance();
  Camp_ChangeRsp::default_instance_->InitAsDefaultInstance();
  Camp_CampInfoReq::default_instance_->InitAsDefaultInstance();
  Camp_CampInfoRsp::default_instance_->InitAsDefaultInstance();
  Camp_RankInfoReq::default_instance_->InitAsDefaultInstance();
  Camp_RankInfoRsp::default_instance_->InitAsDefaultInstance();
  Camp_HonorInfoReq::default_instance_->InitAsDefaultInstance();
  Camp_HonorInfoRsp::default_instance_->InitAsDefaultInstance();
  Camp_PublishNoticeReq::default_instance_->InitAsDefaultInstance();
  Camp_PublishNoticeRsp::default_instance_->InitAsDefaultInstance();
  Camp_BroadNoticeRsp::default_instance_->InitAsDefaultInstance();
  CenterToLogic_CampCharInfo::default_instance_->InitAsDefaultInstance();
  CenterToLogic_CheckNoticeCostReq::default_instance_->InitAsDefaultInstance();
  LogicToCenter_CheckNoticeCostRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fCamp_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fCamp_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fCamp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CampProtoInfo::kCampIdFieldNumber;
const int CampProtoInfo::kLeaderNameFieldNumber;
const int CampProtoInfo::kNoticeFieldNumber;
const int CampProtoInfo::kNoticeCdFieldNumber;
#endif  // !_MSC_VER

CampProtoInfo::CampProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampProtoInfo::InitAsDefaultInstance() {
}

CampProtoInfo::CampProtoInfo(const CampProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  camp_id_ = 0;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_cd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampProtoInfo::~CampProtoInfo() {
  SharedDtor();
}

void CampProtoInfo::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void CampProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampProtoInfo_descriptor_;
}

const CampProtoInfo& CampProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

CampProtoInfo* CampProtoInfo::default_instance_ = NULL;

CampProtoInfo* CampProtoInfo::New() const {
  return new CampProtoInfo;
}

void CampProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_id_ = 0;
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    notice_cd_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 camp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_name;
        break;
      }

      // optional string leader_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notice;
        break;
      }

      // optional string notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_notice_cd;
        break;
      }

      // optional uint64 notice_cd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notice_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notice_cd_)));
          set_has_notice_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 camp_id = 1;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp_id(), output);
  }

  // optional string leader_name = 2;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_name(), output);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notice(), output);
  }

  // optional uint64 notice_cd = 4;
  if (has_notice_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->notice_cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 camp_id = 1;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp_id(), target);
  }

  // optional string leader_name = 2;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_name(), target);
  }

  // optional string notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }

  // optional uint64 notice_cd = 4;
  if (has_notice_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->notice_cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 camp_id = 1;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

    // optional string leader_name = 2;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }

    // optional string notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint64 notice_cd = 4;
    if (has_notice_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->notice_cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampProtoInfo::MergeFrom(const CampProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_notice_cd()) {
      set_notice_cd(from.notice_cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampProtoInfo::CopyFrom(const CampProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampProtoInfo::IsInitialized() const {

  return true;
}

void CampProtoInfo::Swap(CampProtoInfo* other) {
  if (other != this) {
    std::swap(camp_id_, other->camp_id_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(notice_, other->notice_);
    std::swap(notice_cd_, other->notice_cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampProtoInfo_descriptor_;
  metadata.reflection = CampProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampProtoRankInfo::kNameFieldNumber;
const int CampProtoRankInfo::kLevelFieldNumber;
const int CampProtoRankInfo::kFightFieldNumber;
const int CampProtoRankInfo::kOfficialFieldNumber;
const int CampProtoRankInfo::kKnightFieldNumber;
#endif  // !_MSC_VER

CampProtoRankInfo::CampProtoRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampProtoRankInfo::InitAsDefaultInstance() {
}

CampProtoRankInfo::CampProtoRankInfo(const CampProtoRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampProtoRankInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  fight_ = 0u;
  official_ = 0;
  knight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampProtoRankInfo::~CampProtoRankInfo() {
  SharedDtor();
}

void CampProtoRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CampProtoRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampProtoRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampProtoRankInfo_descriptor_;
}

const CampProtoRankInfo& CampProtoRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

CampProtoRankInfo* CampProtoRankInfo::default_instance_ = NULL;

CampProtoRankInfo* CampProtoRankInfo::New() const {
  return new CampProtoRankInfo;
}

void CampProtoRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    fight_ = 0u;
    official_ = 0;
    knight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampProtoRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional uint32 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_official;
        break;
      }

      // optional int32 official = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_knight;
        break;
      }

      // optional int32 knight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knight_)));
          set_has_knight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampProtoRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional uint32 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fight(), output);
  }

  // optional int32 official = 4;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->official(), output);
  }

  // optional int32 knight = 5;
  if (has_knight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->knight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampProtoRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional uint32 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fight(), target);
  }

  // optional int32 official = 4;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->official(), target);
  }

  // optional int32 knight = 5;
  if (has_knight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->knight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampProtoRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight());
    }

    // optional int32 official = 4;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // optional int32 knight = 5;
    if (has_knight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampProtoRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampProtoRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampProtoRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampProtoRankInfo::MergeFrom(const CampProtoRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_knight()) {
      set_knight(from.knight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampProtoRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampProtoRankInfo::CopyFrom(const CampProtoRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampProtoRankInfo::IsInitialized() const {

  return true;
}

void CampProtoRankInfo::Swap(CampProtoRankInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(official_, other->official_);
    std::swap(knight_, other->knight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampProtoRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampProtoRankInfo_descriptor_;
  metadata.reflection = CampProtoRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampProtoHonorInfo::kOfficialFieldNumber;
const int CampProtoHonorInfo::kKnightFieldNumber;
const int CampProtoHonorInfo::kContributeFieldNumber;
const int CampProtoHonorInfo::kTotalContributeFieldNumber;
const int CampProtoHonorInfo::kPrestigeFieldNumber;
const int CampProtoHonorInfo::kKillEnemyCampFieldNumber;
#endif  // !_MSC_VER

CampProtoHonorInfo::CampProtoHonorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampProtoHonorInfo::InitAsDefaultInstance() {
}

CampProtoHonorInfo::CampProtoHonorInfo(const CampProtoHonorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampProtoHonorInfo::SharedCtor() {
  _cached_size_ = 0;
  official_ = 0;
  knight_ = 0;
  contribute_ = 0u;
  total_contribute_ = 0u;
  prestige_ = 0u;
  kill_enemy_camp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampProtoHonorInfo::~CampProtoHonorInfo() {
  SharedDtor();
}

void CampProtoHonorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampProtoHonorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampProtoHonorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampProtoHonorInfo_descriptor_;
}

const CampProtoHonorInfo& CampProtoHonorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

CampProtoHonorInfo* CampProtoHonorInfo::default_instance_ = NULL;

CampProtoHonorInfo* CampProtoHonorInfo::New() const {
  return new CampProtoHonorInfo;
}

void CampProtoHonorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    official_ = 0;
    knight_ = 0;
    contribute_ = 0u;
    total_contribute_ = 0u;
    prestige_ = 0u;
    kill_enemy_camp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampProtoHonorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 official = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_knight;
        break;
      }

      // optional int32 knight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knight_)));
          set_has_knight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_contribute;
        break;
      }

      // optional uint32 total_contribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contribute_)));
          set_has_total_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prestige;
        break;
      }

      // optional uint32 prestige = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kill_enemy_camp;
        break;
      }

      // optional uint32 kill_enemy_camp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_enemy_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_enemy_camp_)));
          set_has_kill_enemy_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampProtoHonorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 official = 1;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->official(), output);
  }

  // optional int32 knight = 2;
  if (has_knight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->knight(), output);
  }

  // optional uint32 contribute = 3;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribute(), output);
  }

  // optional uint32 total_contribute = 4;
  if (has_total_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_contribute(), output);
  }

  // optional uint32 prestige = 5;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prestige(), output);
  }

  // optional uint32 kill_enemy_camp = 6;
  if (has_kill_enemy_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kill_enemy_camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampProtoHonorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 official = 1;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->official(), target);
  }

  // optional int32 knight = 2;
  if (has_knight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->knight(), target);
  }

  // optional uint32 contribute = 3;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribute(), target);
  }

  // optional uint32 total_contribute = 4;
  if (has_total_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_contribute(), target);
  }

  // optional uint32 prestige = 5;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prestige(), target);
  }

  // optional uint32 kill_enemy_camp = 6;
  if (has_kill_enemy_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kill_enemy_camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampProtoHonorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 official = 1;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // optional int32 knight = 2;
    if (has_knight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knight());
    }

    // optional uint32 contribute = 3;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

    // optional uint32 total_contribute = 4;
    if (has_total_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_contribute());
    }

    // optional uint32 prestige = 5;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prestige());
    }

    // optional uint32 kill_enemy_camp = 6;
    if (has_kill_enemy_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_enemy_camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampProtoHonorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampProtoHonorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampProtoHonorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampProtoHonorInfo::MergeFrom(const CampProtoHonorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_knight()) {
      set_knight(from.knight());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_total_contribute()) {
      set_total_contribute(from.total_contribute());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_kill_enemy_camp()) {
      set_kill_enemy_camp(from.kill_enemy_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampProtoHonorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampProtoHonorInfo::CopyFrom(const CampProtoHonorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampProtoHonorInfo::IsInitialized() const {

  return true;
}

void CampProtoHonorInfo::Swap(CampProtoHonorInfo* other) {
  if (other != this) {
    std::swap(official_, other->official_);
    std::swap(knight_, other->knight_);
    std::swap(contribute_, other->contribute_);
    std::swap(total_contribute_, other->total_contribute_);
    std::swap(prestige_, other->prestige_);
    std::swap(kill_enemy_camp_, other->kill_enemy_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampProtoHonorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampProtoHonorInfo_descriptor_;
  metadata.reflection = CampProtoHonorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_JoinReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Camp_JoinReq::Camp_JoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_JoinReq::InitAsDefaultInstance() {
}

Camp_JoinReq::Camp_JoinReq(const Camp_JoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_JoinReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_JoinReq::~Camp_JoinReq() {
  SharedDtor();
}

void Camp_JoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Camp_JoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_JoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_JoinReq_descriptor_;
}

const Camp_JoinReq& Camp_JoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_JoinReq* Camp_JoinReq::default_instance_ = NULL;

Camp_JoinReq* Camp_JoinReq::New() const {
  return new Camp_JoinReq;
}

void Camp_JoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_JoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_JoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_JoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_JoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_JoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_JoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_JoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_JoinReq::MergeFrom(const Camp_JoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_JoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_JoinReq::CopyFrom(const Camp_JoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_JoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_JoinReq::Swap(Camp_JoinReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_JoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_JoinReq_descriptor_;
  metadata.reflection = Camp_JoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_JoinRsp::kRetcodeFieldNumber;
const int Camp_JoinRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Camp_JoinRsp::Camp_JoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_JoinRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::CampProtoInfo*>(&::ProtoBuf::CampProtoInfo::default_instance());
}

Camp_JoinRsp::Camp_JoinRsp(const Camp_JoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_JoinRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_JoinRsp::~Camp_JoinRsp() {
  SharedDtor();
}

void Camp_JoinRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Camp_JoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_JoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_JoinRsp_descriptor_;
}

const Camp_JoinRsp& Camp_JoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_JoinRsp* Camp_JoinRsp::default_instance_ = NULL;

Camp_JoinRsp* Camp_JoinRsp::New() const {
  return new Camp_JoinRsp;
}

void Camp_JoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::CampProtoInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_JoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.CampProtoInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_JoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .ProtoBuf.CampProtoInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_JoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .ProtoBuf.CampProtoInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_JoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .ProtoBuf.CampProtoInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_JoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_JoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_JoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_JoinRsp::MergeFrom(const Camp_JoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::CampProtoInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_JoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_JoinRsp::CopyFrom(const Camp_JoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_JoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_JoinRsp::Swap(Camp_JoinRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_JoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_JoinRsp_descriptor_;
  metadata.reflection = Camp_JoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_ChangeReq::kCampIdFieldNumber;
#endif  // !_MSC_VER

Camp_ChangeReq::Camp_ChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_ChangeReq::InitAsDefaultInstance() {
}

Camp_ChangeReq::Camp_ChangeReq(const Camp_ChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_ChangeReq::SharedCtor() {
  _cached_size_ = 0;
  camp_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_ChangeReq::~Camp_ChangeReq() {
  SharedDtor();
}

void Camp_ChangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Camp_ChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_ChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_ChangeReq_descriptor_;
}

const Camp_ChangeReq& Camp_ChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_ChangeReq* Camp_ChangeReq::default_instance_ = NULL;

Camp_ChangeReq* Camp_ChangeReq::New() const {
  return new Camp_ChangeReq;
}

void Camp_ChangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_ChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 camp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_ChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 camp_id = 1;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_ChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 camp_id = 1;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_ChangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 camp_id = 1;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_ChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_ChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_ChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_ChangeReq::MergeFrom(const Camp_ChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_ChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_ChangeReq::CopyFrom(const Camp_ChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_ChangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_ChangeReq::Swap(Camp_ChangeReq* other) {
  if (other != this) {
    std::swap(camp_id_, other->camp_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_ChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_ChangeReq_descriptor_;
  metadata.reflection = Camp_ChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_ChangeRsp::kRetcodeFieldNumber;
const int Camp_ChangeRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Camp_ChangeRsp::Camp_ChangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_ChangeRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::CampProtoInfo*>(&::ProtoBuf::CampProtoInfo::default_instance());
}

Camp_ChangeRsp::Camp_ChangeRsp(const Camp_ChangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_ChangeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_ChangeRsp::~Camp_ChangeRsp() {
  SharedDtor();
}

void Camp_ChangeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Camp_ChangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_ChangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_ChangeRsp_descriptor_;
}

const Camp_ChangeRsp& Camp_ChangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_ChangeRsp* Camp_ChangeRsp::default_instance_ = NULL;

Camp_ChangeRsp* Camp_ChangeRsp::New() const {
  return new Camp_ChangeRsp;
}

void Camp_ChangeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::CampProtoInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_ChangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.CampProtoInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_ChangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .ProtoBuf.CampProtoInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_ChangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .ProtoBuf.CampProtoInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_ChangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .ProtoBuf.CampProtoInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_ChangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_ChangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_ChangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_ChangeRsp::MergeFrom(const Camp_ChangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::CampProtoInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_ChangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_ChangeRsp::CopyFrom(const Camp_ChangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_ChangeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_ChangeRsp::Swap(Camp_ChangeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_ChangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_ChangeRsp_descriptor_;
  metadata.reflection = Camp_ChangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Camp_CampInfoReq::Camp_CampInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_CampInfoReq::InitAsDefaultInstance() {
}

Camp_CampInfoReq::Camp_CampInfoReq(const Camp_CampInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_CampInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_CampInfoReq::~Camp_CampInfoReq() {
  SharedDtor();
}

void Camp_CampInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Camp_CampInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_CampInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_CampInfoReq_descriptor_;
}

const Camp_CampInfoReq& Camp_CampInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_CampInfoReq* Camp_CampInfoReq::default_instance_ = NULL;

Camp_CampInfoReq* Camp_CampInfoReq::New() const {
  return new Camp_CampInfoReq;
}

void Camp_CampInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_CampInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Camp_CampInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_CampInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_CampInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_CampInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_CampInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_CampInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_CampInfoReq::MergeFrom(const Camp_CampInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_CampInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_CampInfoReq::CopyFrom(const Camp_CampInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_CampInfoReq::IsInitialized() const {

  return true;
}

void Camp_CampInfoReq::Swap(Camp_CampInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_CampInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_CampInfoReq_descriptor_;
  metadata.reflection = Camp_CampInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_CampInfoRsp::kRetcodeFieldNumber;
const int Camp_CampInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Camp_CampInfoRsp::Camp_CampInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_CampInfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::CampProtoInfo*>(&::ProtoBuf::CampProtoInfo::default_instance());
}

Camp_CampInfoRsp::Camp_CampInfoRsp(const Camp_CampInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_CampInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_CampInfoRsp::~Camp_CampInfoRsp() {
  SharedDtor();
}

void Camp_CampInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Camp_CampInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_CampInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_CampInfoRsp_descriptor_;
}

const Camp_CampInfoRsp& Camp_CampInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_CampInfoRsp* Camp_CampInfoRsp::default_instance_ = NULL;

Camp_CampInfoRsp* Camp_CampInfoRsp::New() const {
  return new Camp_CampInfoRsp;
}

void Camp_CampInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::CampProtoInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_CampInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.CampProtoInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_CampInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .ProtoBuf.CampProtoInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_CampInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .ProtoBuf.CampProtoInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_CampInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .ProtoBuf.CampProtoInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_CampInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_CampInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_CampInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_CampInfoRsp::MergeFrom(const Camp_CampInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::CampProtoInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_CampInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_CampInfoRsp::CopyFrom(const Camp_CampInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_CampInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_CampInfoRsp::Swap(Camp_CampInfoRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_CampInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_CampInfoRsp_descriptor_;
  metadata.reflection = Camp_CampInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_RankInfoReq::kRankTypeFieldNumber;
#endif  // !_MSC_VER

Camp_RankInfoReq::Camp_RankInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_RankInfoReq::InitAsDefaultInstance() {
}

Camp_RankInfoReq::Camp_RankInfoReq(const Camp_RankInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_RankInfoReq::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_RankInfoReq::~Camp_RankInfoReq() {
  SharedDtor();
}

void Camp_RankInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Camp_RankInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_RankInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_RankInfoReq_descriptor_;
}

const Camp_RankInfoReq& Camp_RankInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_RankInfoReq* Camp_RankInfoReq::default_instance_ = NULL;

Camp_RankInfoReq* Camp_RankInfoReq::New() const {
  return new Camp_RankInfoReq;
}

void Camp_RankInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_RankInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_RankInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_RankInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_RankInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_RankInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_RankInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_RankInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_RankInfoReq::MergeFrom(const Camp_RankInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_RankInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_RankInfoReq::CopyFrom(const Camp_RankInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_RankInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_RankInfoReq::Swap(Camp_RankInfoReq* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_RankInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_RankInfoReq_descriptor_;
  metadata.reflection = Camp_RankInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_RankInfoRsp::kRetcodeFieldNumber;
const int Camp_RankInfoRsp::kRankTypeFieldNumber;
const int Camp_RankInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Camp_RankInfoRsp::Camp_RankInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_RankInfoRsp::InitAsDefaultInstance() {
}

Camp_RankInfoRsp::Camp_RankInfoRsp(const Camp_RankInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_RankInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  rank_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_RankInfoRsp::~Camp_RankInfoRsp() {
  SharedDtor();
}

void Camp_RankInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Camp_RankInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_RankInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_RankInfoRsp_descriptor_;
}

const Camp_RankInfoRsp& Camp_RankInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_RankInfoRsp* Camp_RankInfoRsp::default_instance_ = NULL;

Camp_RankInfoRsp* Camp_RankInfoRsp::New() const {
  return new Camp_RankInfoRsp;
}

void Camp_RankInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    rank_type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_RankInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_type;
        break;
      }

      // optional int32 rank_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.CampProtoRankInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_RankInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 rank_type = 2;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_type(), output);
  }

  // repeated .ProtoBuf.CampProtoRankInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_RankInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 rank_type = 2;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_type(), target);
  }

  // repeated .ProtoBuf.CampProtoRankInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_RankInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 rank_type = 2;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

  }
  // repeated .ProtoBuf.CampProtoRankInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_RankInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_RankInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_RankInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_RankInfoRsp::MergeFrom(const Camp_RankInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_RankInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_RankInfoRsp::CopyFrom(const Camp_RankInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_RankInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_RankInfoRsp::Swap(Camp_RankInfoRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(rank_type_, other->rank_type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_RankInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_RankInfoRsp_descriptor_;
  metadata.reflection = Camp_RankInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Camp_HonorInfoReq::Camp_HonorInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_HonorInfoReq::InitAsDefaultInstance() {
}

Camp_HonorInfoReq::Camp_HonorInfoReq(const Camp_HonorInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_HonorInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_HonorInfoReq::~Camp_HonorInfoReq() {
  SharedDtor();
}

void Camp_HonorInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Camp_HonorInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_HonorInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_HonorInfoReq_descriptor_;
}

const Camp_HonorInfoReq& Camp_HonorInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_HonorInfoReq* Camp_HonorInfoReq::default_instance_ = NULL;

Camp_HonorInfoReq* Camp_HonorInfoReq::New() const {
  return new Camp_HonorInfoReq;
}

void Camp_HonorInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_HonorInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Camp_HonorInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_HonorInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_HonorInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_HonorInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_HonorInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_HonorInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_HonorInfoReq::MergeFrom(const Camp_HonorInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_HonorInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_HonorInfoReq::CopyFrom(const Camp_HonorInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_HonorInfoReq::IsInitialized() const {

  return true;
}

void Camp_HonorInfoReq::Swap(Camp_HonorInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_HonorInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_HonorInfoReq_descriptor_;
  metadata.reflection = Camp_HonorInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_HonorInfoRsp::kRetcodeFieldNumber;
const int Camp_HonorInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Camp_HonorInfoRsp::Camp_HonorInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_HonorInfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::CampProtoHonorInfo*>(&::ProtoBuf::CampProtoHonorInfo::default_instance());
}

Camp_HonorInfoRsp::Camp_HonorInfoRsp(const Camp_HonorInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_HonorInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_HonorInfoRsp::~Camp_HonorInfoRsp() {
  SharedDtor();
}

void Camp_HonorInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void Camp_HonorInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_HonorInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_HonorInfoRsp_descriptor_;
}

const Camp_HonorInfoRsp& Camp_HonorInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_HonorInfoRsp* Camp_HonorInfoRsp::default_instance_ = NULL;

Camp_HonorInfoRsp* Camp_HonorInfoRsp::New() const {
  return new Camp_HonorInfoRsp;
}

void Camp_HonorInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::CampProtoHonorInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_HonorInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.CampProtoHonorInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_HonorInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .ProtoBuf.CampProtoHonorInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_HonorInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .ProtoBuf.CampProtoHonorInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_HonorInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .ProtoBuf.CampProtoHonorInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_HonorInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_HonorInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_HonorInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_HonorInfoRsp::MergeFrom(const Camp_HonorInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::CampProtoHonorInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_HonorInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_HonorInfoRsp::CopyFrom(const Camp_HonorInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_HonorInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_HonorInfoRsp::Swap(Camp_HonorInfoRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_HonorInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_HonorInfoRsp_descriptor_;
  metadata.reflection = Camp_HonorInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_PublishNoticeReq::kNoticeFieldNumber;
#endif  // !_MSC_VER

Camp_PublishNoticeReq::Camp_PublishNoticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_PublishNoticeReq::InitAsDefaultInstance() {
}

Camp_PublishNoticeReq::Camp_PublishNoticeReq(const Camp_PublishNoticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_PublishNoticeReq::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_PublishNoticeReq::~Camp_PublishNoticeReq() {
  SharedDtor();
}

void Camp_PublishNoticeReq::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Camp_PublishNoticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_PublishNoticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_PublishNoticeReq_descriptor_;
}

const Camp_PublishNoticeReq& Camp_PublishNoticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_PublishNoticeReq* Camp_PublishNoticeReq::default_instance_ = NULL;

Camp_PublishNoticeReq* Camp_PublishNoticeReq::New() const {
  return new Camp_PublishNoticeReq;
}

void Camp_PublishNoticeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_PublishNoticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_PublishNoticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_PublishNoticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_PublishNoticeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_PublishNoticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_PublishNoticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_PublishNoticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_PublishNoticeReq::MergeFrom(const Camp_PublishNoticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_PublishNoticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_PublishNoticeReq::CopyFrom(const Camp_PublishNoticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_PublishNoticeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_PublishNoticeReq::Swap(Camp_PublishNoticeReq* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_PublishNoticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_PublishNoticeReq_descriptor_;
  metadata.reflection = Camp_PublishNoticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_PublishNoticeRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Camp_PublishNoticeRsp::Camp_PublishNoticeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_PublishNoticeRsp::InitAsDefaultInstance() {
}

Camp_PublishNoticeRsp::Camp_PublishNoticeRsp(const Camp_PublishNoticeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_PublishNoticeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_PublishNoticeRsp::~Camp_PublishNoticeRsp() {
  SharedDtor();
}

void Camp_PublishNoticeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Camp_PublishNoticeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_PublishNoticeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_PublishNoticeRsp_descriptor_;
}

const Camp_PublishNoticeRsp& Camp_PublishNoticeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_PublishNoticeRsp* Camp_PublishNoticeRsp::default_instance_ = NULL;

Camp_PublishNoticeRsp* Camp_PublishNoticeRsp::New() const {
  return new Camp_PublishNoticeRsp;
}

void Camp_PublishNoticeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_PublishNoticeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_PublishNoticeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_PublishNoticeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_PublishNoticeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_PublishNoticeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_PublishNoticeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_PublishNoticeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_PublishNoticeRsp::MergeFrom(const Camp_PublishNoticeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_PublishNoticeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_PublishNoticeRsp::CopyFrom(const Camp_PublishNoticeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_PublishNoticeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_PublishNoticeRsp::Swap(Camp_PublishNoticeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_PublishNoticeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_PublishNoticeRsp_descriptor_;
  metadata.reflection = Camp_PublishNoticeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camp_BroadNoticeRsp::kNoticeFieldNumber;
#endif  // !_MSC_VER

Camp_BroadNoticeRsp::Camp_BroadNoticeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Camp_BroadNoticeRsp::InitAsDefaultInstance() {
}

Camp_BroadNoticeRsp::Camp_BroadNoticeRsp(const Camp_BroadNoticeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Camp_BroadNoticeRsp::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camp_BroadNoticeRsp::~Camp_BroadNoticeRsp() {
  SharedDtor();
}

void Camp_BroadNoticeRsp::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Camp_BroadNoticeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camp_BroadNoticeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_BroadNoticeRsp_descriptor_;
}

const Camp_BroadNoticeRsp& Camp_BroadNoticeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

Camp_BroadNoticeRsp* Camp_BroadNoticeRsp::default_instance_ = NULL;

Camp_BroadNoticeRsp* Camp_BroadNoticeRsp::New() const {
  return new Camp_BroadNoticeRsp;
}

void Camp_BroadNoticeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camp_BroadNoticeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Camp_BroadNoticeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Camp_BroadNoticeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Camp_BroadNoticeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camp_BroadNoticeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camp_BroadNoticeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camp_BroadNoticeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camp_BroadNoticeRsp::MergeFrom(const Camp_BroadNoticeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camp_BroadNoticeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camp_BroadNoticeRsp::CopyFrom(const Camp_BroadNoticeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camp_BroadNoticeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Camp_BroadNoticeRsp::Swap(Camp_BroadNoticeRsp* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camp_BroadNoticeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camp_BroadNoticeRsp_descriptor_;
  metadata.reflection = Camp_BroadNoticeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogic_CampCharInfo::kCharidFieldNumber;
const int CenterToLogic_CampCharInfo::kCampIdFieldNumber;
const int CenterToLogic_CampCharInfo::kOfficialFieldNumber;
const int CenterToLogic_CampCharInfo::kKnightFieldNumber;
#endif  // !_MSC_VER

CenterToLogic_CampCharInfo::CenterToLogic_CampCharInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogic_CampCharInfo::InitAsDefaultInstance() {
}

CenterToLogic_CampCharInfo::CenterToLogic_CampCharInfo(const CenterToLogic_CampCharInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogic_CampCharInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  camp_id_ = 0;
  official_ = 0;
  knight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogic_CampCharInfo::~CenterToLogic_CampCharInfo() {
  SharedDtor();
}

void CenterToLogic_CampCharInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogic_CampCharInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogic_CampCharInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogic_CampCharInfo_descriptor_;
}

const CenterToLogic_CampCharInfo& CenterToLogic_CampCharInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

CenterToLogic_CampCharInfo* CenterToLogic_CampCharInfo::default_instance_ = NULL;

CenterToLogic_CampCharInfo* CenterToLogic_CampCharInfo::New() const {
  return new CenterToLogic_CampCharInfo;
}

void CenterToLogic_CampCharInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    camp_id_ = 0;
    official_ = 0;
    knight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogic_CampCharInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_camp_id;
        break;
      }

      // required int32 camp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_official;
        break;
      }

      // required int32 official = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &official_)));
          set_has_official();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_knight;
        break;
      }

      // required int32 knight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &knight_)));
          set_has_knight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogic_CampCharInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required int32 camp_id = 2;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->camp_id(), output);
  }

  // required int32 official = 3;
  if (has_official()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->official(), output);
  }

  // required int32 knight = 4;
  if (has_knight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->knight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogic_CampCharInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required int32 camp_id = 2;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->camp_id(), target);
  }

  // required int32 official = 3;
  if (has_official()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->official(), target);
  }

  // required int32 knight = 4;
  if (has_knight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->knight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogic_CampCharInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required int32 camp_id = 2;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

    // required int32 official = 3;
    if (has_official()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->official());
    }

    // required int32 knight = 4;
    if (has_knight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogic_CampCharInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogic_CampCharInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogic_CampCharInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogic_CampCharInfo::MergeFrom(const CenterToLogic_CampCharInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_official()) {
      set_official(from.official());
    }
    if (from.has_knight()) {
      set_knight(from.knight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogic_CampCharInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogic_CampCharInfo::CopyFrom(const CenterToLogic_CampCharInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogic_CampCharInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CenterToLogic_CampCharInfo::Swap(CenterToLogic_CampCharInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(official_, other->official_);
    std::swap(knight_, other->knight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogic_CampCharInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogic_CampCharInfo_descriptor_;
  metadata.reflection = CenterToLogic_CampCharInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterToLogic_CheckNoticeCostReq::kCharIdFieldNumber;
const int CenterToLogic_CheckNoticeCostReq::kCampIdFieldNumber;
const int CenterToLogic_CheckNoticeCostReq::kDiamondFieldNumber;
#endif  // !_MSC_VER

CenterToLogic_CheckNoticeCostReq::CenterToLogic_CheckNoticeCostReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterToLogic_CheckNoticeCostReq::InitAsDefaultInstance() {
}

CenterToLogic_CheckNoticeCostReq::CenterToLogic_CheckNoticeCostReq(const CenterToLogic_CheckNoticeCostReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterToLogic_CheckNoticeCostReq::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  camp_id_ = 0;
  diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterToLogic_CheckNoticeCostReq::~CenterToLogic_CheckNoticeCostReq() {
  SharedDtor();
}

void CenterToLogic_CheckNoticeCostReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterToLogic_CheckNoticeCostReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterToLogic_CheckNoticeCostReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterToLogic_CheckNoticeCostReq_descriptor_;
}

const CenterToLogic_CheckNoticeCostReq& CenterToLogic_CheckNoticeCostReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

CenterToLogic_CheckNoticeCostReq* CenterToLogic_CheckNoticeCostReq::default_instance_ = NULL;

CenterToLogic_CheckNoticeCostReq* CenterToLogic_CheckNoticeCostReq::New() const {
  return new CenterToLogic_CheckNoticeCostReq;
}

void CenterToLogic_CheckNoticeCostReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    camp_id_ = 0;
    diamond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterToLogic_CheckNoticeCostReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_camp_id;
        break;
      }

      // required int32 camp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }

      // required uint32 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterToLogic_CheckNoticeCostReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required int32 camp_id = 2;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->camp_id(), output);
  }

  // required uint32 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterToLogic_CheckNoticeCostReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required int32 camp_id = 2;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->camp_id(), target);
  }

  // required uint32 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterToLogic_CheckNoticeCostReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required int32 camp_id = 2;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

    // required uint32 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterToLogic_CheckNoticeCostReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterToLogic_CheckNoticeCostReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterToLogic_CheckNoticeCostReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterToLogic_CheckNoticeCostReq::MergeFrom(const CenterToLogic_CheckNoticeCostReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterToLogic_CheckNoticeCostReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterToLogic_CheckNoticeCostReq::CopyFrom(const CenterToLogic_CheckNoticeCostReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterToLogic_CheckNoticeCostReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CenterToLogic_CheckNoticeCostReq::Swap(CenterToLogic_CheckNoticeCostReq* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterToLogic_CheckNoticeCostReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterToLogic_CheckNoticeCostReq_descriptor_;
  metadata.reflection = CenterToLogic_CheckNoticeCostReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenter_CheckNoticeCostRsp::kRetcodeFieldNumber;
const int LogicToCenter_CheckNoticeCostRsp::kCharIdFieldNumber;
const int LogicToCenter_CheckNoticeCostRsp::kCampIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenter_CheckNoticeCostRsp::LogicToCenter_CheckNoticeCostRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenter_CheckNoticeCostRsp::InitAsDefaultInstance() {
}

LogicToCenter_CheckNoticeCostRsp::LogicToCenter_CheckNoticeCostRsp(const LogicToCenter_CheckNoticeCostRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenter_CheckNoticeCostRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  char_id_ = 0u;
  camp_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenter_CheckNoticeCostRsp::~LogicToCenter_CheckNoticeCostRsp() {
  SharedDtor();
}

void LogicToCenter_CheckNoticeCostRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenter_CheckNoticeCostRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenter_CheckNoticeCostRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenter_CheckNoticeCostRsp_descriptor_;
}

const LogicToCenter_CheckNoticeCostRsp& LogicToCenter_CheckNoticeCostRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  return *default_instance_;
}

LogicToCenter_CheckNoticeCostRsp* LogicToCenter_CheckNoticeCostRsp::default_instance_ = NULL;

LogicToCenter_CheckNoticeCostRsp* LogicToCenter_CheckNoticeCostRsp::New() const {
  return new LogicToCenter_CheckNoticeCostRsp;
}

void LogicToCenter_CheckNoticeCostRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    char_id_ = 0u;
    camp_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenter_CheckNoticeCostRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_id;
        break;
      }

      // required uint32 char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_camp_id;
        break;
      }

      // required int32 camp_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenter_CheckNoticeCostRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_id(), output);
  }

  // required int32 camp_id = 3;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camp_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenter_CheckNoticeCostRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_id(), target);
  }

  // required int32 camp_id = 3;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camp_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenter_CheckNoticeCostRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 char_id = 2;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required int32 camp_id = 3;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenter_CheckNoticeCostRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenter_CheckNoticeCostRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenter_CheckNoticeCostRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenter_CheckNoticeCostRsp::MergeFrom(const LogicToCenter_CheckNoticeCostRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenter_CheckNoticeCostRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenter_CheckNoticeCostRsp::CopyFrom(const LogicToCenter_CheckNoticeCostRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenter_CheckNoticeCostRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LogicToCenter_CheckNoticeCostRsp::Swap(LogicToCenter_CheckNoticeCostRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(char_id_, other->char_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenter_CheckNoticeCostRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenter_CheckNoticeCostRsp_descriptor_;
  metadata.reflection = LogicToCenter_CheckNoticeCostRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
