// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Mall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Mall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Mall_AskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_AskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_AskDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_AskDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_GetTimeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_GetTimeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_GetTimeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_GetTimeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_BuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_BuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_BuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_BuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_Buy_VerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_Buy_VerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_Buy_VerifyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_Buy_VerifyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mall_Chang_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mall_Chang_Notify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fMall_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Mall.proto");
  GOOGLE_CHECK(file != NULL);
  Mall_AskData_descriptor_ = file->message_type(0);
  static const int Mall_AskData_offsets_[1] = {
  };
  Mall_AskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_AskData_descriptor_,
      Mall_AskData::default_instance_,
      Mall_AskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_AskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_AskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_AskData));
  MallProtoInfo_descriptor_ = file->message_type(1);
  static const int MallProtoInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProtoInfo, mall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProtoInfo, amount_),
  };
  MallProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallProtoInfo_descriptor_,
      MallProtoInfo::default_instance_,
      MallProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallProtoInfo));
  Mall_AskDataRsp_descriptor_ = file->message_type(2);
  static const int Mall_AskDataRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_AskDataRsp, data_),
  };
  Mall_AskDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_AskDataRsp_descriptor_,
      Mall_AskDataRsp::default_instance_,
      Mall_AskDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_AskDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_AskDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_AskDataRsp));
  Mall_GetTimeReq_descriptor_ = file->message_type(3);
  static const int Mall_GetTimeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeReq, mall_id_),
  };
  Mall_GetTimeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_GetTimeReq_descriptor_,
      Mall_GetTimeReq::default_instance_,
      Mall_GetTimeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_GetTimeReq));
  Mall_GetTimeRsp_descriptor_ = file->message_type(4);
  static const int Mall_GetTimeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeRsp, mall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeRsp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeRsp, open_time_),
  };
  Mall_GetTimeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_GetTimeRsp_descriptor_,
      Mall_GetTimeRsp::default_instance_,
      Mall_GetTimeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_GetTimeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_GetTimeRsp));
  Mall_BuyReq_descriptor_ = file->message_type(5);
  static const int Mall_BuyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_BuyReq, mall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_BuyReq, count_),
  };
  Mall_BuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_BuyReq_descriptor_,
      Mall_BuyReq::default_instance_,
      Mall_BuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_BuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_BuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_BuyReq));
  Mall_BuyRsp_descriptor_ = file->message_type(6);
  static const int Mall_BuyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_BuyRsp, retcode_),
  };
  Mall_BuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_BuyRsp_descriptor_,
      Mall_BuyRsp::default_instance_,
      Mall_BuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_BuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_BuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_BuyRsp));
  Mall_Buy_VerifyReq_descriptor_ = file->message_type(7);
  static const int Mall_Buy_VerifyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyReq, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyReq, mall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyReq, count_),
  };
  Mall_Buy_VerifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_Buy_VerifyReq_descriptor_,
      Mall_Buy_VerifyReq::default_instance_,
      Mall_Buy_VerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_Buy_VerifyReq));
  Mall_Buy_VerifyRsp_descriptor_ = file->message_type(8);
  static const int Mall_Buy_VerifyRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyRsp, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyRsp, mall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyRsp, count_),
  };
  Mall_Buy_VerifyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_Buy_VerifyRsp_descriptor_,
      Mall_Buy_VerifyRsp::default_instance_,
      Mall_Buy_VerifyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Buy_VerifyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_Buy_VerifyRsp));
  Mall_Chang_Notify_descriptor_ = file->message_type(9);
  static const int Mall_Chang_Notify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, mall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, open_time_),
  };
  Mall_Chang_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mall_Chang_Notify_descriptor_,
      Mall_Chang_Notify::default_instance_,
      Mall_Chang_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mall_Chang_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mall_Chang_Notify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fMall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_AskData_descriptor_, &Mall_AskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallProtoInfo_descriptor_, &MallProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_AskDataRsp_descriptor_, &Mall_AskDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_GetTimeReq_descriptor_, &Mall_GetTimeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_GetTimeRsp_descriptor_, &Mall_GetTimeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_BuyReq_descriptor_, &Mall_BuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_BuyRsp_descriptor_, &Mall_BuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_Buy_VerifyReq_descriptor_, &Mall_Buy_VerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_Buy_VerifyRsp_descriptor_, &Mall_Buy_VerifyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mall_Chang_Notify_descriptor_, &Mall_Chang_Notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fMall_2eproto() {
  delete Mall_AskData::default_instance_;
  delete Mall_AskData_reflection_;
  delete MallProtoInfo::default_instance_;
  delete MallProtoInfo_reflection_;
  delete Mall_AskDataRsp::default_instance_;
  delete Mall_AskDataRsp_reflection_;
  delete Mall_GetTimeReq::default_instance_;
  delete Mall_GetTimeReq_reflection_;
  delete Mall_GetTimeRsp::default_instance_;
  delete Mall_GetTimeRsp_reflection_;
  delete Mall_BuyReq::default_instance_;
  delete Mall_BuyReq_reflection_;
  delete Mall_BuyRsp::default_instance_;
  delete Mall_BuyRsp_reflection_;
  delete Mall_Buy_VerifyReq::default_instance_;
  delete Mall_Buy_VerifyReq_reflection_;
  delete Mall_Buy_VerifyRsp::default_instance_;
  delete Mall_Buy_VerifyRsp_reflection_;
  delete Mall_Chang_Notify::default_instance_;
  delete Mall_Chang_Notify_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fMall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoBuffer/Mall.proto\022\010ProtoBuf\032\035Prot"
    "oBuffer/ComProtocol.proto\032#ProtoBuffer/C"
    "lientToServerCmd.proto\032\026Common/ComDefine"
    ".proto\"\016\n\014Mall_AskData\"0\n\rMallProtoInfo\022"
    "\017\n\007mall_id\030\001 \001(\r\022\016\n\006amount\030\002 \001(\r\"8\n\017Mall"
    "_AskDataRsp\022%\n\004data\030\001 \003(\0132\027.ProtoBuf.Mal"
    "lProtoInfo\"\"\n\017Mall_GetTimeReq\022\017\n\007mall_id"
    "\030\001 \002(\r\"C\n\017Mall_GetTimeRsp\022\017\n\007mall_id\030\001 \002"
    "(\r\022\014\n\004time\030\002 \001(\004\022\021\n\topen_time\030\003 \001(\004\"-\n\013M"
    "all_BuyReq\022\017\n\007mall_id\030\001 \002(\r\022\r\n\005count\030\002 \001"
    "(\r\"\036\n\013Mall_BuyRsp\022\017\n\007retcode\030\001 \002(\005\"E\n\022Ma"
    "ll_Buy_VerifyReq\022\017\n\007char_id\030\001 \001(\r\022\017\n\007mal"
    "l_id\030\002 \002(\r\022\r\n\005count\030\003 \001(\r\"U\n\022Mall_Buy_Ve"
    "rifyRsp\022\017\n\007char_id\030\001 \002(\r\022\016\n\006result\030\002 \002(\005"
    "\022\017\n\007mall_id\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\"{\n\021Mall"
    "_Chang_Notify\022\024\n\014operate_type\030\001 \002(\r\022\017\n\007c"
    "har_id\030\002 \002(\r\022\017\n\007mall_id\030\003 \001(\r\022\r\n\005count\030\004"
    " \001(\r\022\014\n\004time\030\005 \001(\004\022\021\n\topen_time\030\006 \001(\004", 717);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Mall.proto", &protobuf_RegisterTypes);
  Mall_AskData::default_instance_ = new Mall_AskData();
  MallProtoInfo::default_instance_ = new MallProtoInfo();
  Mall_AskDataRsp::default_instance_ = new Mall_AskDataRsp();
  Mall_GetTimeReq::default_instance_ = new Mall_GetTimeReq();
  Mall_GetTimeRsp::default_instance_ = new Mall_GetTimeRsp();
  Mall_BuyReq::default_instance_ = new Mall_BuyReq();
  Mall_BuyRsp::default_instance_ = new Mall_BuyRsp();
  Mall_Buy_VerifyReq::default_instance_ = new Mall_Buy_VerifyReq();
  Mall_Buy_VerifyRsp::default_instance_ = new Mall_Buy_VerifyRsp();
  Mall_Chang_Notify::default_instance_ = new Mall_Chang_Notify();
  Mall_AskData::default_instance_->InitAsDefaultInstance();
  MallProtoInfo::default_instance_->InitAsDefaultInstance();
  Mall_AskDataRsp::default_instance_->InitAsDefaultInstance();
  Mall_GetTimeReq::default_instance_->InitAsDefaultInstance();
  Mall_GetTimeRsp::default_instance_->InitAsDefaultInstance();
  Mall_BuyReq::default_instance_->InitAsDefaultInstance();
  Mall_BuyRsp::default_instance_->InitAsDefaultInstance();
  Mall_Buy_VerifyReq::default_instance_->InitAsDefaultInstance();
  Mall_Buy_VerifyRsp::default_instance_->InitAsDefaultInstance();
  Mall_Chang_Notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fMall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fMall_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fMall_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fMall_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Mall_AskData::Mall_AskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_AskData::InitAsDefaultInstance() {
}

Mall_AskData::Mall_AskData(const Mall_AskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_AskData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_AskData::~Mall_AskData() {
  SharedDtor();
}

void Mall_AskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_AskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_AskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_AskData_descriptor_;
}

const Mall_AskData& Mall_AskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_AskData* Mall_AskData::default_instance_ = NULL;

Mall_AskData* Mall_AskData::New() const {
  return new Mall_AskData;
}

void Mall_AskData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_AskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Mall_AskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_AskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_AskData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_AskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_AskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_AskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_AskData::MergeFrom(const Mall_AskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_AskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_AskData::CopyFrom(const Mall_AskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_AskData::IsInitialized() const {

  return true;
}

void Mall_AskData::Swap(Mall_AskData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_AskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_AskData_descriptor_;
  metadata.reflection = Mall_AskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallProtoInfo::kMallIdFieldNumber;
const int MallProtoInfo::kAmountFieldNumber;
#endif  // !_MSC_VER

MallProtoInfo::MallProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallProtoInfo::InitAsDefaultInstance() {
}

MallProtoInfo::MallProtoInfo(const MallProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  mall_id_ = 0u;
  amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallProtoInfo::~MallProtoInfo() {
  SharedDtor();
}

void MallProtoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallProtoInfo_descriptor_;
}

const MallProtoInfo& MallProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

MallProtoInfo* MallProtoInfo::default_instance_ = NULL;

MallProtoInfo* MallProtoInfo::New() const {
  return new MallProtoInfo;
}

void MallProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mall_id_ = 0u;
    amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mall_id = 1;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mall_id(), output);
  }

  // optional uint32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mall_id = 1;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mall_id(), target);
  }

  // optional uint32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mall_id = 1;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

    // optional uint32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallProtoInfo::MergeFrom(const MallProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallProtoInfo::CopyFrom(const MallProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallProtoInfo::IsInitialized() const {

  return true;
}

void MallProtoInfo::Swap(MallProtoInfo* other) {
  if (other != this) {
    std::swap(mall_id_, other->mall_id_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallProtoInfo_descriptor_;
  metadata.reflection = MallProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_AskDataRsp::kDataFieldNumber;
#endif  // !_MSC_VER

Mall_AskDataRsp::Mall_AskDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_AskDataRsp::InitAsDefaultInstance() {
}

Mall_AskDataRsp::Mall_AskDataRsp(const Mall_AskDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_AskDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_AskDataRsp::~Mall_AskDataRsp() {
  SharedDtor();
}

void Mall_AskDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_AskDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_AskDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_AskDataRsp_descriptor_;
}

const Mall_AskDataRsp& Mall_AskDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_AskDataRsp* Mall_AskDataRsp::default_instance_ = NULL;

Mall_AskDataRsp* Mall_AskDataRsp::New() const {
  return new Mall_AskDataRsp;
}

void Mall_AskDataRsp::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_AskDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.MallProtoInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_AskDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.MallProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_AskDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.MallProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_AskDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.MallProtoInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_AskDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_AskDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_AskDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_AskDataRsp::MergeFrom(const Mall_AskDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_AskDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_AskDataRsp::CopyFrom(const Mall_AskDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_AskDataRsp::IsInitialized() const {

  return true;
}

void Mall_AskDataRsp::Swap(Mall_AskDataRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_AskDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_AskDataRsp_descriptor_;
  metadata.reflection = Mall_AskDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_GetTimeReq::kMallIdFieldNumber;
#endif  // !_MSC_VER

Mall_GetTimeReq::Mall_GetTimeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_GetTimeReq::InitAsDefaultInstance() {
}

Mall_GetTimeReq::Mall_GetTimeReq(const Mall_GetTimeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_GetTimeReq::SharedCtor() {
  _cached_size_ = 0;
  mall_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_GetTimeReq::~Mall_GetTimeReq() {
  SharedDtor();
}

void Mall_GetTimeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_GetTimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_GetTimeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_GetTimeReq_descriptor_;
}

const Mall_GetTimeReq& Mall_GetTimeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_GetTimeReq* Mall_GetTimeReq::default_instance_ = NULL;

Mall_GetTimeReq* Mall_GetTimeReq::New() const {
  return new Mall_GetTimeReq;
}

void Mall_GetTimeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mall_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_GetTimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_GetTimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mall_id = 1;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mall_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_GetTimeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mall_id = 1;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mall_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_GetTimeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mall_id = 1;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_GetTimeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_GetTimeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_GetTimeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_GetTimeReq::MergeFrom(const Mall_GetTimeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_GetTimeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_GetTimeReq::CopyFrom(const Mall_GetTimeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_GetTimeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mall_GetTimeReq::Swap(Mall_GetTimeReq* other) {
  if (other != this) {
    std::swap(mall_id_, other->mall_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_GetTimeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_GetTimeReq_descriptor_;
  metadata.reflection = Mall_GetTimeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_GetTimeRsp::kMallIdFieldNumber;
const int Mall_GetTimeRsp::kTimeFieldNumber;
const int Mall_GetTimeRsp::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

Mall_GetTimeRsp::Mall_GetTimeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_GetTimeRsp::InitAsDefaultInstance() {
}

Mall_GetTimeRsp::Mall_GetTimeRsp(const Mall_GetTimeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_GetTimeRsp::SharedCtor() {
  _cached_size_ = 0;
  mall_id_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  open_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_GetTimeRsp::~Mall_GetTimeRsp() {
  SharedDtor();
}

void Mall_GetTimeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_GetTimeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_GetTimeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_GetTimeRsp_descriptor_;
}

const Mall_GetTimeRsp& Mall_GetTimeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_GetTimeRsp* Mall_GetTimeRsp::default_instance_ = NULL;

Mall_GetTimeRsp* Mall_GetTimeRsp::New() const {
  return new Mall_GetTimeRsp;
}

void Mall_GetTimeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mall_id_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    open_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_GetTimeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_time;
        break;
      }

      // optional uint64 open_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_GetTimeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mall_id = 1;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mall_id(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint64 open_time = 3;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->open_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_GetTimeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mall_id = 1;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mall_id(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint64 open_time = 3;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->open_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_GetTimeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mall_id = 1;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 open_time = 3;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_GetTimeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_GetTimeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_GetTimeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_GetTimeRsp::MergeFrom(const Mall_GetTimeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_GetTimeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_GetTimeRsp::CopyFrom(const Mall_GetTimeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_GetTimeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mall_GetTimeRsp::Swap(Mall_GetTimeRsp* other) {
  if (other != this) {
    std::swap(mall_id_, other->mall_id_);
    std::swap(time_, other->time_);
    std::swap(open_time_, other->open_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_GetTimeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_GetTimeRsp_descriptor_;
  metadata.reflection = Mall_GetTimeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_BuyReq::kMallIdFieldNumber;
const int Mall_BuyReq::kCountFieldNumber;
#endif  // !_MSC_VER

Mall_BuyReq::Mall_BuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_BuyReq::InitAsDefaultInstance() {
}

Mall_BuyReq::Mall_BuyReq(const Mall_BuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_BuyReq::SharedCtor() {
  _cached_size_ = 0;
  mall_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_BuyReq::~Mall_BuyReq() {
  SharedDtor();
}

void Mall_BuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_BuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_BuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_BuyReq_descriptor_;
}

const Mall_BuyReq& Mall_BuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_BuyReq* Mall_BuyReq::default_instance_ = NULL;

Mall_BuyReq* Mall_BuyReq::New() const {
  return new Mall_BuyReq;
}

void Mall_BuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mall_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_BuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_BuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mall_id = 1;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mall_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_BuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mall_id = 1;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mall_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_BuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mall_id = 1;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_BuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_BuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_BuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_BuyReq::MergeFrom(const Mall_BuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_BuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_BuyReq::CopyFrom(const Mall_BuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_BuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mall_BuyReq::Swap(Mall_BuyReq* other) {
  if (other != this) {
    std::swap(mall_id_, other->mall_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_BuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_BuyReq_descriptor_;
  metadata.reflection = Mall_BuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_BuyRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Mall_BuyRsp::Mall_BuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_BuyRsp::InitAsDefaultInstance() {
}

Mall_BuyRsp::Mall_BuyRsp(const Mall_BuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_BuyRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_BuyRsp::~Mall_BuyRsp() {
  SharedDtor();
}

void Mall_BuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_BuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_BuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_BuyRsp_descriptor_;
}

const Mall_BuyRsp& Mall_BuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_BuyRsp* Mall_BuyRsp::default_instance_ = NULL;

Mall_BuyRsp* Mall_BuyRsp::New() const {
  return new Mall_BuyRsp;
}

void Mall_BuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_BuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_BuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_BuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_BuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_BuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_BuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_BuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_BuyRsp::MergeFrom(const Mall_BuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_BuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_BuyRsp::CopyFrom(const Mall_BuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_BuyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Mall_BuyRsp::Swap(Mall_BuyRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_BuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_BuyRsp_descriptor_;
  metadata.reflection = Mall_BuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_Buy_VerifyReq::kCharIdFieldNumber;
const int Mall_Buy_VerifyReq::kMallIdFieldNumber;
const int Mall_Buy_VerifyReq::kCountFieldNumber;
#endif  // !_MSC_VER

Mall_Buy_VerifyReq::Mall_Buy_VerifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_Buy_VerifyReq::InitAsDefaultInstance() {
}

Mall_Buy_VerifyReq::Mall_Buy_VerifyReq(const Mall_Buy_VerifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_Buy_VerifyReq::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  mall_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_Buy_VerifyReq::~Mall_Buy_VerifyReq() {
  SharedDtor();
}

void Mall_Buy_VerifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_Buy_VerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_Buy_VerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_Buy_VerifyReq_descriptor_;
}

const Mall_Buy_VerifyReq& Mall_Buy_VerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_Buy_VerifyReq* Mall_Buy_VerifyReq::default_instance_ = NULL;

Mall_Buy_VerifyReq* Mall_Buy_VerifyReq::New() const {
  return new Mall_Buy_VerifyReq;
}

void Mall_Buy_VerifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    mall_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_Buy_VerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mall_id;
        break;
      }

      // required uint32 mall_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mall_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_Buy_VerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required uint32 mall_id = 2;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mall_id(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_Buy_VerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required uint32 mall_id = 2;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mall_id(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_Buy_VerifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required uint32 mall_id = 2;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_Buy_VerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_Buy_VerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_Buy_VerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_Buy_VerifyReq::MergeFrom(const Mall_Buy_VerifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_Buy_VerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_Buy_VerifyReq::CopyFrom(const Mall_Buy_VerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_Buy_VerifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Mall_Buy_VerifyReq::Swap(Mall_Buy_VerifyReq* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(mall_id_, other->mall_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_Buy_VerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_Buy_VerifyReq_descriptor_;
  metadata.reflection = Mall_Buy_VerifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_Buy_VerifyRsp::kCharIdFieldNumber;
const int Mall_Buy_VerifyRsp::kResultFieldNumber;
const int Mall_Buy_VerifyRsp::kMallIdFieldNumber;
const int Mall_Buy_VerifyRsp::kCountFieldNumber;
#endif  // !_MSC_VER

Mall_Buy_VerifyRsp::Mall_Buy_VerifyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_Buy_VerifyRsp::InitAsDefaultInstance() {
}

Mall_Buy_VerifyRsp::Mall_Buy_VerifyRsp(const Mall_Buy_VerifyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_Buy_VerifyRsp::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0u;
  result_ = 0;
  mall_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_Buy_VerifyRsp::~Mall_Buy_VerifyRsp() {
  SharedDtor();
}

void Mall_Buy_VerifyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_Buy_VerifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_Buy_VerifyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_Buy_VerifyRsp_descriptor_;
}

const Mall_Buy_VerifyRsp& Mall_Buy_VerifyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_Buy_VerifyRsp* Mall_Buy_VerifyRsp::default_instance_ = NULL;

Mall_Buy_VerifyRsp* Mall_Buy_VerifyRsp::New() const {
  return new Mall_Buy_VerifyRsp;
}

void Mall_Buy_VerifyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0u;
    result_ = 0;
    mall_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_Buy_VerifyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mall_id;
        break;
      }

      // optional uint32 mall_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mall_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_Buy_VerifyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_id(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint32 mall_id = 3;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mall_id(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_Buy_VerifyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_id(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint32 mall_id = 3;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mall_id(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_Buy_VerifyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 mall_id = 3;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_Buy_VerifyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_Buy_VerifyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_Buy_VerifyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_Buy_VerifyRsp::MergeFrom(const Mall_Buy_VerifyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_Buy_VerifyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_Buy_VerifyRsp::CopyFrom(const Mall_Buy_VerifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_Buy_VerifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mall_Buy_VerifyRsp::Swap(Mall_Buy_VerifyRsp* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(result_, other->result_);
    std::swap(mall_id_, other->mall_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_Buy_VerifyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_Buy_VerifyRsp_descriptor_;
  metadata.reflection = Mall_Buy_VerifyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mall_Chang_Notify::kOperateTypeFieldNumber;
const int Mall_Chang_Notify::kCharIdFieldNumber;
const int Mall_Chang_Notify::kMallIdFieldNumber;
const int Mall_Chang_Notify::kCountFieldNumber;
const int Mall_Chang_Notify::kTimeFieldNumber;
const int Mall_Chang_Notify::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

Mall_Chang_Notify::Mall_Chang_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mall_Chang_Notify::InitAsDefaultInstance() {
}

Mall_Chang_Notify::Mall_Chang_Notify(const Mall_Chang_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mall_Chang_Notify::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0u;
  char_id_ = 0u;
  mall_id_ = 0u;
  count_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  open_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mall_Chang_Notify::~Mall_Chang_Notify() {
  SharedDtor();
}

void Mall_Chang_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mall_Chang_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mall_Chang_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mall_Chang_Notify_descriptor_;
}

const Mall_Chang_Notify& Mall_Chang_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fMall_2eproto();
  return *default_instance_;
}

Mall_Chang_Notify* Mall_Chang_Notify::default_instance_ = NULL;

Mall_Chang_Notify* Mall_Chang_Notify::New() const {
  return new Mall_Chang_Notify;
}

void Mall_Chang_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0u;
    char_id_ = 0u;
    mall_id_ = 0u;
    count_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    open_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mall_Chang_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_id;
        break;
      }

      // required uint32 char_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mall_id;
        break;
      }

      // optional uint32 mall_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mall_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mall_id_)));
          set_has_mall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_open_time;
        break;
      }

      // optional uint64 open_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mall_Chang_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->operate_type(), output);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_id(), output);
  }

  // optional uint32 mall_id = 3;
  if (has_mall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mall_id(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  // optional uint64 open_time = 6;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->open_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mall_Chang_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->operate_type(), target);
  }

  // required uint32 char_id = 2;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_id(), target);
  }

  // optional uint32 mall_id = 3;
  if (has_mall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mall_id(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  // optional uint64 open_time = 6;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->open_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mall_Chang_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // required uint32 char_id = 2;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_id());
    }

    // optional uint32 mall_id = 3;
    if (has_mall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mall_id());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 open_time = 6;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mall_Chang_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mall_Chang_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mall_Chang_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mall_Chang_Notify::MergeFrom(const Mall_Chang_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_mall_id()) {
      set_mall_id(from.mall_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mall_Chang_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mall_Chang_Notify::CopyFrom(const Mall_Chang_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mall_Chang_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mall_Chang_Notify::Swap(Mall_Chang_Notify* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(char_id_, other->char_id_);
    std::swap(mall_id_, other->mall_id_);
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(open_time_, other->open_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mall_Chang_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mall_Chang_Notify_descriptor_;
  metadata.reflection = Mall_Chang_Notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
