// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ServerInternalProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/ServerInternalProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* LoginServerRegiste_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginServerRegiste_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerRegiste_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerRegiste_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogicServerRegiste_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginCheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginCheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLogoutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLogoutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicCheckTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicCheckTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicCheckTokenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicCheckTokenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickChannelUserNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickChannelUserNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterAccountLogoutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterAccountLogoutNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CenterAccountLogoutNotify_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReconnectCheckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectCheckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectCheckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectCheckResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicServerAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicServerAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginLogicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginLogicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginLogicResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginLogicResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginLogicResponse_SwitchServerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginLogicResponse_SwitchServerParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginLogicResponse_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SwitchServerBeginNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchServerBeginNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastToLogicServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastToLogicServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenterCreateChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenterCreateChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenterDelChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenterDelChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToCenterCharSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToCenterCharSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterLogicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterLogicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutLogicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutLogicRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogoutLogicRequest_FLAG_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllocLogicNodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocLogicNodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocLogicNodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocLogicNodeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientNotifyToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientNotifyToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBProxyAddrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBProxyAddrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterRspSceneId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterRspSceneId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterDailyUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterDailyUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterWeekUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterWeekUpdateNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fServerInternalProtocol_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/ServerInternalProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  LoginServerRegiste_descriptor_ = file->message_type(0);
  static const int LoginServerRegiste_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerRegiste, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerRegiste, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerRegiste, outerport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerRegiste, outerip_),
  };
  LoginServerRegiste_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginServerRegiste_descriptor_,
      LoginServerRegiste::default_instance_,
      LoginServerRegiste_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerRegiste, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerRegiste, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginServerRegiste));
  LogicServerRegiste_descriptor_ = file->message_type(1);
  static const int LogicServerRegiste_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerRegiste, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerRegiste, outer_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerRegiste, outer_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerRegiste, type_),
  };
  LogicServerRegiste_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicServerRegiste_descriptor_,
      LogicServerRegiste::default_instance_,
      LogicServerRegiste_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerRegiste, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerRegiste, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicServerRegiste));
  LogicServerRegiste_TYPE_descriptor_ = LogicServerRegiste_descriptor_->enum_type(0);
  LoginServerState_descriptor_ = file->message_type(2);
  static const int LoginServerState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerState, state_),
  };
  LoginServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginServerState_descriptor_,
      LoginServerState::default_instance_,
      LoginServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginServerState));
  LogicServerState_descriptor_ = file->message_type(3);
  static const int LogicServerState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerState, charactercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerState, playercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerState, enteraccountcount_),
  };
  LogicServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicServerState_descriptor_,
      LogicServerState::default_instance_,
      LogicServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicServerState));
  AccountLoginCheckReq_descriptor_ = file->message_type(4);
  static const int AccountLoginCheckReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckReq, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckReq, session_id_),
  };
  AccountLoginCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginCheckReq_descriptor_,
      AccountLoginCheckReq::default_instance_,
      AccountLoginCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginCheckReq));
  AccountLoginCheckRsp_descriptor_ = file->message_type(5);
  static const int AccountLoginCheckRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, logic_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, logic_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, logic_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, session_id_),
  };
  AccountLoginCheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginCheckRsp_descriptor_,
      AccountLoginCheckRsp::default_instance_,
      AccountLoginCheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginCheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginCheckRsp));
  AccountLogoutNotify_descriptor_ = file->message_type(6);
  static const int AccountLogoutNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogoutNotify, channel_user_id_),
  };
  AccountLogoutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLogoutNotify_descriptor_,
      AccountLogoutNotify::default_instance_,
      AccountLogoutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogoutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLogoutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLogoutNotify));
  LogicCheckTokenReq_descriptor_ = file->message_type(7);
  static const int LogicCheckTokenReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenReq, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenReq, logic_token_),
  };
  LogicCheckTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicCheckTokenReq_descriptor_,
      LogicCheckTokenReq::default_instance_,
      LogicCheckTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicCheckTokenReq));
  LogicCheckTokenRsp_descriptor_ = file->message_type(8);
  static const int LogicCheckTokenRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenRsp, channel_user_id_),
  };
  LogicCheckTokenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicCheckTokenRsp_descriptor_,
      LogicCheckTokenRsp::default_instance_,
      LogicCheckTokenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCheckTokenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicCheckTokenRsp));
  KickChannelUserNotify_descriptor_ = file->message_type(9);
  static const int KickChannelUserNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChannelUserNotify, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChannelUserNotify, charid_),
  };
  KickChannelUserNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickChannelUserNotify_descriptor_,
      KickChannelUserNotify::default_instance_,
      KickChannelUserNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChannelUserNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChannelUserNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickChannelUserNotify));
  CenterAccountLogoutNotify_descriptor_ = file->message_type(10);
  static const int CenterAccountLogoutNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterAccountLogoutNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterAccountLogoutNotify, channel_user_id_),
  };
  CenterAccountLogoutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterAccountLogoutNotify_descriptor_,
      CenterAccountLogoutNotify::default_instance_,
      CenterAccountLogoutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterAccountLogoutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterAccountLogoutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterAccountLogoutNotify));
  CenterAccountLogoutNotify_TYPE_descriptor_ = CenterAccountLogoutNotify_descriptor_->enum_type(0);
  ReconnectCheckRequest_descriptor_ = file->message_type(11);
  static const int ReconnectCheckRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, accountindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, userid_),
  };
  ReconnectCheckRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectCheckRequest_descriptor_,
      ReconnectCheckRequest::default_instance_,
      ReconnectCheckRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectCheckRequest));
  ReconnectCheckResponse_descriptor_ = file->message_type(12);
  static const int ReconnectCheckResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, accountindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, userid_),
  };
  ReconnectCheckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectCheckResponse_descriptor_,
      ReconnectCheckResponse::default_instance_,
      ReconnectCheckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectCheckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectCheckResponse));
  LogicServerAddressReq_descriptor_ = file->message_type(13);
  static const int LogicServerAddressReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerAddressReq, app_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerAddressReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerAddressReq, user_id_),
  };
  LogicServerAddressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicServerAddressReq_descriptor_,
      LogicServerAddressReq::default_instance_,
      LogicServerAddressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerAddressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicServerAddressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicServerAddressReq));
  LoginLogicRequest_descriptor_ = file->message_type(14);
  static const int LoginLogicRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicRequest, connect_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicRequest, group_id_),
  };
  LoginLogicRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginLogicRequest_descriptor_,
      LoginLogicRequest::default_instance_,
      LoginLogicRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginLogicRequest));
  LoginLogicResponse_descriptor_ = file->message_type(15);
  static const int LoginLogicResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, connect_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, switch_server_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, switch_server_param_),
  };
  LoginLogicResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginLogicResponse_descriptor_,
      LoginLogicResponse::default_instance_,
      LoginLogicResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginLogicResponse));
  LoginLogicResponse_SwitchServerParam_descriptor_ = LoginLogicResponse_descriptor_->nested_type(0);
  static const int LoginLogicResponse_SwitchServerParam_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, source_scene_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, source_pose_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, source_pose_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, dest_scene_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, dest_scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, dest_scene_enter_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, dest_scene_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, dest_scene_pos_y_),
  };
  LoginLogicResponse_SwitchServerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginLogicResponse_SwitchServerParam_descriptor_,
      LoginLogicResponse_SwitchServerParam::default_instance_,
      LoginLogicResponse_SwitchServerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginLogicResponse_SwitchServerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginLogicResponse_SwitchServerParam));
  LoginLogicResponse_RESULT_descriptor_ = LoginLogicResponse_descriptor_->enum_type(0);
  SwitchServerBeginNotify_descriptor_ = file->message_type(16);
  static const int SwitchServerBeginNotify_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, source_scene_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, source_pose_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, source_pose_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, dest_logic_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, dest_scene_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, dest_scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, dest_scene_enter_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, dest_scene_pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, dest_scene_pos_y_),
  };
  SwitchServerBeginNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchServerBeginNotify_descriptor_,
      SwitchServerBeginNotify::default_instance_,
      SwitchServerBeginNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchServerBeginNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchServerBeginNotify));
  BroadcastToLogicServer_descriptor_ = file->message_type(17);
  static const int BroadcastToLogicServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastToLogicServer, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastToLogicServer, msg_),
  };
  BroadcastToLogicServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastToLogicServer_descriptor_,
      BroadcastToLogicServer::default_instance_,
      BroadcastToLogicServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastToLogicServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastToLogicServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastToLogicServer));
  LogicToCenterCreateChar_descriptor_ = file->message_type(18);
  static const int LogicToCenterCreateChar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCreateChar, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCreateChar, base_),
  };
  LogicToCenterCreateChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenterCreateChar_descriptor_,
      LogicToCenterCreateChar::default_instance_,
      LogicToCenterCreateChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCreateChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCreateChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenterCreateChar));
  LogicToCenterDelChar_descriptor_ = file->message_type(19);
  static const int LogicToCenterDelChar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterDelChar, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterDelChar, channel_user_id_),
  };
  LogicToCenterDelChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenterDelChar_descriptor_,
      LogicToCenterDelChar::default_instance_,
      LogicToCenterDelChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterDelChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterDelChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenterDelChar));
  LogicToCenterCharSync_descriptor_ = file->message_type(20);
  static const int LogicToCenterCharSync_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCharSync, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCharSync, attrlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCharSync, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCharSync, all_equip_),
  };
  LogicToCenterCharSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToCenterCharSync_descriptor_,
      LogicToCenterCharSync::default_instance_,
      LogicToCenterCharSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCharSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToCenterCharSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToCenterCharSync));
  EnterLogicRequest_descriptor_ = file->message_type(21);
  static const int EnterLogicRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, charsimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, attr_),
  };
  EnterLogicRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterLogicRequest_descriptor_,
      EnterLogicRequest::default_instance_,
      EnterLogicRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterLogicRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterLogicRequest));
  LogoutLogicRequest_descriptor_ = file->message_type(22);
  static const int LogoutLogicRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutLogicRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutLogicRequest, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutLogicRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutLogicRequest, token_),
  };
  LogoutLogicRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutLogicRequest_descriptor_,
      LogoutLogicRequest::default_instance_,
      LogoutLogicRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutLogicRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutLogicRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutLogicRequest));
  LogoutLogicRequest_FLAG_descriptor_ = LogoutLogicRequest_descriptor_->enum_type(0);
  AllocLogicNodeRequest_descriptor_ = file->message_type(23);
  static const int AllocLogicNodeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeRequest, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeRequest, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeRequest, channel_user_id_),
  };
  AllocLogicNodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocLogicNodeRequest_descriptor_,
      AllocLogicNodeRequest::default_instance_,
      AllocLogicNodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocLogicNodeRequest));
  AllocLogicNodeResponse_descriptor_ = file->message_type(24);
  static const int AllocLogicNodeResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, character_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, dst_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, dst_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, logic_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, logic_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, logic_token_),
  };
  AllocLogicNodeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllocLogicNodeResponse_descriptor_,
      AllocLogicNodeResponse::default_instance_,
      AllocLogicNodeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocLogicNodeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllocLogicNodeResponse));
  ClientNotifyToClient_descriptor_ = file->message_type(25);
  static const int ClientNotifyToClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyToClient, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyToClient, event_),
  };
  ClientNotifyToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientNotifyToClient_descriptor_,
      ClientNotifyToClient::default_instance_,
      ClientNotifyToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientNotifyToClient));
  DBProxyAddrInfo_descriptor_ = file->message_type(26);
  static const int DBProxyAddrInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyAddrInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyAddrInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyAddrInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyAddrInfo, ip_),
  };
  DBProxyAddrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBProxyAddrInfo_descriptor_,
      DBProxyAddrInfo::default_instance_,
      DBProxyAddrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyAddrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyAddrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBProxyAddrInfo));
  CenterRspSceneId_descriptor_ = file->message_type(27);
  static const int CenterRspSceneId_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, dstsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, dstpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, dstmapid_),
  };
  CenterRspSceneId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterRspSceneId_descriptor_,
      CenterRspSceneId::default_instance_,
      CenterRspSceneId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRspSceneId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterRspSceneId));
  CenterDailyUpdateNotify_descriptor_ = file->message_type(28);
  static const int CenterDailyUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterDailyUpdateNotify, updatedailytime_),
  };
  CenterDailyUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterDailyUpdateNotify_descriptor_,
      CenterDailyUpdateNotify::default_instance_,
      CenterDailyUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterDailyUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterDailyUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterDailyUpdateNotify));
  CenterWeekUpdateNotify_descriptor_ = file->message_type(29);
  static const int CenterWeekUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterWeekUpdateNotify, updatedailytime_),
  };
  CenterWeekUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterWeekUpdateNotify_descriptor_,
      CenterWeekUpdateNotify::default_instance_,
      CenterWeekUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterWeekUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterWeekUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterWeekUpdateNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fServerInternalProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginServerRegiste_descriptor_, &LoginServerRegiste::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicServerRegiste_descriptor_, &LogicServerRegiste::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginServerState_descriptor_, &LoginServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicServerState_descriptor_, &LogicServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginCheckReq_descriptor_, &AccountLoginCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginCheckRsp_descriptor_, &AccountLoginCheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLogoutNotify_descriptor_, &AccountLogoutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicCheckTokenReq_descriptor_, &LogicCheckTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicCheckTokenRsp_descriptor_, &LogicCheckTokenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickChannelUserNotify_descriptor_, &KickChannelUserNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterAccountLogoutNotify_descriptor_, &CenterAccountLogoutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectCheckRequest_descriptor_, &ReconnectCheckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectCheckResponse_descriptor_, &ReconnectCheckResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicServerAddressReq_descriptor_, &LogicServerAddressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginLogicRequest_descriptor_, &LoginLogicRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginLogicResponse_descriptor_, &LoginLogicResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginLogicResponse_SwitchServerParam_descriptor_, &LoginLogicResponse_SwitchServerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchServerBeginNotify_descriptor_, &SwitchServerBeginNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastToLogicServer_descriptor_, &BroadcastToLogicServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenterCreateChar_descriptor_, &LogicToCenterCreateChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenterDelChar_descriptor_, &LogicToCenterDelChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToCenterCharSync_descriptor_, &LogicToCenterCharSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterLogicRequest_descriptor_, &EnterLogicRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutLogicRequest_descriptor_, &LogoutLogicRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocLogicNodeRequest_descriptor_, &AllocLogicNodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllocLogicNodeResponse_descriptor_, &AllocLogicNodeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientNotifyToClient_descriptor_, &ClientNotifyToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBProxyAddrInfo_descriptor_, &DBProxyAddrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterRspSceneId_descriptor_, &CenterRspSceneId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterDailyUpdateNotify_descriptor_, &CenterDailyUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterWeekUpdateNotify_descriptor_, &CenterWeekUpdateNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fServerInternalProtocol_2eproto() {
  delete LoginServerRegiste::default_instance_;
  delete LoginServerRegiste_reflection_;
  delete LogicServerRegiste::default_instance_;
  delete LogicServerRegiste_reflection_;
  delete LoginServerState::default_instance_;
  delete LoginServerState_reflection_;
  delete LogicServerState::default_instance_;
  delete LogicServerState_reflection_;
  delete AccountLoginCheckReq::default_instance_;
  delete AccountLoginCheckReq_reflection_;
  delete AccountLoginCheckRsp::default_instance_;
  delete AccountLoginCheckRsp_reflection_;
  delete AccountLogoutNotify::default_instance_;
  delete AccountLogoutNotify_reflection_;
  delete LogicCheckTokenReq::default_instance_;
  delete LogicCheckTokenReq_reflection_;
  delete LogicCheckTokenRsp::default_instance_;
  delete LogicCheckTokenRsp_reflection_;
  delete KickChannelUserNotify::default_instance_;
  delete KickChannelUserNotify_reflection_;
  delete CenterAccountLogoutNotify::default_instance_;
  delete CenterAccountLogoutNotify_reflection_;
  delete ReconnectCheckRequest::default_instance_;
  delete ReconnectCheckRequest_reflection_;
  delete ReconnectCheckResponse::default_instance_;
  delete ReconnectCheckResponse_reflection_;
  delete LogicServerAddressReq::default_instance_;
  delete LogicServerAddressReq_reflection_;
  delete LoginLogicRequest::default_instance_;
  delete LoginLogicRequest_reflection_;
  delete LoginLogicResponse::default_instance_;
  delete LoginLogicResponse_reflection_;
  delete LoginLogicResponse_SwitchServerParam::default_instance_;
  delete LoginLogicResponse_SwitchServerParam_reflection_;
  delete SwitchServerBeginNotify::default_instance_;
  delete SwitchServerBeginNotify_reflection_;
  delete BroadcastToLogicServer::default_instance_;
  delete BroadcastToLogicServer_reflection_;
  delete LogicToCenterCreateChar::default_instance_;
  delete LogicToCenterCreateChar_reflection_;
  delete LogicToCenterDelChar::default_instance_;
  delete LogicToCenterDelChar_reflection_;
  delete LogicToCenterCharSync::default_instance_;
  delete LogicToCenterCharSync_reflection_;
  delete EnterLogicRequest::default_instance_;
  delete EnterLogicRequest_reflection_;
  delete LogoutLogicRequest::default_instance_;
  delete LogoutLogicRequest_reflection_;
  delete AllocLogicNodeRequest::default_instance_;
  delete AllocLogicNodeRequest_reflection_;
  delete AllocLogicNodeResponse::default_instance_;
  delete AllocLogicNodeResponse_reflection_;
  delete ClientNotifyToClient::default_instance_;
  delete ClientNotifyToClient_reflection_;
  delete DBProxyAddrInfo::default_instance_;
  delete DBProxyAddrInfo_reflection_;
  delete CenterRspSceneId::default_instance_;
  delete CenterRspSceneId_reflection_;
  delete CenterDailyUpdateNotify::default_instance_;
  delete CenterDailyUpdateNotify_reflection_;
  delete CenterWeekUpdateNotify::default_instance_;
  delete CenterWeekUpdateNotify_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(ProtoBuffer/ServerInternalProtocol.pro"
    "to\022\010ProtoBuf\032\035ProtoBuffer/ComProtocol.pr"
    "oto\032\026Common/ComDefine.proto\"[\n\022LoginServ"
    "erRegiste\022\017\n\007groupId\030\001 \002(\r\022\020\n\010serverId\030\002"
    " \002(\r\022\021\n\touterPort\030\003 \002(\r\022\017\n\007outerIp\030\004 \002(\t"
    "\"\240\001\n\022LogicServerRegiste\022\021\n\tserver_id\030\001 \002"
    "(\r\022\022\n\nouter_port\030\002 \002(\r\022\020\n\010outer_ip\030\003 \002(\t"
    "\022/\n\004type\030\004 \002(\0162!.ProtoBuf.LogicServerReg"
    "iste.TYPE\" \n\004TYPE\022\t\n\005FIRST\020\001\022\r\n\tRECONNEC"
    "T\020\002\"!\n\020LoginServerState\022\r\n\005state\030\001 \002(\r\"i"
    "\n\020LogicServerState\022\r\n\005state\030\001 \002(\r\022\026\n\016cha"
    "racterCount\030\002 \002(\r\022\023\n\013playerCount\030\003 \002(\r\022\031"
    "\n\021enterAccountCount\030\004 \002(\r\"C\n\024AccountLogi"
    "nCheckReq\022\027\n\017channel_user_id\030\001 \002(\t\022\022\n\nse"
    "ssion_id\030\002 \002(\r\"\220\001\n\024AccountLoginCheckRsp\022"
    "\027\n\017channel_user_id\030\001 \002(\t\022\020\n\010group_id\030\002 \002"
    "(\r\022\020\n\010logic_ip\030\003 \002(\t\022\022\n\nlogic_port\030\004 \002(\r"
    "\022\023\n\013logic_token\030\005 \002(\004\022\022\n\nsession_id\030\006 \002("
    "\r\".\n\023AccountLogoutNotify\022\027\n\017channel_user"
    "_id\030\001 \002(\t\"B\n\022LogicCheckTokenReq\022\027\n\017chann"
    "el_user_id\030\001 \002(\t\022\023\n\013logic_token\030\002 \002(\004\">\n"
    "\022LogicCheckTokenRsp\022\017\n\007retcode\030\001 \002(\005\022\027\n\017"
    "channel_user_id\030\002 \002(\t\"@\n\025KickChannelUser"
    "Notify\022\027\n\017channel_user_id\030\001 \002(\t\022\016\n\006charI"
    "D\030\002 \002(\r\"\235\001\n\031CenterAccountLogoutNotify\0226\n"
    "\004type\030\001 \002(\0162(.ProtoBuf.CenterAccountLogo"
    "utNotify.TYPE\022\027\n\017channel_user_id\030\002 \002(\t\"/"
    "\n\004TYPE\022\021\n\rTOKEN_EXPIRED\020\001\022\024\n\020CHARACTER_L"
    "OGOUT\020\002\"\210\001\n\025ReconnectCheckRequest\022\016\n\006cha"
    "rId\030\001 \002(\r\022\027\n\017channel_user_id\030\002 \002(\t\022\024\n\014ac"
    "countIndex\030\003 \002(\r\022\r\n\005token\030\004 \002(\004\022\021\n\tchann"
    "elId\030\005 \002(\t\022\016\n\006userId\030\006 \002(\t\"\232\001\n\026Reconnect"
    "CheckResponse\022\017\n\007retCode\030\001 \002(\r\022\016\n\006charId"
    "\030\002 \002(\r\022\027\n\017channel_user_id\030\003 \002(\t\022\024\n\014accou"
    "ntIndex\030\004 \002(\r\022\r\n\005token\030\005 \002(\004\022\021\n\tchannelI"
    "d\030\006 \002(\t\022\016\n\006userId\030\007 \002(\t\"N\n\025LogicServerAd"
    "dressReq\022\020\n\010app_guid\030\001 \002(\t\022\022\n\nchannel_id"
    "\030\002 \002(\t\022\017\n\007user_id\030\003 \002(\t\"d\n\021LoginLogicReq"
    "uest\022\025\n\rconnect_index\030\001 \002(\r\022\027\n\017channel_u"
    "ser_id\030\002 \002(\t\022\r\n\005token\030\003 \002(\004\022\020\n\010group_id\030"
    "\004 \002(\r\"\272\004\n\022LoginLogicResponse\022\025\n\rconnect_"
    "index\030\001 \002(\r\0223\n\006result\030\002 \002(\0162#.ProtoBuf.L"
    "oginLogicResponse.RESULT\022\027\n\017channel_user"
    "_id\030\003 \001(\t\022\020\n\010group_id\030\004 \001(\r\022\032\n\022switch_se"
    "rver_flag\030\006 \001(\r\022K\n\023switch_server_param\030\007"
    " \001(\0132..ProtoBuf.LoginLogicResponse.Switc"
    "hServerParam\032\213\002\n\021SwitchServerParam\022\024\n\014ch"
    "aracter_id\030\001 \002(\r\022 \n\030source_scene_templat"
    "e_id\030\002 \002(\r\022\025\n\rsource_pose_x\030\003 \002(\002\022\025\n\rsou"
    "rce_pose_y\030\004 \002(\002\022\036\n\026dest_scene_template_"
    "id\030\005 \002(\r\022\036\n\026dest_scene_instance_id\030\006 \002(\r"
    "\022\034\n\024dest_scene_enter_key\030\007 \002(\004\022\030\n\020dest_s"
    "cene_pos_x\030\010 \002(\002\022\030\n\020dest_scene_pos_y\030\t \002"
    "(\002\"6\n\006RESULT\022\026\n\022LOGIN_LOGIC_SUCESS\020\000\022\024\n\020"
    "LOGIN_LOGIC_FAIL\020\001\"\325\002\n\027SwitchServerBegin"
    "Notify\022\022\n\nchannel_id\030\001 \002(\t\022\017\n\007user_id\030\002 "
    "\002(\t\022\024\n\014character_id\030\003 \002(\r\022 \n\030source_scen"
    "e_template_id\030\004 \002(\r\022\025\n\rsource_pose_x\030\005 \002"
    "(\002\022\025\n\rsource_pose_y\030\006 \002(\002\022\035\n\025dest_logic_"
    "service_id\030\007 \002(\r\022\036\n\026dest_scene_template_"
    "id\030\010 \002(\r\022\036\n\026dest_scene_instance_id\030\t \002(\r"
    "\022\034\n\024dest_scene_enter_key\030\n \002(\004\022\030\n\020dest_s"
    "cene_pos_x\030\013 \002(\002\022\030\n\020dest_scene_pos_y\030\014 \002"
    "(\002\"6\n\026BroadcastToLogicServer\022\017\n\007groupId\030"
    "\001 \002(\r\022\013\n\003msg\030\002 \002(\014\"V\n\027LogicToCenterCreat"
    "eChar\022\016\n\006charID\030\001 \002(\r\022+\n\004base\030\002 \002(\0132\035.Pr"
    "otoBuf.CharacterDBBaseInfo\"\?\n\024LogicToCen"
    "terDelChar\022\016\n\006charID\030\001 \002(\r\022\027\n\017channel_us"
    "er_id\030\002 \002(\t\"\214\001\n\025LogicToCenterCharSync\022\016\n"
    "\006charID\030\001 \002(\r\022(\n\010attrlist\030\002 \003(\0132\026.ProtoB"
    "uf.CharSyncAttr\022&\n\005equip\030\003 \003(\0132\027.ProtoBu"
    "f.ItemProtoInfo\022\021\n\tall_equip\030\004 \001(\005\"\254\002\n\021E"
    "nterLogicRequest\022\024\n\014character_id\030\001 \002(\r\022\022"
    "\n\nchannel_id\030\002 \002(\t\022\017\n\007user_id\030\003 \002(\t\022\r\n\005t"
    "oken\030\004 \002(\004\022\027\n\017channel_user_id\030\005 \002(\t\0227\n\016c"
    "harSimpleInfo\030\006 \002(\0132\037.ProtoBuf.Character"
    "DBSimpleInfo\022\016\n\006map_id\030\007 \001(\005\022\020\n\010scene_id"
    "\030\010 \001(\005\022&\n\005equip\030\t \003(\0132\027.ProtoBuf.ItemPro"
    "toInfo\0221\n\004attr\030\n \001(\0132#.ProtoBuf.Characte"
    "rDBAttrDetailInfo\"\370\001\n\022LogoutLogicRequest"
    "\022/\n\004flag\030\001 \002(\0162!.ProtoBuf.LogoutLogicReq"
    "uest.FLAG\022\024\n\014character_id\030\002 \002(\r\022\027\n\017chann"
    "el_user_id\030\003 \002(\t\022\r\n\005token\030\004 \002(\004\"s\n\004FLAG\022"
    "\026\n\022LOGOUT_FLAG_GAMING\020\000\022\027\n\023LOGOUT_FLAG_K"
    "ICKOUT\020\001\022\033\n\027LOGOUT_FLAG_LOGIN_BREAK\020\002\022\035\n"
    "\031LOGOUT_FLAG_SWITCH_SERVER\020\003\"k\n\025AllocLog"
    "icNodeRequest\022\024\n\014character_id\030\001 \002(\r\022\022\n\nc"
    "hannel_id\030\002 \002(\t\022\017\n\007user_id\030\003 \002(\t\022\027\n\017chan"
    "nel_user_id\030\005 \002(\t\"\341\001\n\026AllocLogicNodeResp"
    "onse\022\016\n\006result\030\001 \002(\005\022\024\n\014character_id\030\002 \002"
    "(\r\022\022\n\nchannel_id\030\003 \002(\t\022\017\n\007user_id\030\004 \002(\t\022"
    "\027\n\017channel_user_id\030\005 \002(\t\022\024\n\014dst_scene_id"
    "\030\006 \001(\r\022\022\n\ndst_map_id\030\007 \001(\r\022\020\n\010logic_ip\030\010"
    " \001(\t\022\022\n\nlogic_port\030\t \001(\r\022\023\n\013logic_token\030"
    "\n \001(\r\"5\n\024ClientNotifyToClient\022\016\n\006charId\030"
    "\001 \002(\r\022\r\n\005event\030\002 \002(\r\"N\n\017DBProxyAddrInfo\022"
    "\017\n\007groupId\030\001 \002(\r\022\020\n\010serverId\030\002 \002(\r\022\014\n\004Po"
    "rt\030\003 \002(\r\022\n\n\002Ip\030\004 \002(\t\"\227\001\n\020CenterRspSceneI"
    "d\022\017\n\007retCode\030\001 \002(\r\022\022\n\ndstSceneId\030\002 \001(\r\022#"
    "\n\006dstPos\030\003 \001(\0132\023.ProtoBuf.Vector3PB\022\n\n\002i"
    "p\030\004 \001(\t\022\014\n\004port\030\005 \001(\r\022\r\n\005token\030\006 \001(\t\022\020\n\010"
    "dstMapId\030\007 \001(\r\"2\n\027CenterDailyUpdateNotif"
    "y\022\027\n\017updateDailyTime\030\001 \001(\004\"1\n\026CenterWeek"
    "UpdateNotify\022\027\n\017updateDailyTime\030\001 \001(\004", 4157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/ServerInternalProtocol.proto", &protobuf_RegisterTypes);
  LoginServerRegiste::default_instance_ = new LoginServerRegiste();
  LogicServerRegiste::default_instance_ = new LogicServerRegiste();
  LoginServerState::default_instance_ = new LoginServerState();
  LogicServerState::default_instance_ = new LogicServerState();
  AccountLoginCheckReq::default_instance_ = new AccountLoginCheckReq();
  AccountLoginCheckRsp::default_instance_ = new AccountLoginCheckRsp();
  AccountLogoutNotify::default_instance_ = new AccountLogoutNotify();
  LogicCheckTokenReq::default_instance_ = new LogicCheckTokenReq();
  LogicCheckTokenRsp::default_instance_ = new LogicCheckTokenRsp();
  KickChannelUserNotify::default_instance_ = new KickChannelUserNotify();
  CenterAccountLogoutNotify::default_instance_ = new CenterAccountLogoutNotify();
  ReconnectCheckRequest::default_instance_ = new ReconnectCheckRequest();
  ReconnectCheckResponse::default_instance_ = new ReconnectCheckResponse();
  LogicServerAddressReq::default_instance_ = new LogicServerAddressReq();
  LoginLogicRequest::default_instance_ = new LoginLogicRequest();
  LoginLogicResponse::default_instance_ = new LoginLogicResponse();
  LoginLogicResponse_SwitchServerParam::default_instance_ = new LoginLogicResponse_SwitchServerParam();
  SwitchServerBeginNotify::default_instance_ = new SwitchServerBeginNotify();
  BroadcastToLogicServer::default_instance_ = new BroadcastToLogicServer();
  LogicToCenterCreateChar::default_instance_ = new LogicToCenterCreateChar();
  LogicToCenterDelChar::default_instance_ = new LogicToCenterDelChar();
  LogicToCenterCharSync::default_instance_ = new LogicToCenterCharSync();
  EnterLogicRequest::default_instance_ = new EnterLogicRequest();
  LogoutLogicRequest::default_instance_ = new LogoutLogicRequest();
  AllocLogicNodeRequest::default_instance_ = new AllocLogicNodeRequest();
  AllocLogicNodeResponse::default_instance_ = new AllocLogicNodeResponse();
  ClientNotifyToClient::default_instance_ = new ClientNotifyToClient();
  DBProxyAddrInfo::default_instance_ = new DBProxyAddrInfo();
  CenterRspSceneId::default_instance_ = new CenterRspSceneId();
  CenterDailyUpdateNotify::default_instance_ = new CenterDailyUpdateNotify();
  CenterWeekUpdateNotify::default_instance_ = new CenterWeekUpdateNotify();
  LoginServerRegiste::default_instance_->InitAsDefaultInstance();
  LogicServerRegiste::default_instance_->InitAsDefaultInstance();
  LoginServerState::default_instance_->InitAsDefaultInstance();
  LogicServerState::default_instance_->InitAsDefaultInstance();
  AccountLoginCheckReq::default_instance_->InitAsDefaultInstance();
  AccountLoginCheckRsp::default_instance_->InitAsDefaultInstance();
  AccountLogoutNotify::default_instance_->InitAsDefaultInstance();
  LogicCheckTokenReq::default_instance_->InitAsDefaultInstance();
  LogicCheckTokenRsp::default_instance_->InitAsDefaultInstance();
  KickChannelUserNotify::default_instance_->InitAsDefaultInstance();
  CenterAccountLogoutNotify::default_instance_->InitAsDefaultInstance();
  ReconnectCheckRequest::default_instance_->InitAsDefaultInstance();
  ReconnectCheckResponse::default_instance_->InitAsDefaultInstance();
  LogicServerAddressReq::default_instance_->InitAsDefaultInstance();
  LoginLogicRequest::default_instance_->InitAsDefaultInstance();
  LoginLogicResponse::default_instance_->InitAsDefaultInstance();
  LoginLogicResponse_SwitchServerParam::default_instance_->InitAsDefaultInstance();
  SwitchServerBeginNotify::default_instance_->InitAsDefaultInstance();
  BroadcastToLogicServer::default_instance_->InitAsDefaultInstance();
  LogicToCenterCreateChar::default_instance_->InitAsDefaultInstance();
  LogicToCenterDelChar::default_instance_->InitAsDefaultInstance();
  LogicToCenterCharSync::default_instance_->InitAsDefaultInstance();
  EnterLogicRequest::default_instance_->InitAsDefaultInstance();
  LogoutLogicRequest::default_instance_->InitAsDefaultInstance();
  AllocLogicNodeRequest::default_instance_->InitAsDefaultInstance();
  AllocLogicNodeResponse::default_instance_->InitAsDefaultInstance();
  ClientNotifyToClient::default_instance_->InitAsDefaultInstance();
  DBProxyAddrInfo::default_instance_->InitAsDefaultInstance();
  CenterRspSceneId::default_instance_->InitAsDefaultInstance();
  CenterDailyUpdateNotify::default_instance_->InitAsDefaultInstance();
  CenterWeekUpdateNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fServerInternalProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fServerInternalProtocol_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fServerInternalProtocol_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fServerInternalProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginServerRegiste::kGroupIdFieldNumber;
const int LoginServerRegiste::kServerIdFieldNumber;
const int LoginServerRegiste::kOuterPortFieldNumber;
const int LoginServerRegiste::kOuterIpFieldNumber;
#endif  // !_MSC_VER

LoginServerRegiste::LoginServerRegiste()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginServerRegiste::InitAsDefaultInstance() {
}

LoginServerRegiste::LoginServerRegiste(const LoginServerRegiste& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginServerRegiste::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  serverid_ = 0u;
  outerport_ = 0u;
  outerip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginServerRegiste::~LoginServerRegiste() {
  SharedDtor();
}

void LoginServerRegiste::SharedDtor() {
  if (outerip_ != &::google::protobuf::internal::kEmptyString) {
    delete outerip_;
  }
  if (this != default_instance_) {
  }
}

void LoginServerRegiste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginServerRegiste::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginServerRegiste_descriptor_;
}

const LoginServerRegiste& LoginServerRegiste::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LoginServerRegiste* LoginServerRegiste::default_instance_ = NULL;

LoginServerRegiste* LoginServerRegiste::New() const {
  return new LoginServerRegiste;
}

void LoginServerRegiste::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    serverid_ = 0u;
    outerport_ = 0u;
    if (has_outerip()) {
      if (outerip_ != &::google::protobuf::internal::kEmptyString) {
        outerip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginServerRegiste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverId;
        break;
      }

      // required uint32 serverId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outerPort;
        break;
      }

      // required uint32 outerPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outerport_)));
          set_has_outerport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outerIp;
        break;
      }

      // required string outerIp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outerIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outerip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outerip().data(), this->outerip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginServerRegiste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // required uint32 serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint32 outerPort = 3;
  if (has_outerport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->outerport(), output);
  }

  // required string outerIp = 4;
  if (has_outerip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outerip().data(), this->outerip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->outerip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginServerRegiste::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // required uint32 serverId = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint32 outerPort = 3;
  if (has_outerport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->outerport(), target);
  }

  // required string outerIp = 4;
  if (has_outerip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outerip().data(), this->outerip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->outerip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginServerRegiste::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required uint32 serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 outerPort = 3;
    if (has_outerport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outerport());
    }

    // required string outerIp = 4;
    if (has_outerip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outerip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginServerRegiste::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginServerRegiste* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginServerRegiste*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginServerRegiste::MergeFrom(const LoginServerRegiste& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_outerport()) {
      set_outerport(from.outerport());
    }
    if (from.has_outerip()) {
      set_outerip(from.outerip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginServerRegiste::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerRegiste::CopyFrom(const LoginServerRegiste& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerRegiste::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginServerRegiste::Swap(LoginServerRegiste* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(serverid_, other->serverid_);
    std::swap(outerport_, other->outerport_);
    std::swap(outerip_, other->outerip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginServerRegiste::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginServerRegiste_descriptor_;
  metadata.reflection = LoginServerRegiste_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogicServerRegiste_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerRegiste_TYPE_descriptor_;
}
bool LogicServerRegiste_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogicServerRegiste_TYPE LogicServerRegiste::FIRST;
const LogicServerRegiste_TYPE LogicServerRegiste::RECONNECT;
const LogicServerRegiste_TYPE LogicServerRegiste::TYPE_MIN;
const LogicServerRegiste_TYPE LogicServerRegiste::TYPE_MAX;
const int LogicServerRegiste::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogicServerRegiste::kServerIdFieldNumber;
const int LogicServerRegiste::kOuterPortFieldNumber;
const int LogicServerRegiste::kOuterIpFieldNumber;
const int LogicServerRegiste::kTypeFieldNumber;
#endif  // !_MSC_VER

LogicServerRegiste::LogicServerRegiste()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicServerRegiste::InitAsDefaultInstance() {
}

LogicServerRegiste::LogicServerRegiste(const LogicServerRegiste& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicServerRegiste::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  outer_port_ = 0u;
  outer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicServerRegiste::~LogicServerRegiste() {
  SharedDtor();
}

void LogicServerRegiste::SharedDtor() {
  if (outer_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete outer_ip_;
  }
  if (this != default_instance_) {
  }
}

void LogicServerRegiste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerRegiste::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerRegiste_descriptor_;
}

const LogicServerRegiste& LogicServerRegiste::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicServerRegiste* LogicServerRegiste::default_instance_ = NULL;

LogicServerRegiste* LogicServerRegiste::New() const {
  return new LogicServerRegiste;
}

void LogicServerRegiste::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    outer_port_ = 0u;
    if (has_outer_ip()) {
      if (outer_ip_ != &::google::protobuf::internal::kEmptyString) {
        outer_ip_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicServerRegiste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outer_port;
        break;
      }

      // required uint32 outer_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outer_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outer_port_)));
          set_has_outer_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_outer_ip;
        break;
      }

      // required string outer_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outer_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outer_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outer_ip().data(), this->outer_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .ProtoBuf.LogicServerRegiste.TYPE type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::LogicServerRegiste_TYPE_IsValid(value)) {
            set_type(static_cast< ::ProtoBuf::LogicServerRegiste_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicServerRegiste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // required uint32 outer_port = 2;
  if (has_outer_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->outer_port(), output);
  }

  // required string outer_ip = 3;
  if (has_outer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outer_ip().data(), this->outer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->outer_ip(), output);
  }

  // required .ProtoBuf.LogicServerRegiste.TYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicServerRegiste::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // required uint32 outer_port = 2;
  if (has_outer_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->outer_port(), target);
  }

  // required string outer_ip = 3;
  if (has_outer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outer_ip().data(), this->outer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->outer_ip(), target);
  }

  // required .ProtoBuf.LogicServerRegiste.TYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicServerRegiste::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // required uint32 outer_port = 2;
    if (has_outer_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outer_port());
    }

    // required string outer_ip = 3;
    if (has_outer_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outer_ip());
    }

    // required .ProtoBuf.LogicServerRegiste.TYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerRegiste::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicServerRegiste* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicServerRegiste*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicServerRegiste::MergeFrom(const LogicServerRegiste& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_outer_port()) {
      set_outer_port(from.outer_port());
    }
    if (from.has_outer_ip()) {
      set_outer_ip(from.outer_ip());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicServerRegiste::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerRegiste::CopyFrom(const LogicServerRegiste& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerRegiste::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogicServerRegiste::Swap(LogicServerRegiste* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(outer_port_, other->outer_port_);
    std::swap(outer_ip_, other->outer_ip_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicServerRegiste::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerRegiste_descriptor_;
  metadata.reflection = LogicServerRegiste_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginServerState::kStateFieldNumber;
#endif  // !_MSC_VER

LoginServerState::LoginServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginServerState::InitAsDefaultInstance() {
}

LoginServerState::LoginServerState(const LoginServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginServerState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginServerState::~LoginServerState() {
  SharedDtor();
}

void LoginServerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginServerState_descriptor_;
}

const LoginServerState& LoginServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LoginServerState* LoginServerState::default_instance_ = NULL;

LoginServerState* LoginServerState::New() const {
  return new LoginServerState;
}

void LoginServerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginServerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginServerState::MergeFrom(const LoginServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerState::CopyFrom(const LoginServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginServerState::Swap(LoginServerState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginServerState_descriptor_;
  metadata.reflection = LoginServerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicServerState::kStateFieldNumber;
const int LogicServerState::kCharacterCountFieldNumber;
const int LogicServerState::kPlayerCountFieldNumber;
const int LogicServerState::kEnterAccountCountFieldNumber;
#endif  // !_MSC_VER

LogicServerState::LogicServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicServerState::InitAsDefaultInstance() {
}

LogicServerState::LogicServerState(const LogicServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicServerState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  charactercount_ = 0u;
  playercount_ = 0u;
  enteraccountcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicServerState::~LogicServerState() {
  SharedDtor();
}

void LogicServerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerState_descriptor_;
}

const LogicServerState& LogicServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicServerState* LogicServerState::default_instance_ = NULL;

LogicServerState* LogicServerState::New() const {
  return new LogicServerState;
}

void LogicServerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
    charactercount_ = 0u;
    playercount_ = 0u;
    enteraccountcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_characterCount;
        break;
      }

      // required uint32 characterCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_characterCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charactercount_)));
          set_has_charactercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerCount;
        break;
      }

      // required uint32 playerCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enterAccountCount;
        break;
      }

      // required uint32 enterAccountCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterAccountCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enteraccountcount_)));
          set_has_enteraccountcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // required uint32 characterCount = 2;
  if (has_charactercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charactercount(), output);
  }

  // required uint32 playerCount = 3;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playercount(), output);
  }

  // required uint32 enterAccountCount = 4;
  if (has_enteraccountcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enteraccountcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // required uint32 characterCount = 2;
  if (has_charactercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charactercount(), target);
  }

  // required uint32 playerCount = 3;
  if (has_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playercount(), target);
  }

  // required uint32 enterAccountCount = 4;
  if (has_enteraccountcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enteraccountcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicServerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 characterCount = 2;
    if (has_charactercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charactercount());
    }

    // required uint32 playerCount = 3;
    if (has_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playercount());
    }

    // required uint32 enterAccountCount = 4;
    if (has_enteraccountcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enteraccountcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicServerState::MergeFrom(const LogicServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_charactercount()) {
      set_charactercount(from.charactercount());
    }
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
    if (from.has_enteraccountcount()) {
      set_enteraccountcount(from.enteraccountcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerState::CopyFrom(const LogicServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogicServerState::Swap(LogicServerState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(charactercount_, other->charactercount_);
    std::swap(playercount_, other->playercount_);
    std::swap(enteraccountcount_, other->enteraccountcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerState_descriptor_;
  metadata.reflection = LogicServerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginCheckReq::kChannelUserIdFieldNumber;
const int AccountLoginCheckReq::kSessionIdFieldNumber;
#endif  // !_MSC_VER

AccountLoginCheckReq::AccountLoginCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginCheckReq::InitAsDefaultInstance() {
}

AccountLoginCheckReq::AccountLoginCheckReq(const AccountLoginCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginCheckReq::SharedCtor() {
  _cached_size_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginCheckReq::~AccountLoginCheckReq() {
  SharedDtor();
}

void AccountLoginCheckReq::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginCheckReq_descriptor_;
}

const AccountLoginCheckReq& AccountLoginCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

AccountLoginCheckReq* AccountLoginCheckReq::default_instance_ = NULL;

AccountLoginCheckReq* AccountLoginCheckReq::New() const {
  return new AccountLoginCheckReq;
}

void AccountLoginCheckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_user_id(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_user_id = 1;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginCheckReq::MergeFrom(const AccountLoginCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginCheckReq::CopyFrom(const AccountLoginCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginCheckReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccountLoginCheckReq::Swap(AccountLoginCheckReq* other) {
  if (other != this) {
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginCheckReq_descriptor_;
  metadata.reflection = AccountLoginCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginCheckRsp::kChannelUserIdFieldNumber;
const int AccountLoginCheckRsp::kGroupIdFieldNumber;
const int AccountLoginCheckRsp::kLogicIpFieldNumber;
const int AccountLoginCheckRsp::kLogicPortFieldNumber;
const int AccountLoginCheckRsp::kLogicTokenFieldNumber;
const int AccountLoginCheckRsp::kSessionIdFieldNumber;
#endif  // !_MSC_VER

AccountLoginCheckRsp::AccountLoginCheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginCheckRsp::InitAsDefaultInstance() {
}

AccountLoginCheckRsp::AccountLoginCheckRsp(const AccountLoginCheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginCheckRsp::SharedCtor() {
  _cached_size_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = 0u;
  logic_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logic_port_ = 0u;
  logic_token_ = GOOGLE_ULONGLONG(0);
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginCheckRsp::~AccountLoginCheckRsp() {
  SharedDtor();
}

void AccountLoginCheckRsp::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (logic_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete logic_ip_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginCheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginCheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginCheckRsp_descriptor_;
}

const AccountLoginCheckRsp& AccountLoginCheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

AccountLoginCheckRsp* AccountLoginCheckRsp::default_instance_ = NULL;

AccountLoginCheckRsp* AccountLoginCheckRsp::New() const {
  return new AccountLoginCheckRsp;
}

void AccountLoginCheckRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    group_id_ = 0u;
    if (has_logic_ip()) {
      if (logic_ip_ != &::google::protobuf::internal::kEmptyString) {
        logic_ip_->clear();
      }
    }
    logic_port_ = 0u;
    logic_token_ = GOOGLE_ULONGLONG(0);
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logic_ip;
        break;
      }

      // required string logic_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logic_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_ip().data(), this->logic_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logic_port;
        break;
      }

      // required uint32 logic_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_port_)));
          set_has_logic_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logic_token;
        break;
      }

      // required uint64 logic_token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logic_token_)));
          set_has_logic_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_user_id(), output);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // required string logic_ip = 3;
  if (has_logic_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_ip().data(), this->logic_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->logic_ip(), output);
  }

  // required uint32 logic_port = 4;
  if (has_logic_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logic_port(), output);
  }

  // required uint64 logic_token = 5;
  if (has_logic_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logic_token(), output);
  }

  // required uint32 session_id = 6;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginCheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_user_id(), target);
  }

  // required uint32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // required string logic_ip = 3;
  if (has_logic_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_ip().data(), this->logic_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logic_ip(), target);
  }

  // required uint32 logic_port = 4;
  if (has_logic_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logic_port(), target);
  }

  // required uint64 logic_token = 5;
  if (has_logic_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logic_token(), target);
  }

  // required uint32 session_id = 6;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginCheckRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_user_id = 1;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string logic_ip = 3;
    if (has_logic_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logic_ip());
    }

    // required uint32 logic_port = 4;
    if (has_logic_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_port());
    }

    // required uint64 logic_token = 5;
    if (has_logic_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logic_token());
    }

    // required uint32 session_id = 6;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginCheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginCheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginCheckRsp::MergeFrom(const AccountLoginCheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_logic_ip()) {
      set_logic_ip(from.logic_ip());
    }
    if (from.has_logic_port()) {
      set_logic_port(from.logic_port());
    }
    if (from.has_logic_token()) {
      set_logic_token(from.logic_token());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginCheckRsp::CopyFrom(const AccountLoginCheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginCheckRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AccountLoginCheckRsp::Swap(AccountLoginCheckRsp* other) {
  if (other != this) {
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(logic_ip_, other->logic_ip_);
    std::swap(logic_port_, other->logic_port_);
    std::swap(logic_token_, other->logic_token_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginCheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginCheckRsp_descriptor_;
  metadata.reflection = AccountLoginCheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLogoutNotify::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

AccountLogoutNotify::AccountLogoutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLogoutNotify::InitAsDefaultInstance() {
}

AccountLogoutNotify::AccountLogoutNotify(const AccountLogoutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLogoutNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLogoutNotify::~AccountLogoutNotify() {
  SharedDtor();
}

void AccountLogoutNotify::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void AccountLogoutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLogoutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLogoutNotify_descriptor_;
}

const AccountLogoutNotify& AccountLogoutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

AccountLogoutNotify* AccountLogoutNotify::default_instance_ = NULL;

AccountLogoutNotify* AccountLogoutNotify::New() const {
  return new AccountLogoutNotify;
}

void AccountLogoutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLogoutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLogoutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLogoutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLogoutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_user_id = 1;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLogoutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLogoutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLogoutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLogoutNotify::MergeFrom(const AccountLogoutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLogoutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLogoutNotify::CopyFrom(const AccountLogoutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLogoutNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountLogoutNotify::Swap(AccountLogoutNotify* other) {
  if (other != this) {
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLogoutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLogoutNotify_descriptor_;
  metadata.reflection = AccountLogoutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicCheckTokenReq::kChannelUserIdFieldNumber;
const int LogicCheckTokenReq::kLogicTokenFieldNumber;
#endif  // !_MSC_VER

LogicCheckTokenReq::LogicCheckTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicCheckTokenReq::InitAsDefaultInstance() {
}

LogicCheckTokenReq::LogicCheckTokenReq(const LogicCheckTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicCheckTokenReq::SharedCtor() {
  _cached_size_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logic_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicCheckTokenReq::~LogicCheckTokenReq() {
  SharedDtor();
}

void LogicCheckTokenReq::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void LogicCheckTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicCheckTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicCheckTokenReq_descriptor_;
}

const LogicCheckTokenReq& LogicCheckTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicCheckTokenReq* LogicCheckTokenReq::default_instance_ = NULL;

LogicCheckTokenReq* LogicCheckTokenReq::New() const {
  return new LogicCheckTokenReq;
}

void LogicCheckTokenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    logic_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicCheckTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_token;
        break;
      }

      // required uint64 logic_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logic_token_)));
          set_has_logic_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicCheckTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_user_id(), output);
  }

  // required uint64 logic_token = 2;
  if (has_logic_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->logic_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicCheckTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_user_id(), target);
  }

  // required uint64 logic_token = 2;
  if (has_logic_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->logic_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicCheckTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_user_id = 1;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint64 logic_token = 2;
    if (has_logic_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logic_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicCheckTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicCheckTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicCheckTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicCheckTokenReq::MergeFrom(const LogicCheckTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_logic_token()) {
      set_logic_token(from.logic_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicCheckTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicCheckTokenReq::CopyFrom(const LogicCheckTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicCheckTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicCheckTokenReq::Swap(LogicCheckTokenReq* other) {
  if (other != this) {
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(logic_token_, other->logic_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicCheckTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicCheckTokenReq_descriptor_;
  metadata.reflection = LogicCheckTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicCheckTokenRsp::kRetcodeFieldNumber;
const int LogicCheckTokenRsp::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

LogicCheckTokenRsp::LogicCheckTokenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicCheckTokenRsp::InitAsDefaultInstance() {
}

LogicCheckTokenRsp::LogicCheckTokenRsp(const LogicCheckTokenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicCheckTokenRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicCheckTokenRsp::~LogicCheckTokenRsp() {
  SharedDtor();
}

void LogicCheckTokenRsp::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void LogicCheckTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicCheckTokenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicCheckTokenRsp_descriptor_;
}

const LogicCheckTokenRsp& LogicCheckTokenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicCheckTokenRsp* LogicCheckTokenRsp::default_instance_ = NULL;

LogicCheckTokenRsp* LogicCheckTokenRsp::New() const {
  return new LogicCheckTokenRsp;
}

void LogicCheckTokenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicCheckTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicCheckTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicCheckTokenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicCheckTokenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required string channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicCheckTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicCheckTokenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicCheckTokenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicCheckTokenRsp::MergeFrom(const LogicCheckTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicCheckTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicCheckTokenRsp::CopyFrom(const LogicCheckTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicCheckTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicCheckTokenRsp::Swap(LogicCheckTokenRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicCheckTokenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicCheckTokenRsp_descriptor_;
  metadata.reflection = LogicCheckTokenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickChannelUserNotify::kChannelUserIdFieldNumber;
const int KickChannelUserNotify::kCharIDFieldNumber;
#endif  // !_MSC_VER

KickChannelUserNotify::KickChannelUserNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickChannelUserNotify::InitAsDefaultInstance() {
}

KickChannelUserNotify::KickChannelUserNotify(const KickChannelUserNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickChannelUserNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickChannelUserNotify::~KickChannelUserNotify() {
  SharedDtor();
}

void KickChannelUserNotify::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void KickChannelUserNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickChannelUserNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickChannelUserNotify_descriptor_;
}

const KickChannelUserNotify& KickChannelUserNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

KickChannelUserNotify* KickChannelUserNotify::default_instance_ = NULL;

KickChannelUserNotify* KickChannelUserNotify::New() const {
  return new KickChannelUserNotify;
}

void KickChannelUserNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickChannelUserNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // required uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickChannelUserNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_user_id(), output);
  }

  // required uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickChannelUserNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_user_id(), target);
  }

  // required uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickChannelUserNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_user_id = 1;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickChannelUserNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickChannelUserNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickChannelUserNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickChannelUserNotify::MergeFrom(const KickChannelUserNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickChannelUserNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickChannelUserNotify::CopyFrom(const KickChannelUserNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickChannelUserNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KickChannelUserNotify::Swap(KickChannelUserNotify* other) {
  if (other != this) {
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickChannelUserNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickChannelUserNotify_descriptor_;
  metadata.reflection = KickChannelUserNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CenterAccountLogoutNotify_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterAccountLogoutNotify_TYPE_descriptor_;
}
bool CenterAccountLogoutNotify_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CenterAccountLogoutNotify_TYPE CenterAccountLogoutNotify::TOKEN_EXPIRED;
const CenterAccountLogoutNotify_TYPE CenterAccountLogoutNotify::CHARACTER_LOGOUT;
const CenterAccountLogoutNotify_TYPE CenterAccountLogoutNotify::TYPE_MIN;
const CenterAccountLogoutNotify_TYPE CenterAccountLogoutNotify::TYPE_MAX;
const int CenterAccountLogoutNotify::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CenterAccountLogoutNotify::kTypeFieldNumber;
const int CenterAccountLogoutNotify::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

CenterAccountLogoutNotify::CenterAccountLogoutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterAccountLogoutNotify::InitAsDefaultInstance() {
}

CenterAccountLogoutNotify::CenterAccountLogoutNotify(const CenterAccountLogoutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterAccountLogoutNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterAccountLogoutNotify::~CenterAccountLogoutNotify() {
  SharedDtor();
}

void CenterAccountLogoutNotify::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void CenterAccountLogoutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterAccountLogoutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterAccountLogoutNotify_descriptor_;
}

const CenterAccountLogoutNotify& CenterAccountLogoutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

CenterAccountLogoutNotify* CenterAccountLogoutNotify::default_instance_ = NULL;

CenterAccountLogoutNotify* CenterAccountLogoutNotify::New() const {
  return new CenterAccountLogoutNotify;
}

void CenterAccountLogoutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterAccountLogoutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.CenterAccountLogoutNotify.TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::CenterAccountLogoutNotify_TYPE_IsValid(value)) {
            set_type(static_cast< ::ProtoBuf::CenterAccountLogoutNotify_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterAccountLogoutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.CenterAccountLogoutNotify.TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterAccountLogoutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.CenterAccountLogoutNotify.TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterAccountLogoutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.CenterAccountLogoutNotify.TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterAccountLogoutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterAccountLogoutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterAccountLogoutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterAccountLogoutNotify::MergeFrom(const CenterAccountLogoutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterAccountLogoutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterAccountLogoutNotify::CopyFrom(const CenterAccountLogoutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterAccountLogoutNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CenterAccountLogoutNotify::Swap(CenterAccountLogoutNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterAccountLogoutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterAccountLogoutNotify_descriptor_;
  metadata.reflection = CenterAccountLogoutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectCheckRequest::kCharIdFieldNumber;
const int ReconnectCheckRequest::kChannelUserIdFieldNumber;
const int ReconnectCheckRequest::kAccountIndexFieldNumber;
const int ReconnectCheckRequest::kTokenFieldNumber;
const int ReconnectCheckRequest::kChannelIdFieldNumber;
const int ReconnectCheckRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

ReconnectCheckRequest::ReconnectCheckRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconnectCheckRequest::InitAsDefaultInstance() {
}

ReconnectCheckRequest::ReconnectCheckRequest(const ReconnectCheckRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconnectCheckRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountindex_ = 0u;
  token_ = GOOGLE_ULONGLONG(0);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectCheckRequest::~ReconnectCheckRequest() {
  SharedDtor();
}

void ReconnectCheckRequest::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectCheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectCheckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectCheckRequest_descriptor_;
}

const ReconnectCheckRequest& ReconnectCheckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

ReconnectCheckRequest* ReconnectCheckRequest::default_instance_ = NULL;

ReconnectCheckRequest* ReconnectCheckRequest::New() const {
  return new ReconnectCheckRequest;
}

void ReconnectCheckRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    accountindex_ = 0u;
    token_ = GOOGLE_ULONGLONG(0);
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountIndex;
        break;
      }

      // required uint32 accountIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountindex_)));
          set_has_accountindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_token;
        break;
      }

      // required uint64 token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channelId;
        break;
      }

      // required string channelId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_userId;
        break;
      }

      // required string userId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconnectCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_user_id(), output);
  }

  // required uint32 accountIndex = 3;
  if (has_accountindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountindex(), output);
  }

  // required uint64 token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->token(), output);
  }

  // required string channelId = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channelid(), output);
  }

  // required string userId = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconnectCheckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_user_id(), target);
  }

  // required uint32 accountIndex = 3;
  if (has_accountindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountindex(), target);
  }

  // required uint64 token = 4;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->token(), target);
  }

  // required string channelId = 5;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channelid(), target);
  }

  // required string userId = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconnectCheckRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required string channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint32 accountIndex = 3;
    if (has_accountindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountindex());
    }

    // required uint64 token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

    // required string channelId = 5;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string userId = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectCheckRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectCheckRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectCheckRequest::MergeFrom(const ReconnectCheckRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_accountindex()) {
      set_accountindex(from.accountindex());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectCheckRequest::CopyFrom(const ReconnectCheckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectCheckRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ReconnectCheckRequest::Swap(ReconnectCheckRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(accountindex_, other->accountindex_);
    std::swap(token_, other->token_);
    std::swap(channelid_, other->channelid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectCheckRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectCheckRequest_descriptor_;
  metadata.reflection = ReconnectCheckRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectCheckResponse::kRetCodeFieldNumber;
const int ReconnectCheckResponse::kCharIdFieldNumber;
const int ReconnectCheckResponse::kChannelUserIdFieldNumber;
const int ReconnectCheckResponse::kAccountIndexFieldNumber;
const int ReconnectCheckResponse::kTokenFieldNumber;
const int ReconnectCheckResponse::kChannelIdFieldNumber;
const int ReconnectCheckResponse::kUserIdFieldNumber;
#endif  // !_MSC_VER

ReconnectCheckResponse::ReconnectCheckResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconnectCheckResponse::InitAsDefaultInstance() {
}

ReconnectCheckResponse::ReconnectCheckResponse(const ReconnectCheckResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconnectCheckResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  charid_ = 0u;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountindex_ = 0u;
  token_ = GOOGLE_ULONGLONG(0);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectCheckResponse::~ReconnectCheckResponse() {
  SharedDtor();
}

void ReconnectCheckResponse::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectCheckResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectCheckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectCheckResponse_descriptor_;
}

const ReconnectCheckResponse& ReconnectCheckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

ReconnectCheckResponse* ReconnectCheckResponse::default_instance_ = NULL;

ReconnectCheckResponse* ReconnectCheckResponse::New() const {
  return new ReconnectCheckResponse;
}

void ReconnectCheckResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
    charid_ = 0u;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    accountindex_ = 0u;
    token_ = GOOGLE_ULONGLONG(0);
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectCheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accountIndex;
        break;
      }

      // required uint32 accountIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountindex_)));
          set_has_accountindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_token;
        break;
      }

      // required uint64 token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channelId;
        break;
      }

      // required string channelId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_userId;
        break;
      }

      // required string userId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconnectCheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // required string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_user_id(), output);
  }

  // required uint32 accountIndex = 4;
  if (has_accountindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accountindex(), output);
  }

  // required uint64 token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->token(), output);
  }

  // required string channelId = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channelid(), output);
  }

  // required string userId = 7;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconnectCheckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // required string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_user_id(), target);
  }

  // required uint32 accountIndex = 4;
  if (has_accountindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accountindex(), target);
  }

  // required uint64 token = 5;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->token(), target);
  }

  // required string channelId = 6;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channelid(), target);
  }

  // required string userId = 7;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconnectCheckResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // required uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required string channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint32 accountIndex = 4;
    if (has_accountindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountindex());
    }

    // required uint64 token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

    // required string channelId = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string userId = 7;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectCheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectCheckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectCheckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectCheckResponse::MergeFrom(const ReconnectCheckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_accountindex()) {
      set_accountindex(from.accountindex());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectCheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectCheckResponse::CopyFrom(const ReconnectCheckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectCheckResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ReconnectCheckResponse::Swap(ReconnectCheckResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(accountindex_, other->accountindex_);
    std::swap(token_, other->token_);
    std::swap(channelid_, other->channelid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectCheckResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectCheckResponse_descriptor_;
  metadata.reflection = ReconnectCheckResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicServerAddressReq::kAppGuidFieldNumber;
const int LogicServerAddressReq::kChannelIdFieldNumber;
const int LogicServerAddressReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

LogicServerAddressReq::LogicServerAddressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicServerAddressReq::InitAsDefaultInstance() {
}

LogicServerAddressReq::LogicServerAddressReq(const LogicServerAddressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicServerAddressReq::SharedCtor() {
  _cached_size_ = 0;
  app_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicServerAddressReq::~LogicServerAddressReq() {
  SharedDtor();
}

void LogicServerAddressReq::SharedDtor() {
  if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete app_guid_;
  }
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void LogicServerAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicServerAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicServerAddressReq_descriptor_;
}

const LogicServerAddressReq& LogicServerAddressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicServerAddressReq* LogicServerAddressReq::default_instance_ = NULL;

LogicServerAddressReq* LogicServerAddressReq::New() const {
  return new LogicServerAddressReq;
}

void LogicServerAddressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_guid()) {
      if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
        app_guid_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicServerAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_guid().data(), this->app_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_id;
        break;
      }

      // required string user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicServerAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string app_guid = 1;
  if (has_app_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_guid().data(), this->app_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_guid(), output);
  }

  // required string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_id(), output);
  }

  // required string user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicServerAddressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string app_guid = 1;
  if (has_app_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_guid().data(), this->app_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_guid(), target);
  }

  // required string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_id(), target);
  }

  // required string user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicServerAddressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_guid = 1;
    if (has_app_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_guid());
    }

    // required string channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required string user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicServerAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicServerAddressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicServerAddressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicServerAddressReq::MergeFrom(const LogicServerAddressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_guid()) {
      set_app_guid(from.app_guid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicServerAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicServerAddressReq::CopyFrom(const LogicServerAddressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicServerAddressReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LogicServerAddressReq::Swap(LogicServerAddressReq* other) {
  if (other != this) {
    std::swap(app_guid_, other->app_guid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicServerAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicServerAddressReq_descriptor_;
  metadata.reflection = LogicServerAddressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginLogicRequest::kConnectIndexFieldNumber;
const int LoginLogicRequest::kChannelUserIdFieldNumber;
const int LoginLogicRequest::kTokenFieldNumber;
const int LoginLogicRequest::kGroupIdFieldNumber;
#endif  // !_MSC_VER

LoginLogicRequest::LoginLogicRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginLogicRequest::InitAsDefaultInstance() {
}

LoginLogicRequest::LoginLogicRequest(const LoginLogicRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginLogicRequest::SharedCtor() {
  _cached_size_ = 0;
  connect_index_ = 0u;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = GOOGLE_ULONGLONG(0);
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginLogicRequest::~LoginLogicRequest() {
  SharedDtor();
}

void LoginLogicRequest::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void LoginLogicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginLogicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginLogicRequest_descriptor_;
}

const LoginLogicRequest& LoginLogicRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LoginLogicRequest* LoginLogicRequest::default_instance_ = NULL;

LoginLogicRequest* LoginLogicRequest::New() const {
  return new LoginLogicRequest;
}

void LoginLogicRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_index_ = 0u;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    token_ = GOOGLE_ULONGLONG(0);
    group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginLogicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 connect_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_index_)));
          set_has_connect_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token;
        break;
      }

      // required uint64 token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required uint32 group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginLogicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 connect_index = 1;
  if (has_connect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connect_index(), output);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_user_id(), output);
  }

  // required uint64 token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->token(), output);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginLogicRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 connect_index = 1;
  if (has_connect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connect_index(), target);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_user_id(), target);
  }

  // required uint64 token = 3;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->token(), target);
  }

  // required uint32 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginLogicRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 connect_index = 1;
    if (has_connect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect_index());
    }

    // required string channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint64 token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

    // required uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginLogicRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginLogicRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginLogicRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginLogicRequest::MergeFrom(const LoginLogicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect_index()) {
      set_connect_index(from.connect_index());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginLogicRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginLogicRequest::CopyFrom(const LoginLogicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLogicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginLogicRequest::Swap(LoginLogicRequest* other) {
  if (other != this) {
    std::swap(connect_index_, other->connect_index_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(token_, other->token_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginLogicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginLogicRequest_descriptor_;
  metadata.reflection = LoginLogicRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginLogicResponse_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginLogicResponse_RESULT_descriptor_;
}
bool LoginLogicResponse_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginLogicResponse_RESULT LoginLogicResponse::LOGIN_LOGIC_SUCESS;
const LoginLogicResponse_RESULT LoginLogicResponse::LOGIN_LOGIC_FAIL;
const LoginLogicResponse_RESULT LoginLogicResponse::RESULT_MIN;
const LoginLogicResponse_RESULT LoginLogicResponse::RESULT_MAX;
const int LoginLogicResponse::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginLogicResponse_SwitchServerParam::kCharacterIdFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kSourceSceneTemplateIdFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kSourcePoseXFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kSourcePoseYFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kDestSceneTemplateIdFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kDestSceneInstanceIdFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kDestSceneEnterKeyFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kDestScenePosXFieldNumber;
const int LoginLogicResponse_SwitchServerParam::kDestScenePosYFieldNumber;
#endif  // !_MSC_VER

LoginLogicResponse_SwitchServerParam::LoginLogicResponse_SwitchServerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginLogicResponse_SwitchServerParam::InitAsDefaultInstance() {
}

LoginLogicResponse_SwitchServerParam::LoginLogicResponse_SwitchServerParam(const LoginLogicResponse_SwitchServerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginLogicResponse_SwitchServerParam::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0u;
  source_scene_template_id_ = 0u;
  source_pose_x_ = 0;
  source_pose_y_ = 0;
  dest_scene_template_id_ = 0u;
  dest_scene_instance_id_ = 0u;
  dest_scene_enter_key_ = GOOGLE_ULONGLONG(0);
  dest_scene_pos_x_ = 0;
  dest_scene_pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginLogicResponse_SwitchServerParam::~LoginLogicResponse_SwitchServerParam() {
  SharedDtor();
}

void LoginLogicResponse_SwitchServerParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginLogicResponse_SwitchServerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginLogicResponse_SwitchServerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginLogicResponse_SwitchServerParam_descriptor_;
}

const LoginLogicResponse_SwitchServerParam& LoginLogicResponse_SwitchServerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LoginLogicResponse_SwitchServerParam* LoginLogicResponse_SwitchServerParam::default_instance_ = NULL;

LoginLogicResponse_SwitchServerParam* LoginLogicResponse_SwitchServerParam::New() const {
  return new LoginLogicResponse_SwitchServerParam;
}

void LoginLogicResponse_SwitchServerParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0u;
    source_scene_template_id_ = 0u;
    source_pose_x_ = 0;
    source_pose_y_ = 0;
    dest_scene_template_id_ = 0u;
    dest_scene_instance_id_ = 0u;
    dest_scene_enter_key_ = GOOGLE_ULONGLONG(0);
    dest_scene_pos_x_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dest_scene_pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginLogicResponse_SwitchServerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_scene_template_id;
        break;
      }

      // required uint32 source_scene_template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_scene_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_scene_template_id_)));
          set_has_source_scene_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_source_pose_x;
        break;
      }

      // required float source_pose_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_source_pose_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &source_pose_x_)));
          set_has_source_pose_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_source_pose_y;
        break;
      }

      // required float source_pose_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_source_pose_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &source_pose_y_)));
          set_has_source_pose_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dest_scene_template_id;
        break;
      }

      // required uint32 dest_scene_template_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_scene_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_scene_template_id_)));
          set_has_dest_scene_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dest_scene_instance_id;
        break;
      }

      // required uint32 dest_scene_instance_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_scene_instance_id_)));
          set_has_dest_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dest_scene_enter_key;
        break;
      }

      // required uint64 dest_scene_enter_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_scene_enter_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_scene_enter_key_)));
          set_has_dest_scene_enter_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_dest_scene_pos_x;
        break;
      }

      // required float dest_scene_pos_x = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dest_scene_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dest_scene_pos_x_)));
          set_has_dest_scene_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_dest_scene_pos_y;
        break;
      }

      // required float dest_scene_pos_y = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dest_scene_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dest_scene_pos_y_)));
          set_has_dest_scene_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginLogicResponse_SwitchServerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  // required uint32 source_scene_template_id = 2;
  if (has_source_scene_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_scene_template_id(), output);
  }

  // required float source_pose_x = 3;
  if (has_source_pose_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->source_pose_x(), output);
  }

  // required float source_pose_y = 4;
  if (has_source_pose_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->source_pose_y(), output);
  }

  // required uint32 dest_scene_template_id = 5;
  if (has_dest_scene_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dest_scene_template_id(), output);
  }

  // required uint32 dest_scene_instance_id = 6;
  if (has_dest_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dest_scene_instance_id(), output);
  }

  // required uint64 dest_scene_enter_key = 7;
  if (has_dest_scene_enter_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dest_scene_enter_key(), output);
  }

  // required float dest_scene_pos_x = 8;
  if (has_dest_scene_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dest_scene_pos_x(), output);
  }

  // required float dest_scene_pos_y = 9;
  if (has_dest_scene_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->dest_scene_pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginLogicResponse_SwitchServerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_id(), target);
  }

  // required uint32 source_scene_template_id = 2;
  if (has_source_scene_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_scene_template_id(), target);
  }

  // required float source_pose_x = 3;
  if (has_source_pose_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->source_pose_x(), target);
  }

  // required float source_pose_y = 4;
  if (has_source_pose_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->source_pose_y(), target);
  }

  // required uint32 dest_scene_template_id = 5;
  if (has_dest_scene_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dest_scene_template_id(), target);
  }

  // required uint32 dest_scene_instance_id = 6;
  if (has_dest_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dest_scene_instance_id(), target);
  }

  // required uint64 dest_scene_enter_key = 7;
  if (has_dest_scene_enter_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->dest_scene_enter_key(), target);
  }

  // required float dest_scene_pos_x = 8;
  if (has_dest_scene_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->dest_scene_pos_x(), target);
  }

  // required float dest_scene_pos_y = 9;
  if (has_dest_scene_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->dest_scene_pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginLogicResponse_SwitchServerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required uint32 source_scene_template_id = 2;
    if (has_source_scene_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_scene_template_id());
    }

    // required float source_pose_x = 3;
    if (has_source_pose_x()) {
      total_size += 1 + 4;
    }

    // required float source_pose_y = 4;
    if (has_source_pose_y()) {
      total_size += 1 + 4;
    }

    // required uint32 dest_scene_template_id = 5;
    if (has_dest_scene_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_scene_template_id());
    }

    // required uint32 dest_scene_instance_id = 6;
    if (has_dest_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_scene_instance_id());
    }

    // required uint64 dest_scene_enter_key = 7;
    if (has_dest_scene_enter_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_scene_enter_key());
    }

    // required float dest_scene_pos_x = 8;
    if (has_dest_scene_pos_x()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float dest_scene_pos_y = 9;
    if (has_dest_scene_pos_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginLogicResponse_SwitchServerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginLogicResponse_SwitchServerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginLogicResponse_SwitchServerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginLogicResponse_SwitchServerParam::MergeFrom(const LoginLogicResponse_SwitchServerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_source_scene_template_id()) {
      set_source_scene_template_id(from.source_scene_template_id());
    }
    if (from.has_source_pose_x()) {
      set_source_pose_x(from.source_pose_x());
    }
    if (from.has_source_pose_y()) {
      set_source_pose_y(from.source_pose_y());
    }
    if (from.has_dest_scene_template_id()) {
      set_dest_scene_template_id(from.dest_scene_template_id());
    }
    if (from.has_dest_scene_instance_id()) {
      set_dest_scene_instance_id(from.dest_scene_instance_id());
    }
    if (from.has_dest_scene_enter_key()) {
      set_dest_scene_enter_key(from.dest_scene_enter_key());
    }
    if (from.has_dest_scene_pos_x()) {
      set_dest_scene_pos_x(from.dest_scene_pos_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dest_scene_pos_y()) {
      set_dest_scene_pos_y(from.dest_scene_pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginLogicResponse_SwitchServerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginLogicResponse_SwitchServerParam::CopyFrom(const LoginLogicResponse_SwitchServerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLogicResponse_SwitchServerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void LoginLogicResponse_SwitchServerParam::Swap(LoginLogicResponse_SwitchServerParam* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(source_scene_template_id_, other->source_scene_template_id_);
    std::swap(source_pose_x_, other->source_pose_x_);
    std::swap(source_pose_y_, other->source_pose_y_);
    std::swap(dest_scene_template_id_, other->dest_scene_template_id_);
    std::swap(dest_scene_instance_id_, other->dest_scene_instance_id_);
    std::swap(dest_scene_enter_key_, other->dest_scene_enter_key_);
    std::swap(dest_scene_pos_x_, other->dest_scene_pos_x_);
    std::swap(dest_scene_pos_y_, other->dest_scene_pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginLogicResponse_SwitchServerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginLogicResponse_SwitchServerParam_descriptor_;
  metadata.reflection = LoginLogicResponse_SwitchServerParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LoginLogicResponse::kConnectIndexFieldNumber;
const int LoginLogicResponse::kResultFieldNumber;
const int LoginLogicResponse::kChannelUserIdFieldNumber;
const int LoginLogicResponse::kGroupIdFieldNumber;
const int LoginLogicResponse::kSwitchServerFlagFieldNumber;
const int LoginLogicResponse::kSwitchServerParamFieldNumber;
#endif  // !_MSC_VER

LoginLogicResponse::LoginLogicResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginLogicResponse::InitAsDefaultInstance() {
  switch_server_param_ = const_cast< ::ProtoBuf::LoginLogicResponse_SwitchServerParam*>(&::ProtoBuf::LoginLogicResponse_SwitchServerParam::default_instance());
}

LoginLogicResponse::LoginLogicResponse(const LoginLogicResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginLogicResponse::SharedCtor() {
  _cached_size_ = 0;
  connect_index_ = 0u;
  result_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = 0u;
  switch_server_flag_ = 0u;
  switch_server_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginLogicResponse::~LoginLogicResponse() {
  SharedDtor();
}

void LoginLogicResponse::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
    delete switch_server_param_;
  }
}

void LoginLogicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginLogicResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginLogicResponse_descriptor_;
}

const LoginLogicResponse& LoginLogicResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LoginLogicResponse* LoginLogicResponse::default_instance_ = NULL;

LoginLogicResponse* LoginLogicResponse::New() const {
  return new LoginLogicResponse;
}

void LoginLogicResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_index_ = 0u;
    result_ = 0;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    group_id_ = 0u;
    switch_server_flag_ = 0u;
    if (has_switch_server_param()) {
      if (switch_server_param_ != NULL) switch_server_param_->::ProtoBuf::LoginLogicResponse_SwitchServerParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginLogicResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 connect_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_index_)));
          set_has_connect_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .ProtoBuf.LoginLogicResponse.RESULT result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::LoginLogicResponse_RESULT_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::LoginLogicResponse_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_user_id;
        break;
      }

      // optional string channel_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_switch_server_flag;
        break;
      }

      // optional uint32 switch_server_flag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_switch_server_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switch_server_flag_)));
          set_has_switch_server_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_switch_server_param;
        break;
      }

      // optional .ProtoBuf.LoginLogicResponse.SwitchServerParam switch_server_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_switch_server_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_server_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginLogicResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 connect_index = 1;
  if (has_connect_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connect_index(), output);
  }

  // required .ProtoBuf.LoginLogicResponse.RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_user_id(), output);
  }

  // optional uint32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // optional uint32 switch_server_flag = 6;
  if (has_switch_server_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->switch_server_flag(), output);
  }

  // optional .ProtoBuf.LoginLogicResponse.SwitchServerParam switch_server_param = 7;
  if (has_switch_server_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->switch_server_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginLogicResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 connect_index = 1;
  if (has_connect_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connect_index(), target);
  }

  // required .ProtoBuf.LoginLogicResponse.RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_user_id(), target);
  }

  // optional uint32 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }

  // optional uint32 switch_server_flag = 6;
  if (has_switch_server_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->switch_server_flag(), target);
  }

  // optional .ProtoBuf.LoginLogicResponse.SwitchServerParam switch_server_param = 7;
  if (has_switch_server_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->switch_server_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginLogicResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 connect_index = 1;
    if (has_connect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect_index());
    }

    // required .ProtoBuf.LoginLogicResponse.RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // optional uint32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 switch_server_flag = 6;
    if (has_switch_server_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switch_server_flag());
    }

    // optional .ProtoBuf.LoginLogicResponse.SwitchServerParam switch_server_param = 7;
    if (has_switch_server_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_server_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginLogicResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginLogicResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginLogicResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginLogicResponse::MergeFrom(const LoginLogicResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect_index()) {
      set_connect_index(from.connect_index());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_switch_server_flag()) {
      set_switch_server_flag(from.switch_server_flag());
    }
    if (from.has_switch_server_param()) {
      mutable_switch_server_param()->::ProtoBuf::LoginLogicResponse_SwitchServerParam::MergeFrom(from.switch_server_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginLogicResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginLogicResponse::CopyFrom(const LoginLogicResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginLogicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_switch_server_param()) {
    if (!this->switch_server_param().IsInitialized()) return false;
  }
  return true;
}

void LoginLogicResponse::Swap(LoginLogicResponse* other) {
  if (other != this) {
    std::swap(connect_index_, other->connect_index_);
    std::swap(result_, other->result_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(switch_server_flag_, other->switch_server_flag_);
    std::swap(switch_server_param_, other->switch_server_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginLogicResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginLogicResponse_descriptor_;
  metadata.reflection = LoginLogicResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwitchServerBeginNotify::kChannelIdFieldNumber;
const int SwitchServerBeginNotify::kUserIdFieldNumber;
const int SwitchServerBeginNotify::kCharacterIdFieldNumber;
const int SwitchServerBeginNotify::kSourceSceneTemplateIdFieldNumber;
const int SwitchServerBeginNotify::kSourcePoseXFieldNumber;
const int SwitchServerBeginNotify::kSourcePoseYFieldNumber;
const int SwitchServerBeginNotify::kDestLogicServiceIdFieldNumber;
const int SwitchServerBeginNotify::kDestSceneTemplateIdFieldNumber;
const int SwitchServerBeginNotify::kDestSceneInstanceIdFieldNumber;
const int SwitchServerBeginNotify::kDestSceneEnterKeyFieldNumber;
const int SwitchServerBeginNotify::kDestScenePosXFieldNumber;
const int SwitchServerBeginNotify::kDestScenePosYFieldNumber;
#endif  // !_MSC_VER

SwitchServerBeginNotify::SwitchServerBeginNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchServerBeginNotify::InitAsDefaultInstance() {
}

SwitchServerBeginNotify::SwitchServerBeginNotify(const SwitchServerBeginNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchServerBeginNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  character_id_ = 0u;
  source_scene_template_id_ = 0u;
  source_pose_x_ = 0;
  source_pose_y_ = 0;
  dest_logic_service_id_ = 0u;
  dest_scene_template_id_ = 0u;
  dest_scene_instance_id_ = 0u;
  dest_scene_enter_key_ = GOOGLE_ULONGLONG(0);
  dest_scene_pos_x_ = 0;
  dest_scene_pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchServerBeginNotify::~SwitchServerBeginNotify() {
  SharedDtor();
}

void SwitchServerBeginNotify::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void SwitchServerBeginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchServerBeginNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchServerBeginNotify_descriptor_;
}

const SwitchServerBeginNotify& SwitchServerBeginNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

SwitchServerBeginNotify* SwitchServerBeginNotify::default_instance_ = NULL;

SwitchServerBeginNotify* SwitchServerBeginNotify::New() const {
  return new SwitchServerBeginNotify;
}

void SwitchServerBeginNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    character_id_ = 0u;
    source_scene_template_id_ = 0u;
    source_pose_x_ = 0;
    source_pose_y_ = 0;
    dest_logic_service_id_ = 0u;
    dest_scene_template_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dest_scene_instance_id_ = 0u;
    dest_scene_enter_key_ = GOOGLE_ULONGLONG(0);
    dest_scene_pos_x_ = 0;
    dest_scene_pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchServerBeginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_scene_template_id;
        break;
      }

      // required uint32 source_scene_template_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_scene_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_scene_template_id_)));
          set_has_source_scene_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_source_pose_x;
        break;
      }

      // required float source_pose_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_source_pose_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &source_pose_x_)));
          set_has_source_pose_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_source_pose_y;
        break;
      }

      // required float source_pose_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_source_pose_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &source_pose_y_)));
          set_has_source_pose_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dest_logic_service_id;
        break;
      }

      // required uint32 dest_logic_service_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_logic_service_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_logic_service_id_)));
          set_has_dest_logic_service_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dest_scene_template_id;
        break;
      }

      // required uint32 dest_scene_template_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_scene_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_scene_template_id_)));
          set_has_dest_scene_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dest_scene_instance_id;
        break;
      }

      // required uint32 dest_scene_instance_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_scene_instance_id_)));
          set_has_dest_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dest_scene_enter_key;
        break;
      }

      // required uint64 dest_scene_enter_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_scene_enter_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_scene_enter_key_)));
          set_has_dest_scene_enter_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_dest_scene_pos_x;
        break;
      }

      // required float dest_scene_pos_x = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dest_scene_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dest_scene_pos_x_)));
          set_has_dest_scene_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_dest_scene_pos_y;
        break;
      }

      // required float dest_scene_pos_y = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dest_scene_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dest_scene_pos_y_)));
          set_has_dest_scene_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchServerBeginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_id(), output);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }

  // required uint32 character_id = 3;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->character_id(), output);
  }

  // required uint32 source_scene_template_id = 4;
  if (has_source_scene_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_scene_template_id(), output);
  }

  // required float source_pose_x = 5;
  if (has_source_pose_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->source_pose_x(), output);
  }

  // required float source_pose_y = 6;
  if (has_source_pose_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->source_pose_y(), output);
  }

  // required uint32 dest_logic_service_id = 7;
  if (has_dest_logic_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dest_logic_service_id(), output);
  }

  // required uint32 dest_scene_template_id = 8;
  if (has_dest_scene_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dest_scene_template_id(), output);
  }

  // required uint32 dest_scene_instance_id = 9;
  if (has_dest_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dest_scene_instance_id(), output);
  }

  // required uint64 dest_scene_enter_key = 10;
  if (has_dest_scene_enter_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->dest_scene_enter_key(), output);
  }

  // required float dest_scene_pos_x = 11;
  if (has_dest_scene_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->dest_scene_pos_x(), output);
  }

  // required float dest_scene_pos_y = 12;
  if (has_dest_scene_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dest_scene_pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchServerBeginNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_id(), target);
  }

  // required string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // required uint32 character_id = 3;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->character_id(), target);
  }

  // required uint32 source_scene_template_id = 4;
  if (has_source_scene_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_scene_template_id(), target);
  }

  // required float source_pose_x = 5;
  if (has_source_pose_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->source_pose_x(), target);
  }

  // required float source_pose_y = 6;
  if (has_source_pose_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->source_pose_y(), target);
  }

  // required uint32 dest_logic_service_id = 7;
  if (has_dest_logic_service_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dest_logic_service_id(), target);
  }

  // required uint32 dest_scene_template_id = 8;
  if (has_dest_scene_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dest_scene_template_id(), target);
  }

  // required uint32 dest_scene_instance_id = 9;
  if (has_dest_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dest_scene_instance_id(), target);
  }

  // required uint64 dest_scene_enter_key = 10;
  if (has_dest_scene_enter_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->dest_scene_enter_key(), target);
  }

  // required float dest_scene_pos_x = 11;
  if (has_dest_scene_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->dest_scene_pos_x(), target);
  }

  // required float dest_scene_pos_y = 12;
  if (has_dest_scene_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dest_scene_pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchServerBeginNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required uint32 character_id = 3;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required uint32 source_scene_template_id = 4;
    if (has_source_scene_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_scene_template_id());
    }

    // required float source_pose_x = 5;
    if (has_source_pose_x()) {
      total_size += 1 + 4;
    }

    // required float source_pose_y = 6;
    if (has_source_pose_y()) {
      total_size += 1 + 4;
    }

    // required uint32 dest_logic_service_id = 7;
    if (has_dest_logic_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_logic_service_id());
    }

    // required uint32 dest_scene_template_id = 8;
    if (has_dest_scene_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_scene_template_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 dest_scene_instance_id = 9;
    if (has_dest_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_scene_instance_id());
    }

    // required uint64 dest_scene_enter_key = 10;
    if (has_dest_scene_enter_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_scene_enter_key());
    }

    // required float dest_scene_pos_x = 11;
    if (has_dest_scene_pos_x()) {
      total_size += 1 + 4;
    }

    // required float dest_scene_pos_y = 12;
    if (has_dest_scene_pos_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchServerBeginNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchServerBeginNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchServerBeginNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchServerBeginNotify::MergeFrom(const SwitchServerBeginNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_source_scene_template_id()) {
      set_source_scene_template_id(from.source_scene_template_id());
    }
    if (from.has_source_pose_x()) {
      set_source_pose_x(from.source_pose_x());
    }
    if (from.has_source_pose_y()) {
      set_source_pose_y(from.source_pose_y());
    }
    if (from.has_dest_logic_service_id()) {
      set_dest_logic_service_id(from.dest_logic_service_id());
    }
    if (from.has_dest_scene_template_id()) {
      set_dest_scene_template_id(from.dest_scene_template_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dest_scene_instance_id()) {
      set_dest_scene_instance_id(from.dest_scene_instance_id());
    }
    if (from.has_dest_scene_enter_key()) {
      set_dest_scene_enter_key(from.dest_scene_enter_key());
    }
    if (from.has_dest_scene_pos_x()) {
      set_dest_scene_pos_x(from.dest_scene_pos_x());
    }
    if (from.has_dest_scene_pos_y()) {
      set_dest_scene_pos_y(from.dest_scene_pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchServerBeginNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchServerBeginNotify::CopyFrom(const SwitchServerBeginNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchServerBeginNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void SwitchServerBeginNotify::Swap(SwitchServerBeginNotify* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(character_id_, other->character_id_);
    std::swap(source_scene_template_id_, other->source_scene_template_id_);
    std::swap(source_pose_x_, other->source_pose_x_);
    std::swap(source_pose_y_, other->source_pose_y_);
    std::swap(dest_logic_service_id_, other->dest_logic_service_id_);
    std::swap(dest_scene_template_id_, other->dest_scene_template_id_);
    std::swap(dest_scene_instance_id_, other->dest_scene_instance_id_);
    std::swap(dest_scene_enter_key_, other->dest_scene_enter_key_);
    std::swap(dest_scene_pos_x_, other->dest_scene_pos_x_);
    std::swap(dest_scene_pos_y_, other->dest_scene_pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchServerBeginNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchServerBeginNotify_descriptor_;
  metadata.reflection = SwitchServerBeginNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastToLogicServer::kGroupIdFieldNumber;
const int BroadcastToLogicServer::kMsgFieldNumber;
#endif  // !_MSC_VER

BroadcastToLogicServer::BroadcastToLogicServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastToLogicServer::InitAsDefaultInstance() {
}

BroadcastToLogicServer::BroadcastToLogicServer(const BroadcastToLogicServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastToLogicServer::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastToLogicServer::~BroadcastToLogicServer() {
  SharedDtor();
}

void BroadcastToLogicServer::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastToLogicServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastToLogicServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastToLogicServer_descriptor_;
}

const BroadcastToLogicServer& BroadcastToLogicServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

BroadcastToLogicServer* BroadcastToLogicServer::default_instance_ = NULL;

BroadcastToLogicServer* BroadcastToLogicServer::New() const {
  return new BroadcastToLogicServer;
}

void BroadcastToLogicServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastToLogicServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required bytes msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastToLogicServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // required bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastToLogicServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // required bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastToLogicServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastToLogicServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastToLogicServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastToLogicServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastToLogicServer::MergeFrom(const BroadcastToLogicServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastToLogicServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastToLogicServer::CopyFrom(const BroadcastToLogicServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastToLogicServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BroadcastToLogicServer::Swap(BroadcastToLogicServer* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastToLogicServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastToLogicServer_descriptor_;
  metadata.reflection = BroadcastToLogicServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenterCreateChar::kCharIDFieldNumber;
const int LogicToCenterCreateChar::kBaseFieldNumber;
#endif  // !_MSC_VER

LogicToCenterCreateChar::LogicToCenterCreateChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenterCreateChar::InitAsDefaultInstance() {
  base_ = const_cast< ::ProtoBuf::CharacterDBBaseInfo*>(&::ProtoBuf::CharacterDBBaseInfo::default_instance());
}

LogicToCenterCreateChar::LogicToCenterCreateChar(const LogicToCenterCreateChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenterCreateChar::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenterCreateChar::~LogicToCenterCreateChar() {
  SharedDtor();
}

void LogicToCenterCreateChar::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void LogicToCenterCreateChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenterCreateChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenterCreateChar_descriptor_;
}

const LogicToCenterCreateChar& LogicToCenterCreateChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicToCenterCreateChar* LogicToCenterCreateChar::default_instance_ = NULL;

LogicToCenterCreateChar* LogicToCenterCreateChar::New() const {
  return new LogicToCenterCreateChar;
}

void LogicToCenterCreateChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::ProtoBuf::CharacterDBBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenterCreateChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // required .ProtoBuf.CharacterDBBaseInfo base = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenterCreateChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required .ProtoBuf.CharacterDBBaseInfo base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenterCreateChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required .ProtoBuf.CharacterDBBaseInfo base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenterCreateChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required .ProtoBuf.CharacterDBBaseInfo base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenterCreateChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenterCreateChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenterCreateChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenterCreateChar::MergeFrom(const LogicToCenterCreateChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_base()) {
      mutable_base()->::ProtoBuf::CharacterDBBaseInfo::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenterCreateChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenterCreateChar::CopyFrom(const LogicToCenterCreateChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenterCreateChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void LogicToCenterCreateChar::Swap(LogicToCenterCreateChar* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenterCreateChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenterCreateChar_descriptor_;
  metadata.reflection = LogicToCenterCreateChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenterDelChar::kCharIDFieldNumber;
const int LogicToCenterDelChar::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

LogicToCenterDelChar::LogicToCenterDelChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenterDelChar::InitAsDefaultInstance() {
}

LogicToCenterDelChar::LogicToCenterDelChar(const LogicToCenterDelChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenterDelChar::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenterDelChar::~LogicToCenterDelChar() {
  SharedDtor();
}

void LogicToCenterDelChar::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void LogicToCenterDelChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenterDelChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenterDelChar_descriptor_;
}

const LogicToCenterDelChar& LogicToCenterDelChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicToCenterDelChar* LogicToCenterDelChar::default_instance_ = NULL;

LogicToCenterDelChar* LogicToCenterDelChar::New() const {
  return new LogicToCenterDelChar;
}

void LogicToCenterDelChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenterDelChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenterDelChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenterDelChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenterDelChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required string channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenterDelChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenterDelChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenterDelChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenterDelChar::MergeFrom(const LogicToCenterDelChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenterDelChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenterDelChar::CopyFrom(const LogicToCenterDelChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenterDelChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogicToCenterDelChar::Swap(LogicToCenterDelChar* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenterDelChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenterDelChar_descriptor_;
  metadata.reflection = LogicToCenterDelChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToCenterCharSync::kCharIDFieldNumber;
const int LogicToCenterCharSync::kAttrlistFieldNumber;
const int LogicToCenterCharSync::kEquipFieldNumber;
const int LogicToCenterCharSync::kAllEquipFieldNumber;
#endif  // !_MSC_VER

LogicToCenterCharSync::LogicToCenterCharSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToCenterCharSync::InitAsDefaultInstance() {
}

LogicToCenterCharSync::LogicToCenterCharSync(const LogicToCenterCharSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToCenterCharSync::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  all_equip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToCenterCharSync::~LogicToCenterCharSync() {
  SharedDtor();
}

void LogicToCenterCharSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToCenterCharSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToCenterCharSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToCenterCharSync_descriptor_;
}

const LogicToCenterCharSync& LogicToCenterCharSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogicToCenterCharSync* LogicToCenterCharSync::default_instance_ = NULL;

LogicToCenterCharSync* LogicToCenterCharSync::New() const {
  return new LogicToCenterCharSync;
}

void LogicToCenterCharSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    all_equip_ = 0;
  }
  attrlist_.Clear();
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToCenterCharSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attrlist;
        break;
      }

      // repeated .ProtoBuf.CharSyncAttr attrlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attrlist;
        if (input->ExpectTag(26)) goto parse_equip;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo equip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        if (input->ExpectTag(32)) goto parse_all_equip;
        break;
      }

      // optional int32 all_equip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_equip_)));
          set_has_all_equip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToCenterCharSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .ProtoBuf.CharSyncAttr attrlist = 2;
  for (int i = 0; i < this->attrlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrlist(i), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 3;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip(i), output);
  }

  // optional int32 all_equip = 4;
  if (has_all_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->all_equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToCenterCharSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .ProtoBuf.CharSyncAttr attrlist = 2;
  for (int i = 0; i < this->attrlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrlist(i), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 3;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip(i), target);
  }

  // optional int32 all_equip = 4;
  if (has_all_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->all_equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToCenterCharSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional int32 all_equip = 4;
    if (has_all_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_equip());
    }

  }
  // repeated .ProtoBuf.CharSyncAttr attrlist = 2;
  total_size += 1 * this->attrlist_size();
  for (int i = 0; i < this->attrlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrlist(i));
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 3;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToCenterCharSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToCenterCharSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToCenterCharSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToCenterCharSync::MergeFrom(const LogicToCenterCharSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrlist_.MergeFrom(from.attrlist_);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_all_equip()) {
      set_all_equip(from.all_equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToCenterCharSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToCenterCharSync::CopyFrom(const LogicToCenterCharSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToCenterCharSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < attrlist_size(); i++) {
    if (!this->attrlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void LogicToCenterCharSync::Swap(LogicToCenterCharSync* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    attrlist_.Swap(&other->attrlist_);
    equip_.Swap(&other->equip_);
    std::swap(all_equip_, other->all_equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToCenterCharSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToCenterCharSync_descriptor_;
  metadata.reflection = LogicToCenterCharSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterLogicRequest::kCharacterIdFieldNumber;
const int EnterLogicRequest::kChannelIdFieldNumber;
const int EnterLogicRequest::kUserIdFieldNumber;
const int EnterLogicRequest::kTokenFieldNumber;
const int EnterLogicRequest::kChannelUserIdFieldNumber;
const int EnterLogicRequest::kCharSimpleInfoFieldNumber;
const int EnterLogicRequest::kMapIdFieldNumber;
const int EnterLogicRequest::kSceneIdFieldNumber;
const int EnterLogicRequest::kEquipFieldNumber;
const int EnterLogicRequest::kAttrFieldNumber;
#endif  // !_MSC_VER

EnterLogicRequest::EnterLogicRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterLogicRequest::InitAsDefaultInstance() {
  charsimpleinfo_ = const_cast< ::ProtoBuf::CharacterDBSimpleInfo*>(&::ProtoBuf::CharacterDBSimpleInfo::default_instance());
  attr_ = const_cast< ::ProtoBuf::CharacterDBAttrDetailInfo*>(&::ProtoBuf::CharacterDBAttrDetailInfo::default_instance());
}

EnterLogicRequest::EnterLogicRequest(const EnterLogicRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterLogicRequest::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0u;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = GOOGLE_ULONGLONG(0);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charsimpleinfo_ = NULL;
  map_id_ = 0;
  scene_id_ = 0;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterLogicRequest::~EnterLogicRequest() {
  SharedDtor();
}

void EnterLogicRequest::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
    delete charsimpleinfo_;
    delete attr_;
  }
}

void EnterLogicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterLogicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterLogicRequest_descriptor_;
}

const EnterLogicRequest& EnterLogicRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

EnterLogicRequest* EnterLogicRequest::default_instance_ = NULL;

EnterLogicRequest* EnterLogicRequest::New() const {
  return new EnterLogicRequest;
}

void EnterLogicRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0u;
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    token_ = GOOGLE_ULONGLONG(0);
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    if (has_charsimpleinfo()) {
      if (charsimpleinfo_ != NULL) charsimpleinfo_->::ProtoBuf::CharacterDBSimpleInfo::Clear();
    }
    map_id_ = 0;
    scene_id_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_attr()) {
      if (attr_ != NULL) attr_->::ProtoBuf::CharacterDBAttrDetailInfo::Clear();
    }
  }
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterLogicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_id;
        break;
      }

      // required string user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_token;
        break;
      }

      // required uint64 token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_charSimpleInfo;
        break;
      }

      // required .ProtoBuf.CharacterDBSimpleInfo charSimpleInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charsimpleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }

      // optional int32 scene_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip;
        break;
      }

      // repeated .ProtoBuf.ItemProtoInfo equip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip;
        if (input->ExpectTag(82)) goto parse_attr;
        break;
      }

      // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterLogicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  // required string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_id(), output);
  }

  // required string user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_id(), output);
  }

  // required uint64 token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->token(), output);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_user_id(), output);
  }

  // required .ProtoBuf.CharacterDBSimpleInfo charSimpleInfo = 6;
  if (has_charsimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->charsimpleinfo(), output);
  }

  // optional int32 map_id = 7;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->map_id(), output);
  }

  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equip(i), output);
  }

  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 10;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterLogicRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_id(), target);
  }

  // required string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_id(), target);
  }

  // required string user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // required uint64 token = 4;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->token(), target);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_user_id(), target);
  }

  // required .ProtoBuf.CharacterDBSimpleInfo charSimpleInfo = 6;
  if (has_charsimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->charsimpleinfo(), target);
  }

  // optional int32 map_id = 7;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->map_id(), target);
  }

  // optional int32 scene_id = 8;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }

  // repeated .ProtoBuf.ItemProtoInfo equip = 9;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equip(i), target);
  }

  // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 10;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterLogicRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required string channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required string user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required uint64 token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

    // required string channel_user_id = 5;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required .ProtoBuf.CharacterDBSimpleInfo charSimpleInfo = 6;
    if (has_charsimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charsimpleinfo());
    }

    // optional int32 map_id = 7;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int32 scene_id = 8;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .ProtoBuf.CharacterDBAttrDetailInfo attr = 10;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  // repeated .ProtoBuf.ItemProtoInfo equip = 9;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterLogicRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterLogicRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterLogicRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterLogicRequest::MergeFrom(const EnterLogicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_charsimpleinfo()) {
      mutable_charsimpleinfo()->::ProtoBuf::CharacterDBSimpleInfo::MergeFrom(from.charsimpleinfo());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_attr()) {
      mutable_attr()->::ProtoBuf::CharacterDBAttrDetailInfo::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterLogicRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterLogicRequest::CopyFrom(const EnterLogicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterLogicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_charsimpleinfo()) {
    if (!this->charsimpleinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void EnterLogicRequest::Swap(EnterLogicRequest* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(token_, other->token_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(charsimpleinfo_, other->charsimpleinfo_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    equip_.Swap(&other->equip_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterLogicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterLogicRequest_descriptor_;
  metadata.reflection = EnterLogicRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogoutLogicRequest_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutLogicRequest_FLAG_descriptor_;
}
bool LogoutLogicRequest_FLAG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogoutLogicRequest_FLAG LogoutLogicRequest::LOGOUT_FLAG_GAMING;
const LogoutLogicRequest_FLAG LogoutLogicRequest::LOGOUT_FLAG_KICKOUT;
const LogoutLogicRequest_FLAG LogoutLogicRequest::LOGOUT_FLAG_LOGIN_BREAK;
const LogoutLogicRequest_FLAG LogoutLogicRequest::LOGOUT_FLAG_SWITCH_SERVER;
const LogoutLogicRequest_FLAG LogoutLogicRequest::FLAG_MIN;
const LogoutLogicRequest_FLAG LogoutLogicRequest::FLAG_MAX;
const int LogoutLogicRequest::FLAG_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogoutLogicRequest::kFlagFieldNumber;
const int LogoutLogicRequest::kCharacterIdFieldNumber;
const int LogoutLogicRequest::kChannelUserIdFieldNumber;
const int LogoutLogicRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

LogoutLogicRequest::LogoutLogicRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutLogicRequest::InitAsDefaultInstance() {
}

LogoutLogicRequest::LogoutLogicRequest(const LogoutLogicRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutLogicRequest::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  character_id_ = 0u;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutLogicRequest::~LogoutLogicRequest() {
  SharedDtor();
}

void LogoutLogicRequest::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void LogoutLogicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutLogicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutLogicRequest_descriptor_;
}

const LogoutLogicRequest& LogoutLogicRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

LogoutLogicRequest* LogoutLogicRequest::default_instance_ = NULL;

LogoutLogicRequest* LogoutLogicRequest::New() const {
  return new LogoutLogicRequest;
}

void LogoutLogicRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    character_id_ = 0u;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutLogicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.LogoutLogicRequest.FLAG flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::LogoutLogicRequest_FLAG_IsValid(value)) {
            set_flag(static_cast< ::ProtoBuf::LogoutLogicRequest_FLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_token;
        break;
      }

      // required uint64 token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutLogicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.LogoutLogicRequest.FLAG flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flag(), output);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->character_id(), output);
  }

  // required string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_user_id(), output);
  }

  // required uint64 token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutLogicRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.LogoutLogicRequest.FLAG flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->flag(), target);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->character_id(), target);
  }

  // required string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_user_id(), target);
  }

  // required uint64 token = 4;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutLogicRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.LogoutLogicRequest.FLAG flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // required uint32 character_id = 2;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required string channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint64 token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutLogicRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutLogicRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutLogicRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutLogicRequest::MergeFrom(const LogoutLogicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutLogicRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutLogicRequest::CopyFrom(const LogoutLogicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutLogicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LogoutLogicRequest::Swap(LogoutLogicRequest* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(character_id_, other->character_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutLogicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutLogicRequest_descriptor_;
  metadata.reflection = LogoutLogicRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllocLogicNodeRequest::kCharacterIdFieldNumber;
const int AllocLogicNodeRequest::kChannelIdFieldNumber;
const int AllocLogicNodeRequest::kUserIdFieldNumber;
const int AllocLogicNodeRequest::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

AllocLogicNodeRequest::AllocLogicNodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllocLogicNodeRequest::InitAsDefaultInstance() {
}

AllocLogicNodeRequest::AllocLogicNodeRequest(const AllocLogicNodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllocLogicNodeRequest::SharedCtor() {
  _cached_size_ = 0;
  character_id_ = 0u;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocLogicNodeRequest::~AllocLogicNodeRequest() {
  SharedDtor();
}

void AllocLogicNodeRequest::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void AllocLogicNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocLogicNodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocLogicNodeRequest_descriptor_;
}

const AllocLogicNodeRequest& AllocLogicNodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

AllocLogicNodeRequest* AllocLogicNodeRequest::default_instance_ = NULL;

AllocLogicNodeRequest* AllocLogicNodeRequest::New() const {
  return new AllocLogicNodeRequest;
}

void AllocLogicNodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_id_ = 0u;
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocLogicNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_id;
        break;
      }

      // required string user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllocLogicNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_id(), output);
  }

  // required string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_id(), output);
  }

  // required string user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_id(), output);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllocLogicNodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_id = 1;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_id(), target);
  }

  // required string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_id(), target);
  }

  // required string user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllocLogicNodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_id = 1;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required string channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required string user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string channel_user_id = 5;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocLogicNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocLogicNodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocLogicNodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocLogicNodeRequest::MergeFrom(const AllocLogicNodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocLogicNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocLogicNodeRequest::CopyFrom(const AllocLogicNodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocLogicNodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AllocLogicNodeRequest::Swap(AllocLogicNodeRequest* other) {
  if (other != this) {
    std::swap(character_id_, other->character_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocLogicNodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocLogicNodeRequest_descriptor_;
  metadata.reflection = AllocLogicNodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllocLogicNodeResponse::kResultFieldNumber;
const int AllocLogicNodeResponse::kCharacterIdFieldNumber;
const int AllocLogicNodeResponse::kChannelIdFieldNumber;
const int AllocLogicNodeResponse::kUserIdFieldNumber;
const int AllocLogicNodeResponse::kChannelUserIdFieldNumber;
const int AllocLogicNodeResponse::kDstSceneIdFieldNumber;
const int AllocLogicNodeResponse::kDstMapIdFieldNumber;
const int AllocLogicNodeResponse::kLogicIpFieldNumber;
const int AllocLogicNodeResponse::kLogicPortFieldNumber;
const int AllocLogicNodeResponse::kLogicTokenFieldNumber;
#endif  // !_MSC_VER

AllocLogicNodeResponse::AllocLogicNodeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllocLogicNodeResponse::InitAsDefaultInstance() {
}

AllocLogicNodeResponse::AllocLogicNodeResponse(const AllocLogicNodeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllocLogicNodeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  character_id_ = 0u;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_scene_id_ = 0u;
  dst_map_id_ = 0u;
  logic_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logic_port_ = 0u;
  logic_token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocLogicNodeResponse::~AllocLogicNodeResponse() {
  SharedDtor();
}

void AllocLogicNodeResponse::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (logic_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete logic_ip_;
  }
  if (this != default_instance_) {
  }
}

void AllocLogicNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocLogicNodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocLogicNodeResponse_descriptor_;
}

const AllocLogicNodeResponse& AllocLogicNodeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

AllocLogicNodeResponse* AllocLogicNodeResponse::default_instance_ = NULL;

AllocLogicNodeResponse* AllocLogicNodeResponse::New() const {
  return new AllocLogicNodeResponse;
}

void AllocLogicNodeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    character_id_ = 0u;
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    dst_scene_id_ = 0u;
    dst_map_id_ = 0u;
    if (has_logic_ip()) {
      if (logic_ip_ != &::google::protobuf::internal::kEmptyString) {
        logic_ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logic_port_ = 0u;
    logic_token_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllocLogicNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_character_id;
        break;
      }

      // required uint32 character_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_character_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
          set_has_character_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dst_scene_id;
        break;
      }

      // optional uint32 dst_scene_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_scene_id_)));
          set_has_dst_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dst_map_id;
        break;
      }

      // optional uint32 dst_map_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_map_id_)));
          set_has_dst_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_logic_ip;
        break;
      }

      // optional string logic_ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logic_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_ip().data(), this->logic_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_logic_port;
        break;
      }

      // optional uint32 logic_port = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_port_)));
          set_has_logic_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_logic_token;
        break;
      }

      // optional uint32 logic_token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_token_)));
          set_has_logic_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllocLogicNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->character_id(), output);
  }

  // required string channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_id(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_id(), output);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_user_id(), output);
  }

  // optional uint32 dst_scene_id = 6;
  if (has_dst_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dst_scene_id(), output);
  }

  // optional uint32 dst_map_id = 7;
  if (has_dst_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dst_map_id(), output);
  }

  // optional string logic_ip = 8;
  if (has_logic_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_ip().data(), this->logic_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->logic_ip(), output);
  }

  // optional uint32 logic_port = 9;
  if (has_logic_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->logic_port(), output);
  }

  // optional uint32 logic_token = 10;
  if (has_logic_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->logic_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllocLogicNodeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint32 character_id = 2;
  if (has_character_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->character_id(), target);
  }

  // required string channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_id(), target);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_user_id(), target);
  }

  // optional uint32 dst_scene_id = 6;
  if (has_dst_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dst_scene_id(), target);
  }

  // optional uint32 dst_map_id = 7;
  if (has_dst_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dst_map_id(), target);
  }

  // optional string logic_ip = 8;
  if (has_logic_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_ip().data(), this->logic_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->logic_ip(), target);
  }

  // optional uint32 logic_port = 9;
  if (has_logic_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->logic_port(), target);
  }

  // optional uint32 logic_token = 10;
  if (has_logic_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->logic_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllocLogicNodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint32 character_id = 2;
    if (has_character_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_id());
    }

    // required string channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string channel_user_id = 5;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // optional uint32 dst_scene_id = 6;
    if (has_dst_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_scene_id());
    }

    // optional uint32 dst_map_id = 7;
    if (has_dst_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_map_id());
    }

    // optional string logic_ip = 8;
    if (has_logic_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logic_ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 logic_port = 9;
    if (has_logic_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_port());
    }

    // optional uint32 logic_token = 10;
    if (has_logic_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocLogicNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllocLogicNodeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllocLogicNodeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllocLogicNodeResponse::MergeFrom(const AllocLogicNodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_character_id()) {
      set_character_id(from.character_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_dst_scene_id()) {
      set_dst_scene_id(from.dst_scene_id());
    }
    if (from.has_dst_map_id()) {
      set_dst_map_id(from.dst_map_id());
    }
    if (from.has_logic_ip()) {
      set_logic_ip(from.logic_ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logic_port()) {
      set_logic_port(from.logic_port());
    }
    if (from.has_logic_token()) {
      set_logic_token(from.logic_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllocLogicNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocLogicNodeResponse::CopyFrom(const AllocLogicNodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocLogicNodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AllocLogicNodeResponse::Swap(AllocLogicNodeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(character_id_, other->character_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(dst_scene_id_, other->dst_scene_id_);
    std::swap(dst_map_id_, other->dst_map_id_);
    std::swap(logic_ip_, other->logic_ip_);
    std::swap(logic_port_, other->logic_port_);
    std::swap(logic_token_, other->logic_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllocLogicNodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocLogicNodeResponse_descriptor_;
  metadata.reflection = AllocLogicNodeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientNotifyToClient::kCharIdFieldNumber;
const int ClientNotifyToClient::kEventFieldNumber;
#endif  // !_MSC_VER

ClientNotifyToClient::ClientNotifyToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientNotifyToClient::InitAsDefaultInstance() {
}

ClientNotifyToClient::ClientNotifyToClient(const ClientNotifyToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientNotifyToClient::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  event_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientNotifyToClient::~ClientNotifyToClient() {
  SharedDtor();
}

void ClientNotifyToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientNotifyToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientNotifyToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNotifyToClient_descriptor_;
}

const ClientNotifyToClient& ClientNotifyToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

ClientNotifyToClient* ClientNotifyToClient::default_instance_ = NULL;

ClientNotifyToClient* ClientNotifyToClient::New() const {
  return new ClientNotifyToClient;
}

void ClientNotifyToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    event_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientNotifyToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }

      // required uint32 event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientNotifyToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required uint32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientNotifyToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required uint32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientNotifyToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientNotifyToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientNotifyToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientNotifyToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientNotifyToClient::MergeFrom(const ClientNotifyToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientNotifyToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientNotifyToClient::CopyFrom(const ClientNotifyToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientNotifyToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientNotifyToClient::Swap(ClientNotifyToClient* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientNotifyToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientNotifyToClient_descriptor_;
  metadata.reflection = ClientNotifyToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBProxyAddrInfo::kGroupIdFieldNumber;
const int DBProxyAddrInfo::kServerIdFieldNumber;
const int DBProxyAddrInfo::kPortFieldNumber;
const int DBProxyAddrInfo::kIpFieldNumber;
#endif  // !_MSC_VER

DBProxyAddrInfo::DBProxyAddrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBProxyAddrInfo::InitAsDefaultInstance() {
}

DBProxyAddrInfo::DBProxyAddrInfo(const DBProxyAddrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBProxyAddrInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  serverid_ = 0u;
  port_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBProxyAddrInfo::~DBProxyAddrInfo() {
  SharedDtor();
}

void DBProxyAddrInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void DBProxyAddrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBProxyAddrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBProxyAddrInfo_descriptor_;
}

const DBProxyAddrInfo& DBProxyAddrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

DBProxyAddrInfo* DBProxyAddrInfo::default_instance_ = NULL;

DBProxyAddrInfo* DBProxyAddrInfo::New() const {
  return new DBProxyAddrInfo;
}

void DBProxyAddrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0u;
    serverid_ = 0u;
    port_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBProxyAddrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverId;
        break;
      }

      // required uint32 serverId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Port;
        break;
      }

      // required uint32 Port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Ip;
        break;
      }

      // required string Ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBProxyAddrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // required uint32 serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint32 Port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required string Ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBProxyAddrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // required uint32 serverId = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint32 Port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required string Ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBProxyAddrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required uint32 serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 Port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string Ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBProxyAddrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBProxyAddrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBProxyAddrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBProxyAddrInfo::MergeFrom(const DBProxyAddrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBProxyAddrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBProxyAddrInfo::CopyFrom(const DBProxyAddrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBProxyAddrInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DBProxyAddrInfo::Swap(DBProxyAddrInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(serverid_, other->serverid_);
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBProxyAddrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBProxyAddrInfo_descriptor_;
  metadata.reflection = DBProxyAddrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterRspSceneId::kRetCodeFieldNumber;
const int CenterRspSceneId::kDstSceneIdFieldNumber;
const int CenterRspSceneId::kDstPosFieldNumber;
const int CenterRspSceneId::kIpFieldNumber;
const int CenterRspSceneId::kPortFieldNumber;
const int CenterRspSceneId::kTokenFieldNumber;
const int CenterRspSceneId::kDstMapIdFieldNumber;
#endif  // !_MSC_VER

CenterRspSceneId::CenterRspSceneId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterRspSceneId::InitAsDefaultInstance() {
  dstpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

CenterRspSceneId::CenterRspSceneId(const CenterRspSceneId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterRspSceneId::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  dstsceneid_ = 0u;
  dstpos_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dstmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterRspSceneId::~CenterRspSceneId() {
  SharedDtor();
}

void CenterRspSceneId::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete dstpos_;
  }
}

void CenterRspSceneId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterRspSceneId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterRspSceneId_descriptor_;
}

const CenterRspSceneId& CenterRspSceneId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

CenterRspSceneId* CenterRspSceneId::default_instance_ = NULL;

CenterRspSceneId* CenterRspSceneId::New() const {
  return new CenterRspSceneId;
}

void CenterRspSceneId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
    dstsceneid_ = 0u;
    if (has_dstpos()) {
      if (dstpos_ != NULL) dstpos_->::ProtoBuf::Vector3PB::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    dstmapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterRspSceneId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstSceneId;
        break;
      }

      // optional uint32 dstSceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstsceneid_)));
          set_has_dstsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dstPos;
        break;
      }

      // optional .ProtoBuf.Vector3PB dstPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dstpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dstMapId;
        break;
      }

      // optional uint32 dstMapId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstmapid_)));
          set_has_dstmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterRspSceneId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional uint32 dstSceneId = 2;
  if (has_dstsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dstsceneid(), output);
  }

  // optional .ProtoBuf.Vector3PB dstPos = 3;
  if (has_dstpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dstpos(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }

  // optional uint32 dstMapId = 7;
  if (has_dstmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dstmapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterRspSceneId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 dstSceneId = 2;
  if (has_dstsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dstsceneid(), target);
  }

  // optional .ProtoBuf.Vector3PB dstPos = 3;
  if (has_dstpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dstpos(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  // optional uint32 dstMapId = 7;
  if (has_dstmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dstmapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterRspSceneId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional uint32 dstSceneId = 2;
    if (has_dstsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstsceneid());
    }

    // optional .ProtoBuf.Vector3PB dstPos = 3;
    if (has_dstpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dstpos());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 dstMapId = 7;
    if (has_dstmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstmapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterRspSceneId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterRspSceneId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterRspSceneId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterRspSceneId::MergeFrom(const CenterRspSceneId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_dstsceneid()) {
      set_dstsceneid(from.dstsceneid());
    }
    if (from.has_dstpos()) {
      mutable_dstpos()->::ProtoBuf::Vector3PB::MergeFrom(from.dstpos());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_dstmapid()) {
      set_dstmapid(from.dstmapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterRspSceneId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterRspSceneId::CopyFrom(const CenterRspSceneId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterRspSceneId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dstpos()) {
    if (!this->dstpos().IsInitialized()) return false;
  }
  return true;
}

void CenterRspSceneId::Swap(CenterRspSceneId* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(dstsceneid_, other->dstsceneid_);
    std::swap(dstpos_, other->dstpos_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(dstmapid_, other->dstmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterRspSceneId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterRspSceneId_descriptor_;
  metadata.reflection = CenterRspSceneId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterDailyUpdateNotify::kUpdateDailyTimeFieldNumber;
#endif  // !_MSC_VER

CenterDailyUpdateNotify::CenterDailyUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterDailyUpdateNotify::InitAsDefaultInstance() {
}

CenterDailyUpdateNotify::CenterDailyUpdateNotify(const CenterDailyUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterDailyUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  updatedailytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterDailyUpdateNotify::~CenterDailyUpdateNotify() {
  SharedDtor();
}

void CenterDailyUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterDailyUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterDailyUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterDailyUpdateNotify_descriptor_;
}

const CenterDailyUpdateNotify& CenterDailyUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

CenterDailyUpdateNotify* CenterDailyUpdateNotify::default_instance_ = NULL;

CenterDailyUpdateNotify* CenterDailyUpdateNotify::New() const {
  return new CenterDailyUpdateNotify;
}

void CenterDailyUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatedailytime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterDailyUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 updateDailyTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatedailytime_)));
          set_has_updatedailytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterDailyUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 updateDailyTime = 1;
  if (has_updatedailytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatedailytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterDailyUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 updateDailyTime = 1;
  if (has_updatedailytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatedailytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterDailyUpdateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 updateDailyTime = 1;
    if (has_updatedailytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatedailytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterDailyUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterDailyUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterDailyUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterDailyUpdateNotify::MergeFrom(const CenterDailyUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatedailytime()) {
      set_updatedailytime(from.updatedailytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterDailyUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterDailyUpdateNotify::CopyFrom(const CenterDailyUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterDailyUpdateNotify::IsInitialized() const {

  return true;
}

void CenterDailyUpdateNotify::Swap(CenterDailyUpdateNotify* other) {
  if (other != this) {
    std::swap(updatedailytime_, other->updatedailytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterDailyUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterDailyUpdateNotify_descriptor_;
  metadata.reflection = CenterDailyUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterWeekUpdateNotify::kUpdateDailyTimeFieldNumber;
#endif  // !_MSC_VER

CenterWeekUpdateNotify::CenterWeekUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterWeekUpdateNotify::InitAsDefaultInstance() {
}

CenterWeekUpdateNotify::CenterWeekUpdateNotify(const CenterWeekUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterWeekUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  updatedailytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterWeekUpdateNotify::~CenterWeekUpdateNotify() {
  SharedDtor();
}

void CenterWeekUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterWeekUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterWeekUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterWeekUpdateNotify_descriptor_;
}

const CenterWeekUpdateNotify& CenterWeekUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fServerInternalProtocol_2eproto();
  return *default_instance_;
}

CenterWeekUpdateNotify* CenterWeekUpdateNotify::default_instance_ = NULL;

CenterWeekUpdateNotify* CenterWeekUpdateNotify::New() const {
  return new CenterWeekUpdateNotify;
}

void CenterWeekUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    updatedailytime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterWeekUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 updateDailyTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatedailytime_)));
          set_has_updatedailytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterWeekUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 updateDailyTime = 1;
  if (has_updatedailytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->updatedailytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterWeekUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 updateDailyTime = 1;
  if (has_updatedailytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->updatedailytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterWeekUpdateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 updateDailyTime = 1;
    if (has_updatedailytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatedailytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterWeekUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterWeekUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterWeekUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterWeekUpdateNotify::MergeFrom(const CenterWeekUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatedailytime()) {
      set_updatedailytime(from.updatedailytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterWeekUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterWeekUpdateNotify::CopyFrom(const CenterWeekUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterWeekUpdateNotify::IsInitialized() const {

  return true;
}

void CenterWeekUpdateNotify::Swap(CenterWeekUpdateNotify* other) {
  if (other != this) {
    std::swap(updatedailytime_, other->updatedailytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterWeekUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterWeekUpdateNotify_descriptor_;
  metadata.reflection = CenterWeekUpdateNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
