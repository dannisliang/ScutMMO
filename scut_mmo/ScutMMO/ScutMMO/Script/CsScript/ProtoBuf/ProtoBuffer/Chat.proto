import "ProtoBuffer/ComProtocol.proto";
import "ProtoBuffer/ClientToServerCmd.proto";
import "Common/ComDefine.proto";
package ProtoBuf;

enum CHAT_TYPE
{
	CHAT_TYPE_WORLD		= 1;	//世界
	CHAT_TYPE_CAMP		= 2;	//阵营
	CHAT_TYPE_GUILD		= 3;	//工会
	CHAT_TYPE_TEAM		= 4;	//队伍
	CHAT_TYPE_SCENE		= 5;	//场景
	CHAT_TYPE_SYSTEM	= 6;	//系统
	CHAT_TYPE_ENLIST	= 7;	//招募 求组
	CHAT_TYPE_PRIVATE   = 8;	//私聊
	CHAT_TYPE_RUMOR		= 9;	//传闻 即是跑马灯
	CHAT_TYPE_CAMP_RUMOR = 10;  //阵营传闻
}

//客户端发送的文本信息
message ChatContentInfo
{
	required string describes = 1;			//文本内容
	repeated ItemProtoInfo itemInfo = 2;	//物品信息
	//CTODO后续可以继续往这个结构体扩展装备宠物等等信息
}

//客户端请求发送聊天
message CGChatMsgReq
{
	optional CHAT_TYPE chatType					= 1;					//聊天频道类型
	repeated ChatContentInfo chatContent		= 2;					//聊天内容
	optional uint32 targetId					= 3;					//私聊ID
	optional uint32 msgType						= 4;					//区分消息类型
}

//聊天信息返回
message GCChatMsgRsp
{
	optional CHAT_TYPE chatType						= 1;					//聊天频道类型
	optional CharacterPlayerMiniInfo fromPlayerInfo	= 2;					//发送玩家信息
	optional uint32 msgType							= 3;					//区分消息类型
	repeated ChatContentInfo chatContent			= 4;					//聊天内容
	optional uint32 ret								= 5;					//错误码
}

//系统广播消息,传闻等等
message GCSystemChatMsgNotify
{
	optional CHAT_TYPE chatType						= 1;					//聊天频道类型
	optional uint32 msgType							= 2;					//区分消息类型
	repeated CharacterPlayerMiniInfo players		= 3;					//玩家数据
	repeated string text							= 4;					//突出显示的文本数据，例如：XXX副本 XXX怪物 XX工会 XX杀等等
	repeated uint32 parmas							= 5;					//数字参数：颜色等级，工会id 副本id 等数据都按顺序填充到这个字段
	//CTODO后续继续扩展
}

//请求离线消息
message CWAskOfflineMsgReq
{
	optional uint32 charID							= 1;					//角色ID
}

//返回离线消息
message WCAskOfflineMsgRsp
{
	optional uint32 msgSize							= 1;					//数据长度
}

//分段请求离线消息
message CWIntrvalAskOfflineMsgReq
{
	optional uint32 charID							= 1;					//角色ID
	optional uint32 size							= 2;					//每次请求的条数 可以按100条请求或者200条
}

//离线消息结构体
message OfflineMsg
{
	optional CharacterPlayerMiniInfo playerInfo		= 1;					//发送方角色数据
	repeated ChatContentInfo chatContent			= 2;					//聊天内容
	optional uint64 sendTime						= 3;					//发送时间
}

message WCIntrvalAskOfflineMsgRsp
{
	repeated OfflineMsg offlineMsgList				= 1;					//离线数据
}

//请求查看玩家详细数据
message CWCharacterDetailReq
{
	required uint32 charID = 1;	//需要查看的玩家ID
	optional string name = 2;	//需要查看的玩家名字( charID 为0的时按 name 查找)
}

message WCCharacterDetailRsp
{
	required int32 retcode					= 1;	//返回码
	optional CharacterDetailProtoInfo info  = 2;	//详细信息
}




//-----------------------------------以下是服务器内部通信协议客户端无需关心--------------------------------------------
message GWChatMsgReq
{
	optional CHAT_TYPE chatType					= 1;					//聊天频道类型
	repeated ChatContentInfo chatContent		= 2;					//聊天内容
	optional uint32	fromId						= 3;					//发送方ID
	optional uint32 targetId					= 4;					//私聊ID
	optional uint32 msgType						= 5;					//区分消息类型
}

//逻辑服通知世界服转发传闻或广播
message GWSysChatMsgNotify
{
	optional CHAT_TYPE chatType						= 1;					//聊天频道类型
	optional uint32 msgType							= 2;					//区分消息类型
	repeated CharacterPlayerMiniInfo players		= 3;					//玩家数据
	repeated string text							= 4;					//突出显示的文本数据，例如：XXX副本 XXX怪物 XX工会 XX杀等等
	repeated uint32 parmas							= 5;					//数字参数：颜色等级，工会id 副本id 等数据都按顺序填充到这个字段
	optional uint32 extraId							= 6;
}