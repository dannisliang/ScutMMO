// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/LogicToClient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/LogicToClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* PlayerClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Npc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Npc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Summon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Summon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Herbs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Herbs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Mine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Mine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesCreateData_Fish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesCreateData_Fish_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureDestoryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureDestoryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynAttrsAllClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynAttrsAllClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynAttrsToSingleClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynAttrsToSingleClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesLevUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesLevUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreaturesLevUp_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreaturesLevUp_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginLogicResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginLogicResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountLoginLogicResponse_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyClientState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClientState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogoutGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogoutGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogoutGame_SwitchServerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogoutGame_SwitchServerParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCharacterListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCharacterListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCreateCharacterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCreateCharacterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientCreateCharacterResponse_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientDelCharacterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDelCharacterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReconnectResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SyncActorMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncActorMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransSceneRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransSceneRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLoadMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLoadMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyTransLogicNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyTransLogicNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseSkillResult_Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseSkillResult_Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastSkillUse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastSkillUse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseBuffResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseBuffResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseBuffResult_Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseBuffResult_Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevUpSkillRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevUpSkillRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastUseSkillStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastUseSkillStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffBagDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffBagDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffStateChangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffStateChangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AiPlayIdleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AiPlayIdleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpKillingValueBroadCast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpKillingValueBroadCast_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpRedPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpRedPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffReplaceNormalSkills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffReplaceNormalSkills_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fLogicToClient_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/LogicToClient.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerClientInfo_descriptor_ = file->message_type(0);
  static const int PlayerClientInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, mspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, namebody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, nameweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, playerattrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, pk_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, pk_killing_value_),
  };
  PlayerClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerClientInfo_descriptor_,
      PlayerClientInfo::default_instance_,
      PlayerClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerClientInfo));
  CreaturesCreateData_descriptor_ = file->message_type(1);
  static const int CreaturesCreateData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, drops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, summons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, herbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, mines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, fishs_),
  };
  CreaturesCreateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_descriptor_,
      CreaturesCreateData::default_instance_,
      CreaturesCreateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData));
  CreaturesCreateData_Player_descriptor_ = CreaturesCreateData_descriptor_->nested_type(0);
  static const int CreaturesCreateData_Player_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, playerrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, namebody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, nameweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, mspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, pk_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, pk_killing_value_),
  };
  CreaturesCreateData_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Player_descriptor_,
      CreaturesCreateData_Player::default_instance_,
      CreaturesCreateData_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Player));
  CreaturesCreateData_Monster_descriptor_ = CreaturesCreateData_descriptor_->nested_type(1);
  static const int CreaturesCreateData_Monster_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, monstercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, monsterconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, mspeed_),
  };
  CreaturesCreateData_Monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Monster_descriptor_,
      CreaturesCreateData_Monster::default_instance_,
      CreaturesCreateData_Monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Monster));
  CreaturesCreateData_Npc_descriptor_ = CreaturesCreateData_descriptor_->nested_type(2);
  static const int CreaturesCreateData_Npc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Npc, npccid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Npc, npcconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Npc, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Npc, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Npc, posz_),
  };
  CreaturesCreateData_Npc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Npc_descriptor_,
      CreaturesCreateData_Npc::default_instance_,
      CreaturesCreateData_Npc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Npc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Npc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Npc));
  CreaturesCreateData_Drop_descriptor_ = CreaturesCreateData_descriptor_->nested_type(3);
  static const int CreaturesCreateData_Drop_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, dropcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, droptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, droptypeval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, droptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, item_),
  };
  CreaturesCreateData_Drop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Drop_descriptor_,
      CreaturesCreateData_Drop::default_instance_,
      CreaturesCreateData_Drop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Drop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Drop));
  CreaturesCreateData_Summon_descriptor_ = CreaturesCreateData_descriptor_->nested_type(4);
  static const int CreaturesCreateData_Summon_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, summoncid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, summonconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, mspeed_),
  };
  CreaturesCreateData_Summon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Summon_descriptor_,
      CreaturesCreateData_Summon::default_instance_,
      CreaturesCreateData_Summon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Summon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Summon));
  CreaturesCreateData_Herbs_descriptor_ = CreaturesCreateData_descriptor_->nested_type(5);
  static const int CreaturesCreateData_Herbs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Herbs, herbscid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Herbs, herbsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Herbs, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Herbs, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Herbs, posz_),
  };
  CreaturesCreateData_Herbs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Herbs_descriptor_,
      CreaturesCreateData_Herbs::default_instance_,
      CreaturesCreateData_Herbs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Herbs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Herbs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Herbs));
  CreaturesCreateData_Mine_descriptor_ = CreaturesCreateData_descriptor_->nested_type(6);
  static const int CreaturesCreateData_Mine_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Mine, minecid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Mine, mineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Mine, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Mine, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Mine, posz_),
  };
  CreaturesCreateData_Mine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Mine_descriptor_,
      CreaturesCreateData_Mine::default_instance_,
      CreaturesCreateData_Mine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Mine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Mine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Mine));
  CreaturesCreateData_Fish_descriptor_ = CreaturesCreateData_descriptor_->nested_type(7);
  static const int CreaturesCreateData_Fish_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Fish, fishcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Fish, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Fish, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Fish, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Fish, posz_),
  };
  CreaturesCreateData_Fish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesCreateData_Fish_descriptor_,
      CreaturesCreateData_Fish::default_instance_,
      CreaturesCreateData_Fish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Fish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesCreateData_Fish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesCreateData_Fish));
  CreatureDestoryData_descriptor_ = file->message_type(2);
  static const int CreatureDestoryData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureDestoryData, cids_),
  };
  CreatureDestoryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureDestoryData_descriptor_,
      CreatureDestoryData::default_instance_,
      CreatureDestoryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureDestoryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureDestoryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureDestoryData));
  SynAttrsAllClient_descriptor_ = file->message_type(3);
  static const int SynAttrsAllClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsAllClient, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsAllClient, creatureattrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsAllClient, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsAllClient, curstate_),
  };
  SynAttrsAllClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynAttrsAllClient_descriptor_,
      SynAttrsAllClient::default_instance_,
      SynAttrsAllClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsAllClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsAllClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynAttrsAllClient));
  SynAttrsToSingleClient_descriptor_ = file->message_type(4);
  static const int SynAttrsToSingleClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsToSingleClient, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsToSingleClient, creatureattrs_),
  };
  SynAttrsToSingleClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynAttrsToSingleClient_descriptor_,
      SynAttrsToSingleClient::default_instance_,
      SynAttrsToSingleClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsToSingleClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynAttrsToSingleClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynAttrsToSingleClient));
  CreaturesLevUp_descriptor_ = file->message_type(5);
  static const int CreaturesLevUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp, creatureattrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp, character_),
  };
  CreaturesLevUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesLevUp_descriptor_,
      CreaturesLevUp::default_instance_,
      CreaturesLevUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesLevUp));
  CreaturesLevUp_Player_descriptor_ = CreaturesLevUp_descriptor_->nested_type(0);
  static const int CreaturesLevUp_Player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp_Player, skills_),
  };
  CreaturesLevUp_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreaturesLevUp_Player_descriptor_,
      CreaturesLevUp_Player::default_instance_,
      CreaturesLevUp_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreaturesLevUp_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreaturesLevUp_Player));
  AccountLoginLogicResponse_descriptor_ = file->message_type(6);
  static const int AccountLoginLogicResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicResponse, loginresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicResponse, servertick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicResponse, unixmsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicResponse, accountindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicResponse, startmark_),
  };
  AccountLoginLogicResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginLogicResponse_descriptor_,
      AccountLoginLogicResponse::default_instance_,
      AccountLoginLogicResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginLogicResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginLogicResponse));
  AccountLoginLogicResponse_RESULT_descriptor_ = AccountLoginLogicResponse_descriptor_->enum_type(0);
  NotifyClientState_descriptor_ = file->message_type(7);
  static const int NotifyClientState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClientState, gamestate_),
  };
  NotifyClientState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClientState_descriptor_,
      NotifyClientState::default_instance_,
      NotifyClientState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClientState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClientState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClientState));
  NotifyLogoutGame_descriptor_ = file->message_type(8);
  static const int NotifyLogoutGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, switch_server_param_),
  };
  NotifyLogoutGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogoutGame_descriptor_,
      NotifyLogoutGame::default_instance_,
      NotifyLogoutGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogoutGame));
  NotifyLogoutGame_SwitchServerParam_descriptor_ = NotifyLogoutGame_descriptor_->nested_type(0);
  static const int NotifyLogoutGame_SwitchServerParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, logic_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, logic_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, scene_template_id_),
  };
  NotifyLogoutGame_SwitchServerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogoutGame_SwitchServerParam_descriptor_,
      NotifyLogoutGame_SwitchServerParam::default_instance_,
      NotifyLogoutGame_SwitchServerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogoutGame_SwitchServerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogoutGame_SwitchServerParam));
  ClientCharacterListResponse_descriptor_ = file->message_type(9);
  static const int ClientCharacterListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCharacterListResponse, charinfolist_),
  };
  ClientCharacterListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCharacterListResponse_descriptor_,
      ClientCharacterListResponse::default_instance_,
      ClientCharacterListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCharacterListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCharacterListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCharacterListResponse));
  ClientCreateCharacterResponse_descriptor_ = file->message_type(10);
  static const int ClientCreateCharacterResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterResponse, newcharacterinfo_),
  };
  ClientCreateCharacterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCreateCharacterResponse_descriptor_,
      ClientCreateCharacterResponse::default_instance_,
      ClientCreateCharacterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateCharacterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCreateCharacterResponse));
  ClientCreateCharacterResponse_RESULT_descriptor_ = ClientCreateCharacterResponse_descriptor_->enum_type(0);
  ClientDelCharacterRsp_descriptor_ = file->message_type(11);
  static const int ClientDelCharacterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelCharacterRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelCharacterRsp, charid_),
  };
  ClientDelCharacterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientDelCharacterRsp_descriptor_,
      ClientDelCharacterRsp::default_instance_,
      ClientDelCharacterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelCharacterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDelCharacterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientDelCharacterRsp));
  ReconnectResponse_descriptor_ = file->message_type(12);
  static const int ReconnectResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResponse, result_),
  };
  ReconnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectResponse_descriptor_,
      ReconnectResponse::default_instance_,
      ReconnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectResponse));
  ReconnectResponse_Result_descriptor_ = ReconnectResponse_descriptor_->enum_type(0);
  SyncActorMove_descriptor_ = file->message_type(13);
  static const int SyncActorMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncActorMove, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncActorMove, currentpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncActorMove, path_),
  };
  SyncActorMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncActorMove_descriptor_,
      SyncActorMove::default_instance_,
      SyncActorMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncActorMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncActorMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncActorMove));
  TransSceneRet_descriptor_ = file->message_type(14);
  static const int TransSceneRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneRet, result_),
  };
  TransSceneRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransSceneRet_descriptor_,
      TransSceneRet::default_instance_,
      TransSceneRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransSceneRet));
  NotifyLoadMap_descriptor_ = file->message_type(15);
  static const int NotifyLoadMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, transpos_),
  };
  NotifyLoadMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLoadMap_descriptor_,
      NotifyLoadMap::default_instance_,
      NotifyLoadMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLoadMap));
  NotifyTransLogicNode_descriptor_ = file->message_type(16);
  static const int NotifyTransLogicNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTransLogicNode, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTransLogicNode, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTransLogicNode, token_),
  };
  NotifyTransLogicNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyTransLogicNode_descriptor_,
      NotifyTransLogicNode::default_instance_,
      NotifyTransLogicNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTransLogicNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyTransLogicNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyTransLogicNode));
  UseSkillResult_descriptor_ = file->message_type(17);
  static const int UseSkillResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult, usercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult, statebags_),
  };
  UseSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillResult_descriptor_,
      UseSkillResult::default_instance_,
      UseSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillResult));
  UseSkillResult_Target_descriptor_ = UseSkillResult_descriptor_->nested_type(0);
  static const int UseSkillResult_Target_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult_Target, targetcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult_Target, creatureattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult_Target, digperfors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult_Target, bedead_),
  };
  UseSkillResult_Target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseSkillResult_Target_descriptor_,
      UseSkillResult_Target::default_instance_,
      UseSkillResult_Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult_Target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseSkillResult_Target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseSkillResult_Target));
  BroadcastSkillUse_descriptor_ = file->message_type(18);
  static const int BroadcastSkillUse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUse, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUse, usercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUse, targetcids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUse, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUse, targetpos_),
  };
  BroadcastSkillUse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastSkillUse_descriptor_,
      BroadcastSkillUse::default_instance_,
      BroadcastSkillUse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastSkillUse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastSkillUse));
  UseBuffResult_descriptor_ = file->message_type(19);
  static const int UseBuffResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, usercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, buffbagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, buffbaginstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, buffid_),
  };
  UseBuffResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseBuffResult_descriptor_,
      UseBuffResult::default_instance_,
      UseBuffResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseBuffResult));
  UseBuffResult_Target_descriptor_ = UseBuffResult_descriptor_->nested_type(0);
  static const int UseBuffResult_Target_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult_Target, targetcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult_Target, creatureattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult_Target, digperfors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult_Target, bedead_),
  };
  UseBuffResult_Target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseBuffResult_Target_descriptor_,
      UseBuffResult_Target::default_instance_,
      UseBuffResult_Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult_Target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseBuffResult_Target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseBuffResult_Target));
  LevUpSkillRsp_descriptor_ = file->message_type(20);
  static const int LevUpSkillRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillRsp, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillRsp, skilllev_),
  };
  LevUpSkillRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevUpSkillRsp_descriptor_,
      LevUpSkillRsp::default_instance_,
      LevUpSkillRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevUpSkillRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevUpSkillRsp));
  BroadcastUseSkillStop_descriptor_ = file->message_type(21);
  static const int BroadcastUseSkillStop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastUseSkillStop, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastUseSkillStop, usercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastUseSkillStop, stopstep_),
  };
  BroadcastUseSkillStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastUseSkillStop_descriptor_,
      BroadcastUseSkillStop::default_instance_,
      BroadcastUseSkillStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastUseSkillStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastUseSkillStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastUseSkillStop));
  BuffBagDetailInfo_descriptor_ = file->message_type(22);
  static const int BuffBagDetailInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, buff_bag_inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, buff_bag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, sender_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, recver_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, continuance_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, delayed_time_),
  };
  BuffBagDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffBagDetailInfo_descriptor_,
      BuffBagDetailInfo::default_instance_,
      BuffBagDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffBagDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffBagDetailInfo));
  BuffStateChangeInfo_descriptor_ = file->message_type(23);
  static const int BuffStateChangeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffStateChangeInfo, buff_state_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffStateChangeInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffStateChangeInfo, cid_),
  };
  BuffStateChangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffStateChangeInfo_descriptor_,
      BuffStateChangeInfo::default_instance_,
      BuffStateChangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffStateChangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffStateChangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffStateChangeInfo));
  AiPlayIdleInfo_descriptor_ = file->message_type(24);
  static const int AiPlayIdleInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiPlayIdleInfo, cid_),
  };
  AiPlayIdleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AiPlayIdleInfo_descriptor_,
      AiPlayIdleInfo::default_instance_,
      AiPlayIdleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiPlayIdleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiPlayIdleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AiPlayIdleInfo));
  PvpKillingValueBroadCast_descriptor_ = file->message_type(25);
  static const int PvpKillingValueBroadCast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpKillingValueBroadCast, pk_killing_value_),
  };
  PvpKillingValueBroadCast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpKillingValueBroadCast_descriptor_,
      PvpKillingValueBroadCast::default_instance_,
      PvpKillingValueBroadCast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpKillingValueBroadCast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpKillingValueBroadCast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpKillingValueBroadCast));
  PvpRedPlayer_descriptor_ = file->message_type(26);
  static const int PvpRedPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRedPlayer, is_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRedPlayer, player_cid_),
  };
  PvpRedPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpRedPlayer_descriptor_,
      PvpRedPlayer::default_instance_,
      PvpRedPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRedPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpRedPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpRedPlayer));
  BuffReplaceNormalSkills_descriptor_ = file->message_type(27);
  static const int BuffReplaceNormalSkills_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffReplaceNormalSkills, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffReplaceNormalSkills, oldskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffReplaceNormalSkills, newskill_),
  };
  BuffReplaceNormalSkills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffReplaceNormalSkills_descriptor_,
      BuffReplaceNormalSkills::default_instance_,
      BuffReplaceNormalSkills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffReplaceNormalSkills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffReplaceNormalSkills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffReplaceNormalSkills));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fLogicToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerClientInfo_descriptor_, &PlayerClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_descriptor_, &CreaturesCreateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Player_descriptor_, &CreaturesCreateData_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Monster_descriptor_, &CreaturesCreateData_Monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Npc_descriptor_, &CreaturesCreateData_Npc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Drop_descriptor_, &CreaturesCreateData_Drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Summon_descriptor_, &CreaturesCreateData_Summon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Herbs_descriptor_, &CreaturesCreateData_Herbs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Mine_descriptor_, &CreaturesCreateData_Mine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesCreateData_Fish_descriptor_, &CreaturesCreateData_Fish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureDestoryData_descriptor_, &CreatureDestoryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynAttrsAllClient_descriptor_, &SynAttrsAllClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynAttrsToSingleClient_descriptor_, &SynAttrsToSingleClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesLevUp_descriptor_, &CreaturesLevUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreaturesLevUp_Player_descriptor_, &CreaturesLevUp_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginLogicResponse_descriptor_, &AccountLoginLogicResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClientState_descriptor_, &NotifyClientState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogoutGame_descriptor_, &NotifyLogoutGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogoutGame_SwitchServerParam_descriptor_, &NotifyLogoutGame_SwitchServerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCharacterListResponse_descriptor_, &ClientCharacterListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCreateCharacterResponse_descriptor_, &ClientCreateCharacterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientDelCharacterRsp_descriptor_, &ClientDelCharacterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectResponse_descriptor_, &ReconnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncActorMove_descriptor_, &SyncActorMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransSceneRet_descriptor_, &TransSceneRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLoadMap_descriptor_, &NotifyLoadMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyTransLogicNode_descriptor_, &NotifyTransLogicNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillResult_descriptor_, &UseSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseSkillResult_Target_descriptor_, &UseSkillResult_Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastSkillUse_descriptor_, &BroadcastSkillUse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseBuffResult_descriptor_, &UseBuffResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseBuffResult_Target_descriptor_, &UseBuffResult_Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevUpSkillRsp_descriptor_, &LevUpSkillRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastUseSkillStop_descriptor_, &BroadcastUseSkillStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffBagDetailInfo_descriptor_, &BuffBagDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffStateChangeInfo_descriptor_, &BuffStateChangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AiPlayIdleInfo_descriptor_, &AiPlayIdleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpKillingValueBroadCast_descriptor_, &PvpKillingValueBroadCast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpRedPlayer_descriptor_, &PvpRedPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffReplaceNormalSkills_descriptor_, &BuffReplaceNormalSkills::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fLogicToClient_2eproto() {
  delete PlayerClientInfo::default_instance_;
  delete PlayerClientInfo_reflection_;
  delete CreaturesCreateData::default_instance_;
  delete CreaturesCreateData_reflection_;
  delete CreaturesCreateData_Player::default_instance_;
  delete CreaturesCreateData_Player_reflection_;
  delete CreaturesCreateData_Monster::default_instance_;
  delete CreaturesCreateData_Monster_reflection_;
  delete CreaturesCreateData_Npc::default_instance_;
  delete CreaturesCreateData_Npc_reflection_;
  delete CreaturesCreateData_Drop::default_instance_;
  delete CreaturesCreateData_Drop_reflection_;
  delete CreaturesCreateData_Summon::default_instance_;
  delete CreaturesCreateData_Summon_reflection_;
  delete CreaturesCreateData_Herbs::default_instance_;
  delete CreaturesCreateData_Herbs_reflection_;
  delete CreaturesCreateData_Mine::default_instance_;
  delete CreaturesCreateData_Mine_reflection_;
  delete CreaturesCreateData_Fish::default_instance_;
  delete CreaturesCreateData_Fish_reflection_;
  delete CreatureDestoryData::default_instance_;
  delete CreatureDestoryData_reflection_;
  delete SynAttrsAllClient::default_instance_;
  delete SynAttrsAllClient_reflection_;
  delete SynAttrsToSingleClient::default_instance_;
  delete SynAttrsToSingleClient_reflection_;
  delete CreaturesLevUp::default_instance_;
  delete CreaturesLevUp_reflection_;
  delete CreaturesLevUp_Player::default_instance_;
  delete CreaturesLevUp_Player_reflection_;
  delete AccountLoginLogicResponse::default_instance_;
  delete AccountLoginLogicResponse_reflection_;
  delete NotifyClientState::default_instance_;
  delete NotifyClientState_reflection_;
  delete NotifyLogoutGame::default_instance_;
  delete NotifyLogoutGame_reflection_;
  delete NotifyLogoutGame_SwitchServerParam::default_instance_;
  delete NotifyLogoutGame_SwitchServerParam_reflection_;
  delete ClientCharacterListResponse::default_instance_;
  delete ClientCharacterListResponse_reflection_;
  delete ClientCreateCharacterResponse::default_instance_;
  delete ClientCreateCharacterResponse_reflection_;
  delete ClientDelCharacterRsp::default_instance_;
  delete ClientDelCharacterRsp_reflection_;
  delete ReconnectResponse::default_instance_;
  delete ReconnectResponse_reflection_;
  delete SyncActorMove::default_instance_;
  delete SyncActorMove_reflection_;
  delete TransSceneRet::default_instance_;
  delete TransSceneRet_reflection_;
  delete NotifyLoadMap::default_instance_;
  delete NotifyLoadMap_reflection_;
  delete NotifyTransLogicNode::default_instance_;
  delete NotifyTransLogicNode_reflection_;
  delete UseSkillResult::default_instance_;
  delete UseSkillResult_reflection_;
  delete UseSkillResult_Target::default_instance_;
  delete UseSkillResult_Target_reflection_;
  delete BroadcastSkillUse::default_instance_;
  delete BroadcastSkillUse_reflection_;
  delete UseBuffResult::default_instance_;
  delete UseBuffResult_reflection_;
  delete UseBuffResult_Target::default_instance_;
  delete UseBuffResult_Target_reflection_;
  delete LevUpSkillRsp::default_instance_;
  delete LevUpSkillRsp_reflection_;
  delete BroadcastUseSkillStop::default_instance_;
  delete BroadcastUseSkillStop_reflection_;
  delete BuffBagDetailInfo::default_instance_;
  delete BuffBagDetailInfo_reflection_;
  delete BuffStateChangeInfo::default_instance_;
  delete BuffStateChangeInfo_reflection_;
  delete AiPlayIdleInfo::default_instance_;
  delete AiPlayIdleInfo_reflection_;
  delete PvpKillingValueBroadCast::default_instance_;
  delete PvpKillingValueBroadCast_reflection_;
  delete PvpRedPlayer::default_instance_;
  delete PvpRedPlayer_reflection_;
  delete BuffReplaceNormalSkills::default_instance_;
  delete BuffReplaceNormalSkills_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fServerToClientCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037ProtoBuffer/LogicToClient.proto\022\010Proto"
    "Buf\032\035ProtoBuffer/ComProtocol.proto\032\026Comm"
    "on/ComDefine.proto\032#ProtoBuffer/ServerTo"
    "ClientCmd.proto\"\346\002\n\020PlayerClientInfo\022\020\n\010"
    "playerId\030\001 \002(\r\022\022\n\nplayername\030\002 \002(\t\022\017\n\007gr"
    "oupId\030\003 \002(\r\022\022\n\ncreateTime\030\004 \002(\004\022\021\n\tlogin"
    "Time\030\005 \002(\004\022\r\n\005mapId\030\006 \002(\r\022\014\n\004posX\030\007 \002(\002\022"
    "\014\n\004posY\030\010 \002(\002\022\014\n\004posZ\030\t \002(\002\022\016\n\006mspeed\030\n "
    "\002(\002\022\020\n\010namebody\030\013 \002(\r\022\022\n\nnameweapon\030\014 \002("
    "\r\022\020\n\010curstate\030\r \002(\r\022#\n\006skills\030\016 \003(\0132\023.Pr"
    "otoBuf.SkillCell\022#\n\013playerAttrs\030\017 \003(\0132\016."
    "ProtoBuf.Attr\022\017\n\007pk_mode\030\020 \002(\r\022\030\n\020pk_kil"
    "ling_value\030\021 \002(\r\"\352\013\n\023CreaturesCreateData"
    "\0225\n\007players\030\001 \003(\0132$.ProtoBuf.CreaturesCr"
    "eateData.Player\0227\n\010monsters\030\002 \003(\0132%.Prot"
    "oBuf.CreaturesCreateData.Monster\022/\n\004npcs"
    "\030\003 \003(\0132!.ProtoBuf.CreaturesCreateData.Np"
    "c\0221\n\005drops\030\004 \003(\0132\".ProtoBuf.CreaturesCre"
    "ateData.Drop\0225\n\007summons\030\005 \003(\0132$.ProtoBuf"
    ".CreaturesCreateData.Summon\0222\n\005herbs\030\006 \003"
    "(\0132#.ProtoBuf.CreaturesCreateData.Herbs\022"
    "1\n\005mines\030\007 \003(\0132\".ProtoBuf.CreaturesCreat"
    "eData.Mine\0221\n\005fishs\030\010 \003(\0132\".ProtoBuf.Cre"
    "aturesCreateData.Fish\032\230\002\n\006Player\022\020\n\010play"
    "erId\030\001 \002(\r\022\022\n\nplayername\030\002 \002(\t\022\014\n\004prof\030\003"
    " \002(\r\022\r\n\005level\030\004 \002(\r\022\n\n\002hp\030\005 \002(\r\022\014\n\004posX\030"
    "\006 \002(\002\022\014\n\004posY\030\007 \002(\002\022\014\n\004posZ\030\010 \002(\002\022\022\n\npla"
    "yerrace\030\t \002(\r\022\016\n\006gender\030\n \002(\r\022\020\n\010namebod"
    "y\030\013 \002(\r\022\022\n\nnameweapon\030\014 \002(\r\022\020\n\010curstate\030"
    "\r \002(\r\022\016\n\006mspeed\030\016 \001(\002\022\017\n\007pk_mode\030\017 \001(\r\022\030"
    "\n\020pk_killing_value\030\020 \001(\r\032\216\001\n\007Monster\022\022\n\n"
    "monsterCid\030\001 \002(\r\022\027\n\017monsterConfigId\030\002 \002("
    "\r\022\n\n\002hp\030\003 \002(\r\022\014\n\004posX\030\004 \002(\002\022\014\n\004posY\030\005 \002("
    "\002\022\014\n\004posZ\030\006 \002(\002\022\020\n\010curstate\030\007 \002(\r\022\016\n\006msp"
    "eed\030\010 \002(\002\032T\n\003Npc\022\016\n\006npcCid\030\001 \002(\r\022\023\n\013npcC"
    "onfigId\030\002 \002(\r\022\014\n\004posX\030\003 \002(\002\022\014\n\004posY\030\004 \002("
    "\002\022\014\n\004posZ\030\005 \002(\002\032\241\001\n\004Drop\022\017\n\007dropCid\030\001 \002("
    "\r\022\014\n\004posX\030\002 \002(\002\022\014\n\004posY\030\003 \002(\002\022\014\n\004posZ\030\004 "
    "\002(\002\022\020\n\010dropType\030\005 \002(\005\022\023\n\013dropTypeVal\030\006 \002"
    "(\r\022\020\n\010dropTime\030\007 \002(\004\022%\n\004item\030\010 \001(\0132\027.Pro"
    "toBuf.ItemProtoInfo\032\213\001\n\006Summon\022\021\n\tsummon"
    "Cid\030\001 \002(\r\022\026\n\016summonConfigId\030\002 \002(\r\022\n\n\002hp\030"
    "\003 \002(\r\022\014\n\004posX\030\004 \002(\002\022\014\n\004posY\030\005 \002(\002\022\014\n\004pos"
    "Z\030\006 \002(\002\022\020\n\010curstate\030\007 \002(\r\022\016\n\006mspeed\030\010 \002("
    "\002\032T\n\005Herbs\022\020\n\010herbsCid\030\001 \002(\r\022\017\n\007herbsId\030"
    "\002 \002(\r\022\014\n\004posX\030\003 \002(\002\022\014\n\004posY\030\004 \002(\002\022\014\n\004pos"
    "Z\030\005 \002(\002\032Q\n\004Mine\022\017\n\007mineCid\030\001 \002(\r\022\016\n\006mine"
    "Id\030\002 \002(\r\022\014\n\004posX\030\003 \002(\002\022\014\n\004posY\030\004 \002(\002\022\014\n\004"
    "posZ\030\005 \002(\002\032Q\n\004Fish\022\017\n\007fishCid\030\001 \002(\r\022\016\n\006f"
    "ishId\030\002 \002(\r\022\014\n\004posX\030\003 \002(\002\022\014\n\004posY\030\004 \002(\002\022"
    "\014\n\004posZ\030\005 \002(\002\"#\n\023CreatureDestoryData\022\014\n\004"
    "cids\030\001 \003(\r\"g\n\021SynAttrsAllClient\022\013\n\003cid\030\001"
    " \002(\r\022%\n\rcreatureAttrs\030\002 \003(\0132\016.ProtoBuf.A"
    "ttr\022\014\n\004name\030\003 \001(\t\022\020\n\010curstate\030\004 \001(\r\"L\n\026S"
    "ynAttrsToSingleClient\022\013\n\003cid\030\001 \002(\r\022%\n\rcr"
    "eatureAttrs\030\002 \003(\0132\016.ProtoBuf.Attr\"\266\001\n\016Cr"
    "eaturesLevUp\022\013\n\003cid\030\001 \002(\r\022\r\n\005level\030\002 \002(\r"
    "\022%\n\rcreatureAttrs\030\003 \003(\0132\016.ProtoBuf.Attr\022"
    "2\n\tcharacter\030\004 \001(\0132\037.ProtoBuf.CreaturesL"
    "evUp.Player\032-\n\006Player\022#\n\006skills\030\001 \003(\0132\023."
    "ProtoBuf.SkillCell\"\350\002\n\031AccountLoginLogic"
    "Response\022\023\n\013loginResult\030\001 \002(\r\022\022\n\nserverT"
    "ick\030\002 \002(\004\022\020\n\010unixMSec\030\003 \002(\004\022\024\n\014accountIn"
    "dex\030\004 \001(\r\022\021\n\tstartMark\030\005 \001(\004\"\346\001\n\006RESULT\022"
    "\035\n\031CLIENT_LOGIN_LOGIC_SUCESS\020\000\022\037\n\033CLIENT"
    "_LOGIN_LOGIC_TIME_OUT\020\001\022\036\n\032CLIENT_LOGIN_"
    "LOGIC_INVALID\020\002\022\034\n\030CLIENT_LOGIN_LOGIC_BL"
    "ACK\020\003\022\035\n\031CLIENT_LOGIN_LOGIC_REFUSE\020\004\022\037\n\033"
    "CLIENT_LOGIN_ALREADY_ONLINE\020\005\022\036\n\032CLIENT_"
    "LOGIN_LOGIC_UNKNOWN\020\006\"<\n\021NotifyClientSta"
    "te\022\'\n\tgameState\030\001 \002(\0162\024.ProtoBuf.GAME_ST"
    "ATE\"\346\001\n\020NotifyLogoutGame\022#\n\004flag\030\001 \002(\0162\025"
    ".ProtoBuf.LOGOUT_FLAG\022I\n\023switch_server_p"
    "aram\030\002 \001(\0132,.ProtoBuf.NotifyLogoutGame.S"
    "witchServerParam\032b\n\021SwitchServerParam\022\027\n"
    "\017logic_server_ip\030\001 \002(\t\022\031\n\021logic_server_p"
    "ort\030\002 \002(\r\022\031\n\021scene_template_id\030\003 \002(\r\"T\n\033"
    "ClientCharacterListResponse\0225\n\014charInfoL"
    "ist\030\001 \003(\0132\037.ProtoBuf.CharacterDBSimpleIn"
    "fo\"\334\002\n\035ClientCreateCharacterResponse\022\016\n\006"
    "result\030\001 \002(\r\0229\n\020newCharacterInfo\030\002 \001(\0132\037"
    ".ProtoBuf.CharacterDBSimpleInfo\"\357\001\n\006RESU"
    "LT\022#\n\037CREATE_CHARACTER_RESULT_SUCCESS\020\000\022"
    " \n\034CREATE_CHARACTER_RESULT_FAIL\020\001\022&\n\"CRE"
    "ATE_CHARACTER_RESULT_NAME_EXSIT\020\002\022\'\n#CRE"
    "ATE_CHARACTER_RESULT_NAME_LENGTH\020\003\022&\n\"CR"
    "EATE_CHARACTER_RESULT_NAME_ERROR\020\004\022%\n!CR"
    "EATE_CHARACTER_RESULT_MAX_COUNT\020\005\"8\n\025Cli"
    "entDelCharacterRsp\022\017\n\007retcode\030\001 \002(\005\022\016\n\006c"
    "harId\030\002 \001(\r\"j\n\021ReconnectResponse\0222\n\006resu"
    "lt\030\001 \002(\0162\".ProtoBuf.ReconnectResponse.Re"
    "sult\"!\n\006Result\022\013\n\007SUCCESS\020\001\022\n\n\006FAILED\020\002\""
    "h\n\rSyncActorMove\022\013\n\003cid\030\001 \002(\r\022\'\n\ncurrent"
    "Pos\030\002 \002(\0132\023.ProtoBuf.Vector3PB\022!\n\004path\030\003"
    " \003(\0132\023.ProtoBuf.Vector3PB\"\037\n\rTransSceneR"
    "et\022\016\n\006result\030\001 \002(\r\"V\n\rNotifyLoadMap\022\r\n\005m"
    "apId\030\001 \002(\r\022\017\n\007routeId\030\002 \002(\r\022%\n\010transPos\030"
    "\003 \002(\0132\023.ProtoBuf.Vector3PB\"\?\n\024NotifyTran"
    "sLogicNode\022\014\n\004port\030\001 \002(\r\022\n\n\002ip\030\002 \002(\t\022\r\n\005"
    "token\030\003 \002(\t\"\220\002\n\016UseSkillResult\022\017\n\007skillI"
    "d\030\001 \002(\r\022\017\n\007userCid\030\002 \002(\r\0220\n\007targets\030\003 \003("
    "\0132\037.ProtoBuf.UseSkillResult.Target\022.\n\tst"
    "atebags\030\004 \003(\0132\033.ProtoBuf.BuffBagDetailIn"
    "fo\032z\n\006Target\022\021\n\ttargetCid\030\001 \002(\r\022$\n\014creat"
    "ureAttr\030\002 \003(\0132\016.ProtoBuf.Attr\022\'\n\ndigPerf"
    "ors\030\003 \003(\0132\023.ProtoBuf.DigPerfor\022\016\n\006BeDead"
    "\030\004 \001(\010\"\223\001\n\021BroadcastSkillUse\022\017\n\007skillId\030"
    "\001 \002(\r\022\017\n\007userCid\030\002 \002(\r\022\022\n\ntargetCids\030\003 \003"
    "(\r\022 \n\003dir\030\004 \002(\0132\023.ProtoBuf.Vector3PB\022&\n\t"
    "targetPos\030\005 \001(\0132\023.ProtoBuf.Vector3PB\"\230\002\n"
    "\rUseBuffResult\022\017\n\007skillId\030\001 \002(\r\022\017\n\007userC"
    "id\030\002 \002(\r\022/\n\007targets\030\003 \003(\0132\036.ProtoBuf.Use"
    "BuffResult.Target\022\021\n\tbuffBagId\030\004 \002(\r\022\025\n\r"
    "buffBagInstId\030\005 \002(\r\022\016\n\006buffId\030\006 \002(\r\032z\n\006T"
    "arget\022\021\n\ttargetCid\030\001 \002(\r\022$\n\014creatureAttr"
    "\030\002 \003(\0132\016.ProtoBuf.Attr\022\'\n\ndigPerfors\030\003 \003"
    "(\0132\023.ProtoBuf.DigPerfor\022\016\n\006BeDead\030\004 \001(\010\""
    "T\n\rLevUpSkillRsp\022 \n\004code\030\001 \002(\0162\022.ProtoBu"
    "f.ERetCode\022\017\n\007skillId\030\002 \001(\r\022\020\n\010skillLev\030"
    "\003 \001(\r\"K\n\025BroadcastUseSkillStop\022\017\n\007skillI"
    "d\030\001 \002(\r\022\017\n\007userCid\030\002 \002(\r\022\020\n\010stopStep\030\003 \001"
    "(\r\"\232\001\n\021BuffBagDetailInfo\022\030\n\020buff_bag_ins"
    "t_id\030\001 \002(\005\022\023\n\013buff_bag_id\030\002 \002(\005\022\022\n\nsende"
    "r_cid\030\003 \001(\005\022\022\n\nrecver_cid\030\004 \001(\005\022\030\n\020conti"
    "nuance_time\030\005 \001(\003\022\024\n\014delayed_time\030\006 \001(\005\""
    "H\n\023BuffStateChangeInfo\022\025\n\rbuff_state_id\030"
    "\001 \002(\005\022\r\n\005value\030\002 \002(\005\022\013\n\003cid\030\003 \002(\005\"\035\n\016AiP"
    "layIdleInfo\022\013\n\003cid\030\001 \002(\005\"4\n\030PvpKillingVa"
    "lueBroadCast\022\030\n\020pk_killing_value\030\001 \001(\r\"2"
    "\n\014PvpRedPlayer\022\016\n\006is_add\030\001 \001(\010\022\022\n\nplayer"
    "_cid\030\002 \001(\r\"t\n\027BuffReplaceNormalSkills\022\013\n"
    "\003cid\030\001 \001(\r\022%\n\010oldSkill\030\002 \001(\0132\023.ProtoBuf."
    "SkillCell\022%\n\010newSkill\030\003 \001(\0132\023.ProtoBuf.S"
    "killCell", 5328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/LogicToClient.proto", &protobuf_RegisterTypes);
  PlayerClientInfo::default_instance_ = new PlayerClientInfo();
  CreaturesCreateData::default_instance_ = new CreaturesCreateData();
  CreaturesCreateData_Player::default_instance_ = new CreaturesCreateData_Player();
  CreaturesCreateData_Monster::default_instance_ = new CreaturesCreateData_Monster();
  CreaturesCreateData_Npc::default_instance_ = new CreaturesCreateData_Npc();
  CreaturesCreateData_Drop::default_instance_ = new CreaturesCreateData_Drop();
  CreaturesCreateData_Summon::default_instance_ = new CreaturesCreateData_Summon();
  CreaturesCreateData_Herbs::default_instance_ = new CreaturesCreateData_Herbs();
  CreaturesCreateData_Mine::default_instance_ = new CreaturesCreateData_Mine();
  CreaturesCreateData_Fish::default_instance_ = new CreaturesCreateData_Fish();
  CreatureDestoryData::default_instance_ = new CreatureDestoryData();
  SynAttrsAllClient::default_instance_ = new SynAttrsAllClient();
  SynAttrsToSingleClient::default_instance_ = new SynAttrsToSingleClient();
  CreaturesLevUp::default_instance_ = new CreaturesLevUp();
  CreaturesLevUp_Player::default_instance_ = new CreaturesLevUp_Player();
  AccountLoginLogicResponse::default_instance_ = new AccountLoginLogicResponse();
  NotifyClientState::default_instance_ = new NotifyClientState();
  NotifyLogoutGame::default_instance_ = new NotifyLogoutGame();
  NotifyLogoutGame_SwitchServerParam::default_instance_ = new NotifyLogoutGame_SwitchServerParam();
  ClientCharacterListResponse::default_instance_ = new ClientCharacterListResponse();
  ClientCreateCharacterResponse::default_instance_ = new ClientCreateCharacterResponse();
  ClientDelCharacterRsp::default_instance_ = new ClientDelCharacterRsp();
  ReconnectResponse::default_instance_ = new ReconnectResponse();
  SyncActorMove::default_instance_ = new SyncActorMove();
  TransSceneRet::default_instance_ = new TransSceneRet();
  NotifyLoadMap::default_instance_ = new NotifyLoadMap();
  NotifyTransLogicNode::default_instance_ = new NotifyTransLogicNode();
  UseSkillResult::default_instance_ = new UseSkillResult();
  UseSkillResult_Target::default_instance_ = new UseSkillResult_Target();
  BroadcastSkillUse::default_instance_ = new BroadcastSkillUse();
  UseBuffResult::default_instance_ = new UseBuffResult();
  UseBuffResult_Target::default_instance_ = new UseBuffResult_Target();
  LevUpSkillRsp::default_instance_ = new LevUpSkillRsp();
  BroadcastUseSkillStop::default_instance_ = new BroadcastUseSkillStop();
  BuffBagDetailInfo::default_instance_ = new BuffBagDetailInfo();
  BuffStateChangeInfo::default_instance_ = new BuffStateChangeInfo();
  AiPlayIdleInfo::default_instance_ = new AiPlayIdleInfo();
  PvpKillingValueBroadCast::default_instance_ = new PvpKillingValueBroadCast();
  PvpRedPlayer::default_instance_ = new PvpRedPlayer();
  BuffReplaceNormalSkills::default_instance_ = new BuffReplaceNormalSkills();
  PlayerClientInfo::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Player::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Monster::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Npc::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Drop::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Summon::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Herbs::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Mine::default_instance_->InitAsDefaultInstance();
  CreaturesCreateData_Fish::default_instance_->InitAsDefaultInstance();
  CreatureDestoryData::default_instance_->InitAsDefaultInstance();
  SynAttrsAllClient::default_instance_->InitAsDefaultInstance();
  SynAttrsToSingleClient::default_instance_->InitAsDefaultInstance();
  CreaturesLevUp::default_instance_->InitAsDefaultInstance();
  CreaturesLevUp_Player::default_instance_->InitAsDefaultInstance();
  AccountLoginLogicResponse::default_instance_->InitAsDefaultInstance();
  NotifyClientState::default_instance_->InitAsDefaultInstance();
  NotifyLogoutGame::default_instance_->InitAsDefaultInstance();
  NotifyLogoutGame_SwitchServerParam::default_instance_->InitAsDefaultInstance();
  ClientCharacterListResponse::default_instance_->InitAsDefaultInstance();
  ClientCreateCharacterResponse::default_instance_->InitAsDefaultInstance();
  ClientDelCharacterRsp::default_instance_->InitAsDefaultInstance();
  ReconnectResponse::default_instance_->InitAsDefaultInstance();
  SyncActorMove::default_instance_->InitAsDefaultInstance();
  TransSceneRet::default_instance_->InitAsDefaultInstance();
  NotifyLoadMap::default_instance_->InitAsDefaultInstance();
  NotifyTransLogicNode::default_instance_->InitAsDefaultInstance();
  UseSkillResult::default_instance_->InitAsDefaultInstance();
  UseSkillResult_Target::default_instance_->InitAsDefaultInstance();
  BroadcastSkillUse::default_instance_->InitAsDefaultInstance();
  UseBuffResult::default_instance_->InitAsDefaultInstance();
  UseBuffResult_Target::default_instance_->InitAsDefaultInstance();
  LevUpSkillRsp::default_instance_->InitAsDefaultInstance();
  BroadcastUseSkillStop::default_instance_->InitAsDefaultInstance();
  BuffBagDetailInfo::default_instance_->InitAsDefaultInstance();
  BuffStateChangeInfo::default_instance_->InitAsDefaultInstance();
  AiPlayIdleInfo::default_instance_->InitAsDefaultInstance();
  PvpKillingValueBroadCast::default_instance_->InitAsDefaultInstance();
  PvpRedPlayer::default_instance_->InitAsDefaultInstance();
  BuffReplaceNormalSkills::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fLogicToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fLogicToClient_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fLogicToClient_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fLogicToClient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerClientInfo::kPlayerIdFieldNumber;
const int PlayerClientInfo::kPlayernameFieldNumber;
const int PlayerClientInfo::kGroupIdFieldNumber;
const int PlayerClientInfo::kCreateTimeFieldNumber;
const int PlayerClientInfo::kLoginTimeFieldNumber;
const int PlayerClientInfo::kMapIdFieldNumber;
const int PlayerClientInfo::kPosXFieldNumber;
const int PlayerClientInfo::kPosYFieldNumber;
const int PlayerClientInfo::kPosZFieldNumber;
const int PlayerClientInfo::kMspeedFieldNumber;
const int PlayerClientInfo::kNamebodyFieldNumber;
const int PlayerClientInfo::kNameweaponFieldNumber;
const int PlayerClientInfo::kCurstateFieldNumber;
const int PlayerClientInfo::kSkillsFieldNumber;
const int PlayerClientInfo::kPlayerAttrsFieldNumber;
const int PlayerClientInfo::kPkModeFieldNumber;
const int PlayerClientInfo::kPkKillingValueFieldNumber;
#endif  // !_MSC_VER

PlayerClientInfo::PlayerClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerClientInfo::InitAsDefaultInstance() {
}

PlayerClientInfo::PlayerClientInfo(const PlayerClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerClientInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  logintime_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  mspeed_ = 0;
  namebody_ = 0u;
  nameweapon_ = 0u;
  curstate_ = 0u;
  pk_mode_ = 0u;
  pk_killing_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerClientInfo::~PlayerClientInfo() {
  SharedDtor();
}

void PlayerClientInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void PlayerClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerClientInfo_descriptor_;
}

const PlayerClientInfo& PlayerClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

PlayerClientInfo* PlayerClientInfo::default_instance_ = NULL;

PlayerClientInfo* PlayerClientInfo::New() const {
  return new PlayerClientInfo;
}

void PlayerClientInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    groupid_ = 0u;
    createtime_ = GOOGLE_ULONGLONG(0);
    logintime_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    posx_ = 0;
    posy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    posz_ = 0;
    mspeed_ = 0;
    namebody_ = 0u;
    nameweapon_ = 0u;
    curstate_ = 0u;
    pk_mode_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pk_killing_value_ = 0u;
  }
  skills_.Clear();
  playerattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupId;
        break;
      }

      // required uint32 groupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createTime;
        break;
      }

      // required uint64 createTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loginTime;
        break;
      }

      // required uint64 loginTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_posX;
        break;
      }

      // required float posX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_posY;
        break;
      }

      // required float posY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_posZ;
        break;
      }

      // required float posZ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_mspeed;
        break;
      }

      // required float mspeed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mspeed_)));
          set_has_mspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_namebody;
        break;
      }

      // required uint32 namebody = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_namebody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &namebody_)));
          set_has_namebody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nameweapon;
        break;
      }

      // required uint32 nameweapon = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nameweapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nameweapon_)));
          set_has_nameweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_curstate;
        break;
      }

      // required uint32 curstate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_skills;
        break;
      }

      // repeated .ProtoBuf.SkillCell skills = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_skills;
        if (input->ExpectTag(122)) goto parse_playerAttrs;
        break;
      }

      // repeated .ProtoBuf.Attr playerAttrs = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_playerAttrs;
        if (input->ExpectTag(128)) goto parse_pk_mode;
        break;
      }

      // required uint32 pk_mode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_mode_)));
          set_has_pk_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pk_killing_value;
        break;
      }

      // required uint32 pk_killing_value = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_killing_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_killing_value_)));
          set_has_pk_killing_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // required uint32 groupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  // required uint64 createTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->createtime(), output);
  }

  // required uint64 loginTime = 5;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logintime(), output);
  }

  // required uint32 mapId = 6;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mapid(), output);
  }

  // required float posX = 7;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->posx(), output);
  }

  // required float posY = 8;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->posy(), output);
  }

  // required float posZ = 9;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->posz(), output);
  }

  // required float mspeed = 10;
  if (has_mspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->mspeed(), output);
  }

  // required uint32 namebody = 11;
  if (has_namebody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->namebody(), output);
  }

  // required uint32 nameweapon = 12;
  if (has_nameweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nameweapon(), output);
  }

  // required uint32 curstate = 13;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->curstate(), output);
  }

  // repeated .ProtoBuf.SkillCell skills = 14;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->skills(i), output);
  }

  // repeated .ProtoBuf.Attr playerAttrs = 15;
  for (int i = 0; i < this->playerattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->playerattrs(i), output);
  }

  // required uint32 pk_mode = 16;
  if (has_pk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pk_mode(), output);
  }

  // required uint32 pk_killing_value = 17;
  if (has_pk_killing_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pk_killing_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required uint32 groupId = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupid(), target);
  }

  // required uint64 createTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->createtime(), target);
  }

  // required uint64 loginTime = 5;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logintime(), target);
  }

  // required uint32 mapId = 6;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mapid(), target);
  }

  // required float posX = 7;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->posx(), target);
  }

  // required float posY = 8;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->posy(), target);
  }

  // required float posZ = 9;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->posz(), target);
  }

  // required float mspeed = 10;
  if (has_mspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->mspeed(), target);
  }

  // required uint32 namebody = 11;
  if (has_namebody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->namebody(), target);
  }

  // required uint32 nameweapon = 12;
  if (has_nameweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->nameweapon(), target);
  }

  // required uint32 curstate = 13;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->curstate(), target);
  }

  // repeated .ProtoBuf.SkillCell skills = 14;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->skills(i), target);
  }

  // repeated .ProtoBuf.Attr playerAttrs = 15;
  for (int i = 0; i < this->playerattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->playerattrs(i), target);
  }

  // required uint32 pk_mode = 16;
  if (has_pk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pk_mode(), target);
  }

  // required uint32 pk_killing_value = 17;
  if (has_pk_killing_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pk_killing_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required uint32 groupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required uint64 createTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // required uint64 loginTime = 5;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintime());
    }

    // required uint32 mapId = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required float posX = 7;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 8;
    if (has_posy()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float posZ = 9;
    if (has_posz()) {
      total_size += 1 + 4;
    }

    // required float mspeed = 10;
    if (has_mspeed()) {
      total_size += 1 + 4;
    }

    // required uint32 namebody = 11;
    if (has_namebody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->namebody());
    }

    // required uint32 nameweapon = 12;
    if (has_nameweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nameweapon());
    }

    // required uint32 curstate = 13;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // required uint32 pk_mode = 16;
    if (has_pk_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_mode());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 pk_killing_value = 17;
    if (has_pk_killing_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_killing_value());
    }

  }
  // repeated .ProtoBuf.SkillCell skills = 14;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  // repeated .ProtoBuf.Attr playerAttrs = 15;
  total_size += 1 * this->playerattrs_size();
  for (int i = 0; i < this->playerattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerClientInfo::MergeFrom(const PlayerClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  playerattrs_.MergeFrom(from.playerattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_mspeed()) {
      set_mspeed(from.mspeed());
    }
    if (from.has_namebody()) {
      set_namebody(from.namebody());
    }
    if (from.has_nameweapon()) {
      set_nameweapon(from.nameweapon());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_pk_mode()) {
      set_pk_mode(from.pk_mode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pk_killing_value()) {
      set_pk_killing_value(from.pk_killing_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerClientInfo::CopyFrom(const PlayerClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerClientInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00019fff) != 0x00019fff) return false;

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  for (int i = 0; i < playerattrs_size(); i++) {
    if (!this->playerattrs(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerClientInfo::Swap(PlayerClientInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(groupid_, other->groupid_);
    std::swap(createtime_, other->createtime_);
    std::swap(logintime_, other->logintime_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(mspeed_, other->mspeed_);
    std::swap(namebody_, other->namebody_);
    std::swap(nameweapon_, other->nameweapon_);
    std::swap(curstate_, other->curstate_);
    skills_.Swap(&other->skills_);
    playerattrs_.Swap(&other->playerattrs_);
    std::swap(pk_mode_, other->pk_mode_);
    std::swap(pk_killing_value_, other->pk_killing_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerClientInfo_descriptor_;
  metadata.reflection = PlayerClientInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreaturesCreateData_Player::kPlayerIdFieldNumber;
const int CreaturesCreateData_Player::kPlayernameFieldNumber;
const int CreaturesCreateData_Player::kProfFieldNumber;
const int CreaturesCreateData_Player::kLevelFieldNumber;
const int CreaturesCreateData_Player::kHpFieldNumber;
const int CreaturesCreateData_Player::kPosXFieldNumber;
const int CreaturesCreateData_Player::kPosYFieldNumber;
const int CreaturesCreateData_Player::kPosZFieldNumber;
const int CreaturesCreateData_Player::kPlayerraceFieldNumber;
const int CreaturesCreateData_Player::kGenderFieldNumber;
const int CreaturesCreateData_Player::kNamebodyFieldNumber;
const int CreaturesCreateData_Player::kNameweaponFieldNumber;
const int CreaturesCreateData_Player::kCurstateFieldNumber;
const int CreaturesCreateData_Player::kMspeedFieldNumber;
const int CreaturesCreateData_Player::kPkModeFieldNumber;
const int CreaturesCreateData_Player::kPkKillingValueFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Player::CreaturesCreateData_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Player::InitAsDefaultInstance() {
}

CreaturesCreateData_Player::CreaturesCreateData_Player(const CreaturesCreateData_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Player::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  hp_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  playerrace_ = 0u;
  gender_ = 0u;
  namebody_ = 0u;
  nameweapon_ = 0u;
  curstate_ = 0u;
  mspeed_ = 0;
  pk_mode_ = 0u;
  pk_killing_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Player::~CreaturesCreateData_Player() {
  SharedDtor();
}

void CreaturesCreateData_Player::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void CreaturesCreateData_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Player_descriptor_;
}

const CreaturesCreateData_Player& CreaturesCreateData_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Player* CreaturesCreateData_Player::default_instance_ = NULL;

CreaturesCreateData_Player* CreaturesCreateData_Player::New() const {
  return new CreaturesCreateData_Player;
}

void CreaturesCreateData_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    hp_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playerrace_ = 0u;
    gender_ = 0u;
    namebody_ = 0u;
    nameweapon_ = 0u;
    curstate_ = 0u;
    mspeed_ = 0;
    pk_mode_ = 0u;
    pk_killing_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // required uint32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required uint32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_posX;
        break;
      }

      // required float posX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_posY;
        break;
      }

      // required float posY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_posZ;
        break;
      }

      // required float posZ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playerrace;
        break;
      }

      // required uint32 playerrace = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerrace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerrace_)));
          set_has_playerrace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }

      // required uint32 gender = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_namebody;
        break;
      }

      // required uint32 namebody = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_namebody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &namebody_)));
          set_has_namebody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nameweapon;
        break;
      }

      // required uint32 nameweapon = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nameweapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nameweapon_)));
          set_has_nameweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_curstate;
        break;
      }

      // required uint32 curstate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_mspeed;
        break;
      }

      // optional float mspeed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mspeed_)));
          set_has_mspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pk_mode;
        break;
      }

      // optional uint32 pk_mode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_mode_)));
          set_has_pk_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pk_killing_value;
        break;
      }

      // optional uint32 pk_killing_value = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_killing_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_killing_value_)));
          set_has_pk_killing_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prof(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hp(), output);
  }

  // required float posX = 6;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->posx(), output);
  }

  // required float posY = 7;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->posy(), output);
  }

  // required float posZ = 8;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->posz(), output);
  }

  // required uint32 playerrace = 9;
  if (has_playerrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerrace(), output);
  }

  // required uint32 gender = 10;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gender(), output);
  }

  // required uint32 namebody = 11;
  if (has_namebody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->namebody(), output);
  }

  // required uint32 nameweapon = 12;
  if (has_nameweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nameweapon(), output);
  }

  // required uint32 curstate = 13;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->curstate(), output);
  }

  // optional float mspeed = 14;
  if (has_mspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->mspeed(), output);
  }

  // optional uint32 pk_mode = 15;
  if (has_pk_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pk_mode(), output);
  }

  // optional uint32 pk_killing_value = 16;
  if (has_pk_killing_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pk_killing_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prof(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hp(), target);
  }

  // required float posX = 6;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->posx(), target);
  }

  // required float posY = 7;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->posy(), target);
  }

  // required float posZ = 8;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->posz(), target);
  }

  // required uint32 playerrace = 9;
  if (has_playerrace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerrace(), target);
  }

  // required uint32 gender = 10;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gender(), target);
  }

  // required uint32 namebody = 11;
  if (has_namebody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->namebody(), target);
  }

  // required uint32 nameweapon = 12;
  if (has_nameweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->nameweapon(), target);
  }

  // required uint32 curstate = 13;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->curstate(), target);
  }

  // optional float mspeed = 14;
  if (has_mspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->mspeed(), target);
  }

  // optional uint32 pk_mode = 15;
  if (has_pk_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pk_mode(), target);
  }

  // optional uint32 pk_killing_value = 16;
  if (has_pk_killing_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pk_killing_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required uint32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required float posX = 6;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 7;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 8;
    if (has_posz()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 playerrace = 9;
    if (has_playerrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerrace());
    }

    // required uint32 gender = 10;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // required uint32 namebody = 11;
    if (has_namebody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->namebody());
    }

    // required uint32 nameweapon = 12;
    if (has_nameweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nameweapon());
    }

    // required uint32 curstate = 13;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // optional float mspeed = 14;
    if (has_mspeed()) {
      total_size += 1 + 4;
    }

    // optional uint32 pk_mode = 15;
    if (has_pk_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_mode());
    }

    // optional uint32 pk_killing_value = 16;
    if (has_pk_killing_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_killing_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Player::MergeFrom(const CreaturesCreateData_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerrace()) {
      set_playerrace(from.playerrace());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_namebody()) {
      set_namebody(from.namebody());
    }
    if (from.has_nameweapon()) {
      set_nameweapon(from.nameweapon());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_mspeed()) {
      set_mspeed(from.mspeed());
    }
    if (from.has_pk_mode()) {
      set_pk_mode(from.pk_mode());
    }
    if (from.has_pk_killing_value()) {
      set_pk_killing_value(from.pk_killing_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Player::CopyFrom(const CreaturesCreateData_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void CreaturesCreateData_Player::Swap(CreaturesCreateData_Player* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(playerrace_, other->playerrace_);
    std::swap(gender_, other->gender_);
    std::swap(namebody_, other->namebody_);
    std::swap(nameweapon_, other->nameweapon_);
    std::swap(curstate_, other->curstate_);
    std::swap(mspeed_, other->mspeed_);
    std::swap(pk_mode_, other->pk_mode_);
    std::swap(pk_killing_value_, other->pk_killing_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Player_descriptor_;
  metadata.reflection = CreaturesCreateData_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData_Monster::kMonsterCidFieldNumber;
const int CreaturesCreateData_Monster::kMonsterConfigIdFieldNumber;
const int CreaturesCreateData_Monster::kHpFieldNumber;
const int CreaturesCreateData_Monster::kPosXFieldNumber;
const int CreaturesCreateData_Monster::kPosYFieldNumber;
const int CreaturesCreateData_Monster::kPosZFieldNumber;
const int CreaturesCreateData_Monster::kCurstateFieldNumber;
const int CreaturesCreateData_Monster::kMspeedFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Monster::CreaturesCreateData_Monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Monster::InitAsDefaultInstance() {
}

CreaturesCreateData_Monster::CreaturesCreateData_Monster(const CreaturesCreateData_Monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Monster::SharedCtor() {
  _cached_size_ = 0;
  monstercid_ = 0u;
  monsterconfigid_ = 0u;
  hp_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  curstate_ = 0u;
  mspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Monster::~CreaturesCreateData_Monster() {
  SharedDtor();
}

void CreaturesCreateData_Monster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesCreateData_Monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Monster_descriptor_;
}

const CreaturesCreateData_Monster& CreaturesCreateData_Monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Monster* CreaturesCreateData_Monster::default_instance_ = NULL;

CreaturesCreateData_Monster* CreaturesCreateData_Monster::New() const {
  return new CreaturesCreateData_Monster;
}

void CreaturesCreateData_Monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monstercid_ = 0u;
    monsterconfigid_ = 0u;
    hp_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
    curstate_ = 0u;
    mspeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 monsterCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monstercid_)));
          set_has_monstercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monsterConfigId;
        break;
      }

      // required uint32 monsterConfigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterconfigid_)));
          set_has_monsterconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required uint32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posX;
        break;
      }

      // required float posX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posY;
        break;
      }

      // required float posY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_posZ;
        break;
      }

      // required float posZ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curstate;
        break;
      }

      // required uint32 curstate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_mspeed;
        break;
      }

      // required float mspeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mspeed_)));
          set_has_mspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 monsterCid = 1;
  if (has_monstercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monstercid(), output);
  }

  // required uint32 monsterConfigId = 2;
  if (has_monsterconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monsterconfigid(), output);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // required float posX = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posx(), output);
  }

  // required float posY = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posy(), output);
  }

  // required float posZ = 6;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->posz(), output);
  }

  // required uint32 curstate = 7;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curstate(), output);
  }

  // required float mspeed = 8;
  if (has_mspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 monsterCid = 1;
  if (has_monstercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monstercid(), target);
  }

  // required uint32 monsterConfigId = 2;
  if (has_monsterconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monsterconfigid(), target);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  // required float posX = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posx(), target);
  }

  // required float posY = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posy(), target);
  }

  // required float posZ = 6;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->posz(), target);
  }

  // required uint32 curstate = 7;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curstate(), target);
  }

  // required float mspeed = 8;
  if (has_mspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 monsterCid = 1;
    if (has_monstercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monstercid());
    }

    // required uint32 monsterConfigId = 2;
    if (has_monsterconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterconfigid());
    }

    // required uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required float posX = 4;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 5;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 6;
    if (has_posz()) {
      total_size += 1 + 4;
    }

    // required uint32 curstate = 7;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // required float mspeed = 8;
    if (has_mspeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Monster::MergeFrom(const CreaturesCreateData_Monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monstercid()) {
      set_monstercid(from.monstercid());
    }
    if (from.has_monsterconfigid()) {
      set_monsterconfigid(from.monsterconfigid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_mspeed()) {
      set_mspeed(from.mspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Monster::CopyFrom(const CreaturesCreateData_Monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Monster::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CreaturesCreateData_Monster::Swap(CreaturesCreateData_Monster* other) {
  if (other != this) {
    std::swap(monstercid_, other->monstercid_);
    std::swap(monsterconfigid_, other->monsterconfigid_);
    std::swap(hp_, other->hp_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(curstate_, other->curstate_);
    std::swap(mspeed_, other->mspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Monster_descriptor_;
  metadata.reflection = CreaturesCreateData_Monster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData_Npc::kNpcCidFieldNumber;
const int CreaturesCreateData_Npc::kNpcConfigIdFieldNumber;
const int CreaturesCreateData_Npc::kPosXFieldNumber;
const int CreaturesCreateData_Npc::kPosYFieldNumber;
const int CreaturesCreateData_Npc::kPosZFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Npc::CreaturesCreateData_Npc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Npc::InitAsDefaultInstance() {
}

CreaturesCreateData_Npc::CreaturesCreateData_Npc(const CreaturesCreateData_Npc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Npc::SharedCtor() {
  _cached_size_ = 0;
  npccid_ = 0u;
  npcconfigid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Npc::~CreaturesCreateData_Npc() {
  SharedDtor();
}

void CreaturesCreateData_Npc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesCreateData_Npc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Npc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Npc_descriptor_;
}

const CreaturesCreateData_Npc& CreaturesCreateData_Npc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Npc* CreaturesCreateData_Npc::default_instance_ = NULL;

CreaturesCreateData_Npc* CreaturesCreateData_Npc::New() const {
  return new CreaturesCreateData_Npc;
}

void CreaturesCreateData_Npc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npccid_ = 0u;
    npcconfigid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Npc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npcCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npccid_)));
          set_has_npccid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npcConfigId;
        break;
      }

      // required uint32 npcConfigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcconfigid_)));
          set_has_npcconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posX;
        break;
      }

      // required float posX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posY;
        break;
      }

      // required float posY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posZ;
        break;
      }

      // required float posZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Npc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 npcCid = 1;
  if (has_npccid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npccid(), output);
  }

  // required uint32 npcConfigId = 2;
  if (has_npcconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcconfigid(), output);
  }

  // required float posX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // required float posY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // required float posZ = 5;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Npc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 npcCid = 1;
  if (has_npccid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npccid(), target);
  }

  // required uint32 npcConfigId = 2;
  if (has_npcconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcconfigid(), target);
  }

  // required float posX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // required float posY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // required float posZ = 5;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Npc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 npcCid = 1;
    if (has_npccid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npccid());
    }

    // required uint32 npcConfigId = 2;
    if (has_npcconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcconfigid());
    }

    // required float posX = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 5;
    if (has_posz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Npc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Npc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Npc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Npc::MergeFrom(const CreaturesCreateData_Npc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npccid()) {
      set_npccid(from.npccid());
    }
    if (from.has_npcconfigid()) {
      set_npcconfigid(from.npcconfigid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Npc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Npc::CopyFrom(const CreaturesCreateData_Npc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Npc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CreaturesCreateData_Npc::Swap(CreaturesCreateData_Npc* other) {
  if (other != this) {
    std::swap(npccid_, other->npccid_);
    std::swap(npcconfigid_, other->npcconfigid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Npc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Npc_descriptor_;
  metadata.reflection = CreaturesCreateData_Npc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData_Drop::kDropCidFieldNumber;
const int CreaturesCreateData_Drop::kPosXFieldNumber;
const int CreaturesCreateData_Drop::kPosYFieldNumber;
const int CreaturesCreateData_Drop::kPosZFieldNumber;
const int CreaturesCreateData_Drop::kDropTypeFieldNumber;
const int CreaturesCreateData_Drop::kDropTypeValFieldNumber;
const int CreaturesCreateData_Drop::kDropTimeFieldNumber;
const int CreaturesCreateData_Drop::kItemFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Drop::CreaturesCreateData_Drop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Drop::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoBuf::ItemProtoInfo*>(&::ProtoBuf::ItemProtoInfo::default_instance());
}

CreaturesCreateData_Drop::CreaturesCreateData_Drop(const CreaturesCreateData_Drop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Drop::SharedCtor() {
  _cached_size_ = 0;
  dropcid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  droptype_ = 0;
  droptypeval_ = 0u;
  droptime_ = GOOGLE_ULONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Drop::~CreaturesCreateData_Drop() {
  SharedDtor();
}

void CreaturesCreateData_Drop::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void CreaturesCreateData_Drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Drop_descriptor_;
}

const CreaturesCreateData_Drop& CreaturesCreateData_Drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Drop* CreaturesCreateData_Drop::default_instance_ = NULL;

CreaturesCreateData_Drop* CreaturesCreateData_Drop::New() const {
  return new CreaturesCreateData_Drop;
}

void CreaturesCreateData_Drop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropcid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
    droptype_ = 0;
    droptypeval_ = 0u;
    droptime_ = GOOGLE_ULONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoBuf::ItemProtoInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dropCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropcid_)));
          set_has_dropcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_posX;
        break;
      }

      // required float posX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posY;
        break;
      }

      // required float posY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posZ;
        break;
      }

      // required float posZ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dropType;
        break;
      }

      // required int32 dropType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &droptype_)));
          set_has_droptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dropTypeVal;
        break;
      }

      // required uint32 dropTypeVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropTypeVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &droptypeval_)));
          set_has_droptypeval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dropTime;
        break;
      }

      // required uint64 dropTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &droptime_)));
          set_has_droptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item;
        break;
      }

      // optional .ProtoBuf.ItemProtoInfo item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dropCid = 1;
  if (has_dropcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropcid(), output);
  }

  // required float posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->posx(), output);
  }

  // required float posY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posy(), output);
  }

  // required float posZ = 4;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posz(), output);
  }

  // required int32 dropType = 5;
  if (has_droptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->droptype(), output);
  }

  // required uint32 dropTypeVal = 6;
  if (has_droptypeval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->droptypeval(), output);
  }

  // required uint64 dropTime = 7;
  if (has_droptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->droptime(), output);
  }

  // optional .ProtoBuf.ItemProtoInfo item = 8;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Drop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dropCid = 1;
  if (has_dropcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropcid(), target);
  }

  // required float posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->posx(), target);
  }

  // required float posY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posy(), target);
  }

  // required float posZ = 4;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posz(), target);
  }

  // required int32 dropType = 5;
  if (has_droptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->droptype(), target);
  }

  // required uint32 dropTypeVal = 6;
  if (has_droptypeval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->droptypeval(), target);
  }

  // required uint64 dropTime = 7;
  if (has_droptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->droptime(), target);
  }

  // optional .ProtoBuf.ItemProtoInfo item = 8;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Drop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dropCid = 1;
    if (has_dropcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropcid());
    }

    // required float posX = 2;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 3;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 4;
    if (has_posz()) {
      total_size += 1 + 4;
    }

    // required int32 dropType = 5;
    if (has_droptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droptype());
    }

    // required uint32 dropTypeVal = 6;
    if (has_droptypeval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->droptypeval());
    }

    // required uint64 dropTime = 7;
    if (has_droptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->droptime());
    }

    // optional .ProtoBuf.ItemProtoInfo item = 8;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Drop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Drop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Drop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Drop::MergeFrom(const CreaturesCreateData_Drop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropcid()) {
      set_dropcid(from.dropcid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_droptype()) {
      set_droptype(from.droptype());
    }
    if (from.has_droptypeval()) {
      set_droptypeval(from.droptypeval());
    }
    if (from.has_droptime()) {
      set_droptime(from.droptime());
    }
    if (from.has_item()) {
      mutable_item()->::ProtoBuf::ItemProtoInfo::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Drop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Drop::CopyFrom(const CreaturesCreateData_Drop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Drop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void CreaturesCreateData_Drop::Swap(CreaturesCreateData_Drop* other) {
  if (other != this) {
    std::swap(dropcid_, other->dropcid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(droptype_, other->droptype_);
    std::swap(droptypeval_, other->droptypeval_);
    std::swap(droptime_, other->droptime_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Drop_descriptor_;
  metadata.reflection = CreaturesCreateData_Drop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData_Summon::kSummonCidFieldNumber;
const int CreaturesCreateData_Summon::kSummonConfigIdFieldNumber;
const int CreaturesCreateData_Summon::kHpFieldNumber;
const int CreaturesCreateData_Summon::kPosXFieldNumber;
const int CreaturesCreateData_Summon::kPosYFieldNumber;
const int CreaturesCreateData_Summon::kPosZFieldNumber;
const int CreaturesCreateData_Summon::kCurstateFieldNumber;
const int CreaturesCreateData_Summon::kMspeedFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Summon::CreaturesCreateData_Summon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Summon::InitAsDefaultInstance() {
}

CreaturesCreateData_Summon::CreaturesCreateData_Summon(const CreaturesCreateData_Summon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Summon::SharedCtor() {
  _cached_size_ = 0;
  summoncid_ = 0u;
  summonconfigid_ = 0u;
  hp_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  curstate_ = 0u;
  mspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Summon::~CreaturesCreateData_Summon() {
  SharedDtor();
}

void CreaturesCreateData_Summon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesCreateData_Summon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Summon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Summon_descriptor_;
}

const CreaturesCreateData_Summon& CreaturesCreateData_Summon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Summon* CreaturesCreateData_Summon::default_instance_ = NULL;

CreaturesCreateData_Summon* CreaturesCreateData_Summon::New() const {
  return new CreaturesCreateData_Summon;
}

void CreaturesCreateData_Summon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summoncid_ = 0u;
    summonconfigid_ = 0u;
    hp_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
    curstate_ = 0u;
    mspeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Summon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 summonCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summoncid_)));
          set_has_summoncid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_summonConfigId;
        break;
      }

      // required uint32 summonConfigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summonconfigid_)));
          set_has_summonconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required uint32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posX;
        break;
      }

      // required float posX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posY;
        break;
      }

      // required float posY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_posZ;
        break;
      }

      // required float posZ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curstate;
        break;
      }

      // required uint32 curstate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_mspeed;
        break;
      }

      // required float mspeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mspeed_)));
          set_has_mspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Summon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 summonCid = 1;
  if (has_summoncid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->summoncid(), output);
  }

  // required uint32 summonConfigId = 2;
  if (has_summonconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->summonconfigid(), output);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // required float posX = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posx(), output);
  }

  // required float posY = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posy(), output);
  }

  // required float posZ = 6;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->posz(), output);
  }

  // required uint32 curstate = 7;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curstate(), output);
  }

  // required float mspeed = 8;
  if (has_mspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Summon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 summonCid = 1;
  if (has_summoncid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->summoncid(), target);
  }

  // required uint32 summonConfigId = 2;
  if (has_summonconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->summonconfigid(), target);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  // required float posX = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posx(), target);
  }

  // required float posY = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posy(), target);
  }

  // required float posZ = 6;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->posz(), target);
  }

  // required uint32 curstate = 7;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curstate(), target);
  }

  // required float mspeed = 8;
  if (has_mspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Summon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 summonCid = 1;
    if (has_summoncid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summoncid());
    }

    // required uint32 summonConfigId = 2;
    if (has_summonconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summonconfigid());
    }

    // required uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required float posX = 4;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 5;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 6;
    if (has_posz()) {
      total_size += 1 + 4;
    }

    // required uint32 curstate = 7;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // required float mspeed = 8;
    if (has_mspeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Summon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Summon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Summon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Summon::MergeFrom(const CreaturesCreateData_Summon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summoncid()) {
      set_summoncid(from.summoncid());
    }
    if (from.has_summonconfigid()) {
      set_summonconfigid(from.summonconfigid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_mspeed()) {
      set_mspeed(from.mspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Summon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Summon::CopyFrom(const CreaturesCreateData_Summon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Summon::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CreaturesCreateData_Summon::Swap(CreaturesCreateData_Summon* other) {
  if (other != this) {
    std::swap(summoncid_, other->summoncid_);
    std::swap(summonconfigid_, other->summonconfigid_);
    std::swap(hp_, other->hp_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(curstate_, other->curstate_);
    std::swap(mspeed_, other->mspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Summon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Summon_descriptor_;
  metadata.reflection = CreaturesCreateData_Summon_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData_Herbs::kHerbsCidFieldNumber;
const int CreaturesCreateData_Herbs::kHerbsIdFieldNumber;
const int CreaturesCreateData_Herbs::kPosXFieldNumber;
const int CreaturesCreateData_Herbs::kPosYFieldNumber;
const int CreaturesCreateData_Herbs::kPosZFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Herbs::CreaturesCreateData_Herbs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Herbs::InitAsDefaultInstance() {
}

CreaturesCreateData_Herbs::CreaturesCreateData_Herbs(const CreaturesCreateData_Herbs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Herbs::SharedCtor() {
  _cached_size_ = 0;
  herbscid_ = 0u;
  herbsid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Herbs::~CreaturesCreateData_Herbs() {
  SharedDtor();
}

void CreaturesCreateData_Herbs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesCreateData_Herbs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Herbs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Herbs_descriptor_;
}

const CreaturesCreateData_Herbs& CreaturesCreateData_Herbs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Herbs* CreaturesCreateData_Herbs::default_instance_ = NULL;

CreaturesCreateData_Herbs* CreaturesCreateData_Herbs::New() const {
  return new CreaturesCreateData_Herbs;
}

void CreaturesCreateData_Herbs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herbscid_ = 0u;
    herbsid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Herbs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 herbsCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herbscid_)));
          set_has_herbscid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_herbsId;
        break;
      }

      // required uint32 herbsId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_herbsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herbsid_)));
          set_has_herbsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posX;
        break;
      }

      // required float posX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posY;
        break;
      }

      // required float posY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posZ;
        break;
      }

      // required float posZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Herbs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 herbsCid = 1;
  if (has_herbscid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herbscid(), output);
  }

  // required uint32 herbsId = 2;
  if (has_herbsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->herbsid(), output);
  }

  // required float posX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // required float posY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // required float posZ = 5;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Herbs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 herbsCid = 1;
  if (has_herbscid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herbscid(), target);
  }

  // required uint32 herbsId = 2;
  if (has_herbsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->herbsid(), target);
  }

  // required float posX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // required float posY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // required float posZ = 5;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Herbs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 herbsCid = 1;
    if (has_herbscid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herbscid());
    }

    // required uint32 herbsId = 2;
    if (has_herbsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herbsid());
    }

    // required float posX = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 5;
    if (has_posz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Herbs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Herbs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Herbs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Herbs::MergeFrom(const CreaturesCreateData_Herbs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herbscid()) {
      set_herbscid(from.herbscid());
    }
    if (from.has_herbsid()) {
      set_herbsid(from.herbsid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Herbs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Herbs::CopyFrom(const CreaturesCreateData_Herbs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Herbs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CreaturesCreateData_Herbs::Swap(CreaturesCreateData_Herbs* other) {
  if (other != this) {
    std::swap(herbscid_, other->herbscid_);
    std::swap(herbsid_, other->herbsid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Herbs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Herbs_descriptor_;
  metadata.reflection = CreaturesCreateData_Herbs_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData_Mine::kMineCidFieldNumber;
const int CreaturesCreateData_Mine::kMineIdFieldNumber;
const int CreaturesCreateData_Mine::kPosXFieldNumber;
const int CreaturesCreateData_Mine::kPosYFieldNumber;
const int CreaturesCreateData_Mine::kPosZFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Mine::CreaturesCreateData_Mine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Mine::InitAsDefaultInstance() {
}

CreaturesCreateData_Mine::CreaturesCreateData_Mine(const CreaturesCreateData_Mine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Mine::SharedCtor() {
  _cached_size_ = 0;
  minecid_ = 0u;
  mineid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Mine::~CreaturesCreateData_Mine() {
  SharedDtor();
}

void CreaturesCreateData_Mine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesCreateData_Mine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Mine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Mine_descriptor_;
}

const CreaturesCreateData_Mine& CreaturesCreateData_Mine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Mine* CreaturesCreateData_Mine::default_instance_ = NULL;

CreaturesCreateData_Mine* CreaturesCreateData_Mine::New() const {
  return new CreaturesCreateData_Mine;
}

void CreaturesCreateData_Mine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minecid_ = 0u;
    mineid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Mine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mineCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minecid_)));
          set_has_minecid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mineId;
        break;
      }

      // required uint32 mineId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mineid_)));
          set_has_mineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posX;
        break;
      }

      // required float posX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posY;
        break;
      }

      // required float posY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posZ;
        break;
      }

      // required float posZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Mine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mineCid = 1;
  if (has_minecid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->minecid(), output);
  }

  // required uint32 mineId = 2;
  if (has_mineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mineid(), output);
  }

  // required float posX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // required float posY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // required float posZ = 5;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Mine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mineCid = 1;
  if (has_minecid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->minecid(), target);
  }

  // required uint32 mineId = 2;
  if (has_mineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mineid(), target);
  }

  // required float posX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // required float posY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // required float posZ = 5;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Mine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mineCid = 1;
    if (has_minecid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minecid());
    }

    // required uint32 mineId = 2;
    if (has_mineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mineid());
    }

    // required float posX = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 5;
    if (has_posz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Mine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Mine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Mine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Mine::MergeFrom(const CreaturesCreateData_Mine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minecid()) {
      set_minecid(from.minecid());
    }
    if (from.has_mineid()) {
      set_mineid(from.mineid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Mine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Mine::CopyFrom(const CreaturesCreateData_Mine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Mine::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CreaturesCreateData_Mine::Swap(CreaturesCreateData_Mine* other) {
  if (other != this) {
    std::swap(minecid_, other->minecid_);
    std::swap(mineid_, other->mineid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Mine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Mine_descriptor_;
  metadata.reflection = CreaturesCreateData_Mine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData_Fish::kFishCidFieldNumber;
const int CreaturesCreateData_Fish::kFishIdFieldNumber;
const int CreaturesCreateData_Fish::kPosXFieldNumber;
const int CreaturesCreateData_Fish::kPosYFieldNumber;
const int CreaturesCreateData_Fish::kPosZFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData_Fish::CreaturesCreateData_Fish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData_Fish::InitAsDefaultInstance() {
}

CreaturesCreateData_Fish::CreaturesCreateData_Fish(const CreaturesCreateData_Fish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData_Fish::SharedCtor() {
  _cached_size_ = 0;
  fishcid_ = 0u;
  fishid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData_Fish::~CreaturesCreateData_Fish() {
  SharedDtor();
}

void CreaturesCreateData_Fish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesCreateData_Fish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData_Fish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_Fish_descriptor_;
}

const CreaturesCreateData_Fish& CreaturesCreateData_Fish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData_Fish* CreaturesCreateData_Fish::default_instance_ = NULL;

CreaturesCreateData_Fish* CreaturesCreateData_Fish::New() const {
  return new CreaturesCreateData_Fish;
}

void CreaturesCreateData_Fish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fishcid_ = 0u;
    fishid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    posz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData_Fish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fishCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fishcid_)));
          set_has_fishcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fishId;
        break;
      }

      // required uint32 fishId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_posX;
        break;
      }

      // required float posX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posY;
        break;
      }

      // required float posY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posZ;
        break;
      }

      // required float posZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData_Fish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fishCid = 1;
  if (has_fishcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fishcid(), output);
  }

  // required uint32 fishId = 2;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fishid(), output);
  }

  // required float posX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->posx(), output);
  }

  // required float posY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posy(), output);
  }

  // required float posZ = 5;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData_Fish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fishCid = 1;
  if (has_fishcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fishcid(), target);
  }

  // required uint32 fishId = 2;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fishid(), target);
  }

  // required float posX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->posx(), target);
  }

  // required float posY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posy(), target);
  }

  // required float posZ = 5;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData_Fish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fishCid = 1;
    if (has_fishcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fishcid());
    }

    // required uint32 fishId = 2;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fishid());
    }

    // required float posX = 3;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posY = 4;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float posZ = 5;
    if (has_posz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData_Fish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData_Fish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData_Fish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData_Fish::MergeFrom(const CreaturesCreateData_Fish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fishcid()) {
      set_fishcid(from.fishcid());
    }
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData_Fish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData_Fish::CopyFrom(const CreaturesCreateData_Fish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData_Fish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CreaturesCreateData_Fish::Swap(CreaturesCreateData_Fish* other) {
  if (other != this) {
    std::swap(fishcid_, other->fishcid_);
    std::swap(fishid_, other->fishid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData_Fish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_Fish_descriptor_;
  metadata.reflection = CreaturesCreateData_Fish_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesCreateData::kPlayersFieldNumber;
const int CreaturesCreateData::kMonstersFieldNumber;
const int CreaturesCreateData::kNpcsFieldNumber;
const int CreaturesCreateData::kDropsFieldNumber;
const int CreaturesCreateData::kSummonsFieldNumber;
const int CreaturesCreateData::kHerbsFieldNumber;
const int CreaturesCreateData::kMinesFieldNumber;
const int CreaturesCreateData::kFishsFieldNumber;
#endif  // !_MSC_VER

CreaturesCreateData::CreaturesCreateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesCreateData::InitAsDefaultInstance() {
}

CreaturesCreateData::CreaturesCreateData(const CreaturesCreateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesCreateData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesCreateData::~CreaturesCreateData() {
  SharedDtor();
}

void CreaturesCreateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesCreateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesCreateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesCreateData_descriptor_;
}

const CreaturesCreateData& CreaturesCreateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesCreateData* CreaturesCreateData::default_instance_ = NULL;

CreaturesCreateData* CreaturesCreateData::New() const {
  return new CreaturesCreateData;
}

void CreaturesCreateData::Clear() {
  players_.Clear();
  monsters_.Clear();
  npcs_.Clear();
  drops_.Clear();
  summons_.Clear();
  herbs_.Clear();
  mines_.Clear();
  fishs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesCreateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CreaturesCreateData.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(18)) goto parse_monsters;
        break;
      }

      // repeated .ProtoBuf.CreaturesCreateData.Monster monsters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        if (input->ExpectTag(26)) goto parse_npcs;
        break;
      }

      // repeated .ProtoBuf.CreaturesCreateData.Npc npcs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npcs;
        if (input->ExpectTag(34)) goto parse_drops;
        break;
      }

      // repeated .ProtoBuf.CreaturesCreateData.Drop drops = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_drops;
        if (input->ExpectTag(42)) goto parse_summons;
        break;
      }

      // repeated .ProtoBuf.CreaturesCreateData.Summon summons = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_summons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_summons;
        if (input->ExpectTag(50)) goto parse_herbs;
        break;
      }

      // repeated .ProtoBuf.CreaturesCreateData.Herbs herbs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_herbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herbs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_herbs;
        if (input->ExpectTag(58)) goto parse_mines;
        break;
      }

      // repeated .ProtoBuf.CreaturesCreateData.Mine mines = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mines;
        if (input->ExpectTag(66)) goto parse_fishs;
        break;
      }

      // repeated .ProtoBuf.CreaturesCreateData.Fish fishs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fishs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesCreateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CreaturesCreateData.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Monster monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsters(i), output);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Npc npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npcs(i), output);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Drop drops = 4;
  for (int i = 0; i < this->drops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->drops(i), output);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Summon summons = 5;
  for (int i = 0; i < this->summons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->summons(i), output);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Herbs herbs = 6;
  for (int i = 0; i < this->herbs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->herbs(i), output);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Mine mines = 7;
  for (int i = 0; i < this->mines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mines(i), output);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Fish fishs = 8;
  for (int i = 0; i < this->fishs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fishs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesCreateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CreaturesCreateData.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Monster monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsters(i), target);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Npc npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npcs(i), target);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Drop drops = 4;
  for (int i = 0; i < this->drops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->drops(i), target);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Summon summons = 5;
  for (int i = 0; i < this->summons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->summons(i), target);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Herbs herbs = 6;
  for (int i = 0; i < this->herbs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->herbs(i), target);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Mine mines = 7;
  for (int i = 0; i < this->mines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mines(i), target);
  }

  // repeated .ProtoBuf.CreaturesCreateData.Fish fishs = 8;
  for (int i = 0; i < this->fishs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fishs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesCreateData::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CreaturesCreateData.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .ProtoBuf.CreaturesCreateData.Monster monsters = 2;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  // repeated .ProtoBuf.CreaturesCreateData.Npc npcs = 3;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }

  // repeated .ProtoBuf.CreaturesCreateData.Drop drops = 4;
  total_size += 1 * this->drops_size();
  for (int i = 0; i < this->drops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drops(i));
  }

  // repeated .ProtoBuf.CreaturesCreateData.Summon summons = 5;
  total_size += 1 * this->summons_size();
  for (int i = 0; i < this->summons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->summons(i));
  }

  // repeated .ProtoBuf.CreaturesCreateData.Herbs herbs = 6;
  total_size += 1 * this->herbs_size();
  for (int i = 0; i < this->herbs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herbs(i));
  }

  // repeated .ProtoBuf.CreaturesCreateData.Mine mines = 7;
  total_size += 1 * this->mines_size();
  for (int i = 0; i < this->mines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mines(i));
  }

  // repeated .ProtoBuf.CreaturesCreateData.Fish fishs = 8;
  total_size += 1 * this->fishs_size();
  for (int i = 0; i < this->fishs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesCreateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesCreateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesCreateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesCreateData::MergeFrom(const CreaturesCreateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  monsters_.MergeFrom(from.monsters_);
  npcs_.MergeFrom(from.npcs_);
  drops_.MergeFrom(from.drops_);
  summons_.MergeFrom(from.summons_);
  herbs_.MergeFrom(from.herbs_);
  mines_.MergeFrom(from.mines_);
  fishs_.MergeFrom(from.fishs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesCreateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesCreateData::CopyFrom(const CreaturesCreateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesCreateData::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < npcs_size(); i++) {
    if (!this->npcs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drops_size(); i++) {
    if (!this->drops(i).IsInitialized()) return false;
  }
  for (int i = 0; i < summons_size(); i++) {
    if (!this->summons(i).IsInitialized()) return false;
  }
  for (int i = 0; i < herbs_size(); i++) {
    if (!this->herbs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mines_size(); i++) {
    if (!this->mines(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fishs_size(); i++) {
    if (!this->fishs(i).IsInitialized()) return false;
  }
  return true;
}

void CreaturesCreateData::Swap(CreaturesCreateData* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    monsters_.Swap(&other->monsters_);
    npcs_.Swap(&other->npcs_);
    drops_.Swap(&other->drops_);
    summons_.Swap(&other->summons_);
    herbs_.Swap(&other->herbs_);
    mines_.Swap(&other->mines_);
    fishs_.Swap(&other->fishs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesCreateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesCreateData_descriptor_;
  metadata.reflection = CreaturesCreateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureDestoryData::kCidsFieldNumber;
#endif  // !_MSC_VER

CreatureDestoryData::CreatureDestoryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureDestoryData::InitAsDefaultInstance() {
}

CreatureDestoryData::CreatureDestoryData(const CreatureDestoryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureDestoryData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureDestoryData::~CreatureDestoryData() {
  SharedDtor();
}

void CreatureDestoryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureDestoryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureDestoryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureDestoryData_descriptor_;
}

const CreatureDestoryData& CreatureDestoryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreatureDestoryData* CreatureDestoryData::default_instance_ = NULL;

CreatureDestoryData* CreatureDestoryData::New() const {
  return new CreatureDestoryData;
}

void CreatureDestoryData::Clear() {
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureDestoryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureDestoryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cids = 1;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureDestoryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cids = 1;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureDestoryData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureDestoryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureDestoryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureDestoryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureDestoryData::MergeFrom(const CreatureDestoryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureDestoryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureDestoryData::CopyFrom(const CreatureDestoryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureDestoryData::IsInitialized() const {

  return true;
}

void CreatureDestoryData::Swap(CreatureDestoryData* other) {
  if (other != this) {
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureDestoryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureDestoryData_descriptor_;
  metadata.reflection = CreatureDestoryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynAttrsAllClient::kCidFieldNumber;
const int SynAttrsAllClient::kCreatureAttrsFieldNumber;
const int SynAttrsAllClient::kNameFieldNumber;
const int SynAttrsAllClient::kCurstateFieldNumber;
#endif  // !_MSC_VER

SynAttrsAllClient::SynAttrsAllClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynAttrsAllClient::InitAsDefaultInstance() {
}

SynAttrsAllClient::SynAttrsAllClient(const SynAttrsAllClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynAttrsAllClient::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynAttrsAllClient::~SynAttrsAllClient() {
  SharedDtor();
}

void SynAttrsAllClient::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SynAttrsAllClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynAttrsAllClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynAttrsAllClient_descriptor_;
}

const SynAttrsAllClient& SynAttrsAllClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

SynAttrsAllClient* SynAttrsAllClient::default_instance_ = NULL;

SynAttrsAllClient* SynAttrsAllClient::New() const {
  return new SynAttrsAllClient;
}

void SynAttrsAllClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    curstate_ = 0u;
  }
  creatureattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynAttrsAllClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttrs;
        break;
      }

      // repeated .ProtoBuf.Attr creatureAttrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creatureAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatureattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttrs;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curstate;
        break;
      }

      // optional uint32 curstate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynAttrsAllClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // repeated .ProtoBuf.Attr creatureAttrs = 2;
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creatureattrs(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 curstate = 4;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynAttrsAllClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // repeated .ProtoBuf.Attr creatureAttrs = 2;
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creatureattrs(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 curstate = 4;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynAttrsAllClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 curstate = 4;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

  }
  // repeated .ProtoBuf.Attr creatureAttrs = 2;
  total_size += 1 * this->creatureattrs_size();
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatureattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynAttrsAllClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynAttrsAllClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynAttrsAllClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynAttrsAllClient::MergeFrom(const SynAttrsAllClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatureattrs_.MergeFrom(from.creatureattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynAttrsAllClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynAttrsAllClient::CopyFrom(const SynAttrsAllClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynAttrsAllClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < creatureattrs_size(); i++) {
    if (!this->creatureattrs(i).IsInitialized()) return false;
  }
  return true;
}

void SynAttrsAllClient::Swap(SynAttrsAllClient* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    creatureattrs_.Swap(&other->creatureattrs_);
    std::swap(name_, other->name_);
    std::swap(curstate_, other->curstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynAttrsAllClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynAttrsAllClient_descriptor_;
  metadata.reflection = SynAttrsAllClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynAttrsToSingleClient::kCidFieldNumber;
const int SynAttrsToSingleClient::kCreatureAttrsFieldNumber;
#endif  // !_MSC_VER

SynAttrsToSingleClient::SynAttrsToSingleClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynAttrsToSingleClient::InitAsDefaultInstance() {
}

SynAttrsToSingleClient::SynAttrsToSingleClient(const SynAttrsToSingleClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynAttrsToSingleClient::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynAttrsToSingleClient::~SynAttrsToSingleClient() {
  SharedDtor();
}

void SynAttrsToSingleClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynAttrsToSingleClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynAttrsToSingleClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynAttrsToSingleClient_descriptor_;
}

const SynAttrsToSingleClient& SynAttrsToSingleClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

SynAttrsToSingleClient* SynAttrsToSingleClient::default_instance_ = NULL;

SynAttrsToSingleClient* SynAttrsToSingleClient::New() const {
  return new SynAttrsToSingleClient;
}

void SynAttrsToSingleClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
  }
  creatureattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynAttrsToSingleClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttrs;
        break;
      }

      // repeated .ProtoBuf.Attr creatureAttrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creatureAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatureattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynAttrsToSingleClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // repeated .ProtoBuf.Attr creatureAttrs = 2;
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creatureattrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynAttrsToSingleClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // repeated .ProtoBuf.Attr creatureAttrs = 2;
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creatureattrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynAttrsToSingleClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  // repeated .ProtoBuf.Attr creatureAttrs = 2;
  total_size += 1 * this->creatureattrs_size();
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatureattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynAttrsToSingleClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynAttrsToSingleClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynAttrsToSingleClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynAttrsToSingleClient::MergeFrom(const SynAttrsToSingleClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatureattrs_.MergeFrom(from.creatureattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynAttrsToSingleClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynAttrsToSingleClient::CopyFrom(const SynAttrsToSingleClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynAttrsToSingleClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < creatureattrs_size(); i++) {
    if (!this->creatureattrs(i).IsInitialized()) return false;
  }
  return true;
}

void SynAttrsToSingleClient::Swap(SynAttrsToSingleClient* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    creatureattrs_.Swap(&other->creatureattrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynAttrsToSingleClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynAttrsToSingleClient_descriptor_;
  metadata.reflection = SynAttrsToSingleClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreaturesLevUp_Player::kSkillsFieldNumber;
#endif  // !_MSC_VER

CreaturesLevUp_Player::CreaturesLevUp_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesLevUp_Player::InitAsDefaultInstance() {
}

CreaturesLevUp_Player::CreaturesLevUp_Player(const CreaturesLevUp_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesLevUp_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesLevUp_Player::~CreaturesLevUp_Player() {
  SharedDtor();
}

void CreaturesLevUp_Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreaturesLevUp_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesLevUp_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesLevUp_Player_descriptor_;
}

const CreaturesLevUp_Player& CreaturesLevUp_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesLevUp_Player* CreaturesLevUp_Player::default_instance_ = NULL;

CreaturesLevUp_Player* CreaturesLevUp_Player::New() const {
  return new CreaturesLevUp_Player;
}

void CreaturesLevUp_Player::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesLevUp_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.SkillCell skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesLevUp_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.SkillCell skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesLevUp_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.SkillCell skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesLevUp_Player::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.SkillCell skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesLevUp_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesLevUp_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesLevUp_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesLevUp_Player::MergeFrom(const CreaturesLevUp_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesLevUp_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesLevUp_Player::CopyFrom(const CreaturesLevUp_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesLevUp_Player::IsInitialized() const {

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void CreaturesLevUp_Player::Swap(CreaturesLevUp_Player* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesLevUp_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesLevUp_Player_descriptor_;
  metadata.reflection = CreaturesLevUp_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreaturesLevUp::kCidFieldNumber;
const int CreaturesLevUp::kLevelFieldNumber;
const int CreaturesLevUp::kCreatureAttrsFieldNumber;
const int CreaturesLevUp::kCharacterFieldNumber;
#endif  // !_MSC_VER

CreaturesLevUp::CreaturesLevUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreaturesLevUp::InitAsDefaultInstance() {
  character_ = const_cast< ::ProtoBuf::CreaturesLevUp_Player*>(&::ProtoBuf::CreaturesLevUp_Player::default_instance());
}

CreaturesLevUp::CreaturesLevUp(const CreaturesLevUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreaturesLevUp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  level_ = 0u;
  character_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreaturesLevUp::~CreaturesLevUp() {
  SharedDtor();
}

void CreaturesLevUp::SharedDtor() {
  if (this != default_instance_) {
    delete character_;
  }
}

void CreaturesLevUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreaturesLevUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreaturesLevUp_descriptor_;
}

const CreaturesLevUp& CreaturesLevUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

CreaturesLevUp* CreaturesLevUp::default_instance_ = NULL;

CreaturesLevUp* CreaturesLevUp::New() const {
  return new CreaturesLevUp;
}

void CreaturesLevUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    level_ = 0u;
    if (has_character()) {
      if (character_ != NULL) character_->::ProtoBuf::CreaturesLevUp_Player::Clear();
    }
  }
  creatureattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreaturesLevUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_creatureAttrs;
        break;
      }

      // repeated .ProtoBuf.Attr creatureAttrs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creatureAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatureattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_creatureAttrs;
        if (input->ExpectTag(34)) goto parse_character;
        break;
      }

      // optional .ProtoBuf.CreaturesLevUp.Player character = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreaturesLevUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // repeated .ProtoBuf.Attr creatureAttrs = 3;
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->creatureattrs(i), output);
  }

  // optional .ProtoBuf.CreaturesLevUp.Player character = 4;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->character(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreaturesLevUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // repeated .ProtoBuf.Attr creatureAttrs = 3;
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->creatureattrs(i), target);
  }

  // optional .ProtoBuf.CreaturesLevUp.Player character = 4;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->character(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreaturesLevUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional .ProtoBuf.CreaturesLevUp.Player character = 4;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character());
    }

  }
  // repeated .ProtoBuf.Attr creatureAttrs = 3;
  total_size += 1 * this->creatureattrs_size();
  for (int i = 0; i < this->creatureattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatureattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreaturesLevUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreaturesLevUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreaturesLevUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreaturesLevUp::MergeFrom(const CreaturesLevUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatureattrs_.MergeFrom(from.creatureattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_character()) {
      mutable_character()->::ProtoBuf::CreaturesLevUp_Player::MergeFrom(from.character());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreaturesLevUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreaturesLevUp::CopyFrom(const CreaturesLevUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreaturesLevUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < creatureattrs_size(); i++) {
    if (!this->creatureattrs(i).IsInitialized()) return false;
  }
  if (has_character()) {
    if (!this->character().IsInitialized()) return false;
  }
  return true;
}

void CreaturesLevUp::Swap(CreaturesLevUp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(level_, other->level_);
    creatureattrs_.Swap(&other->creatureattrs_);
    std::swap(character_, other->character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreaturesLevUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreaturesLevUp_descriptor_;
  metadata.reflection = CreaturesLevUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AccountLoginLogicResponse_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginLogicResponse_RESULT_descriptor_;
}
bool AccountLoginLogicResponse_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::CLIENT_LOGIN_LOGIC_SUCESS;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::CLIENT_LOGIN_LOGIC_TIME_OUT;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::CLIENT_LOGIN_LOGIC_INVALID;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::CLIENT_LOGIN_LOGIC_BLACK;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::CLIENT_LOGIN_LOGIC_REFUSE;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::CLIENT_LOGIN_ALREADY_ONLINE;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::CLIENT_LOGIN_LOGIC_UNKNOWN;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::RESULT_MIN;
const AccountLoginLogicResponse_RESULT AccountLoginLogicResponse::RESULT_MAX;
const int AccountLoginLogicResponse::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AccountLoginLogicResponse::kLoginResultFieldNumber;
const int AccountLoginLogicResponse::kServerTickFieldNumber;
const int AccountLoginLogicResponse::kUnixMSecFieldNumber;
const int AccountLoginLogicResponse::kAccountIndexFieldNumber;
const int AccountLoginLogicResponse::kStartMarkFieldNumber;
#endif  // !_MSC_VER

AccountLoginLogicResponse::AccountLoginLogicResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginLogicResponse::InitAsDefaultInstance() {
}

AccountLoginLogicResponse::AccountLoginLogicResponse(const AccountLoginLogicResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginLogicResponse::SharedCtor() {
  _cached_size_ = 0;
  loginresult_ = 0u;
  servertick_ = GOOGLE_ULONGLONG(0);
  unixmsec_ = GOOGLE_ULONGLONG(0);
  accountindex_ = 0u;
  startmark_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginLogicResponse::~AccountLoginLogicResponse() {
  SharedDtor();
}

void AccountLoginLogicResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountLoginLogicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginLogicResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginLogicResponse_descriptor_;
}

const AccountLoginLogicResponse& AccountLoginLogicResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

AccountLoginLogicResponse* AccountLoginLogicResponse::default_instance_ = NULL;

AccountLoginLogicResponse* AccountLoginLogicResponse::New() const {
  return new AccountLoginLogicResponse;
}

void AccountLoginLogicResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loginresult_ = 0u;
    servertick_ = GOOGLE_ULONGLONG(0);
    unixmsec_ = GOOGLE_ULONGLONG(0);
    accountindex_ = 0u;
    startmark_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginLogicResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 loginResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loginresult_)));
          set_has_loginresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverTick;
        break;
      }

      // required uint64 serverTick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertick_)));
          set_has_servertick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unixMSec;
        break;
      }

      // required uint64 unixMSec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unixMSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unixmsec_)));
          set_has_unixmsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accountIndex;
        break;
      }

      // optional uint32 accountIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountindex_)));
          set_has_accountindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_startMark;
        break;
      }

      // optional uint64 startMark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startmark_)));
          set_has_startmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginLogicResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 loginResult = 1;
  if (has_loginresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->loginresult(), output);
  }

  // required uint64 serverTick = 2;
  if (has_servertick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->servertick(), output);
  }

  // required uint64 unixMSec = 3;
  if (has_unixmsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->unixmsec(), output);
  }

  // optional uint32 accountIndex = 4;
  if (has_accountindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accountindex(), output);
  }

  // optional uint64 startMark = 5;
  if (has_startmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->startmark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginLogicResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 loginResult = 1;
  if (has_loginresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->loginresult(), target);
  }

  // required uint64 serverTick = 2;
  if (has_servertick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->servertick(), target);
  }

  // required uint64 unixMSec = 3;
  if (has_unixmsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->unixmsec(), target);
  }

  // optional uint32 accountIndex = 4;
  if (has_accountindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accountindex(), target);
  }

  // optional uint64 startMark = 5;
  if (has_startmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->startmark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginLogicResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 loginResult = 1;
    if (has_loginresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loginresult());
    }

    // required uint64 serverTick = 2;
    if (has_servertick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->servertick());
    }

    // required uint64 unixMSec = 3;
    if (has_unixmsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unixmsec());
    }

    // optional uint32 accountIndex = 4;
    if (has_accountindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountindex());
    }

    // optional uint64 startMark = 5;
    if (has_startmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startmark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginLogicResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginLogicResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginLogicResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginLogicResponse::MergeFrom(const AccountLoginLogicResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginresult()) {
      set_loginresult(from.loginresult());
    }
    if (from.has_servertick()) {
      set_servertick(from.servertick());
    }
    if (from.has_unixmsec()) {
      set_unixmsec(from.unixmsec());
    }
    if (from.has_accountindex()) {
      set_accountindex(from.accountindex());
    }
    if (from.has_startmark()) {
      set_startmark(from.startmark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginLogicResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginLogicResponse::CopyFrom(const AccountLoginLogicResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginLogicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AccountLoginLogicResponse::Swap(AccountLoginLogicResponse* other) {
  if (other != this) {
    std::swap(loginresult_, other->loginresult_);
    std::swap(servertick_, other->servertick_);
    std::swap(unixmsec_, other->unixmsec_);
    std::swap(accountindex_, other->accountindex_);
    std::swap(startmark_, other->startmark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginLogicResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginLogicResponse_descriptor_;
  metadata.reflection = AccountLoginLogicResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClientState::kGameStateFieldNumber;
#endif  // !_MSC_VER

NotifyClientState::NotifyClientState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClientState::InitAsDefaultInstance() {
}

NotifyClientState::NotifyClientState(const NotifyClientState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClientState::SharedCtor() {
  _cached_size_ = 0;
  gamestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClientState::~NotifyClientState() {
  SharedDtor();
}

void NotifyClientState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClientState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClientState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClientState_descriptor_;
}

const NotifyClientState& NotifyClientState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

NotifyClientState* NotifyClientState::default_instance_ = NULL;

NotifyClientState* NotifyClientState::New() const {
  return new NotifyClientState;
}

void NotifyClientState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamestate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClientState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.GAME_STATE gameState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::GAME_STATE_IsValid(value)) {
            set_gamestate(static_cast< ::ProtoBuf::GAME_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClientState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.GAME_STATE gameState = 1;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gamestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClientState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.GAME_STATE gameState = 1;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gamestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClientState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.GAME_STATE gameState = 1;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClientState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClientState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClientState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClientState::MergeFrom(const NotifyClientState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClientState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClientState::CopyFrom(const NotifyClientState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClientState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NotifyClientState::Swap(NotifyClientState* other) {
  if (other != this) {
    std::swap(gamestate_, other->gamestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClientState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClientState_descriptor_;
  metadata.reflection = NotifyClientState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogoutGame_SwitchServerParam::kLogicServerIpFieldNumber;
const int NotifyLogoutGame_SwitchServerParam::kLogicServerPortFieldNumber;
const int NotifyLogoutGame_SwitchServerParam::kSceneTemplateIdFieldNumber;
#endif  // !_MSC_VER

NotifyLogoutGame_SwitchServerParam::NotifyLogoutGame_SwitchServerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogoutGame_SwitchServerParam::InitAsDefaultInstance() {
}

NotifyLogoutGame_SwitchServerParam::NotifyLogoutGame_SwitchServerParam(const NotifyLogoutGame_SwitchServerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogoutGame_SwitchServerParam::SharedCtor() {
  _cached_size_ = 0;
  logic_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logic_server_port_ = 0u;
  scene_template_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogoutGame_SwitchServerParam::~NotifyLogoutGame_SwitchServerParam() {
  SharedDtor();
}

void NotifyLogoutGame_SwitchServerParam::SharedDtor() {
  if (logic_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete logic_server_ip_;
  }
  if (this != default_instance_) {
  }
}

void NotifyLogoutGame_SwitchServerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogoutGame_SwitchServerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogoutGame_SwitchServerParam_descriptor_;
}

const NotifyLogoutGame_SwitchServerParam& NotifyLogoutGame_SwitchServerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

NotifyLogoutGame_SwitchServerParam* NotifyLogoutGame_SwitchServerParam::default_instance_ = NULL;

NotifyLogoutGame_SwitchServerParam* NotifyLogoutGame_SwitchServerParam::New() const {
  return new NotifyLogoutGame_SwitchServerParam;
}

void NotifyLogoutGame_SwitchServerParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_logic_server_ip()) {
      if (logic_server_ip_ != &::google::protobuf::internal::kEmptyString) {
        logic_server_ip_->clear();
      }
    }
    logic_server_port_ = 0u;
    scene_template_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogoutGame_SwitchServerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string logic_server_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logic_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_server_ip().data(), this->logic_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_server_port;
        break;
      }

      // required uint32 logic_server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_server_port_)));
          set_has_logic_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_template_id;
        break;
      }

      // required uint32 scene_template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_template_id_)));
          set_has_scene_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogoutGame_SwitchServerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string logic_server_ip = 1;
  if (has_logic_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_server_ip().data(), this->logic_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->logic_server_ip(), output);
  }

  // required uint32 logic_server_port = 2;
  if (has_logic_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_server_port(), output);
  }

  // required uint32 scene_template_id = 3;
  if (has_scene_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogoutGame_SwitchServerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string logic_server_ip = 1;
  if (has_logic_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_server_ip().data(), this->logic_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->logic_server_ip(), target);
  }

  // required uint32 logic_server_port = 2;
  if (has_logic_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_server_port(), target);
  }

  // required uint32 scene_template_id = 3;
  if (has_scene_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogoutGame_SwitchServerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string logic_server_ip = 1;
    if (has_logic_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logic_server_ip());
    }

    // required uint32 logic_server_port = 2;
    if (has_logic_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_server_port());
    }

    // required uint32 scene_template_id = 3;
    if (has_scene_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogoutGame_SwitchServerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogoutGame_SwitchServerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogoutGame_SwitchServerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogoutGame_SwitchServerParam::MergeFrom(const NotifyLogoutGame_SwitchServerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logic_server_ip()) {
      set_logic_server_ip(from.logic_server_ip());
    }
    if (from.has_logic_server_port()) {
      set_logic_server_port(from.logic_server_port());
    }
    if (from.has_scene_template_id()) {
      set_scene_template_id(from.scene_template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogoutGame_SwitchServerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogoutGame_SwitchServerParam::CopyFrom(const NotifyLogoutGame_SwitchServerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogoutGame_SwitchServerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyLogoutGame_SwitchServerParam::Swap(NotifyLogoutGame_SwitchServerParam* other) {
  if (other != this) {
    std::swap(logic_server_ip_, other->logic_server_ip_);
    std::swap(logic_server_port_, other->logic_server_port_);
    std::swap(scene_template_id_, other->scene_template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogoutGame_SwitchServerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogoutGame_SwitchServerParam_descriptor_;
  metadata.reflection = NotifyLogoutGame_SwitchServerParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NotifyLogoutGame::kFlagFieldNumber;
const int NotifyLogoutGame::kSwitchServerParamFieldNumber;
#endif  // !_MSC_VER

NotifyLogoutGame::NotifyLogoutGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogoutGame::InitAsDefaultInstance() {
  switch_server_param_ = const_cast< ::ProtoBuf::NotifyLogoutGame_SwitchServerParam*>(&::ProtoBuf::NotifyLogoutGame_SwitchServerParam::default_instance());
}

NotifyLogoutGame::NotifyLogoutGame(const NotifyLogoutGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogoutGame::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  switch_server_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogoutGame::~NotifyLogoutGame() {
  SharedDtor();
}

void NotifyLogoutGame::SharedDtor() {
  if (this != default_instance_) {
    delete switch_server_param_;
  }
}

void NotifyLogoutGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogoutGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogoutGame_descriptor_;
}

const NotifyLogoutGame& NotifyLogoutGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

NotifyLogoutGame* NotifyLogoutGame::default_instance_ = NULL;

NotifyLogoutGame* NotifyLogoutGame::New() const {
  return new NotifyLogoutGame;
}

void NotifyLogoutGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
    if (has_switch_server_param()) {
      if (switch_server_param_ != NULL) switch_server_param_->::ProtoBuf::NotifyLogoutGame_SwitchServerParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogoutGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.LOGOUT_FLAG flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::LOGOUT_FLAG_IsValid(value)) {
            set_flag(static_cast< ::ProtoBuf::LOGOUT_FLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_switch_server_param;
        break;
      }

      // optional .ProtoBuf.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_switch_server_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switch_server_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogoutGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.LOGOUT_FLAG flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flag(), output);
  }

  // optional .ProtoBuf.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
  if (has_switch_server_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->switch_server_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogoutGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.LOGOUT_FLAG flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->flag(), target);
  }

  // optional .ProtoBuf.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
  if (has_switch_server_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->switch_server_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogoutGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.LOGOUT_FLAG flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // optional .ProtoBuf.NotifyLogoutGame.SwitchServerParam switch_server_param = 2;
    if (has_switch_server_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switch_server_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogoutGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogoutGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogoutGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogoutGame::MergeFrom(const NotifyLogoutGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_switch_server_param()) {
      mutable_switch_server_param()->::ProtoBuf::NotifyLogoutGame_SwitchServerParam::MergeFrom(from.switch_server_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogoutGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogoutGame::CopyFrom(const NotifyLogoutGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogoutGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_switch_server_param()) {
    if (!this->switch_server_param().IsInitialized()) return false;
  }
  return true;
}

void NotifyLogoutGame::Swap(NotifyLogoutGame* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(switch_server_param_, other->switch_server_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogoutGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogoutGame_descriptor_;
  metadata.reflection = NotifyLogoutGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCharacterListResponse::kCharInfoListFieldNumber;
#endif  // !_MSC_VER

ClientCharacterListResponse::ClientCharacterListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCharacterListResponse::InitAsDefaultInstance() {
}

ClientCharacterListResponse::ClientCharacterListResponse(const ClientCharacterListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCharacterListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCharacterListResponse::~ClientCharacterListResponse() {
  SharedDtor();
}

void ClientCharacterListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientCharacterListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCharacterListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCharacterListResponse_descriptor_;
}

const ClientCharacterListResponse& ClientCharacterListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

ClientCharacterListResponse* ClientCharacterListResponse::default_instance_ = NULL;

ClientCharacterListResponse* ClientCharacterListResponse::New() const {
  return new ClientCharacterListResponse;
}

void ClientCharacterListResponse::Clear() {
  charinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCharacterListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterDBSimpleInfo charInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_charInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCharacterListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterDBSimpleInfo charInfoList = 1;
  for (int i = 0; i < this->charinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCharacterListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterDBSimpleInfo charInfoList = 1;
  for (int i = 0; i < this->charinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCharacterListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CharacterDBSimpleInfo charInfoList = 1;
  total_size += 1 * this->charinfolist_size();
  for (int i = 0; i < this->charinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCharacterListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCharacterListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCharacterListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCharacterListResponse::MergeFrom(const ClientCharacterListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  charinfolist_.MergeFrom(from.charinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCharacterListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCharacterListResponse::CopyFrom(const ClientCharacterListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCharacterListResponse::IsInitialized() const {

  for (int i = 0; i < charinfolist_size(); i++) {
    if (!this->charinfolist(i).IsInitialized()) return false;
  }
  return true;
}

void ClientCharacterListResponse::Swap(ClientCharacterListResponse* other) {
  if (other != this) {
    charinfolist_.Swap(&other->charinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCharacterListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCharacterListResponse_descriptor_;
  metadata.reflection = ClientCharacterListResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientCreateCharacterResponse_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCreateCharacterResponse_RESULT_descriptor_;
}
bool ClientCreateCharacterResponse_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::CREATE_CHARACTER_RESULT_SUCCESS;
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::CREATE_CHARACTER_RESULT_FAIL;
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::CREATE_CHARACTER_RESULT_NAME_EXSIT;
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::CREATE_CHARACTER_RESULT_NAME_LENGTH;
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::CREATE_CHARACTER_RESULT_NAME_ERROR;
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::CREATE_CHARACTER_RESULT_MAX_COUNT;
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::RESULT_MIN;
const ClientCreateCharacterResponse_RESULT ClientCreateCharacterResponse::RESULT_MAX;
const int ClientCreateCharacterResponse::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientCreateCharacterResponse::kResultFieldNumber;
const int ClientCreateCharacterResponse::kNewCharacterInfoFieldNumber;
#endif  // !_MSC_VER

ClientCreateCharacterResponse::ClientCreateCharacterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCreateCharacterResponse::InitAsDefaultInstance() {
  newcharacterinfo_ = const_cast< ::ProtoBuf::CharacterDBSimpleInfo*>(&::ProtoBuf::CharacterDBSimpleInfo::default_instance());
}

ClientCreateCharacterResponse::ClientCreateCharacterResponse(const ClientCreateCharacterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCreateCharacterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  newcharacterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCreateCharacterResponse::~ClientCreateCharacterResponse() {
  SharedDtor();
}

void ClientCreateCharacterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete newcharacterinfo_;
  }
}

void ClientCreateCharacterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCreateCharacterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCreateCharacterResponse_descriptor_;
}

const ClientCreateCharacterResponse& ClientCreateCharacterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

ClientCreateCharacterResponse* ClientCreateCharacterResponse::default_instance_ = NULL;

ClientCreateCharacterResponse* ClientCreateCharacterResponse::New() const {
  return new ClientCreateCharacterResponse;
}

void ClientCreateCharacterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_newcharacterinfo()) {
      if (newcharacterinfo_ != NULL) newcharacterinfo_->::ProtoBuf::CharacterDBSimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCreateCharacterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newCharacterInfo;
        break;
      }

      // optional .ProtoBuf.CharacterDBSimpleInfo newCharacterInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newCharacterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newcharacterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCreateCharacterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .ProtoBuf.CharacterDBSimpleInfo newCharacterInfo = 2;
  if (has_newcharacterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newcharacterinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCreateCharacterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .ProtoBuf.CharacterDBSimpleInfo newCharacterInfo = 2;
  if (has_newcharacterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newcharacterinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCreateCharacterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .ProtoBuf.CharacterDBSimpleInfo newCharacterInfo = 2;
    if (has_newcharacterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newcharacterinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCreateCharacterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCreateCharacterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCreateCharacterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCreateCharacterResponse::MergeFrom(const ClientCreateCharacterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newcharacterinfo()) {
      mutable_newcharacterinfo()->::ProtoBuf::CharacterDBSimpleInfo::MergeFrom(from.newcharacterinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCreateCharacterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCreateCharacterResponse::CopyFrom(const ClientCreateCharacterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCreateCharacterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_newcharacterinfo()) {
    if (!this->newcharacterinfo().IsInitialized()) return false;
  }
  return true;
}

void ClientCreateCharacterResponse::Swap(ClientCreateCharacterResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(newcharacterinfo_, other->newcharacterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCreateCharacterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCreateCharacterResponse_descriptor_;
  metadata.reflection = ClientCreateCharacterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientDelCharacterRsp::kRetcodeFieldNumber;
const int ClientDelCharacterRsp::kCharIdFieldNumber;
#endif  // !_MSC_VER

ClientDelCharacterRsp::ClientDelCharacterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientDelCharacterRsp::InitAsDefaultInstance() {
}

ClientDelCharacterRsp::ClientDelCharacterRsp(const ClientDelCharacterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientDelCharacterRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDelCharacterRsp::~ClientDelCharacterRsp() {
  SharedDtor();
}

void ClientDelCharacterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientDelCharacterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDelCharacterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDelCharacterRsp_descriptor_;
}

const ClientDelCharacterRsp& ClientDelCharacterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

ClientDelCharacterRsp* ClientDelCharacterRsp::default_instance_ = NULL;

ClientDelCharacterRsp* ClientDelCharacterRsp::New() const {
  return new ClientDelCharacterRsp;
}

void ClientDelCharacterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientDelCharacterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientDelCharacterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientDelCharacterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientDelCharacterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDelCharacterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientDelCharacterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientDelCharacterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientDelCharacterRsp::MergeFrom(const ClientDelCharacterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientDelCharacterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDelCharacterRsp::CopyFrom(const ClientDelCharacterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDelCharacterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientDelCharacterRsp::Swap(ClientDelCharacterRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientDelCharacterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDelCharacterRsp_descriptor_;
  metadata.reflection = ClientDelCharacterRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReconnectResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectResponse_Result_descriptor_;
}
bool ReconnectResponse_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReconnectResponse_Result ReconnectResponse::SUCCESS;
const ReconnectResponse_Result ReconnectResponse::FAILED;
const ReconnectResponse_Result ReconnectResponse::Result_MIN;
const ReconnectResponse_Result ReconnectResponse::Result_MAX;
const int ReconnectResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReconnectResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ReconnectResponse::ReconnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconnectResponse::InitAsDefaultInstance() {
}

ReconnectResponse::ReconnectResponse(const ReconnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconnectResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectResponse::~ReconnectResponse() {
  SharedDtor();
}

void ReconnectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReconnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectResponse_descriptor_;
}

const ReconnectResponse& ReconnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

ReconnectResponse* ReconnectResponse::default_instance_ = NULL;

ReconnectResponse* ReconnectResponse::New() const {
  return new ReconnectResponse;
}

void ReconnectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.ReconnectResponse.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::ReconnectResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::ReconnectResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.ReconnectResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.ReconnectResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.ReconnectResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectResponse::MergeFrom(const ReconnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectResponse::CopyFrom(const ReconnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReconnectResponse::Swap(ReconnectResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectResponse_descriptor_;
  metadata.reflection = ReconnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncActorMove::kCidFieldNumber;
const int SyncActorMove::kCurrentPosFieldNumber;
const int SyncActorMove::kPathFieldNumber;
#endif  // !_MSC_VER

SyncActorMove::SyncActorMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncActorMove::InitAsDefaultInstance() {
  currentpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

SyncActorMove::SyncActorMove(const SyncActorMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncActorMove::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  currentpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncActorMove::~SyncActorMove() {
  SharedDtor();
}

void SyncActorMove::SharedDtor() {
  if (this != default_instance_) {
    delete currentpos_;
  }
}

void SyncActorMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncActorMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncActorMove_descriptor_;
}

const SyncActorMove& SyncActorMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

SyncActorMove* SyncActorMove::default_instance_ = NULL;

SyncActorMove* SyncActorMove::New() const {
  return new SyncActorMove;
}

void SyncActorMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_currentpos()) {
      if (currentpos_ != NULL) currentpos_->::ProtoBuf::Vector3PB::Clear();
    }
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncActorMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currentPos;
        break;
      }

      // required .ProtoBuf.Vector3PB currentPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // repeated .ProtoBuf.Vector3PB path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncActorMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentpos(), output);
  }

  // repeated .ProtoBuf.Vector3PB path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncActorMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required .ProtoBuf.Vector3PB currentPos = 2;
  if (has_currentpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentpos(), target);
  }

  // repeated .ProtoBuf.Vector3PB path = 3;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncActorMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required .ProtoBuf.Vector3PB currentPos = 2;
    if (has_currentpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentpos());
    }

  }
  // repeated .ProtoBuf.Vector3PB path = 3;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncActorMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncActorMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncActorMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncActorMove::MergeFrom(const SyncActorMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_currentpos()) {
      mutable_currentpos()->::ProtoBuf::Vector3PB::MergeFrom(from.currentpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncActorMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncActorMove::CopyFrom(const SyncActorMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncActorMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_currentpos()) {
    if (!this->currentpos().IsInitialized()) return false;
  }
  for (int i = 0; i < path_size(); i++) {
    if (!this->path(i).IsInitialized()) return false;
  }
  return true;
}

void SyncActorMove::Swap(SyncActorMove* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(currentpos_, other->currentpos_);
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncActorMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncActorMove_descriptor_;
  metadata.reflection = SyncActorMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransSceneRet::kResultFieldNumber;
#endif  // !_MSC_VER

TransSceneRet::TransSceneRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransSceneRet::InitAsDefaultInstance() {
}

TransSceneRet::TransSceneRet(const TransSceneRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransSceneRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransSceneRet::~TransSceneRet() {
  SharedDtor();
}

void TransSceneRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransSceneRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransSceneRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransSceneRet_descriptor_;
}

const TransSceneRet& TransSceneRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

TransSceneRet* TransSceneRet::default_instance_ = NULL;

TransSceneRet* TransSceneRet::New() const {
  return new TransSceneRet;
}

void TransSceneRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransSceneRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransSceneRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransSceneRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransSceneRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransSceneRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransSceneRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransSceneRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransSceneRet::MergeFrom(const TransSceneRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransSceneRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransSceneRet::CopyFrom(const TransSceneRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransSceneRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransSceneRet::Swap(TransSceneRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransSceneRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransSceneRet_descriptor_;
  metadata.reflection = TransSceneRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLoadMap::kMapIdFieldNumber;
const int NotifyLoadMap::kRouteIdFieldNumber;
const int NotifyLoadMap::kTransPosFieldNumber;
#endif  // !_MSC_VER

NotifyLoadMap::NotifyLoadMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLoadMap::InitAsDefaultInstance() {
  transpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

NotifyLoadMap::NotifyLoadMap(const NotifyLoadMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLoadMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  routeid_ = 0u;
  transpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLoadMap::~NotifyLoadMap() {
  SharedDtor();
}

void NotifyLoadMap::SharedDtor() {
  if (this != default_instance_) {
    delete transpos_;
  }
}

void NotifyLoadMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLoadMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLoadMap_descriptor_;
}

const NotifyLoadMap& NotifyLoadMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

NotifyLoadMap* NotifyLoadMap::default_instance_ = NULL;

NotifyLoadMap* NotifyLoadMap::New() const {
  return new NotifyLoadMap;
}

void NotifyLoadMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    routeid_ = 0u;
    if (has_transpos()) {
      if (transpos_ != NULL) transpos_->::ProtoBuf::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLoadMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_routeId;
        break;
      }

      // required uint32 routeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routeid_)));
          set_has_routeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transPos;
        break;
      }

      // required .ProtoBuf.Vector3PB transPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLoadMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // required uint32 routeId = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->routeid(), output);
  }

  // required .ProtoBuf.Vector3PB transPos = 3;
  if (has_transpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLoadMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // required uint32 routeId = 2;
  if (has_routeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->routeid(), target);
  }

  // required .ProtoBuf.Vector3PB transPos = 3;
  if (has_transpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLoadMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 routeId = 2;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routeid());
    }

    // required .ProtoBuf.Vector3PB transPos = 3;
    if (has_transpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLoadMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLoadMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLoadMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLoadMap::MergeFrom(const NotifyLoadMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_transpos()) {
      mutable_transpos()->::ProtoBuf::Vector3PB::MergeFrom(from.transpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLoadMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLoadMap::CopyFrom(const NotifyLoadMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLoadMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_transpos()) {
    if (!this->transpos().IsInitialized()) return false;
  }
  return true;
}

void NotifyLoadMap::Swap(NotifyLoadMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(routeid_, other->routeid_);
    std::swap(transpos_, other->transpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLoadMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLoadMap_descriptor_;
  metadata.reflection = NotifyLoadMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyTransLogicNode::kPortFieldNumber;
const int NotifyTransLogicNode::kIpFieldNumber;
const int NotifyTransLogicNode::kTokenFieldNumber;
#endif  // !_MSC_VER

NotifyTransLogicNode::NotifyTransLogicNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyTransLogicNode::InitAsDefaultInstance() {
}

NotifyTransLogicNode::NotifyTransLogicNode(const NotifyTransLogicNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyTransLogicNode::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyTransLogicNode::~NotifyTransLogicNode() {
  SharedDtor();
}

void NotifyTransLogicNode::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void NotifyTransLogicNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyTransLogicNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyTransLogicNode_descriptor_;
}

const NotifyTransLogicNode& NotifyTransLogicNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

NotifyTransLogicNode* NotifyTransLogicNode::default_instance_ = NULL;

NotifyTransLogicNode* NotifyTransLogicNode::New() const {
  return new NotifyTransLogicNode;
}

void NotifyTransLogicNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyTransLogicNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyTransLogicNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyTransLogicNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyTransLogicNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyTransLogicNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyTransLogicNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyTransLogicNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyTransLogicNode::MergeFrom(const NotifyTransLogicNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyTransLogicNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTransLogicNode::CopyFrom(const NotifyTransLogicNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTransLogicNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyTransLogicNode::Swap(NotifyTransLogicNode* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyTransLogicNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyTransLogicNode_descriptor_;
  metadata.reflection = NotifyTransLogicNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseSkillResult_Target::kTargetCidFieldNumber;
const int UseSkillResult_Target::kCreatureAttrFieldNumber;
const int UseSkillResult_Target::kDigPerforsFieldNumber;
const int UseSkillResult_Target::kBeDeadFieldNumber;
#endif  // !_MSC_VER

UseSkillResult_Target::UseSkillResult_Target()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillResult_Target::InitAsDefaultInstance() {
}

UseSkillResult_Target::UseSkillResult_Target(const UseSkillResult_Target& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillResult_Target::SharedCtor() {
  _cached_size_ = 0;
  targetcid_ = 0u;
  bedead_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillResult_Target::~UseSkillResult_Target() {
  SharedDtor();
}

void UseSkillResult_Target::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSkillResult_Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillResult_Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillResult_Target_descriptor_;
}

const UseSkillResult_Target& UseSkillResult_Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

UseSkillResult_Target* UseSkillResult_Target::default_instance_ = NULL;

UseSkillResult_Target* UseSkillResult_Target::New() const {
  return new UseSkillResult_Target;
}

void UseSkillResult_Target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetcid_ = 0u;
    bedead_ = false;
  }
  creatureattr_.Clear();
  digperfors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillResult_Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 targetCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcid_)));
          set_has_targetcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttr;
        break;
      }

      // repeated .ProtoBuf.Attr creatureAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creatureAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatureattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttr;
        if (input->ExpectTag(26)) goto parse_digPerfors;
        break;
      }

      // repeated .ProtoBuf.DigPerfor digPerfors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digPerfors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_digperfors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_digPerfors;
        if (input->ExpectTag(32)) goto parse_BeDead;
        break;
      }

      // optional bool BeDead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bedead_)));
          set_has_bedead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillResult_Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 targetCid = 1;
  if (has_targetcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetcid(), output);
  }

  // repeated .ProtoBuf.Attr creatureAttr = 2;
  for (int i = 0; i < this->creatureattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creatureattr(i), output);
  }

  // repeated .ProtoBuf.DigPerfor digPerfors = 3;
  for (int i = 0; i < this->digperfors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->digperfors(i), output);
  }

  // optional bool BeDead = 4;
  if (has_bedead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bedead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillResult_Target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 targetCid = 1;
  if (has_targetcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetcid(), target);
  }

  // repeated .ProtoBuf.Attr creatureAttr = 2;
  for (int i = 0; i < this->creatureattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creatureattr(i), target);
  }

  // repeated .ProtoBuf.DigPerfor digPerfors = 3;
  for (int i = 0; i < this->digperfors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->digperfors(i), target);
  }

  // optional bool BeDead = 4;
  if (has_bedead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bedead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillResult_Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 targetCid = 1;
    if (has_targetcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcid());
    }

    // optional bool BeDead = 4;
    if (has_bedead()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoBuf.Attr creatureAttr = 2;
  total_size += 1 * this->creatureattr_size();
  for (int i = 0; i < this->creatureattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatureattr(i));
  }

  // repeated .ProtoBuf.DigPerfor digPerfors = 3;
  total_size += 1 * this->digperfors_size();
  for (int i = 0; i < this->digperfors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->digperfors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillResult_Target::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillResult_Target* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillResult_Target*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillResult_Target::MergeFrom(const UseSkillResult_Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatureattr_.MergeFrom(from.creatureattr_);
  digperfors_.MergeFrom(from.digperfors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetcid()) {
      set_targetcid(from.targetcid());
    }
    if (from.has_bedead()) {
      set_bedead(from.bedead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillResult_Target::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillResult_Target::CopyFrom(const UseSkillResult_Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillResult_Target::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < creatureattr_size(); i++) {
    if (!this->creatureattr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < digperfors_size(); i++) {
    if (!this->digperfors(i).IsInitialized()) return false;
  }
  return true;
}

void UseSkillResult_Target::Swap(UseSkillResult_Target* other) {
  if (other != this) {
    std::swap(targetcid_, other->targetcid_);
    creatureattr_.Swap(&other->creatureattr_);
    digperfors_.Swap(&other->digperfors_);
    std::swap(bedead_, other->bedead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillResult_Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillResult_Target_descriptor_;
  metadata.reflection = UseSkillResult_Target_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UseSkillResult::kSkillIdFieldNumber;
const int UseSkillResult::kUserCidFieldNumber;
const int UseSkillResult::kTargetsFieldNumber;
const int UseSkillResult::kStatebagsFieldNumber;
#endif  // !_MSC_VER

UseSkillResult::UseSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseSkillResult::InitAsDefaultInstance() {
}

UseSkillResult::UseSkillResult(const UseSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseSkillResult::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  usercid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseSkillResult::~UseSkillResult() {
  SharedDtor();
}

void UseSkillResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseSkillResult_descriptor_;
}

const UseSkillResult& UseSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

UseSkillResult* UseSkillResult::default_instance_ = NULL;

UseSkillResult* UseSkillResult::New() const {
  return new UseSkillResult;
}

void UseSkillResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    usercid_ = 0u;
  }
  targets_.Clear();
  statebags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userCid;
        break;
      }

      // required uint32 userCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usercid_)));
          set_has_usercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        break;
      }

      // repeated .ProtoBuf.UseSkillResult.Target targets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        if (input->ExpectTag(34)) goto parse_statebags;
        break;
      }

      // repeated .ProtoBuf.BuffBagDetailInfo statebags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statebags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statebags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_statebags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usercid(), output);
  }

  // repeated .ProtoBuf.UseSkillResult.Target targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targets(i), output);
  }

  // repeated .ProtoBuf.BuffBagDetailInfo statebags = 4;
  for (int i = 0; i < this->statebags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->statebags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usercid(), target);
  }

  // repeated .ProtoBuf.UseSkillResult.Target targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targets(i), target);
  }

  // repeated .ProtoBuf.BuffBagDetailInfo statebags = 4;
  for (int i = 0; i < this->statebags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->statebags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 userCid = 2;
    if (has_usercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usercid());
    }

  }
  // repeated .ProtoBuf.UseSkillResult.Target targets = 3;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  // repeated .ProtoBuf.BuffBagDetailInfo statebags = 4;
  total_size += 1 * this->statebags_size();
  for (int i = 0; i < this->statebags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statebags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseSkillResult::MergeFrom(const UseSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  statebags_.MergeFrom(from.statebags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_usercid()) {
      set_usercid(from.usercid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseSkillResult::CopyFrom(const UseSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseSkillResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < targets_size(); i++) {
    if (!this->targets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < statebags_size(); i++) {
    if (!this->statebags(i).IsInitialized()) return false;
  }
  return true;
}

void UseSkillResult::Swap(UseSkillResult* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(usercid_, other->usercid_);
    targets_.Swap(&other->targets_);
    statebags_.Swap(&other->statebags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseSkillResult_descriptor_;
  metadata.reflection = UseSkillResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastSkillUse::kSkillIdFieldNumber;
const int BroadcastSkillUse::kUserCidFieldNumber;
const int BroadcastSkillUse::kTargetCidsFieldNumber;
const int BroadcastSkillUse::kDirFieldNumber;
const int BroadcastSkillUse::kTargetPosFieldNumber;
#endif  // !_MSC_VER

BroadcastSkillUse::BroadcastSkillUse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastSkillUse::InitAsDefaultInstance() {
  dir_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
  targetpos_ = const_cast< ::ProtoBuf::Vector3PB*>(&::ProtoBuf::Vector3PB::default_instance());
}

BroadcastSkillUse::BroadcastSkillUse(const BroadcastSkillUse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastSkillUse::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  usercid_ = 0u;
  dir_ = NULL;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastSkillUse::~BroadcastSkillUse() {
  SharedDtor();
}

void BroadcastSkillUse::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete targetpos_;
  }
}

void BroadcastSkillUse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastSkillUse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastSkillUse_descriptor_;
}

const BroadcastSkillUse& BroadcastSkillUse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

BroadcastSkillUse* BroadcastSkillUse::default_instance_ = NULL;

BroadcastSkillUse* BroadcastSkillUse::New() const {
  return new BroadcastSkillUse;
}

void BroadcastSkillUse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    usercid_ = 0u;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::ProtoBuf::Vector3PB::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::ProtoBuf::Vector3PB::Clear();
    }
  }
  targetcids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastSkillUse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userCid;
        break;
      }

      // required uint32 userCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usercid_)));
          set_has_usercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetCids;
        break;
      }

      // repeated uint32 targetCids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetCids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_targetcids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_targetcids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetCids;
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // required .ProtoBuf.Vector3PB dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_targetPos;
        break;
      }

      // optional .ProtoBuf.Vector3PB targetPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastSkillUse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usercid(), output);
  }

  // repeated uint32 targetCids = 3;
  for (int i = 0; i < this->targetcids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->targetcids(i), output);
  }

  // required .ProtoBuf.Vector3PB dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  // optional .ProtoBuf.Vector3PB targetPos = 5;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastSkillUse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usercid(), target);
  }

  // repeated uint32 targetCids = 3;
  for (int i = 0; i < this->targetcids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->targetcids(i), target);
  }

  // required .ProtoBuf.Vector3PB dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  // optional .ProtoBuf.Vector3PB targetPos = 5;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastSkillUse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 userCid = 2;
    if (has_usercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usercid());
    }

    // required .ProtoBuf.Vector3PB dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional .ProtoBuf.Vector3PB targetPos = 5;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  // repeated uint32 targetCids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetcids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->targetcids(i));
    }
    total_size += 1 * this->targetcids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastSkillUse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastSkillUse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastSkillUse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastSkillUse::MergeFrom(const BroadcastSkillUse& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetcids_.MergeFrom(from.targetcids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_usercid()) {
      set_usercid(from.usercid());
    }
    if (from.has_dir()) {
      mutable_dir()->::ProtoBuf::Vector3PB::MergeFrom(from.dir());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::ProtoBuf::Vector3PB::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastSkillUse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastSkillUse::CopyFrom(const BroadcastSkillUse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastSkillUse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  if (has_targetpos()) {
    if (!this->targetpos().IsInitialized()) return false;
  }
  return true;
}

void BroadcastSkillUse::Swap(BroadcastSkillUse* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(usercid_, other->usercid_);
    targetcids_.Swap(&other->targetcids_);
    std::swap(dir_, other->dir_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastSkillUse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastSkillUse_descriptor_;
  metadata.reflection = BroadcastSkillUse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseBuffResult_Target::kTargetCidFieldNumber;
const int UseBuffResult_Target::kCreatureAttrFieldNumber;
const int UseBuffResult_Target::kDigPerforsFieldNumber;
const int UseBuffResult_Target::kBeDeadFieldNumber;
#endif  // !_MSC_VER

UseBuffResult_Target::UseBuffResult_Target()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseBuffResult_Target::InitAsDefaultInstance() {
}

UseBuffResult_Target::UseBuffResult_Target(const UseBuffResult_Target& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseBuffResult_Target::SharedCtor() {
  _cached_size_ = 0;
  targetcid_ = 0u;
  bedead_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseBuffResult_Target::~UseBuffResult_Target() {
  SharedDtor();
}

void UseBuffResult_Target::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseBuffResult_Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseBuffResult_Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseBuffResult_Target_descriptor_;
}

const UseBuffResult_Target& UseBuffResult_Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

UseBuffResult_Target* UseBuffResult_Target::default_instance_ = NULL;

UseBuffResult_Target* UseBuffResult_Target::New() const {
  return new UseBuffResult_Target;
}

void UseBuffResult_Target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetcid_ = 0u;
    bedead_ = false;
  }
  creatureattr_.Clear();
  digperfors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseBuffResult_Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 targetCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcid_)));
          set_has_targetcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttr;
        break;
      }

      // repeated .ProtoBuf.Attr creatureAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creatureAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_creatureattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creatureAttr;
        if (input->ExpectTag(26)) goto parse_digPerfors;
        break;
      }

      // repeated .ProtoBuf.DigPerfor digPerfors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digPerfors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_digperfors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_digPerfors;
        if (input->ExpectTag(32)) goto parse_BeDead;
        break;
      }

      // optional bool BeDead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bedead_)));
          set_has_bedead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseBuffResult_Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 targetCid = 1;
  if (has_targetcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetcid(), output);
  }

  // repeated .ProtoBuf.Attr creatureAttr = 2;
  for (int i = 0; i < this->creatureattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creatureattr(i), output);
  }

  // repeated .ProtoBuf.DigPerfor digPerfors = 3;
  for (int i = 0; i < this->digperfors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->digperfors(i), output);
  }

  // optional bool BeDead = 4;
  if (has_bedead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bedead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseBuffResult_Target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 targetCid = 1;
  if (has_targetcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetcid(), target);
  }

  // repeated .ProtoBuf.Attr creatureAttr = 2;
  for (int i = 0; i < this->creatureattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creatureattr(i), target);
  }

  // repeated .ProtoBuf.DigPerfor digPerfors = 3;
  for (int i = 0; i < this->digperfors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->digperfors(i), target);
  }

  // optional bool BeDead = 4;
  if (has_bedead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bedead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseBuffResult_Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 targetCid = 1;
    if (has_targetcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcid());
    }

    // optional bool BeDead = 4;
    if (has_bedead()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoBuf.Attr creatureAttr = 2;
  total_size += 1 * this->creatureattr_size();
  for (int i = 0; i < this->creatureattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatureattr(i));
  }

  // repeated .ProtoBuf.DigPerfor digPerfors = 3;
  total_size += 1 * this->digperfors_size();
  for (int i = 0; i < this->digperfors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->digperfors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseBuffResult_Target::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseBuffResult_Target* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseBuffResult_Target*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseBuffResult_Target::MergeFrom(const UseBuffResult_Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  creatureattr_.MergeFrom(from.creatureattr_);
  digperfors_.MergeFrom(from.digperfors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetcid()) {
      set_targetcid(from.targetcid());
    }
    if (from.has_bedead()) {
      set_bedead(from.bedead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseBuffResult_Target::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseBuffResult_Target::CopyFrom(const UseBuffResult_Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseBuffResult_Target::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < creatureattr_size(); i++) {
    if (!this->creatureattr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < digperfors_size(); i++) {
    if (!this->digperfors(i).IsInitialized()) return false;
  }
  return true;
}

void UseBuffResult_Target::Swap(UseBuffResult_Target* other) {
  if (other != this) {
    std::swap(targetcid_, other->targetcid_);
    creatureattr_.Swap(&other->creatureattr_);
    digperfors_.Swap(&other->digperfors_);
    std::swap(bedead_, other->bedead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseBuffResult_Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseBuffResult_Target_descriptor_;
  metadata.reflection = UseBuffResult_Target_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UseBuffResult::kSkillIdFieldNumber;
const int UseBuffResult::kUserCidFieldNumber;
const int UseBuffResult::kTargetsFieldNumber;
const int UseBuffResult::kBuffBagIdFieldNumber;
const int UseBuffResult::kBuffBagInstIdFieldNumber;
const int UseBuffResult::kBuffIdFieldNumber;
#endif  // !_MSC_VER

UseBuffResult::UseBuffResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseBuffResult::InitAsDefaultInstance() {
}

UseBuffResult::UseBuffResult(const UseBuffResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseBuffResult::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  usercid_ = 0u;
  buffbagid_ = 0u;
  buffbaginstid_ = 0u;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseBuffResult::~UseBuffResult() {
  SharedDtor();
}

void UseBuffResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseBuffResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseBuffResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseBuffResult_descriptor_;
}

const UseBuffResult& UseBuffResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

UseBuffResult* UseBuffResult::default_instance_ = NULL;

UseBuffResult* UseBuffResult::New() const {
  return new UseBuffResult;
}

void UseBuffResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    usercid_ = 0u;
    buffbagid_ = 0u;
    buffbaginstid_ = 0u;
    buffid_ = 0u;
  }
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseBuffResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userCid;
        break;
      }

      // required uint32 userCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usercid_)));
          set_has_usercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        break;
      }

      // repeated .ProtoBuf.UseBuffResult.Target targets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        if (input->ExpectTag(32)) goto parse_buffBagId;
        break;
      }

      // required uint32 buffBagId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffBagId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffbagid_)));
          set_has_buffbagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buffBagInstId;
        break;
      }

      // required uint32 buffBagInstId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffBagInstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffbaginstid_)));
          set_has_buffbaginstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buffId;
        break;
      }

      // required uint32 buffId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseBuffResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usercid(), output);
  }

  // repeated .ProtoBuf.UseBuffResult.Target targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targets(i), output);
  }

  // required uint32 buffBagId = 4;
  if (has_buffbagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buffbagid(), output);
  }

  // required uint32 buffBagInstId = 5;
  if (has_buffbaginstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buffbaginstid(), output);
  }

  // required uint32 buffId = 6;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseBuffResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usercid(), target);
  }

  // repeated .ProtoBuf.UseBuffResult.Target targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targets(i), target);
  }

  // required uint32 buffBagId = 4;
  if (has_buffbagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buffbagid(), target);
  }

  // required uint32 buffBagInstId = 5;
  if (has_buffbaginstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buffbaginstid(), target);
  }

  // required uint32 buffId = 6;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseBuffResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 userCid = 2;
    if (has_usercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usercid());
    }

    // required uint32 buffBagId = 4;
    if (has_buffbagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffbagid());
    }

    // required uint32 buffBagInstId = 5;
    if (has_buffbaginstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffbaginstid());
    }

    // required uint32 buffId = 6;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  // repeated .ProtoBuf.UseBuffResult.Target targets = 3;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseBuffResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseBuffResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseBuffResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseBuffResult::MergeFrom(const UseBuffResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_usercid()) {
      set_usercid(from.usercid());
    }
    if (from.has_buffbagid()) {
      set_buffbagid(from.buffbagid());
    }
    if (from.has_buffbaginstid()) {
      set_buffbaginstid(from.buffbaginstid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseBuffResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseBuffResult::CopyFrom(const UseBuffResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseBuffResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  for (int i = 0; i < targets_size(); i++) {
    if (!this->targets(i).IsInitialized()) return false;
  }
  return true;
}

void UseBuffResult::Swap(UseBuffResult* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(usercid_, other->usercid_);
    targets_.Swap(&other->targets_);
    std::swap(buffbagid_, other->buffbagid_);
    std::swap(buffbaginstid_, other->buffbaginstid_);
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseBuffResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseBuffResult_descriptor_;
  metadata.reflection = UseBuffResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevUpSkillRsp::kCodeFieldNumber;
const int LevUpSkillRsp::kSkillIdFieldNumber;
const int LevUpSkillRsp::kSkillLevFieldNumber;
#endif  // !_MSC_VER

LevUpSkillRsp::LevUpSkillRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevUpSkillRsp::InitAsDefaultInstance() {
}

LevUpSkillRsp::LevUpSkillRsp(const LevUpSkillRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevUpSkillRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  skillid_ = 0u;
  skilllev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevUpSkillRsp::~LevUpSkillRsp() {
  SharedDtor();
}

void LevUpSkillRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevUpSkillRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevUpSkillRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevUpSkillRsp_descriptor_;
}

const LevUpSkillRsp& LevUpSkillRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

LevUpSkillRsp* LevUpSkillRsp::default_instance_ = NULL;

LevUpSkillRsp* LevUpSkillRsp::New() const {
  return new LevUpSkillRsp;
}

void LevUpSkillRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    skillid_ = 0u;
    skilllev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevUpSkillRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.ERetCode code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::ERetCode_IsValid(value)) {
            set_code(static_cast< ::ProtoBuf::ERetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional uint32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillLev;
        break;
      }

      // optional uint32 skillLev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllev_)));
          set_has_skilllev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevUpSkillRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.ERetCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional uint32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 skillLev = 3;
  if (has_skilllev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilllev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevUpSkillRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.ERetCode code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional uint32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 skillLev = 3;
  if (has_skilllev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilllev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevUpSkillRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.ERetCode code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional uint32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLev = 3;
    if (has_skilllev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevUpSkillRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevUpSkillRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevUpSkillRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevUpSkillRsp::MergeFrom(const LevUpSkillRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllev()) {
      set_skilllev(from.skilllev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevUpSkillRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevUpSkillRsp::CopyFrom(const LevUpSkillRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevUpSkillRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LevUpSkillRsp::Swap(LevUpSkillRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllev_, other->skilllev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevUpSkillRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevUpSkillRsp_descriptor_;
  metadata.reflection = LevUpSkillRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastUseSkillStop::kSkillIdFieldNumber;
const int BroadcastUseSkillStop::kUserCidFieldNumber;
const int BroadcastUseSkillStop::kStopStepFieldNumber;
#endif  // !_MSC_VER

BroadcastUseSkillStop::BroadcastUseSkillStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastUseSkillStop::InitAsDefaultInstance() {
}

BroadcastUseSkillStop::BroadcastUseSkillStop(const BroadcastUseSkillStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastUseSkillStop::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  usercid_ = 0u;
  stopstep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastUseSkillStop::~BroadcastUseSkillStop() {
  SharedDtor();
}

void BroadcastUseSkillStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastUseSkillStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastUseSkillStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastUseSkillStop_descriptor_;
}

const BroadcastUseSkillStop& BroadcastUseSkillStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

BroadcastUseSkillStop* BroadcastUseSkillStop::default_instance_ = NULL;

BroadcastUseSkillStop* BroadcastUseSkillStop::New() const {
  return new BroadcastUseSkillStop;
}

void BroadcastUseSkillStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    usercid_ = 0u;
    stopstep_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastUseSkillStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userCid;
        break;
      }

      // required uint32 userCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usercid_)));
          set_has_usercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stopStep;
        break;
      }

      // optional uint32 stopStep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stopstep_)));
          set_has_stopstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastUseSkillStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usercid(), output);
  }

  // optional uint32 stopStep = 3;
  if (has_stopstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stopstep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastUseSkillStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 userCid = 2;
  if (has_usercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usercid(), target);
  }

  // optional uint32 stopStep = 3;
  if (has_stopstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stopstep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastUseSkillStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 userCid = 2;
    if (has_usercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usercid());
    }

    // optional uint32 stopStep = 3;
    if (has_stopstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stopstep());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastUseSkillStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastUseSkillStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastUseSkillStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastUseSkillStop::MergeFrom(const BroadcastUseSkillStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_usercid()) {
      set_usercid(from.usercid());
    }
    if (from.has_stopstep()) {
      set_stopstep(from.stopstep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastUseSkillStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastUseSkillStop::CopyFrom(const BroadcastUseSkillStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastUseSkillStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BroadcastUseSkillStop::Swap(BroadcastUseSkillStop* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(usercid_, other->usercid_);
    std::swap(stopstep_, other->stopstep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastUseSkillStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastUseSkillStop_descriptor_;
  metadata.reflection = BroadcastUseSkillStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffBagDetailInfo::kBuffBagInstIdFieldNumber;
const int BuffBagDetailInfo::kBuffBagIdFieldNumber;
const int BuffBagDetailInfo::kSenderCidFieldNumber;
const int BuffBagDetailInfo::kRecverCidFieldNumber;
const int BuffBagDetailInfo::kContinuanceTimeFieldNumber;
const int BuffBagDetailInfo::kDelayedTimeFieldNumber;
#endif  // !_MSC_VER

BuffBagDetailInfo::BuffBagDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffBagDetailInfo::InitAsDefaultInstance() {
}

BuffBagDetailInfo::BuffBagDetailInfo(const BuffBagDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffBagDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  buff_bag_inst_id_ = 0;
  buff_bag_id_ = 0;
  sender_cid_ = 0;
  recver_cid_ = 0;
  continuance_time_ = GOOGLE_LONGLONG(0);
  delayed_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffBagDetailInfo::~BuffBagDetailInfo() {
  SharedDtor();
}

void BuffBagDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffBagDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffBagDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffBagDetailInfo_descriptor_;
}

const BuffBagDetailInfo& BuffBagDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

BuffBagDetailInfo* BuffBagDetailInfo::default_instance_ = NULL;

BuffBagDetailInfo* BuffBagDetailInfo::New() const {
  return new BuffBagDetailInfo;
}

void BuffBagDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_bag_inst_id_ = 0;
    buff_bag_id_ = 0;
    sender_cid_ = 0;
    recver_cid_ = 0;
    continuance_time_ = GOOGLE_LONGLONG(0);
    delayed_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffBagDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff_bag_inst_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_bag_inst_id_)));
          set_has_buff_bag_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_bag_id;
        break;
      }

      // required int32 buff_bag_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_bag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_bag_id_)));
          set_has_buff_bag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sender_cid;
        break;
      }

      // optional int32 sender_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_cid_)));
          set_has_sender_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recver_cid;
        break;
      }

      // optional int32 recver_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recver_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recver_cid_)));
          set_has_recver_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_continuance_time;
        break;
      }

      // optional int64 continuance_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continuance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &continuance_time_)));
          set_has_continuance_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delayed_time;
        break;
      }

      // optional int32 delayed_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delayed_time_)));
          set_has_delayed_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffBagDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff_bag_inst_id = 1;
  if (has_buff_bag_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_bag_inst_id(), output);
  }

  // required int32 buff_bag_id = 2;
  if (has_buff_bag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_bag_id(), output);
  }

  // optional int32 sender_cid = 3;
  if (has_sender_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sender_cid(), output);
  }

  // optional int32 recver_cid = 4;
  if (has_recver_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recver_cid(), output);
  }

  // optional int64 continuance_time = 5;
  if (has_continuance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->continuance_time(), output);
  }

  // optional int32 delayed_time = 6;
  if (has_delayed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delayed_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffBagDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff_bag_inst_id = 1;
  if (has_buff_bag_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_bag_inst_id(), target);
  }

  // required int32 buff_bag_id = 2;
  if (has_buff_bag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_bag_id(), target);
  }

  // optional int32 sender_cid = 3;
  if (has_sender_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sender_cid(), target);
  }

  // optional int32 recver_cid = 4;
  if (has_recver_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recver_cid(), target);
  }

  // optional int64 continuance_time = 5;
  if (has_continuance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->continuance_time(), target);
  }

  // optional int32 delayed_time = 6;
  if (has_delayed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delayed_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffBagDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff_bag_inst_id = 1;
    if (has_buff_bag_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_bag_inst_id());
    }

    // required int32 buff_bag_id = 2;
    if (has_buff_bag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_bag_id());
    }

    // optional int32 sender_cid = 3;
    if (has_sender_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_cid());
    }

    // optional int32 recver_cid = 4;
    if (has_recver_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recver_cid());
    }

    // optional int64 continuance_time = 5;
    if (has_continuance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->continuance_time());
    }

    // optional int32 delayed_time = 6;
    if (has_delayed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delayed_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffBagDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffBagDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffBagDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffBagDetailInfo::MergeFrom(const BuffBagDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_bag_inst_id()) {
      set_buff_bag_inst_id(from.buff_bag_inst_id());
    }
    if (from.has_buff_bag_id()) {
      set_buff_bag_id(from.buff_bag_id());
    }
    if (from.has_sender_cid()) {
      set_sender_cid(from.sender_cid());
    }
    if (from.has_recver_cid()) {
      set_recver_cid(from.recver_cid());
    }
    if (from.has_continuance_time()) {
      set_continuance_time(from.continuance_time());
    }
    if (from.has_delayed_time()) {
      set_delayed_time(from.delayed_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffBagDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffBagDetailInfo::CopyFrom(const BuffBagDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffBagDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuffBagDetailInfo::Swap(BuffBagDetailInfo* other) {
  if (other != this) {
    std::swap(buff_bag_inst_id_, other->buff_bag_inst_id_);
    std::swap(buff_bag_id_, other->buff_bag_id_);
    std::swap(sender_cid_, other->sender_cid_);
    std::swap(recver_cid_, other->recver_cid_);
    std::swap(continuance_time_, other->continuance_time_);
    std::swap(delayed_time_, other->delayed_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffBagDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffBagDetailInfo_descriptor_;
  metadata.reflection = BuffBagDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffStateChangeInfo::kBuffStateIdFieldNumber;
const int BuffStateChangeInfo::kValueFieldNumber;
const int BuffStateChangeInfo::kCidFieldNumber;
#endif  // !_MSC_VER

BuffStateChangeInfo::BuffStateChangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffStateChangeInfo::InitAsDefaultInstance() {
}

BuffStateChangeInfo::BuffStateChangeInfo(const BuffStateChangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffStateChangeInfo::SharedCtor() {
  _cached_size_ = 0;
  buff_state_id_ = 0;
  value_ = 0;
  cid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffStateChangeInfo::~BuffStateChangeInfo() {
  SharedDtor();
}

void BuffStateChangeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffStateChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffStateChangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffStateChangeInfo_descriptor_;
}

const BuffStateChangeInfo& BuffStateChangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

BuffStateChangeInfo* BuffStateChangeInfo::default_instance_ = NULL;

BuffStateChangeInfo* BuffStateChangeInfo::New() const {
  return new BuffStateChangeInfo;
}

void BuffStateChangeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_state_id_ = 0;
    value_ = 0;
    cid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffStateChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff_state_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_state_id_)));
          set_has_buff_state_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // required int32 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffStateChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff_state_id = 1;
  if (has_buff_state_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_state_id(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // required int32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffStateChangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff_state_id = 1;
  if (has_buff_state_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_state_id(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // required int32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffStateChangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff_state_id = 1;
    if (has_buff_state_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_state_id());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // required int32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffStateChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffStateChangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffStateChangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffStateChangeInfo::MergeFrom(const BuffStateChangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_state_id()) {
      set_buff_state_id(from.buff_state_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffStateChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffStateChangeInfo::CopyFrom(const BuffStateChangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffStateChangeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BuffStateChangeInfo::Swap(BuffStateChangeInfo* other) {
  if (other != this) {
    std::swap(buff_state_id_, other->buff_state_id_);
    std::swap(value_, other->value_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffStateChangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffStateChangeInfo_descriptor_;
  metadata.reflection = BuffStateChangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AiPlayIdleInfo::kCidFieldNumber;
#endif  // !_MSC_VER

AiPlayIdleInfo::AiPlayIdleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AiPlayIdleInfo::InitAsDefaultInstance() {
}

AiPlayIdleInfo::AiPlayIdleInfo(const AiPlayIdleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AiPlayIdleInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AiPlayIdleInfo::~AiPlayIdleInfo() {
  SharedDtor();
}

void AiPlayIdleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AiPlayIdleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AiPlayIdleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AiPlayIdleInfo_descriptor_;
}

const AiPlayIdleInfo& AiPlayIdleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

AiPlayIdleInfo* AiPlayIdleInfo::default_instance_ = NULL;

AiPlayIdleInfo* AiPlayIdleInfo::New() const {
  return new AiPlayIdleInfo;
}

void AiPlayIdleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AiPlayIdleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AiPlayIdleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AiPlayIdleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AiPlayIdleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AiPlayIdleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AiPlayIdleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AiPlayIdleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AiPlayIdleInfo::MergeFrom(const AiPlayIdleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AiPlayIdleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AiPlayIdleInfo::CopyFrom(const AiPlayIdleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AiPlayIdleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AiPlayIdleInfo::Swap(AiPlayIdleInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AiPlayIdleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AiPlayIdleInfo_descriptor_;
  metadata.reflection = AiPlayIdleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpKillingValueBroadCast::kPkKillingValueFieldNumber;
#endif  // !_MSC_VER

PvpKillingValueBroadCast::PvpKillingValueBroadCast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpKillingValueBroadCast::InitAsDefaultInstance() {
}

PvpKillingValueBroadCast::PvpKillingValueBroadCast(const PvpKillingValueBroadCast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpKillingValueBroadCast::SharedCtor() {
  _cached_size_ = 0;
  pk_killing_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpKillingValueBroadCast::~PvpKillingValueBroadCast() {
  SharedDtor();
}

void PvpKillingValueBroadCast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpKillingValueBroadCast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpKillingValueBroadCast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpKillingValueBroadCast_descriptor_;
}

const PvpKillingValueBroadCast& PvpKillingValueBroadCast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

PvpKillingValueBroadCast* PvpKillingValueBroadCast::default_instance_ = NULL;

PvpKillingValueBroadCast* PvpKillingValueBroadCast::New() const {
  return new PvpKillingValueBroadCast;
}

void PvpKillingValueBroadCast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pk_killing_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpKillingValueBroadCast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pk_killing_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_killing_value_)));
          set_has_pk_killing_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpKillingValueBroadCast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pk_killing_value = 1;
  if (has_pk_killing_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pk_killing_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpKillingValueBroadCast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pk_killing_value = 1;
  if (has_pk_killing_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pk_killing_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpKillingValueBroadCast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pk_killing_value = 1;
    if (has_pk_killing_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_killing_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpKillingValueBroadCast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpKillingValueBroadCast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpKillingValueBroadCast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpKillingValueBroadCast::MergeFrom(const PvpKillingValueBroadCast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk_killing_value()) {
      set_pk_killing_value(from.pk_killing_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpKillingValueBroadCast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpKillingValueBroadCast::CopyFrom(const PvpKillingValueBroadCast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpKillingValueBroadCast::IsInitialized() const {

  return true;
}

void PvpKillingValueBroadCast::Swap(PvpKillingValueBroadCast* other) {
  if (other != this) {
    std::swap(pk_killing_value_, other->pk_killing_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpKillingValueBroadCast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpKillingValueBroadCast_descriptor_;
  metadata.reflection = PvpKillingValueBroadCast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpRedPlayer::kIsAddFieldNumber;
const int PvpRedPlayer::kPlayerCidFieldNumber;
#endif  // !_MSC_VER

PvpRedPlayer::PvpRedPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpRedPlayer::InitAsDefaultInstance() {
}

PvpRedPlayer::PvpRedPlayer(const PvpRedPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpRedPlayer::SharedCtor() {
  _cached_size_ = 0;
  is_add_ = false;
  player_cid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpRedPlayer::~PvpRedPlayer() {
  SharedDtor();
}

void PvpRedPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpRedPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpRedPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpRedPlayer_descriptor_;
}

const PvpRedPlayer& PvpRedPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

PvpRedPlayer* PvpRedPlayer::default_instance_ = NULL;

PvpRedPlayer* PvpRedPlayer::New() const {
  return new PvpRedPlayer;
}

void PvpRedPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_add_ = false;
    player_cid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpRedPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_add = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_add_)));
          set_has_is_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_cid;
        break;
      }

      // optional uint32 player_cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_cid_)));
          set_has_player_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpRedPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_add = 1;
  if (has_is_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_add(), output);
  }

  // optional uint32 player_cid = 2;
  if (has_player_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpRedPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_add = 1;
  if (has_is_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_add(), target);
  }

  // optional uint32 player_cid = 2;
  if (has_player_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpRedPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_add = 1;
    if (has_is_add()) {
      total_size += 1 + 1;
    }

    // optional uint32 player_cid = 2;
    if (has_player_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpRedPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpRedPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpRedPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpRedPlayer::MergeFrom(const PvpRedPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_add()) {
      set_is_add(from.is_add());
    }
    if (from.has_player_cid()) {
      set_player_cid(from.player_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpRedPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpRedPlayer::CopyFrom(const PvpRedPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpRedPlayer::IsInitialized() const {

  return true;
}

void PvpRedPlayer::Swap(PvpRedPlayer* other) {
  if (other != this) {
    std::swap(is_add_, other->is_add_);
    std::swap(player_cid_, other->player_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpRedPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpRedPlayer_descriptor_;
  metadata.reflection = PvpRedPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffReplaceNormalSkills::kCidFieldNumber;
const int BuffReplaceNormalSkills::kOldSkillFieldNumber;
const int BuffReplaceNormalSkills::kNewSkillFieldNumber;
#endif  // !_MSC_VER

BuffReplaceNormalSkills::BuffReplaceNormalSkills()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffReplaceNormalSkills::InitAsDefaultInstance() {
  oldskill_ = const_cast< ::ProtoBuf::SkillCell*>(&::ProtoBuf::SkillCell::default_instance());
  newskill_ = const_cast< ::ProtoBuf::SkillCell*>(&::ProtoBuf::SkillCell::default_instance());
}

BuffReplaceNormalSkills::BuffReplaceNormalSkills(const BuffReplaceNormalSkills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffReplaceNormalSkills::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  oldskill_ = NULL;
  newskill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffReplaceNormalSkills::~BuffReplaceNormalSkills() {
  SharedDtor();
}

void BuffReplaceNormalSkills::SharedDtor() {
  if (this != default_instance_) {
    delete oldskill_;
    delete newskill_;
  }
}

void BuffReplaceNormalSkills::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffReplaceNormalSkills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffReplaceNormalSkills_descriptor_;
}

const BuffReplaceNormalSkills& BuffReplaceNormalSkills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fLogicToClient_2eproto();
  return *default_instance_;
}

BuffReplaceNormalSkills* BuffReplaceNormalSkills::default_instance_ = NULL;

BuffReplaceNormalSkills* BuffReplaceNormalSkills::New() const {
  return new BuffReplaceNormalSkills;
}

void BuffReplaceNormalSkills::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = 0u;
    if (has_oldskill()) {
      if (oldskill_ != NULL) oldskill_->::ProtoBuf::SkillCell::Clear();
    }
    if (has_newskill()) {
      if (newskill_ != NULL) newskill_->::ProtoBuf::SkillCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffReplaceNormalSkills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldSkill;
        break;
      }

      // optional .ProtoBuf.SkillCell oldSkill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newSkill;
        break;
      }

      // optional .ProtoBuf.SkillCell newSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffReplaceNormalSkills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // optional .ProtoBuf.SkillCell oldSkill = 2;
  if (has_oldskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oldskill(), output);
  }

  // optional .ProtoBuf.SkillCell newSkill = 3;
  if (has_newskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newskill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffReplaceNormalSkills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // optional .ProtoBuf.SkillCell oldSkill = 2;
  if (has_oldskill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->oldskill(), target);
  }

  // optional .ProtoBuf.SkillCell newSkill = 3;
  if (has_newskill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newskill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffReplaceNormalSkills::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // optional .ProtoBuf.SkillCell oldSkill = 2;
    if (has_oldskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldskill());
    }

    // optional .ProtoBuf.SkillCell newSkill = 3;
    if (has_newskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newskill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffReplaceNormalSkills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffReplaceNormalSkills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffReplaceNormalSkills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffReplaceNormalSkills::MergeFrom(const BuffReplaceNormalSkills& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_oldskill()) {
      mutable_oldskill()->::ProtoBuf::SkillCell::MergeFrom(from.oldskill());
    }
    if (from.has_newskill()) {
      mutable_newskill()->::ProtoBuf::SkillCell::MergeFrom(from.newskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffReplaceNormalSkills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffReplaceNormalSkills::CopyFrom(const BuffReplaceNormalSkills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffReplaceNormalSkills::IsInitialized() const {

  if (has_oldskill()) {
    if (!this->oldskill().IsInitialized()) return false;
  }
  if (has_newskill()) {
    if (!this->newskill().IsInitialized()) return false;
  }
  return true;
}

void BuffReplaceNormalSkills::Swap(BuffReplaceNormalSkills* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(oldskill_, other->oldskill_);
    std::swap(newskill_, other->newskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffReplaceNormalSkills::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffReplaceNormalSkills_descriptor_;
  metadata.reflection = BuffReplaceNormalSkills_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
