// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/ServerInternalCmd.proto

#ifndef PROTOBUF_ProtoBuffer_2fServerInternalCmd_2eproto__INCLUDED
#define PROTOBUF_ProtoBuffer_2fServerInternalCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoBuffer_2fServerInternalCmd_2eproto();
void protobuf_AssignDesc_ProtoBuffer_2fServerInternalCmd_2eproto();
void protobuf_ShutdownFile_ProtoBuffer_2fServerInternalCmd_2eproto();


enum ServerInternalCmd {
  SERVER_INTERNAL_LOGIN_BEGIN = 1,
  CENTER_SERVER_PROTOCOL_LOGINLOGIC_REQ = 2,
  CENTER_SERVER_PROTOCOL_ENTERWORLD_REQ = 3,
  CENTER_SERVER_PROTOCOL_LOGOUTLOGIC_REQ = 4,
  CENTER_SERVER_PROTOCOL_SYNC_CHARACTER_REQ = 5,
  CENTER_SERVER_PROTOCOL_CLIENT_RECONNECT_LOGIC_REQ = 6,
  CENTER_SERVER_PROTOCOL_ACCOUNT_LOGIN_CHECK_REQ = 7,
  CENTER_SERVER_PROTOCOL_LOGIN_TOKEN_CHECK_REQ = 8,
  CENTER_SERVER_PROTOCOL_ACCOUNT_LOGOUT_NOTIFY = 9,
  CENTER_SERVER_PROTOCOL_LOGIC_TO_CENTER_CREATE_CHAR_NOTIFY = 10,
  CENTER_SERVER_PROTOCOL_LOGIC_TO_CENTER_DEL_CHAR_NOTIFY = 11,
  CENTER_SERVER_PROTOCOL_LOGIC_TO_CENTER_CHAR_ATTR_SYNC = 12,
  CENTER_SERVER_PROTOCOL_LOGINLOGIC_RSP = 13,
  CENTER_SERVER_PROTOCOL_ENTERWORLD_RSP = 14,
  CENTER_SERVER_PROTOCOL_CLIENT_RECONNECT_LOGIC_RSP = 15,
  CENTER_SERVER_PROTOCOL_ACCOUNT_LOGIN_CHECK_RSP = 16,
  CENTER_SERVER_PROTOCOL_LOGIN_TOKEN_CHECK_RSP = 17,
  CENTER_SERVER_PROTOCOL_KICK_CHANNEL_USER_NOTIFY = 18,
  CENTER_SERVER_PROTOCOL_CENTER_ACCOUNT_LOGOUT_NOTIFY = 19,
  SERVER_INTERNAL_LOGIN_END = 50,
  SERVER_INTERNAL_SYSTEM_BEGIN = 60,
  CENTER_SERVER_PROTOCOL_PING_REQ = 61,
  LOG_SERVER_PROTOCOL_PING_REQ = 62,
  LOGIN_SERVER_PROTOCOL_PING_REQ = 63,
  CENTER_SERVER_PROTOCOL_REDIRECT_TO_CENTERSERVER = 64,
  CENTER_SERVER_PROTOCOL_LOGINSERVER_REGISTE = 65,
  CENTER_SERVER_PROTOCOL_LOGICSERVER_REGISTE = 66,
  CENTER_SERVER_PROTOCOL_BROADCAST_TO_LOGIC = 67,
  CENTER_SERVER_PROTOCOL_REDIRECT_TO_CLIENT = 68,
  CENTER_SERVER_PROTOCOL_DBPROXY_ADDRESSINFO = 69,
  SERVER_INTERNAL_SYSTEM_END = 80,
  SERVER_INTERNAL_SCENE_BEGIN = 90,
  CENTER_SERVER_PROTOCOL_SWITCH_SERVER_BEGIN = 91,
  CENTER_SERVER_PROTOCOL_RSP_SCENCE_ID = 92,
  SERVER_INTERNAL_SCENE_END = 110,
  SERVER_INTERNAL_CHAT_BEGIN = 120,
  CENTER_SERVER_PROTOCOL_CHAT_REQ = 121,
  CENTER_SERVER_PROTOCOL_GWSYSCHATMSGNOTIFY = 122,
  SERVER_INTERNAL_CHAT_END = 130,
  SERVER_INTERNAL_FRIEND_BEGIN = 140,
  CENTER_SERVER_PROTOCOL_GET_PHYSICAL_TO_LOGIC = 141,
  CENTER_SERVER_PROTOCOL_GET_PHYSICAL_GIFT_TO_LOGIC = 142,
  SERVER_INTERNAL_FRIEND_END = 160,
  SERVER_INTERNAL_DUPLICATE_BEGIN = 170,
  LOGIC_TO_CENTER_DUPLICATE_ENTER_DUP_REQ = 171,
  CENTER_TO_LOGIC_DUPLICATE_ENTER_DUP_RSP = 172,
  LOGIC_TO_CENTER_CREATE_DUPLICATE_SCENE_REQ = 173,
  CENTER_TO_LOGIC_CREATE_DUPLICATE_SCENE_RSP = 174,
  LOGIC_TO_CENTER_CREATE_DUPLICATE_RSP = 175,
  CENTER_TO_LOGIC_DUPLICATE_NOTIFY_PREPARE = 176,
  LOGIC_TO_CENTER_DUPLICATE_PREPARE_RSP = 177,
  CENTER_TO_LOGIC_DUPLICATE_NOTIFY_ENTER = 178,
  LOGIC_TO_CENTER_DUPLICATE_ENTER_RSP = 179,
  LOGIC_TO_CENTER_DUPLICATE_LEAVE_RSP = 180,
  LOGIC_TO_CENTER_DUPLICATE_BEGIN_RSP = 181,
  LOGIC_TO_CENTER_DUPLICATE_END_RSP = 182,
  LOGIC_TO_CENTER_DUPLICATE_DESTORY_RSP = 183,
  SERVER_INTERNAL_DUPLICATE_END = 190,
  SERVER_INTERNAL_MAIL_BEGIN = 200,
  CENTER_SERVER_PROTOCOL_SEND_MAIL_REQ = 201,
  CENTER_SERVER_PROTOCOL_SEND_MAIL_RSP = 202,
  CENTER_SERVER_PROTOCOL_GET_MAIL_ATTACHMENT_TO_LOGIC = 203,
  CENTER_SERVER_PROTOCOL_UPDATE_MAIL_NOTIFY = 204,
  CENTER_SERVER_PROTOCOL_GET_ALL_MAIL_ATTACHMENT_TO_LOGIC = 205,
  CENTER_SERVER_PROTOCOL_SEND_SYSTEM_MAIL = 206,
  CENTER_SERVER_PROTOCOL_SEND_MAIL_TO_LOGIC = 207,
  SERVER_INTERNAL_MAIL_END = 250,
  SERVER_INTERNAL_CAMP_BEGIN = 260,
  CENTER_TO_LOGIC_CAMP_CHAR_INFO_NOTIFY = 261,
  CENTER_TO_LOGIC_CAMP_CHECK_NOTICE_COST_REQ = 262,
  LOGIC_TO_CENTER_CAMP_CHECK_NOTICE_COST_RSP = 263,
  SERVER_INTERNAL_CAMP_END = 299,
  SERVER_INTERNAL_ACHIEVEMENT_BEGIN = 300,
  SERVER_INTERNAL_ACHIEVEMENTNOTIFY = 301,
  SERVER_INTERNAL_ACHIEVEMENT_END = 310,
  SERVER_INTERNAL_MALL_BEGIN = 320,
  LOGIC_TO_CENTER_BUY_VERIFY_REQ = 321,
  CENTER_TO_LOGIC_BUY_VERIFY_RSP = 322,
  SERVER_INTERNAL_MALL_END = 330,
  SERVER_INTERNAL_ACTIVITY_BEGIN = 331,
  CENTER_TO_LOGIC_DAILY_UPDATE_NOTIFY = 332,
  CENTER_TO_LOGIC_WEEK_UPDATE_NOTIFY = 333,
  SERVER_INTERNAL_ACTIVITY_END = 400,
  SERVER_INTERNAL_ROOM_BEGIN = 450,
  LOGIC_TO_CENTER_ROOM_CREATE = 451,
  LOGIC_TO_CENTER_ROOM_SET_PWD = 452,
  LOGIC_TO_CENTER_ROOM_JOIN = 453,
  LOGIC_TO_CENTER_ROOM_INVITE_FRIEND = 454,
  LOGIC_TO_CENTER_ROOM_INVITE_REPLY = 455,
  LOGIC_TO_CENTER_ROOM_KICK = 456,
  LOGIC_TO_CENTER_ROOM_LEAVE = 457,
  LOGIC_TO_CENTER_ROOM_AUTO_JOIN = 458,
  CENTER_TO_LOGIC_ROOM_CHAR_ROOM_NOTIFY = 459,
  SERVER_INTERNAL_ROOM_END = 480
};
bool ServerInternalCmd_IsValid(int value);
const ServerInternalCmd ServerInternalCmd_MIN = SERVER_INTERNAL_LOGIN_BEGIN;
const ServerInternalCmd ServerInternalCmd_MAX = SERVER_INTERNAL_ROOM_END;
const int ServerInternalCmd_ARRAYSIZE = ServerInternalCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerInternalCmd_descriptor();
inline const ::std::string& ServerInternalCmd_Name(ServerInternalCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerInternalCmd_descriptor(), value);
}
inline bool ServerInternalCmd_Parse(
    const ::std::string& name, ServerInternalCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerInternalCmd>(
    ServerInternalCmd_descriptor(), name, value);
}
enum DBProxyServerCmd {
  DBPROXY_PROTOCOL_SYSTEM_BEGIN = 1,
  DBPROXY_PROTOCOL_PING_REQ = 2,
  DBPROXY_PROTOCOL_GLOBAL_GET_REQ = 3,
  DBPROXY_PROTOCOL_GLOBAL_GET_RSP = 4,
  DBPROXY_PROTOCOL_GLOBAL_SAVE_REQ = 5,
  DBPROXY_PROTOCOL_GLOBAL_SAVE_RSP = 6,
  DBPROXY_PROTOCOL_ALL_CHARACTER_CAMP_REQ = 7,
  DBPROXY_PROTOCOL_ALL_CHARACTER_CAMP_RSP = 8,
  DBPROXY_PROTOCOL_SYSTEM_END = 20,
  DBPROXY_PROTOCOL_LOGIN_BEGIN = 30,
  DBPROXY_PROTOCOL_GET_CHARACTER_LIST_REQ = 31,
  DBPROXY_PROTOCOL_GET_CHARACTER_LIST_RSP = 32,
  DBPROXY_PROTOCOL_CREATE_CHARACTER_REQ = 33,
  DBPROXY_PROTOCOL_CREATE_CHARACTER_RSP = 34,
  DBPROXY_PROTOCOL_GET_CHARACTER_DATA_REQ = 35,
  DBPROXY_PROTOCOL_GET_CHARACTER_DATA_RSP = 36,
  DBPROXY_PROTOCOL_DEL_CHARACTER_REQ = 37,
  DBPROXY_PROTOCOL_DEL_CHARACTER_RSP = 38,
  DBPROXY_PROTOCOL_GET_CHARACTER_OFFLINE_DATA_REQ = 39,
  DBPROXY_PROTOCOL_GET_CHARACTER_OFFLINE_DATA_RSP = 40,
  DBPROXY_PROTOCOL_ACCOUNT_LOGINT_REQ = 41,
  DBPROXY_PROTOCOL_ACCOUNT_LOGINT_RSP = 42,
  DBPROXY_PROTOCOL_ACCOUNT_SET_ONLINE_FALG_REQ = 43,
  DBPROXY_PROTOCOL_OFFLINE_CHARACTER_LIST_REQ = 44,
  DBPROXY_PROTOCOL_OFFLINE_CHARACTER_LIST_RSP = 45,
  DBPROXY_PROTOCOL_ACTIVE_CHARACTER_DATA_REQ = 46,
  DBPROXY_PROTOCOL_ACTIVE_CHARACTER_DATA_RSP = 47,
  DBPROXY_PROTOCOL_GET_PLAYER_ROLE_LIST = 48,
  DBPROXY_PROTOCOL_LOGIN_END = 60,
  DBPROXY_PROTOCOL_FRIEND_BEGIN = 70,
  DBPROXY_PROTOCOL_ALL_FRIEND_DATA_REQ = 71,
  DBPROXY_PROTOCOL_SAVE_FRIEND_DATA_REQ = 72,
  DBPROXY_PROTOCOL_ALL_FRIEND_DATA_RSP = 73,
  DBPROXY_PROTOCOL_SAVE_FRIEND_DATA_RSP = 74,
  DBPROXY_PROTOCOL_FRIEND_END = 80,
  DBPROXY_PROTOCOL_PLAYER_BEGIN = 90,
  DBPROXY_PROTOCOL_SET_CHARACTER_DATA_REQ = 91,
  DBPROXY_PROTOCOL_SET_CHARACTER_DATA_RSP = 92,
  DBPROXY_PROTOCOL_PLAYER_END = 100,
  DBPROXY_PROTOCOL_MAIL_BEGIN = 101,
  DBPROXY_PROTOCOL_TRADING_MAIL_DATA_REQ = 102,
  DBPROXY_PROTOCOL_SAVE_MAIL_DATA_REQ = 103,
  DBPROXY_PROTOCOL_CHARACTER_MAIL_DATA_REQ = 104,
  DBPROXY_PROTOCOL_TRADING_MAIL_DATA_RSP = 105,
  DBPROXY_PROTOCOL_CHARACTER_MAIL_DATA_RSP = 106,
  DBPROXY_PROTOCOL_OFFLINE_MAIL_DATA_REQ = 107,
  DBPROXY_PROTOCOL_OFFLINE_MAIL_DATA_RSP = 108,
  DBPROXY_PROTOCOL_SAVE_OFFLINE_MAIL_DATA_REQ = 109,
  DBPROXY_PROTOCOL_MAX_MAIL_ID_REQ = 110,
  DBPROXY_PROTOCOL_MAX_MAIL_ID_RSP = 111,
  DBPROXY_PROTOCOL_CHARACTER_DELETE_MAIL_REQ = 112,
  DBPROXY_PROTOCOL_MAIL_END = 120,
  DBPROXY_PROTOCOL_CAMP_BEGIN = 130,
  DBPROXY_PROTOCOL_CAMP_PLAYER_GET_REQ = 131,
  DBPROXY_PROTOCOL_CAMP_PLAYER_GET_RSP = 132,
  DBPROXY_PROTOCOL_CAMP_PLAYER_SAVE_REQ = 133,
  DBPROXY_PROTOCOL_CAMP_PLAYER_SAVE_RSP = 134,
  DBPROXY_PROTOCOL_CAMP_END = 140,
  DBPROXY_PROTOCOL_MALL_BEGIN = 150,
  DBPROXY_PROTOCOL_CHARACTER_MALL_DATA_REQ = 151,
  DBPROXY_PROTOCOL_CHARACTER_MALL_DATA_RSP = 152,
  DBPROXY_PROTOCOL_MALL_PLAYER_SAVE_REQ = 153,
  DBPROXY_PROTOCOL_MALL_PLAYER_SAVE_RSP = 154,
  DBPROXY_PROTOCOL_MALL_END = 160,
  DBPROXY_PROTOCOL_END = 200
};
bool DBProxyServerCmd_IsValid(int value);
const DBProxyServerCmd DBProxyServerCmd_MIN = DBPROXY_PROTOCOL_SYSTEM_BEGIN;
const DBProxyServerCmd DBProxyServerCmd_MAX = DBPROXY_PROTOCOL_END;
const int DBProxyServerCmd_ARRAYSIZE = DBProxyServerCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBProxyServerCmd_descriptor();
inline const ::std::string& DBProxyServerCmd_Name(DBProxyServerCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBProxyServerCmd_descriptor(), value);
}
inline bool DBProxyServerCmd_Parse(
    const ::std::string& name, DBProxyServerCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBProxyServerCmd>(
    DBProxyServerCmd_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::ServerInternalCmd>() {
  return ::ProtoBuf::ServerInternalCmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoBuf::DBProxyServerCmd>() {
  return ::ProtoBuf::DBProxyServerCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBuffer_2fServerInternalCmd_2eproto__INCLUDED
