import "ProtoBuffer/ComProtocol.proto";
import "Common/ComDefine.proto";
import "ProtoBuffer/ServerToClientCmd.proto";
package ProtoBuf;

//角色
////////////////////////////////////////////////////////

//LOGIC_TO_CLIENT_PLAYERINFO
message PlayerClientInfo
{
	required uint32 playerId = 1;   //玩家角色id
	required string playername  = 2;   //玩家名
	required uint32 groupId  = 3;   //区服id
	required uint64 createTime  = 4;//创角时间
	required uint64 loginTime= 5;	//上次登入时间
    required uint32 mapId    = 6;  //上线场景模板Id
    required float posX     = 7;  //上线位置X
    required float posY     = 8;  //上线位置Y
    required float posZ     = 9;  //上线位置Y
	required float mspeed   = 10;
	required uint32 namebody = 11;  //玩家外观编号
	required uint32 nameweapon = 12;  //玩家武器外观编号
	required uint32 curstate = 13;     //玩家当前状态
	repeated SkillCell skills = 14;  //技能信息集
	repeated Attr  playerAttrs = 15;  //玩家属性集合
	required uint32 pk_mode = 16; //玩家PK模式
	required uint32 pk_killing_value = 17; //玩家杀谬值 PK值
}

//LOGIC_TO_CLIENT_CREATURE_CREATE
message CreaturesCreateData
{
	message Player
	{
		required uint32 playerId = 1;   //玩家角色id
		required string playername = 2;   //玩家名
	    required uint32 prof     = 3;   //职业
	    required uint32 level    = 4;   //等级
	    required uint32 hp       = 5;  //生命
	    required float posX		 = 6;  //上线位置X
	    required float posY    	 = 7;  //上线位置Y
	    required float posZ    	 = 8;  //上线位置Y
		required uint32 playerrace  = 9;  //种族
		required uint32 gender   = 10;  //性别
		required uint32 namebody = 11;  //玩家外观编号(衣服)
		required uint32 nameweapon = 12;  //玩家武器外观编号（武器）
		required uint32 curstate = 13; //玩家状态
		optional float mspeed = 14;  //玩家速度
		optional uint32 pk_mode = 15; //pk模式
		optional uint32 pk_killing_value = 16; //pk值
	}
	message Monster
	{
		required uint32 monsterCid = 1;		 //怪物cid
		required uint32 monsterConfigId = 2; //怪物配置表id
		required uint32 hp              = 3; //怪物血量
	    required float posX		     	= 4;  //上线位置X
	    required float posY    			= 5;  //上线位置Y
	    required float posZ    			= 6;  //上线位置Y
		required uint32 curstate		= 7; //怪物状态
		required float mspeed = 8; //怪物移动速度
	}
	message Npc
	{
		required uint32 npcCid		= 1; //Npc Cid
		required uint32 npcConfigId = 2; //npc配置表id
		required float posX			= 3; //上线位置X
		required float posY			= 4; //上线位置Y
		required float posZ			= 5; //上线位置Z
	}
	message Drop
	{
		required uint32 dropCid		= 1; //Drop Cid
		required float posX			= 2; //上线位置X
		required float posY			= 3; //上线位置Y
		required float posZ			= 4; //上线位置Z
		required int32 dropType		= 5; //掉落类型 1-独立掉落,2-公共掉落,3-个人掉落,4-组队掉落
		required uint32 dropTypeVal = 6; //掉落类型值 独立掉落和个人掉落表示生物的cid,队伍掉落表示 队伍ID,公共掉落为0
		required uint64 dropTime	= 7; //掉落物剩余时间, 单位：毫秒（前端用于计算掉落生存时间，个人掉落的保护时间等）
		optional ItemProtoInfo item = 8; //掉落物品信息

	}
	message Summon
	{
		required uint32 summonCid = 1;		 //召唤物cid
		required uint32 summonConfigId = 2; //召唤物配置表id
		required uint32 hp              = 3; //召唤物血量
	    required float posX		     	= 4;  //上线位置X
	    required float posY    			= 5;  //上线位置Y
	    required float posZ    			= 6;  //上线位置Y
		required uint32 curstate		= 7; //召唤物状态
		required float mspeed = 8; //怪物移动速度
	}
	message Herbs
	{
		required uint32 herbsCid		= 1;	//草药cid
		required uint32 herbsId			= 2;	//草药配置ID
		required float posX		     	= 3;  //上线位置X
	    required float posY    			= 4;  //上线位置Y
	    required float posZ    			= 5;  //上线位置Y
	}
	message Mine
	{
		required uint32 mineCid			= 1;	//矿石cid
		required uint32 mineId			= 2;	//矿石配置ID
		required float posX		     	= 3;  //上线位置X
	    required float posY    			= 4;  //上线位置Y
	    required float posZ    			= 5;  //上线位置Y
	}
	message Fish
	{
		required uint32 fishCid			= 1;  //鱼cid
		required uint32 fishId			= 2;  //鱼配置ID
		required float posX		     	= 3;  //上线位置X
	    required float posY    			= 4;  //上线位置Y
	    required float posZ    			= 5;  //上线位置Y
	}
	repeated Player players = 1;  //玩家可见数据
	repeated Monster monsters = 2; //怪物可见数据
	repeated Npc npcs = 3; //npc可见数据
	repeated Drop drops = 4;	//掉落可见数据
	repeated Summon summons = 5; //玩家可见召唤物
	repeated Herbs herbs = 6;	 //玩家可见草药
	repeated Mine  mines = 7;	 //玩家可见矿石
	repeated Fish  fishs = 8;	 //玩家可见鱼
}

//LOGIC_TO_CLIENT_CREATURE_DESTORY
message CreatureDestoryData
{
	repeated uint32 cids = 1;   //实体id列表
}

//LOGIC_TO_CLIENT_CREATURE_SYN_ATTR
message SynAttrsAllClient
{
	required uint32 cid = 1;        //生物id
	repeated Attr creatureAttrs = 2;  //玩家属性

	//非key-value关系属性
	optional string name = 3;       
	optional uint32 curstate  = 4;  //生物当前状态
}

//LOGIC_TO_CLIENT_CREATURE_SYN_ATTR_ALL
message SynAttrsToSingleClient
{
	required uint32 cid = 1;  //生物id
	repeated Attr creatureAttrs = 2;  //生物属性
}

//生物升级
//LOGIC_TO_CLIENT_CREATURE_LEVUP
message CreaturesLevUp
{
	message Player
	{
		repeated SkillCell skills = 1;  //技能信息集
	}
	required uint32 cid = 1;
	required uint32 level = 2;
	repeated Attr creatureAttrs = 3;  //升级改变属性

	optional Player character = 4;        //玩家升级数据
}


///////////////////////////////////////////////////////////////////////



// 登陆请求回馈
//CENTER_SERVER_PROTOCOL_LOGINLOGIC_RSP
message AccountLoginLogicResponse
{
    enum RESULT 
	{
        CLIENT_LOGIN_LOGIC_SUCESS    = 0;     // 登陆logic server成功
        CLIENT_LOGIN_LOGIC_TIME_OUT  = 1;     // token超时
        CLIENT_LOGIN_LOGIC_INVALID   = 2;     // token无效
        CLIENT_LOGIN_LOGIC_BLACK     = 3;     // 黑名单
        CLIENT_LOGIN_LOGIC_REFUSE    = 4;     // 拒绝，爆满了
        CLIENT_LOGIN_ALREADY_ONLINE = 5;      // 已经在线
        CLIENT_LOGIN_LOGIC_UNKNOWN   = 6;     // 未知
    };
    
    required uint32 loginResult     = 1;     // RESULT
    required uint64 serverTick      = 2;     // 服务器时钟
    required uint64 unixMSec        = 3;     // utc msce
    optional uint32 accountIndex    = 4;
    optional uint64 startMark       = 5;
};

//DBPROXY_PROTOCOL_GET_CHARACTER_LIST_RSP
message NotifyClientState
{
    required GAME_STATE gameState = 1;
};

// 下线通知
//LOGIC_TO_CLIENT_LOGOUT_LOGICSERVER
message NotifyLogoutGame
{
    message SwitchServerParam
    {
        required string logic_server_ip    = 1;      // 目标logic server的ip
        required uint32 logic_server_port  = 2;      // 目标logic server的port
        required uint32 scene_template_id = 3;       // 跨服目标场景，模板ID就可以
    }

    required LOGOUT_FLAG flag               = 1;
    optional SwitchServerParam switch_server_param = 2; // 当flag==LOGOUT_FLAG_SWITCH_SERVER时候有效
};

// 角色列表返回
//LOGIC_TO_CLIENT_GET_CHARACTER_LIST
message ClientCharacterListResponse
{
    repeated CharacterDBSimpleInfo charInfoList = 1;
};

// 创建角色返回
//LOGIC_TO_CLIENT_CREATE_CHARACTER
message ClientCreateCharacterResponse
{
    enum RESULT 
    {
        CREATE_CHARACTER_RESULT_SUCCESS        = 0;
        CREATE_CHARACTER_RESULT_FAIL           = 1;
        CREATE_CHARACTER_RESULT_NAME_EXSIT     = 2;   // 名字重复
        CREATE_CHARACTER_RESULT_NAME_LENGTH    = 3;   // 名字一长度不符合要求
        CREATE_CHARACTER_RESULT_NAME_ERROR     = 4;   // 名字一包含非法字符
        CREATE_CHARACTER_RESULT_MAX_COUNT      = 5;   // 正常角色数量多于3个
    };

    required uint32 result = 1;
    optional CharacterDBSimpleInfo newCharacterInfo = 2;
};

//删除角色返回
//LOGIC_TO_CLIENT_DEL_CHARACTER
message ClientDelCharacterRsp{
	required int32 retcode = 1;		//返回码,详见 ComDefine.proto 枚举 ERetCode
	optional uint32 charId = 2;		//角色ID
}

// 重连返回
//LOGIC_TO_CLIENT_RECONNECT
message ReconnectResponse
{
    enum Result 
    {
        SUCCESS = 1;
        FAILED  = 2;
    }
    required Result result = 1;
}

//场景
//////////////////////////////////////////////////////////////////////////////////////////
//生物移动
//LOGIC_TO_CLIENT_ACTOR_MOVE
message SyncActorMove{
    required uint32 cid=1;	            //生物id
    required Vector3PB currentPos=2;	//当前位置
    repeated Vector3PB path=3;	        //路径
}

//场景传送结果
//LOGIC_TO_CLIENT_SCENE_TRANS_RESULT  
message TransSceneRet
{
	required uint32 result = 1;  //详见ERetcode 
}

// 通知客户端加载地图
//LOGIC_TO_CLIENT_NOTIFY_LOAD_MAP        
message NotifyLoadMap
{
	required uint32 mapId = 1;	   //配置表地图Id
	required uint32 routeId = 2;   //当前线路Id
    required Vector3PB transPos=3;	//将要传送的位置
}

// 通知客户端准备换逻辑节点
//LOGIC_TO_CLIENT_NOTIFY_TRANS_LOGICNODE 
message NotifyTransLogicNode
{
	required uint32 port = 1;       //端口
	required string ip   = 2;       //ip
	required string token = 3;      //验证token
}
//////////////////////////////////////////////////////////////////////////////////////////


//技能
//////////////////////////////////////////////////////////////////////////////////////////
//使用技能结果
//LOGIC_TO_CLIENT_SKILL_RESULT_BROADCAST
message UseSkillResult
{
	//技能受击者
	message Target
	{
		required  uint32    targetCid    = 1;		  //受击者cid
		repeated  Attr      creatureAttr = 2;		  //造成生物的属性同步(都是广播属性)
		repeated  DigPerfor digPerfors   = 3;		  //数字表现列表
		optional  bool      BeDead       = 4;		  //目标死亡
	}
	required uint32 skillId = 1; //技能id
	required uint32 userCid = 2; //使用技能者cid
	repeated Target targets = 3; //受击者
	repeated BuffBagDetailInfo statebags = 4; //受击者技能所带的状态包
}

//技能使用广播
//LOGIC_TO_CLIENT_SKILL_USE_BROADCAST
message BroadcastSkillUse
{
	required uint32 skillId = 1;           
	required uint32 userCid = 2;          //使用技能者cid
	repeated uint32 targetCids = 3;       //目标cid集合
	required Vector3PB dir = 4;           //方向
	optional Vector3PB targetPos = 5;     //目标位置
}

//使用BUFF结果,当buff对玩家造成属性变化时
message UseBuffResult
{
	//BUFF受击者
	message Target
	{
		required  uint32    targetCid    = 1;		  //受击者cid
		repeated  Attr      creatureAttr = 2;		  //造成生物的属性同步(都是广播属性)
		repeated  DigPerfor digPerfors   = 3;		  //数字表现列表
		optional  bool      BeDead       = 4;		  //目标死亡
	}
	required uint32 skillId = 1; //技能id
	required uint32 userCid = 2; //使用技能者cid
	repeated Target targets = 3; //受击者
	required uint32 buffBagId = 4; //状态包id
	required uint32 buffBagInstId = 5; //状态包唯一索引
	required uint32 buffId = 6; //特效id
}


//学习技能回复
//LOGIC_TO_CLIENT_SKILL_LEVEL_UP_RSP
message LevUpSkillRsp
{
	required ERetCode  code = 1;   //RET_SUCCESS 成功，其他失败
	optional uint32 skillId = 2;   //技能Id(成功回复)
	optional uint32 skillLev = 3;  //技能当前等级（成功回复）
}

//技能停止
//LOGIC_TO CLIENT_SKILL_STOP_USE		= 135;		
message BroadcastUseSkillStop
{
	required uint32 skillId = 1;           
	required uint32 userCid = 2;          //使用技能者cid
	optional uint32 stopStep = 3;          //技能阶段
}
///////////////////////////////////////////////////////////////////////////////////////////





///////////////////////////////  buff ///////////////////////////////////////////

//buff 普通buff的详细信息
message BuffBagDetailInfo
{
	required int32 buff_bag_inst_id = 1; //用来唯一标识这个buff
	required int32 buff_bag_id = 2; //state bag id, buff配置表的id
	optional int32 sender_cid = 3;
	optional int32 recver_cid = 4;
	optional int64 continuance_time = 5; //持续时间//剩余时间
	optional int32 delayed_time = 6; //延时生效时间
}

//buff 特殊buff状态广播, 比如隐身
message BuffStateChangeInfo
{
	required int32 buff_state_id = 1;
	required int32 value = 2; //修改后的值
	required int32 cid = 3; //生物的cid
}

//ai 怪物播放休闲动作
message AiPlayIdleInfo
{
	required int32 cid = 1; //怪物cid
}

//pvp info
message PvpKillingValueBroadCast
{
	optional uint32 pk_killing_value = 1; //广播PK值
}

message PvpRedPlayer
{
	optional bool is_add = 1; //true加一个红名玩家 false为减一个红名玩家
	optional uint32 player_cid = 2; //玩家CID
}
/////////////////////////////////////////////////////////////////////////////////////////////

message BuffReplaceNormalSkills
{
	optional uint32		cid = 1; //要替换的生物的CID
	optional SkillCell oldSkill = 2;
	optional SkillCell newSkill = 3;
}