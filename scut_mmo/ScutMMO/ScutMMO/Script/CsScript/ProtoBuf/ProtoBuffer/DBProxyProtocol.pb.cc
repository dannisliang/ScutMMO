// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/DBProxyProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/DBProxyProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* AccountLoginDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountSetOnlineFlagDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountSetOnlineFlagDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterRoleListDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterRoleListDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterRoleDBBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterRoleDBBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterRoleListDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterRoleListDBResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterRoleListDBResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OfflineCharacterDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineCharacterDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineCharacterDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineCharacterDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineCharacterDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineCharacterDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllFriendDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllFriendDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveCharacterDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveCharacterDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveCharacterDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveCharacterDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveCharacterDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveCharacterDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineMailDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineMailDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllOfflineMailDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllOfflineMailDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllOfflineMailDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllOfflineMailDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradingMailDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradingMailDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllTradingMailDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllTradingMailDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllTradingMailDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllTradingMailDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMailDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMailDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMailDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMailDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveMailDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveMailDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveOfflineDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveOfflineDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxMailIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxMailIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxMailIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxMailIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCharacterMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCharacterMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMallDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMallDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMallDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMallDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMallDBSaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMallDBSaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllCharacterCampOfflineDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllCharacterCampOfflineDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllCharacterCampOfflineDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllCharacterCampOfflineDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterCampDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterCampDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterCampDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterCampDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterCampDBSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterCampDBSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterListResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterListResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CreateCharacterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCharacterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCharacterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCharacterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateCharacterResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CharacterInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterInfoResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CharacterInfoUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInfoUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterInfoUpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInfoUpdateResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterInfoUpdateResponse_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CharacterDelDBRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDelDBRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDelDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDelDBResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/DBProxyProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  AccountLoginDBRequest_descriptor_ = file->message_type(0);
  static const int AccountLoginDBRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBRequest, plat_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBRequest, plat_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBRequest, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBRequest, session_id_),
  };
  AccountLoginDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginDBRequest_descriptor_,
      AccountLoginDBRequest::default_instance_,
      AccountLoginDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginDBRequest));
  AccountLoginDBResponse_descriptor_ = file->message_type(1);
  static const int AccountLoginDBResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, plat_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, plat_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, byonline_),
  };
  AccountLoginDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginDBResponse_descriptor_,
      AccountLoginDBResponse::default_instance_,
      AccountLoginDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginDBResponse));
  AccountSetOnlineFlagDBRequest_descriptor_ = file->message_type(2);
  static const int AccountSetOnlineFlagDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSetOnlineFlagDBRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSetOnlineFlagDBRequest, byonline_),
  };
  AccountSetOnlineFlagDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountSetOnlineFlagDBRequest_descriptor_,
      AccountSetOnlineFlagDBRequest::default_instance_,
      AccountSetOnlineFlagDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSetOnlineFlagDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountSetOnlineFlagDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountSetOnlineFlagDBRequest));
  CharacterRoleListDBRequest_descriptor_ = file->message_type(3);
  static const int CharacterRoleListDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBRequest, channel_user_id_),
  };
  CharacterRoleListDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterRoleListDBRequest_descriptor_,
      CharacterRoleListDBRequest::default_instance_,
      CharacterRoleListDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterRoleListDBRequest));
  CharacterRoleDBBaseInfo_descriptor_ = file->message_type(4);
  static const int CharacterRoleDBBaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleDBBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleDBBaseInfo, baseinfo_),
  };
  CharacterRoleDBBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterRoleDBBaseInfo_descriptor_,
      CharacterRoleDBBaseInfo::default_instance_,
      CharacterRoleDBBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleDBBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleDBBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterRoleDBBaseInfo));
  CharacterRoleListDBResponse_descriptor_ = file->message_type(5);
  static const int CharacterRoleListDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBResponse, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBResponse, info_),
  };
  CharacterRoleListDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterRoleListDBResponse_descriptor_,
      CharacterRoleListDBResponse::default_instance_,
      CharacterRoleListDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterRoleListDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterRoleListDBResponse));
  CharacterRoleListDBResponse_Result_descriptor_ = CharacterRoleListDBResponse_descriptor_->enum_type(0);
  OfflineCharacterDBRequest_descriptor_ = file->message_type(6);
  static const int OfflineCharacterDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBRequest, retnum_),
  };
  OfflineCharacterDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineCharacterDBRequest_descriptor_,
      OfflineCharacterDBRequest::default_instance_,
      OfflineCharacterDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineCharacterDBRequest));
  OfflineCharacterDBInfo_descriptor_ = file->message_type(7);
  static const int OfflineCharacterDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBInfo, baseinfo_),
  };
  OfflineCharacterDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineCharacterDBInfo_descriptor_,
      OfflineCharacterDBInfo::default_instance_,
      OfflineCharacterDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineCharacterDBInfo));
  OfflineCharacterDBResponse_descriptor_ = file->message_type(8);
  static const int OfflineCharacterDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBResponse, info_),
  };
  OfflineCharacterDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineCharacterDBResponse_descriptor_,
      OfflineCharacterDBResponse::default_instance_,
      OfflineCharacterDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineCharacterDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineCharacterDBResponse));
  AllFriendDBRequest_descriptor_ = file->message_type(9);
  static const int AllFriendDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, retnum_),
  };
  AllFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllFriendDBRequest_descriptor_,
      AllFriendDBRequest::default_instance_,
      AllFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllFriendDBRequest));
  FriendDBInfo_descriptor_ = file->message_type(10);
  static const int FriendDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, data_),
  };
  FriendDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDBInfo_descriptor_,
      FriendDBInfo::default_instance_,
      FriendDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDBInfo));
  AllFriendDBResponse_descriptor_ = file->message_type(11);
  static const int AllFriendDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, info_),
  };
  AllFriendDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllFriendDBResponse_descriptor_,
      AllFriendDBResponse::default_instance_,
      AllFriendDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllFriendDBResponse));
  SaveFriendDBRequest_descriptor_ = file->message_type(12);
  static const int SaveFriendDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, info_),
  };
  SaveFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveFriendDBRequest_descriptor_,
      SaveFriendDBRequest::default_instance_,
      SaveFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveFriendDBRequest));
  ActiveCharacterDBRequest_descriptor_ = file->message_type(13);
  static const int ActiveCharacterDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBRequest, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBRequest, dstcharid_),
  };
  ActiveCharacterDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveCharacterDBRequest_descriptor_,
      ActiveCharacterDBRequest::default_instance_,
      ActiveCharacterDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveCharacterDBRequest));
  ActiveCharacterDBResponse_descriptor_ = file->message_type(14);
  static const int ActiveCharacterDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBResponse, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBResponse, info_),
  };
  ActiveCharacterDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveCharacterDBResponse_descriptor_,
      ActiveCharacterDBResponse::default_instance_,
      ActiveCharacterDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveCharacterDBResponse));
  ActiveCharacterDBInfo_descriptor_ = file->message_type(15);
  static const int ActiveCharacterDBInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBInfo, basedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBInfo, equipdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBInfo, extenddata_),
  };
  ActiveCharacterDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveCharacterDBInfo_descriptor_,
      ActiveCharacterDBInfo::default_instance_,
      ActiveCharacterDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveCharacterDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveCharacterDBInfo));
  OfflineMailList_descriptor_ = file->message_type(16);
  static const int OfflineMailList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMailList, data_),
  };
  OfflineMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineMailList_descriptor_,
      OfflineMailList::default_instance_,
      OfflineMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineMailList));
  GlobalDBRequst_descriptor_ = file->message_type(17);
  static const int GlobalDBRequst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBRequst, type_id_),
  };
  GlobalDBRequst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBRequst_descriptor_,
      GlobalDBRequst::default_instance_,
      GlobalDBRequst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBRequst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBRequst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBRequst));
  OfflineMailDBInfo_descriptor_ = file->message_type(18);
  static const int OfflineMailDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMailDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMailDBInfo, data_),
  };
  OfflineMailDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineMailDBInfo_descriptor_,
      OfflineMailDBInfo::default_instance_,
      OfflineMailDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMailDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMailDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineMailDBInfo));
  GlobalDBResponse_descriptor_ = file->message_type(19);
  static const int GlobalDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, data_),
  };
  GlobalDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBResponse_descriptor_,
      GlobalDBResponse::default_instance_,
      GlobalDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBResponse));
  AllOfflineMailDBRequest_descriptor_ = file->message_type(20);
  static const int AllOfflineMailDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBRequest, retnum_),
  };
  AllOfflineMailDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllOfflineMailDBRequest_descriptor_,
      AllOfflineMailDBRequest::default_instance_,
      AllOfflineMailDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllOfflineMailDBRequest));
  AllOfflineMailDBResponse_descriptor_ = file->message_type(21);
  static const int AllOfflineMailDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBResponse, info_),
  };
  AllOfflineMailDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllOfflineMailDBResponse_descriptor_,
      AllOfflineMailDBResponse::default_instance_,
      AllOfflineMailDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllOfflineMailDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllOfflineMailDBResponse));
  TradingMailDBInfo_descriptor_ = file->message_type(22);
  static const int TradingMailDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingMailDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingMailDBInfo, data_),
  };
  TradingMailDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradingMailDBInfo_descriptor_,
      TradingMailDBInfo::default_instance_,
      TradingMailDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingMailDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingMailDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradingMailDBInfo));
  AllTradingMailDBRequest_descriptor_ = file->message_type(23);
  static const int AllTradingMailDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBRequest, retnum_),
  };
  AllTradingMailDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllTradingMailDBRequest_descriptor_,
      AllTradingMailDBRequest::default_instance_,
      AllTradingMailDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllTradingMailDBRequest));
  AllTradingMailDBResponse_descriptor_ = file->message_type(24);
  static const int AllTradingMailDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBResponse, info_),
  };
  AllTradingMailDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllTradingMailDBResponse_descriptor_,
      AllTradingMailDBResponse::default_instance_,
      AllTradingMailDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTradingMailDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllTradingMailDBResponse));
  CharacterMailDBRequest_descriptor_ = file->message_type(25);
  static const int CharacterMailDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, charid_),
  };
  CharacterMailDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMailDBRequest_descriptor_,
      CharacterMailDBRequest::default_instance_,
      CharacterMailDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMailDBRequest));
  CharacterMailDBResponse_descriptor_ = file->message_type(26);
  static const int CharacterMailDBResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, info_),
  };
  CharacterMailDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMailDBResponse_descriptor_,
      CharacterMailDBResponse::default_instance_,
      CharacterMailDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMailDBResponse));
  MailDBInfo_descriptor_ = file->message_type(27);
  static const int MailDBInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBInfo, deletemailids_),
  };
  MailDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailDBInfo_descriptor_,
      MailDBInfo::default_instance_,
      MailDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailDBInfo));
  SaveMailDBRequest_descriptor_ = file->message_type(28);
  static const int SaveMailDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRequest, info_),
  };
  SaveMailDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveMailDBRequest_descriptor_,
      SaveMailDBRequest::default_instance_,
      SaveMailDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveMailDBRequest));
  SaveOfflineDBRequest_descriptor_ = file->message_type(29);
  static const int SaveOfflineDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveOfflineDBRequest, info_),
  };
  SaveOfflineDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveOfflineDBRequest_descriptor_,
      SaveOfflineDBRequest::default_instance_,
      SaveOfflineDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveOfflineDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveOfflineDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveOfflineDBRequest));
  MaxMailIDRequest_descriptor_ = file->message_type(30);
  static const int MaxMailIDRequest_offsets_[1] = {
  };
  MaxMailIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxMailIDRequest_descriptor_,
      MaxMailIDRequest::default_instance_,
      MaxMailIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxMailIDRequest));
  MaxMailIDResponse_descriptor_ = file->message_type(31);
  static const int MaxMailIDResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, maxmailid_),
  };
  MaxMailIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxMailIDResponse_descriptor_,
      MaxMailIDResponse::default_instance_,
      MaxMailIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxMailIDResponse));
  DeleteCharacterMail_descriptor_ = file->message_type(32);
  static const int DeleteCharacterMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, charid_),
  };
  DeleteCharacterMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteCharacterMail_descriptor_,
      DeleteCharacterMail::default_instance_,
      DeleteCharacterMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteCharacterMail));
  CharacterMallDBRequest_descriptor_ = file->message_type(33);
  static const int CharacterMallDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBRequest, charid_),
  };
  CharacterMallDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMallDBRequest_descriptor_,
      CharacterMallDBRequest::default_instance_,
      CharacterMallDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMallDBRequest));
  CharacterMallDBResponse_descriptor_ = file->message_type(34);
  static const int CharacterMallDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBResponse, info_),
  };
  CharacterMallDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMallDBResponse_descriptor_,
      CharacterMallDBResponse::default_instance_,
      CharacterMallDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMallDBResponse));
  CharacterMallDBSaveReq_descriptor_ = file->message_type(35);
  static const int CharacterMallDBSaveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBSaveReq, data_),
  };
  CharacterMallDBSaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMallDBSaveReq_descriptor_,
      CharacterMallDBSaveReq::default_instance_,
      CharacterMallDBSaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBSaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMallDBSaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMallDBSaveReq));
  GlobalDBSetRequest_descriptor_ = file->message_type(36);
  static const int GlobalDBSetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, data_),
  };
  GlobalDBSetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBSetRequest_descriptor_,
      GlobalDBSetRequest::default_instance_,
      GlobalDBSetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBSetRequest));
  GlobalDBSetResponse_descriptor_ = file->message_type(37);
  static const int GlobalDBSetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, type_id_),
  };
  GlobalDBSetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBSetResponse_descriptor_,
      GlobalDBSetResponse::default_instance_,
      GlobalDBSetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBSetResponse));
  AllCharacterCampOfflineDBReq_descriptor_ = file->message_type(38);
  static const int AllCharacterCampOfflineDBReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBReq, retnum_),
  };
  AllCharacterCampOfflineDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllCharacterCampOfflineDBReq_descriptor_,
      AllCharacterCampOfflineDBReq::default_instance_,
      AllCharacterCampOfflineDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllCharacterCampOfflineDBReq));
  AllCharacterCampOfflineDBRsp_descriptor_ = file->message_type(39);
  static const int AllCharacterCampOfflineDBRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBRsp, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBRsp, info_),
  };
  AllCharacterCampOfflineDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllCharacterCampOfflineDBRsp_descriptor_,
      AllCharacterCampOfflineDBRsp::default_instance_,
      AllCharacterCampOfflineDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCharacterCampOfflineDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllCharacterCampOfflineDBRsp));
  CharacterCampDBReq_descriptor_ = file->message_type(40);
  static const int CharacterCampDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBReq, charid_),
  };
  CharacterCampDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterCampDBReq_descriptor_,
      CharacterCampDBReq::default_instance_,
      CharacterCampDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterCampDBReq));
  CharacterCampDBRsp_descriptor_ = file->message_type(41);
  static const int CharacterCampDBRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBRsp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBRsp, info_),
  };
  CharacterCampDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterCampDBRsp_descriptor_,
      CharacterCampDBRsp::default_instance_,
      CharacterCampDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterCampDBRsp));
  CharacterCampDBSetRequest_descriptor_ = file->message_type(42);
  static const int CharacterCampDBSetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBSetRequest, data_),
  };
  CharacterCampDBSetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterCampDBSetRequest_descriptor_,
      CharacterCampDBSetRequest::default_instance_,
      CharacterCampDBSetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBSetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterCampDBSetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterCampDBSetRequest));
  CharacterListRequest_descriptor_ = file->message_type(43);
  static const int CharacterListRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListRequest, channel_user_id_),
  };
  CharacterListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterListRequest_descriptor_,
      CharacterListRequest::default_instance_,
      CharacterListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterListRequest));
  CharacterListResponse_descriptor_ = file->message_type(44);
  static const int CharacterListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListResponse, charinfolist_),
  };
  CharacterListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterListResponse_descriptor_,
      CharacterListResponse::default_instance_,
      CharacterListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterListResponse));
  CharacterListResponse_Result_descriptor_ = CharacterListResponse_descriptor_->enum_type(0);
  CreateCharacterRequest_descriptor_ = file->message_type(45);
  static const int CreateCharacterRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, charinfo_),
  };
  CreateCharacterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateCharacterRequest_descriptor_,
      CreateCharacterRequest::default_instance_,
      CreateCharacterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateCharacterRequest));
  CreateCharacterResponse_descriptor_ = file->message_type(46);
  static const int CreateCharacterResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterResponse, charinfo_),
  };
  CreateCharacterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateCharacterResponse_descriptor_,
      CreateCharacterResponse::default_instance_,
      CreateCharacterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCharacterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateCharacterResponse));
  CreateCharacterResponse_Result_descriptor_ = CreateCharacterResponse_descriptor_->enum_type(0);
  CharacterInfoRequest_descriptor_ = file->message_type(47);
  static const int CharacterInfoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoRequest, reqcharid_),
  };
  CharacterInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInfoRequest_descriptor_,
      CharacterInfoRequest::default_instance_,
      CharacterInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInfoRequest));
  CharacterInfoResponse_descriptor_ = file->message_type(48);
  static const int CharacterInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoResponse, reqcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoResponse, charinfo_),
  };
  CharacterInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInfoResponse_descriptor_,
      CharacterInfoResponse::default_instance_,
      CharacterInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInfoResponse));
  CharacterInfoResponse_Result_descriptor_ = CharacterInfoResponse_descriptor_->enum_type(0);
  CharacterInfoUpdateRequest_descriptor_ = file->message_type(49);
  static const int CharacterInfoUpdateRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, charinfo_),
  };
  CharacterInfoUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInfoUpdateRequest_descriptor_,
      CharacterInfoUpdateRequest::default_instance_,
      CharacterInfoUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInfoUpdateRequest));
  CharacterInfoUpdateResponse_descriptor_ = file->message_type(50);
  static const int CharacterInfoUpdateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateResponse, charid_),
  };
  CharacterInfoUpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInfoUpdateResponse_descriptor_,
      CharacterInfoUpdateResponse::default_instance_,
      CharacterInfoUpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfoUpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInfoUpdateResponse));
  CharacterInfoUpdateResponse_Result_descriptor_ = CharacterInfoUpdateResponse_descriptor_->enum_type(0);
  CharacterDelDBRequst_descriptor_ = file->message_type(51);
  static const int CharacterDelDBRequst_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, charid_),
  };
  CharacterDelDBRequst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDelDBRequst_descriptor_,
      CharacterDelDBRequst::default_instance_,
      CharacterDelDBRequst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBRequst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDelDBRequst));
  CharacterDelDBResponse_descriptor_ = file->message_type(52);
  static const int CharacterDelDBResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, channel_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, charid_),
  };
  CharacterDelDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDelDBResponse_descriptor_,
      CharacterDelDBResponse::default_instance_,
      CharacterDelDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDelDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDelDBResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fDBProxyProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginDBRequest_descriptor_, &AccountLoginDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginDBResponse_descriptor_, &AccountLoginDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountSetOnlineFlagDBRequest_descriptor_, &AccountSetOnlineFlagDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterRoleListDBRequest_descriptor_, &CharacterRoleListDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterRoleDBBaseInfo_descriptor_, &CharacterRoleDBBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterRoleListDBResponse_descriptor_, &CharacterRoleListDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineCharacterDBRequest_descriptor_, &OfflineCharacterDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineCharacterDBInfo_descriptor_, &OfflineCharacterDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineCharacterDBResponse_descriptor_, &OfflineCharacterDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllFriendDBRequest_descriptor_, &AllFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDBInfo_descriptor_, &FriendDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllFriendDBResponse_descriptor_, &AllFriendDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveFriendDBRequest_descriptor_, &SaveFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveCharacterDBRequest_descriptor_, &ActiveCharacterDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveCharacterDBResponse_descriptor_, &ActiveCharacterDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveCharacterDBInfo_descriptor_, &ActiveCharacterDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineMailList_descriptor_, &OfflineMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBRequst_descriptor_, &GlobalDBRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineMailDBInfo_descriptor_, &OfflineMailDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBResponse_descriptor_, &GlobalDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllOfflineMailDBRequest_descriptor_, &AllOfflineMailDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllOfflineMailDBResponse_descriptor_, &AllOfflineMailDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradingMailDBInfo_descriptor_, &TradingMailDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllTradingMailDBRequest_descriptor_, &AllTradingMailDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllTradingMailDBResponse_descriptor_, &AllTradingMailDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMailDBRequest_descriptor_, &CharacterMailDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMailDBResponse_descriptor_, &CharacterMailDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailDBInfo_descriptor_, &MailDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveMailDBRequest_descriptor_, &SaveMailDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveOfflineDBRequest_descriptor_, &SaveOfflineDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxMailIDRequest_descriptor_, &MaxMailIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxMailIDResponse_descriptor_, &MaxMailIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteCharacterMail_descriptor_, &DeleteCharacterMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMallDBRequest_descriptor_, &CharacterMallDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMallDBResponse_descriptor_, &CharacterMallDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMallDBSaveReq_descriptor_, &CharacterMallDBSaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBSetRequest_descriptor_, &GlobalDBSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBSetResponse_descriptor_, &GlobalDBSetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllCharacterCampOfflineDBReq_descriptor_, &AllCharacterCampOfflineDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllCharacterCampOfflineDBRsp_descriptor_, &AllCharacterCampOfflineDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterCampDBReq_descriptor_, &CharacterCampDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterCampDBRsp_descriptor_, &CharacterCampDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterCampDBSetRequest_descriptor_, &CharacterCampDBSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterListRequest_descriptor_, &CharacterListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterListResponse_descriptor_, &CharacterListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateCharacterRequest_descriptor_, &CreateCharacterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateCharacterResponse_descriptor_, &CreateCharacterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInfoRequest_descriptor_, &CharacterInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInfoResponse_descriptor_, &CharacterInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInfoUpdateRequest_descriptor_, &CharacterInfoUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInfoUpdateResponse_descriptor_, &CharacterInfoUpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDelDBRequst_descriptor_, &CharacterDelDBRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDelDBResponse_descriptor_, &CharacterDelDBResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto() {
  delete AccountLoginDBRequest::default_instance_;
  delete AccountLoginDBRequest_reflection_;
  delete AccountLoginDBResponse::default_instance_;
  delete AccountLoginDBResponse_reflection_;
  delete AccountSetOnlineFlagDBRequest::default_instance_;
  delete AccountSetOnlineFlagDBRequest_reflection_;
  delete CharacterRoleListDBRequest::default_instance_;
  delete CharacterRoleListDBRequest_reflection_;
  delete CharacterRoleDBBaseInfo::default_instance_;
  delete CharacterRoleDBBaseInfo_reflection_;
  delete CharacterRoleListDBResponse::default_instance_;
  delete CharacterRoleListDBResponse_reflection_;
  delete OfflineCharacterDBRequest::default_instance_;
  delete OfflineCharacterDBRequest_reflection_;
  delete OfflineCharacterDBInfo::default_instance_;
  delete OfflineCharacterDBInfo_reflection_;
  delete OfflineCharacterDBResponse::default_instance_;
  delete OfflineCharacterDBResponse_reflection_;
  delete AllFriendDBRequest::default_instance_;
  delete AllFriendDBRequest_reflection_;
  delete FriendDBInfo::default_instance_;
  delete FriendDBInfo_reflection_;
  delete AllFriendDBResponse::default_instance_;
  delete AllFriendDBResponse_reflection_;
  delete SaveFriendDBRequest::default_instance_;
  delete SaveFriendDBRequest_reflection_;
  delete ActiveCharacterDBRequest::default_instance_;
  delete ActiveCharacterDBRequest_reflection_;
  delete ActiveCharacterDBResponse::default_instance_;
  delete ActiveCharacterDBResponse_reflection_;
  delete ActiveCharacterDBInfo::default_instance_;
  delete ActiveCharacterDBInfo_reflection_;
  delete OfflineMailList::default_instance_;
  delete OfflineMailList_reflection_;
  delete GlobalDBRequst::default_instance_;
  delete GlobalDBRequst_reflection_;
  delete OfflineMailDBInfo::default_instance_;
  delete OfflineMailDBInfo_reflection_;
  delete GlobalDBResponse::default_instance_;
  delete GlobalDBResponse_reflection_;
  delete AllOfflineMailDBRequest::default_instance_;
  delete AllOfflineMailDBRequest_reflection_;
  delete AllOfflineMailDBResponse::default_instance_;
  delete AllOfflineMailDBResponse_reflection_;
  delete TradingMailDBInfo::default_instance_;
  delete TradingMailDBInfo_reflection_;
  delete AllTradingMailDBRequest::default_instance_;
  delete AllTradingMailDBRequest_reflection_;
  delete AllTradingMailDBResponse::default_instance_;
  delete AllTradingMailDBResponse_reflection_;
  delete CharacterMailDBRequest::default_instance_;
  delete CharacterMailDBRequest_reflection_;
  delete CharacterMailDBResponse::default_instance_;
  delete CharacterMailDBResponse_reflection_;
  delete MailDBInfo::default_instance_;
  delete MailDBInfo_reflection_;
  delete SaveMailDBRequest::default_instance_;
  delete SaveMailDBRequest_reflection_;
  delete SaveOfflineDBRequest::default_instance_;
  delete SaveOfflineDBRequest_reflection_;
  delete MaxMailIDRequest::default_instance_;
  delete MaxMailIDRequest_reflection_;
  delete MaxMailIDResponse::default_instance_;
  delete MaxMailIDResponse_reflection_;
  delete DeleteCharacterMail::default_instance_;
  delete DeleteCharacterMail_reflection_;
  delete CharacterMallDBRequest::default_instance_;
  delete CharacterMallDBRequest_reflection_;
  delete CharacterMallDBResponse::default_instance_;
  delete CharacterMallDBResponse_reflection_;
  delete CharacterMallDBSaveReq::default_instance_;
  delete CharacterMallDBSaveReq_reflection_;
  delete GlobalDBSetRequest::default_instance_;
  delete GlobalDBSetRequest_reflection_;
  delete GlobalDBSetResponse::default_instance_;
  delete GlobalDBSetResponse_reflection_;
  delete AllCharacterCampOfflineDBReq::default_instance_;
  delete AllCharacterCampOfflineDBReq_reflection_;
  delete AllCharacterCampOfflineDBRsp::default_instance_;
  delete AllCharacterCampOfflineDBRsp_reflection_;
  delete CharacterCampDBReq::default_instance_;
  delete CharacterCampDBReq_reflection_;
  delete CharacterCampDBRsp::default_instance_;
  delete CharacterCampDBRsp_reflection_;
  delete CharacterCampDBSetRequest::default_instance_;
  delete CharacterCampDBSetRequest_reflection_;
  delete CharacterListRequest::default_instance_;
  delete CharacterListRequest_reflection_;
  delete CharacterListResponse::default_instance_;
  delete CharacterListResponse_reflection_;
  delete CreateCharacterRequest::default_instance_;
  delete CreateCharacterRequest_reflection_;
  delete CreateCharacterResponse::default_instance_;
  delete CreateCharacterResponse_reflection_;
  delete CharacterInfoRequest::default_instance_;
  delete CharacterInfoRequest_reflection_;
  delete CharacterInfoResponse::default_instance_;
  delete CharacterInfoResponse_reflection_;
  delete CharacterInfoUpdateRequest::default_instance_;
  delete CharacterInfoUpdateRequest_reflection_;
  delete CharacterInfoUpdateResponse::default_instance_;
  delete CharacterInfoUpdateResponse_reflection_;
  delete CharacterDelDBRequst::default_instance_;
  delete CharacterDelDBRequst_reflection_;
  delete CharacterDelDBResponse::default_instance_;
  delete CharacterDelDBResponse_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!ProtoBuffer/DBProxyProtocol.proto\022\010Pro"
    "toBuf\032\026Common/ComDefine.proto\032\035ProtoBuff"
    "er/ComProtocol.proto\"\203\001\n\025AccountLoginDBR"
    "equest\022\024\n\014plat_user_id\030\001 \002(\t\022\026\n\016plat_use"
    "r_name\030\002 \002(\t\022\017\n\007channel\030\003 \002(\t\022\027\n\017channel"
    "_user_id\030\004 \002(\t\022\022\n\nsession_id\030\005 \002(\r\"\246\001\n\026A"
    "ccountLoginDBResponse\022\016\n\006result\030\001 \002(\005\022\022\n"
    "\nsession_id\030\002 \002(\r\022\027\n\017channel_user_id\030\003 \002"
    "(\t\022\024\n\014plat_user_id\030\004 \001(\t\022\026\n\016plat_user_na"
    "me\030\005 \001(\t\022\017\n\007channel\030\006 \001(\t\022\020\n\010byonline\030\007 "
    "\001(\005\"J\n\035AccountSetOnlineFlagDBRequest\022\027\n\017"
    "channel_user_id\030\001 \002(\t\022\020\n\010byonline\030\002 \002(\005\""
    "5\n\032CharacterRoleListDBRequest\022\027\n\017channel"
    "_user_id\030\001 \002(\t\"Z\n\027CharacterRoleDBBaseInf"
    "o\022\016\n\006charID\030\001 \002(\r\022/\n\010baseinfo\030\002 \002(\0132\035.Pr"
    "otoBuf.CharacterDBBaseInfo\"\324\001\n\033Character"
    "RoleListDBResponse\022<\n\006result\030\001 \002(\0162,.Pro"
    "toBuf.CharacterRoleListDBResponse.Result"
    "\022\027\n\017channel_user_id\030\002 \002(\t\022/\n\004info\030\003 \003(\0132"
    "!.ProtoBuf.CharacterRoleDBBaseInfo\"-\n\006Re"
    "sult\022\013\n\007SUCCESS\020\000\022\n\n\006FAILED\020\001\022\n\n\006UNKNOW\020"
    "\002\";\n\031OfflineCharacterDBRequest\022\016\n\006offset"
    "\030\001 \002(\005\022\016\n\006retnum\030\002 \002(\005\"Y\n\026OfflineCharact"
    "erDBInfo\022\016\n\006charID\030\001 \002(\r\022/\n\010baseinfo\030\002 \002"
    "(\0132\035.ProtoBuf.CharacterDBBaseInfo\"m\n\032Off"
    "lineCharacterDBResponse\022\017\n\007retcode\030\001 \002(\005"
    "\022\016\n\006offset\030\002 \002(\005\022.\n\004info\030\003 \003(\0132 .ProtoBu"
    "f.OfflineCharacterDBInfo\"4\n\022AllFriendDBR"
    "equest\022\016\n\006offset\030\001 \002(\005\022\016\n\006retnum\030\002 \002(\005\"F"
    "\n\014FriendDBInfo\022\016\n\006charID\030\001 \002(\r\022&\n\004data\030\002"
    " \002(\0132\030.ProtoBuf.RelationDBInfo\"\\\n\023AllFri"
    "endDBResponse\022\017\n\007retcode\030\001 \002(\005\022\016\n\006offset"
    "\030\002 \002(\005\022$\n\004info\030\003 \003(\0132\026.ProtoBuf.FriendDB"
    "Info\";\n\023SaveFriendDBRequest\022$\n\004info\030\001 \003("
    "\0132\026.ProtoBuf.FriendDBInfo\"@\n\030ActiveChara"
    "cterDBRequest\022\021\n\tsrcCharID\030\001 \002(\r\022\021\n\tdstC"
    "harID\030\002 \002(\r\"n\n\031ActiveCharacterDBResponse"
    "\022\017\n\007retcode\030\001 \002(\005\022\021\n\tsrcCharID\030\002 \002(\r\022-\n\004"
    "info\030\003 \001(\0132\037.ProtoBuf.ActiveCharacterDBI"
    "nfo\"\300\001\n\025ActiveCharacterDBInfo\022\016\n\006charID\030"
    "\001 \002(\r\022/\n\010baseData\030\002 \001(\0132\035.ProtoBuf.Chara"
    "cterDBBaseInfo\0221\n\tequipData\030\003 \001(\0132\036.Prot"
    "oBuf.CharacterDBEquipData\0223\n\nextendData\030"
    "\004 \001(\0132\037.ProtoBuf.CharacterDBExtendData\"3"
    "\n\017OfflineMailList\022 \n\004data\030\001 \003(\0132\022.ProtoB"
    "uf.MailInfo\"!\n\016GlobalDBRequst\022\017\n\007type_id"
    "\030\001 \002(\005\"L\n\021OfflineMailDBInfo\022\016\n\006charID\030\001 "
    "\002(\r\022\'\n\004data\030\002 \001(\0132\031.ProtoBuf.OfflineMail"
    "List\"B\n\020GlobalDBResponse\022\017\n\007retcode\030\001 \002("
    "\005\022\017\n\007type_id\030\002 \002(\005\022\014\n\004data\030\003 \001(\014\"9\n\027AllO"
    "fflineMailDBRequest\022\016\n\006offset\030\001 \002(\005\022\016\n\006r"
    "etnum\030\002 \002(\005\"f\n\030AllOfflineMailDBResponse\022"
    "\017\n\007retcode\030\001 \002(\005\022\016\n\006offset\030\002 \002(\005\022)\n\004info"
    "\030\003 \003(\0132\033.ProtoBuf.OfflineMailDBInfo\"E\n\021T"
    "radingMailDBInfo\022\016\n\006charID\030\001 \002(\r\022 \n\004data"
    "\030\002 \002(\0132\022.ProtoBuf.MailInfo\"9\n\027AllTrading"
    "MailDBRequest\022\016\n\006offset\030\001 \002(\005\022\016\n\006retnum\030"
    "\002 \002(\005\"f\n\030AllTradingMailDBResponse\022\017\n\007ret"
    "code\030\001 \002(\005\022\016\n\006offset\030\002 \002(\005\022)\n\004info\030\003 \003(\013"
    "2\033.ProtoBuf.TradingMailDBInfo\"(\n\026Charact"
    "erMailDBRequest\022\016\n\006charID\030\001 \001(\r\"K\n\027Chara"
    "cterMailDBResponse\022\016\n\006charID\030\001 \001(\r\022 \n\004in"
    "fo\030\002 \003(\0132\022.ProtoBuf.MailInfo\"U\n\nMailDBIn"
    "fo\022\016\n\006charID\030\001 \002(\r\022 \n\004data\030\002 \003(\0132\022.Proto"
    "Buf.MailInfo\022\025\n\rdeleteMailIds\030\003 \003(\r\"7\n\021S"
    "aveMailDBRequest\022\"\n\004info\030\001 \001(\0132\024.ProtoBu"
    "f.MailDBInfo\"A\n\024SaveOfflineDBRequest\022)\n\004"
    "info\030\001 \001(\0132\033.ProtoBuf.OfflineMailDBInfo\""
    "\022\n\020MaxMailIDRequest\"&\n\021MaxMailIDResponse"
    "\022\021\n\tmaxMailId\030\001 \001(\r\"%\n\023DeleteCharacterMa"
    "il\022\016\n\006charID\030\001 \002(\r\"(\n\026CharacterMallDBReq"
    "uest\022\016\n\006charid\030\001 \001(\r\"a\n\027CharacterMallDBR"
    "esponse\022\017\n\007retcode\030\001 \002(\005\022\016\n\006charid\030\002 \001(\r"
    "\022%\n\004info\030\003 \001(\0132\027.ProtoBuf.AllMallDBData\""
    "G\n\026CharacterMallDBSaveReq\022-\n\004data\030\001 \003(\0132"
    "\037.ProtoBuf.SingleCharacterMallDB\"3\n\022Glob"
    "alDBSetRequest\022\017\n\007type_id\030\001 \002(\005\022\014\n\004data\030"
    "\002 \001(\014\"7\n\023GlobalDBSetResponse\022\017\n\007retcode\030"
    "\001 \002(\005\022\017\n\007type_id\030\002 \002(\005\">\n\034AllCharacterCa"
    "mpOfflineDBReq\022\016\n\006offset\030\001 \002(\005\022\016\n\006retnum"
    "\030\002 \002(\005\"l\n\034AllCharacterCampOfflineDBRsp\022\017"
    "\n\007retcode\030\001 \002(\005\022\016\n\006offset\030\002 \002(\005\022+\n\004info\030"
    "\003 \003(\0132\035.ProtoBuf.CharacterCampDBData\"$\n\022"
    "CharacterCampDBReq\022\016\n\006charid\030\001 \002(\r\"b\n\022Ch"
    "aracterCampDBRsp\022\017\n\007retcode\030\001 \002(\005\022\016\n\006cha"
    "rid\030\002 \002(\r\022+\n\004info\030\003 \001(\0132\035.ProtoBuf.Chara"
    "cterCampDBData\"H\n\031CharacterCampDBSetRequ"
    "est\022+\n\004data\030\001 \003(\0132\035.ProtoBuf.CharacterCa"
    "mpDBData\"v\n\024CharacterListRequest\022\021\n\trequ"
    "estid\030\001 \002(\004\022\017\n\007groupid\030\002 \002(\r\022\021\n\tchanneli"
    "d\030\003 \002(\t\022\016\n\006userid\030\004 \002(\t\022\027\n\017channel_user_"
    "id\030\005 \002(\t\"\302\001\n\025CharacterListResponse\0226\n\006re"
    "sult\030\001 \002(\0162&.ProtoBuf.CharacterListRespo"
    "nse.Result\022\021\n\trequestid\030\002 \002(\004\022/\n\014charInf"
    "oList\030\003 \003(\0132\031.ProtoBuf.CharacterDBInfo\"-"
    "\n\006Result\022\013\n\007SUCCESS\020\000\022\n\n\006FAILED\020\001\022\n\n\006UNK"
    "NOW\020\002\"\263\001\n\026CreateCharacterRequest\022\021\n\trequ"
    "estid\030\001 \002(\004\022\017\n\007groupid\030\002 \002(\r\022\021\n\tchanneli"
    "d\030\003 \002(\t\022\014\n\004name\030\004 \002(\t\022\016\n\006userid\030\005 \002(\t\022\027\n"
    "\017channel_user_id\030\006 \002(\t\022+\n\010charInfo\030\007 \002(\013"
    "2\031.ProtoBuf.CharacterDBInfo\"\340\001\n\027CreateCh"
    "aracterResponse\0228\n\006result\030\001 \002(\0162(.ProtoB"
    "uf.CreateCharacterResponse.Result\022\021\n\treq"
    "uestid\030\002 \002(\004\022+\n\010charInfo\030\003 \001(\0132\031.ProtoBu"
    "f.CharacterDBInfo\"K\n\006Result\022\013\n\007SUCCESS\020\000"
    "\022\017\n\013NAME_EXISTS\020\001\022\027\n\023TOO_MANAY_CHARACTER"
    "\020\002\022\n\n\006UNKNOW\020\003\"L\n\024CharacterInfoRequest\022\021"
    "\n\trequestid\030\001 \002(\004\022\016\n\006charID\030\002 \002(\r\022\021\n\treq"
    "CharID\030\003 \002(\r\"\340\001\n\025CharacterInfoResponse\0226"
    "\n\006result\030\001 \002(\0162&.ProtoBuf.CharacterInfoR"
    "esponse.Result\022\021\n\trequestid\030\002 \002(\004\022\021\n\treq"
    "CharID\030\003 \002(\r\022+\n\010charInfo\030\004 \001(\0132\031.ProtoBu"
    "f.CharacterDBInfo\"<\n\006Result\022\013\n\007SUCCESS\020\000"
    "\022\r\n\tNOT_EXIST\020\001\022\n\n\006FAILED\020\002\022\n\n\006UNKNOW\020\003\""
    "\251\001\n\032CharacterInfoUpdateRequest\022\021\n\treques"
    "tid\030\001 \002(\004\022\017\n\007groupid\030\002 \002(\r\022\021\n\tchannelid\030"
    "\003 \002(\t\022\016\n\006userid\030\004 \002(\t\022\027\n\017channel_user_id"
    "\030\005 \002(\t\022+\n\010charInfo\030\006 \002(\0132\031.ProtoBuf.Char"
    "acterDBInfo\"\232\001\n\033CharacterInfoUpdateRespo"
    "nse\022<\n\006result\030\001 \002(\0162,.ProtoBuf.Character"
    "InfoUpdateResponse.Result\022\016\n\006charId\030\002 \002("
    "\r\"-\n\006Result\022\013\n\007SUCCESS\020\000\022\n\n\006FAILED\020\001\022\n\n\006"
    "UNKNOW\020\002\"\207\001\n\024CharacterDelDBRequst\022\021\n\treq"
    "uestid\030\001 \002(\004\022\017\n\007groupid\030\002 \002(\r\022\021\n\tchannel"
    "id\030\003 \002(\t\022\017\n\007user_id\030\004 \002(\t\022\027\n\017channel_use"
    "r_id\030\005 \002(\t\022\016\n\006charID\030\006 \002(\r\"\232\001\n\026Character"
    "DelDBResponse\022\017\n\007retcode\030\001 \002(\005\022\021\n\treques"
    "tid\030\002 \002(\004\022\017\n\007groupid\030\003 \001(\r\022\021\n\tchannelid\030"
    "\004 \001(\t\022\017\n\007user_id\030\005 \001(\t\022\027\n\017channel_user_i"
    "d\030\006 \001(\t\022\016\n\006charID\030\007 \001(\r", 5183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/DBProxyProtocol.proto", &protobuf_RegisterTypes);
  AccountLoginDBRequest::default_instance_ = new AccountLoginDBRequest();
  AccountLoginDBResponse::default_instance_ = new AccountLoginDBResponse();
  AccountSetOnlineFlagDBRequest::default_instance_ = new AccountSetOnlineFlagDBRequest();
  CharacterRoleListDBRequest::default_instance_ = new CharacterRoleListDBRequest();
  CharacterRoleDBBaseInfo::default_instance_ = new CharacterRoleDBBaseInfo();
  CharacterRoleListDBResponse::default_instance_ = new CharacterRoleListDBResponse();
  OfflineCharacterDBRequest::default_instance_ = new OfflineCharacterDBRequest();
  OfflineCharacterDBInfo::default_instance_ = new OfflineCharacterDBInfo();
  OfflineCharacterDBResponse::default_instance_ = new OfflineCharacterDBResponse();
  AllFriendDBRequest::default_instance_ = new AllFriendDBRequest();
  FriendDBInfo::default_instance_ = new FriendDBInfo();
  AllFriendDBResponse::default_instance_ = new AllFriendDBResponse();
  SaveFriendDBRequest::default_instance_ = new SaveFriendDBRequest();
  ActiveCharacterDBRequest::default_instance_ = new ActiveCharacterDBRequest();
  ActiveCharacterDBResponse::default_instance_ = new ActiveCharacterDBResponse();
  ActiveCharacterDBInfo::default_instance_ = new ActiveCharacterDBInfo();
  OfflineMailList::default_instance_ = new OfflineMailList();
  GlobalDBRequst::default_instance_ = new GlobalDBRequst();
  OfflineMailDBInfo::default_instance_ = new OfflineMailDBInfo();
  GlobalDBResponse::default_instance_ = new GlobalDBResponse();
  AllOfflineMailDBRequest::default_instance_ = new AllOfflineMailDBRequest();
  AllOfflineMailDBResponse::default_instance_ = new AllOfflineMailDBResponse();
  TradingMailDBInfo::default_instance_ = new TradingMailDBInfo();
  AllTradingMailDBRequest::default_instance_ = new AllTradingMailDBRequest();
  AllTradingMailDBResponse::default_instance_ = new AllTradingMailDBResponse();
  CharacterMailDBRequest::default_instance_ = new CharacterMailDBRequest();
  CharacterMailDBResponse::default_instance_ = new CharacterMailDBResponse();
  MailDBInfo::default_instance_ = new MailDBInfo();
  SaveMailDBRequest::default_instance_ = new SaveMailDBRequest();
  SaveOfflineDBRequest::default_instance_ = new SaveOfflineDBRequest();
  MaxMailIDRequest::default_instance_ = new MaxMailIDRequest();
  MaxMailIDResponse::default_instance_ = new MaxMailIDResponse();
  DeleteCharacterMail::default_instance_ = new DeleteCharacterMail();
  CharacterMallDBRequest::default_instance_ = new CharacterMallDBRequest();
  CharacterMallDBResponse::default_instance_ = new CharacterMallDBResponse();
  CharacterMallDBSaveReq::default_instance_ = new CharacterMallDBSaveReq();
  GlobalDBSetRequest::default_instance_ = new GlobalDBSetRequest();
  GlobalDBSetResponse::default_instance_ = new GlobalDBSetResponse();
  AllCharacterCampOfflineDBReq::default_instance_ = new AllCharacterCampOfflineDBReq();
  AllCharacterCampOfflineDBRsp::default_instance_ = new AllCharacterCampOfflineDBRsp();
  CharacterCampDBReq::default_instance_ = new CharacterCampDBReq();
  CharacterCampDBRsp::default_instance_ = new CharacterCampDBRsp();
  CharacterCampDBSetRequest::default_instance_ = new CharacterCampDBSetRequest();
  CharacterListRequest::default_instance_ = new CharacterListRequest();
  CharacterListResponse::default_instance_ = new CharacterListResponse();
  CreateCharacterRequest::default_instance_ = new CreateCharacterRequest();
  CreateCharacterResponse::default_instance_ = new CreateCharacterResponse();
  CharacterInfoRequest::default_instance_ = new CharacterInfoRequest();
  CharacterInfoResponse::default_instance_ = new CharacterInfoResponse();
  CharacterInfoUpdateRequest::default_instance_ = new CharacterInfoUpdateRequest();
  CharacterInfoUpdateResponse::default_instance_ = new CharacterInfoUpdateResponse();
  CharacterDelDBRequst::default_instance_ = new CharacterDelDBRequst();
  CharacterDelDBResponse::default_instance_ = new CharacterDelDBResponse();
  AccountLoginDBRequest::default_instance_->InitAsDefaultInstance();
  AccountLoginDBResponse::default_instance_->InitAsDefaultInstance();
  AccountSetOnlineFlagDBRequest::default_instance_->InitAsDefaultInstance();
  CharacterRoleListDBRequest::default_instance_->InitAsDefaultInstance();
  CharacterRoleDBBaseInfo::default_instance_->InitAsDefaultInstance();
  CharacterRoleListDBResponse::default_instance_->InitAsDefaultInstance();
  OfflineCharacterDBRequest::default_instance_->InitAsDefaultInstance();
  OfflineCharacterDBInfo::default_instance_->InitAsDefaultInstance();
  OfflineCharacterDBResponse::default_instance_->InitAsDefaultInstance();
  AllFriendDBRequest::default_instance_->InitAsDefaultInstance();
  FriendDBInfo::default_instance_->InitAsDefaultInstance();
  AllFriendDBResponse::default_instance_->InitAsDefaultInstance();
  SaveFriendDBRequest::default_instance_->InitAsDefaultInstance();
  ActiveCharacterDBRequest::default_instance_->InitAsDefaultInstance();
  ActiveCharacterDBResponse::default_instance_->InitAsDefaultInstance();
  ActiveCharacterDBInfo::default_instance_->InitAsDefaultInstance();
  OfflineMailList::default_instance_->InitAsDefaultInstance();
  GlobalDBRequst::default_instance_->InitAsDefaultInstance();
  OfflineMailDBInfo::default_instance_->InitAsDefaultInstance();
  GlobalDBResponse::default_instance_->InitAsDefaultInstance();
  AllOfflineMailDBRequest::default_instance_->InitAsDefaultInstance();
  AllOfflineMailDBResponse::default_instance_->InitAsDefaultInstance();
  TradingMailDBInfo::default_instance_->InitAsDefaultInstance();
  AllTradingMailDBRequest::default_instance_->InitAsDefaultInstance();
  AllTradingMailDBResponse::default_instance_->InitAsDefaultInstance();
  CharacterMailDBRequest::default_instance_->InitAsDefaultInstance();
  CharacterMailDBResponse::default_instance_->InitAsDefaultInstance();
  MailDBInfo::default_instance_->InitAsDefaultInstance();
  SaveMailDBRequest::default_instance_->InitAsDefaultInstance();
  SaveOfflineDBRequest::default_instance_->InitAsDefaultInstance();
  MaxMailIDRequest::default_instance_->InitAsDefaultInstance();
  MaxMailIDResponse::default_instance_->InitAsDefaultInstance();
  DeleteCharacterMail::default_instance_->InitAsDefaultInstance();
  CharacterMallDBRequest::default_instance_->InitAsDefaultInstance();
  CharacterMallDBResponse::default_instance_->InitAsDefaultInstance();
  CharacterMallDBSaveReq::default_instance_->InitAsDefaultInstance();
  GlobalDBSetRequest::default_instance_->InitAsDefaultInstance();
  GlobalDBSetResponse::default_instance_->InitAsDefaultInstance();
  AllCharacterCampOfflineDBReq::default_instance_->InitAsDefaultInstance();
  AllCharacterCampOfflineDBRsp::default_instance_->InitAsDefaultInstance();
  CharacterCampDBReq::default_instance_->InitAsDefaultInstance();
  CharacterCampDBRsp::default_instance_->InitAsDefaultInstance();
  CharacterCampDBSetRequest::default_instance_->InitAsDefaultInstance();
  CharacterListRequest::default_instance_->InitAsDefaultInstance();
  CharacterListResponse::default_instance_->InitAsDefaultInstance();
  CreateCharacterRequest::default_instance_->InitAsDefaultInstance();
  CreateCharacterResponse::default_instance_->InitAsDefaultInstance();
  CharacterInfoRequest::default_instance_->InitAsDefaultInstance();
  CharacterInfoResponse::default_instance_->InitAsDefaultInstance();
  CharacterInfoUpdateRequest::default_instance_->InitAsDefaultInstance();
  CharacterInfoUpdateResponse::default_instance_->InitAsDefaultInstance();
  CharacterDelDBRequst::default_instance_->InitAsDefaultInstance();
  CharacterDelDBResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fDBProxyProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fDBProxyProtocol_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fDBProxyProtocol_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fDBProxyProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccountLoginDBRequest::kPlatUserIdFieldNumber;
const int AccountLoginDBRequest::kPlatUserNameFieldNumber;
const int AccountLoginDBRequest::kChannelFieldNumber;
const int AccountLoginDBRequest::kChannelUserIdFieldNumber;
const int AccountLoginDBRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

AccountLoginDBRequest::AccountLoginDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginDBRequest::InitAsDefaultInstance() {
}

AccountLoginDBRequest::AccountLoginDBRequest(const AccountLoginDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginDBRequest::SharedCtor() {
  _cached_size_ = 0;
  plat_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plat_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginDBRequest::~AccountLoginDBRequest() {
  SharedDtor();
}

void AccountLoginDBRequest::SharedDtor() {
  if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_id_;
  }
  if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_name_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginDBRequest_descriptor_;
}

const AccountLoginDBRequest& AccountLoginDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AccountLoginDBRequest* AccountLoginDBRequest::default_instance_ = NULL;

AccountLoginDBRequest* AccountLoginDBRequest::New() const {
  return new AccountLoginDBRequest;
}

void AccountLoginDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plat_user_id()) {
      if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
        plat_user_id_->clear();
      }
    }
    if (has_plat_user_name()) {
      if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
        plat_user_name_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string plat_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plat_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plat_user_id().data(), this->plat_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plat_user_name;
        break;
      }

      // required string plat_user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plat_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plat_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plat_user_name().data(), this->plat_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // required string channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string plat_user_id = 1;
  if (has_plat_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_id().data(), this->plat_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->plat_user_id(), output);
  }

  // required string plat_user_name = 2;
  if (has_plat_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_name().data(), this->plat_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->plat_user_name(), output);
  }

  // required string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(), output);
  }

  // required string channel_user_id = 4;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel_user_id(), output);
  }

  // required uint32 session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string plat_user_id = 1;
  if (has_plat_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_id().data(), this->plat_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->plat_user_id(), target);
  }

  // required string plat_user_name = 2;
  if (has_plat_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_name().data(), this->plat_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->plat_user_name(), target);
  }

  // required string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // required string channel_user_id = 4;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel_user_id(), target);
  }

  // required uint32 session_id = 5;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string plat_user_id = 1;
    if (has_plat_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plat_user_id());
    }

    // required string plat_user_name = 2;
    if (has_plat_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plat_user_name());
    }

    // required string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // required string channel_user_id = 4;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint32 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginDBRequest::MergeFrom(const AccountLoginDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plat_user_id()) {
      set_plat_user_id(from.plat_user_id());
    }
    if (from.has_plat_user_name()) {
      set_plat_user_name(from.plat_user_name());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginDBRequest::CopyFrom(const AccountLoginDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AccountLoginDBRequest::Swap(AccountLoginDBRequest* other) {
  if (other != this) {
    std::swap(plat_user_id_, other->plat_user_id_);
    std::swap(plat_user_name_, other->plat_user_name_);
    std::swap(channel_, other->channel_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginDBRequest_descriptor_;
  metadata.reflection = AccountLoginDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginDBResponse::kResultFieldNumber;
const int AccountLoginDBResponse::kSessionIdFieldNumber;
const int AccountLoginDBResponse::kChannelUserIdFieldNumber;
const int AccountLoginDBResponse::kPlatUserIdFieldNumber;
const int AccountLoginDBResponse::kPlatUserNameFieldNumber;
const int AccountLoginDBResponse::kChannelFieldNumber;
const int AccountLoginDBResponse::kByonlineFieldNumber;
#endif  // !_MSC_VER

AccountLoginDBResponse::AccountLoginDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginDBResponse::InitAsDefaultInstance() {
}

AccountLoginDBResponse::AccountLoginDBResponse(const AccountLoginDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginDBResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  session_id_ = 0u;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plat_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plat_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  byonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginDBResponse::~AccountLoginDBResponse() {
  SharedDtor();
}

void AccountLoginDBResponse::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_id_;
  }
  if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete plat_user_name_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginDBResponse_descriptor_;
}

const AccountLoginDBResponse& AccountLoginDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AccountLoginDBResponse* AccountLoginDBResponse::default_instance_ = NULL;

AccountLoginDBResponse* AccountLoginDBResponse::New() const {
  return new AccountLoginDBResponse;
}

void AccountLoginDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    session_id_ = 0u;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    if (has_plat_user_id()) {
      if (plat_user_id_ != &::google::protobuf::internal::kEmptyString) {
        plat_user_id_->clear();
      }
    }
    if (has_plat_user_name()) {
      if (plat_user_name_ != &::google::protobuf::internal::kEmptyString) {
        plat_user_name_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    byonline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_plat_user_id;
        break;
      }

      // optional string plat_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plat_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plat_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plat_user_id().data(), this->plat_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_plat_user_name;
        break;
      }

      // optional string plat_user_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plat_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plat_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plat_user_name().data(), this->plat_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_byonline;
        break;
      }

      // optional int32 byonline = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byonline_)));
          set_has_byonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_user_id(), output);
  }

  // optional string plat_user_id = 4;
  if (has_plat_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_id().data(), this->plat_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->plat_user_id(), output);
  }

  // optional string plat_user_name = 5;
  if (has_plat_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_name().data(), this->plat_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->plat_user_name(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  // optional int32 byonline = 7;
  if (has_byonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->byonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required string channel_user_id = 3;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_user_id(), target);
  }

  // optional string plat_user_id = 4;
  if (has_plat_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_id().data(), this->plat_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->plat_user_id(), target);
  }

  // optional string plat_user_name = 5;
  if (has_plat_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plat_user_name().data(), this->plat_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->plat_user_name(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  // optional int32 byonline = 7;
  if (has_byonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->byonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required string channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // optional string plat_user_id = 4;
    if (has_plat_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plat_user_id());
    }

    // optional string plat_user_name = 5;
    if (has_plat_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plat_user_name());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 byonline = 7;
    if (has_byonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginDBResponse::MergeFrom(const AccountLoginDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_plat_user_id()) {
      set_plat_user_id(from.plat_user_id());
    }
    if (from.has_plat_user_name()) {
      set_plat_user_name(from.plat_user_name());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_byonline()) {
      set_byonline(from.byonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginDBResponse::CopyFrom(const AccountLoginDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AccountLoginDBResponse::Swap(AccountLoginDBResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(session_id_, other->session_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(plat_user_id_, other->plat_user_id_);
    std::swap(plat_user_name_, other->plat_user_name_);
    std::swap(channel_, other->channel_);
    std::swap(byonline_, other->byonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginDBResponse_descriptor_;
  metadata.reflection = AccountLoginDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountSetOnlineFlagDBRequest::kChannelUserIdFieldNumber;
const int AccountSetOnlineFlagDBRequest::kByonlineFieldNumber;
#endif  // !_MSC_VER

AccountSetOnlineFlagDBRequest::AccountSetOnlineFlagDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountSetOnlineFlagDBRequest::InitAsDefaultInstance() {
}

AccountSetOnlineFlagDBRequest::AccountSetOnlineFlagDBRequest(const AccountSetOnlineFlagDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountSetOnlineFlagDBRequest::SharedCtor() {
  _cached_size_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  byonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountSetOnlineFlagDBRequest::~AccountSetOnlineFlagDBRequest() {
  SharedDtor();
}

void AccountSetOnlineFlagDBRequest::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void AccountSetOnlineFlagDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountSetOnlineFlagDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountSetOnlineFlagDBRequest_descriptor_;
}

const AccountSetOnlineFlagDBRequest& AccountSetOnlineFlagDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AccountSetOnlineFlagDBRequest* AccountSetOnlineFlagDBRequest::default_instance_ = NULL;

AccountSetOnlineFlagDBRequest* AccountSetOnlineFlagDBRequest::New() const {
  return new AccountSetOnlineFlagDBRequest;
}

void AccountSetOnlineFlagDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    byonline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountSetOnlineFlagDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byonline;
        break;
      }

      // required int32 byonline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byonline_)));
          set_has_byonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountSetOnlineFlagDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_user_id(), output);
  }

  // required int32 byonline = 2;
  if (has_byonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->byonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountSetOnlineFlagDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_user_id(), target);
  }

  // required int32 byonline = 2;
  if (has_byonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->byonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountSetOnlineFlagDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_user_id = 1;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required int32 byonline = 2;
    if (has_byonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountSetOnlineFlagDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountSetOnlineFlagDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountSetOnlineFlagDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountSetOnlineFlagDBRequest::MergeFrom(const AccountSetOnlineFlagDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_byonline()) {
      set_byonline(from.byonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountSetOnlineFlagDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountSetOnlineFlagDBRequest::CopyFrom(const AccountSetOnlineFlagDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSetOnlineFlagDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccountSetOnlineFlagDBRequest::Swap(AccountSetOnlineFlagDBRequest* other) {
  if (other != this) {
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(byonline_, other->byonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountSetOnlineFlagDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountSetOnlineFlagDBRequest_descriptor_;
  metadata.reflection = AccountSetOnlineFlagDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterRoleListDBRequest::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

CharacterRoleListDBRequest::CharacterRoleListDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterRoleListDBRequest::InitAsDefaultInstance() {
}

CharacterRoleListDBRequest::CharacterRoleListDBRequest(const CharacterRoleListDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterRoleListDBRequest::SharedCtor() {
  _cached_size_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterRoleListDBRequest::~CharacterRoleListDBRequest() {
  SharedDtor();
}

void CharacterRoleListDBRequest::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void CharacterRoleListDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterRoleListDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterRoleListDBRequest_descriptor_;
}

const CharacterRoleListDBRequest& CharacterRoleListDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterRoleListDBRequest* CharacterRoleListDBRequest::default_instance_ = NULL;

CharacterRoleListDBRequest* CharacterRoleListDBRequest::New() const {
  return new CharacterRoleListDBRequest;
}

void CharacterRoleListDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterRoleListDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterRoleListDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterRoleListDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_user_id = 1;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterRoleListDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_user_id = 1;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterRoleListDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterRoleListDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterRoleListDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterRoleListDBRequest::MergeFrom(const CharacterRoleListDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterRoleListDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterRoleListDBRequest::CopyFrom(const CharacterRoleListDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterRoleListDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CharacterRoleListDBRequest::Swap(CharacterRoleListDBRequest* other) {
  if (other != this) {
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterRoleListDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterRoleListDBRequest_descriptor_;
  metadata.reflection = CharacterRoleListDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterRoleDBBaseInfo::kCharIDFieldNumber;
const int CharacterRoleDBBaseInfo::kBaseinfoFieldNumber;
#endif  // !_MSC_VER

CharacterRoleDBBaseInfo::CharacterRoleDBBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterRoleDBBaseInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::ProtoBuf::CharacterDBBaseInfo*>(&::ProtoBuf::CharacterDBBaseInfo::default_instance());
}

CharacterRoleDBBaseInfo::CharacterRoleDBBaseInfo(const CharacterRoleDBBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterRoleDBBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterRoleDBBaseInfo::~CharacterRoleDBBaseInfo() {
  SharedDtor();
}

void CharacterRoleDBBaseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void CharacterRoleDBBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterRoleDBBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterRoleDBBaseInfo_descriptor_;
}

const CharacterRoleDBBaseInfo& CharacterRoleDBBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterRoleDBBaseInfo* CharacterRoleDBBaseInfo::default_instance_ = NULL;

CharacterRoleDBBaseInfo* CharacterRoleDBBaseInfo::New() const {
  return new CharacterRoleDBBaseInfo;
}

void CharacterRoleDBBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::ProtoBuf::CharacterDBBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterRoleDBBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseinfo;
        break;
      }

      // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterRoleDBBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterRoleDBBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterRoleDBBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterRoleDBBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterRoleDBBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterRoleDBBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterRoleDBBaseInfo::MergeFrom(const CharacterRoleDBBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::ProtoBuf::CharacterDBBaseInfo::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterRoleDBBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterRoleDBBaseInfo::CopyFrom(const CharacterRoleDBBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterRoleDBBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  return true;
}

void CharacterRoleDBBaseInfo::Swap(CharacterRoleDBBaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterRoleDBBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterRoleDBBaseInfo_descriptor_;
  metadata.reflection = CharacterRoleDBBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CharacterRoleListDBResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterRoleListDBResponse_Result_descriptor_;
}
bool CharacterRoleListDBResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterRoleListDBResponse_Result CharacterRoleListDBResponse::SUCCESS;
const CharacterRoleListDBResponse_Result CharacterRoleListDBResponse::FAILED;
const CharacterRoleListDBResponse_Result CharacterRoleListDBResponse::UNKNOW;
const CharacterRoleListDBResponse_Result CharacterRoleListDBResponse::Result_MIN;
const CharacterRoleListDBResponse_Result CharacterRoleListDBResponse::Result_MAX;
const int CharacterRoleListDBResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CharacterRoleListDBResponse::kResultFieldNumber;
const int CharacterRoleListDBResponse::kChannelUserIdFieldNumber;
const int CharacterRoleListDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

CharacterRoleListDBResponse::CharacterRoleListDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterRoleListDBResponse::InitAsDefaultInstance() {
}

CharacterRoleListDBResponse::CharacterRoleListDBResponse(const CharacterRoleListDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterRoleListDBResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterRoleListDBResponse::~CharacterRoleListDBResponse() {
  SharedDtor();
}

void CharacterRoleListDBResponse::SharedDtor() {
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void CharacterRoleListDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterRoleListDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterRoleListDBResponse_descriptor_;
}

const CharacterRoleListDBResponse& CharacterRoleListDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterRoleListDBResponse* CharacterRoleListDBResponse::default_instance_ = NULL;

CharacterRoleListDBResponse* CharacterRoleListDBResponse::New() const {
  return new CharacterRoleListDBResponse;
}

void CharacterRoleListDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterRoleListDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.CharacterRoleListDBResponse.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::CharacterRoleListDBResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::CharacterRoleListDBResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.CharacterRoleDBBaseInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterRoleListDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.CharacterRoleListDBResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_user_id(), output);
  }

  // repeated .ProtoBuf.CharacterRoleDBBaseInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterRoleListDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.CharacterRoleListDBResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required string channel_user_id = 2;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_user_id(), target);
  }

  // repeated .ProtoBuf.CharacterRoleDBBaseInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterRoleListDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.CharacterRoleListDBResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required string channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  // repeated .ProtoBuf.CharacterRoleDBBaseInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterRoleListDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterRoleListDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterRoleListDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterRoleListDBResponse::MergeFrom(const CharacterRoleListDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterRoleListDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterRoleListDBResponse::CopyFrom(const CharacterRoleListDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterRoleListDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterRoleListDBResponse::Swap(CharacterRoleListDBResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(channel_user_id_, other->channel_user_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterRoleListDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterRoleListDBResponse_descriptor_;
  metadata.reflection = CharacterRoleListDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineCharacterDBRequest::kOffsetFieldNumber;
const int OfflineCharacterDBRequest::kRetnumFieldNumber;
#endif  // !_MSC_VER

OfflineCharacterDBRequest::OfflineCharacterDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineCharacterDBRequest::InitAsDefaultInstance() {
}

OfflineCharacterDBRequest::OfflineCharacterDBRequest(const OfflineCharacterDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineCharacterDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  retnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineCharacterDBRequest::~OfflineCharacterDBRequest() {
  SharedDtor();
}

void OfflineCharacterDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineCharacterDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineCharacterDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineCharacterDBRequest_descriptor_;
}

const OfflineCharacterDBRequest& OfflineCharacterDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

OfflineCharacterDBRequest* OfflineCharacterDBRequest::default_instance_ = NULL;

OfflineCharacterDBRequest* OfflineCharacterDBRequest::New() const {
  return new OfflineCharacterDBRequest;
}

void OfflineCharacterDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    retnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineCharacterDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retnum;
        break;
      }

      // required int32 retnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retnum_)));
          set_has_retnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineCharacterDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineCharacterDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineCharacterDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 retnum = 2;
    if (has_retnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineCharacterDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineCharacterDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineCharacterDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineCharacterDBRequest::MergeFrom(const OfflineCharacterDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_retnum()) {
      set_retnum(from.retnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineCharacterDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineCharacterDBRequest::CopyFrom(const OfflineCharacterDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineCharacterDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OfflineCharacterDBRequest::Swap(OfflineCharacterDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(retnum_, other->retnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineCharacterDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineCharacterDBRequest_descriptor_;
  metadata.reflection = OfflineCharacterDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineCharacterDBInfo::kCharIDFieldNumber;
const int OfflineCharacterDBInfo::kBaseinfoFieldNumber;
#endif  // !_MSC_VER

OfflineCharacterDBInfo::OfflineCharacterDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineCharacterDBInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::ProtoBuf::CharacterDBBaseInfo*>(&::ProtoBuf::CharacterDBBaseInfo::default_instance());
}

OfflineCharacterDBInfo::OfflineCharacterDBInfo(const OfflineCharacterDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineCharacterDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineCharacterDBInfo::~OfflineCharacterDBInfo() {
  SharedDtor();
}

void OfflineCharacterDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void OfflineCharacterDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineCharacterDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineCharacterDBInfo_descriptor_;
}

const OfflineCharacterDBInfo& OfflineCharacterDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

OfflineCharacterDBInfo* OfflineCharacterDBInfo::default_instance_ = NULL;

OfflineCharacterDBInfo* OfflineCharacterDBInfo::New() const {
  return new OfflineCharacterDBInfo;
}

void OfflineCharacterDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::ProtoBuf::CharacterDBBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineCharacterDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseinfo;
        break;
      }

      // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineCharacterDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineCharacterDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineCharacterDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required .ProtoBuf.CharacterDBBaseInfo baseinfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineCharacterDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineCharacterDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineCharacterDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineCharacterDBInfo::MergeFrom(const OfflineCharacterDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::ProtoBuf::CharacterDBBaseInfo::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineCharacterDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineCharacterDBInfo::CopyFrom(const OfflineCharacterDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineCharacterDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  return true;
}

void OfflineCharacterDBInfo::Swap(OfflineCharacterDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineCharacterDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineCharacterDBInfo_descriptor_;
  metadata.reflection = OfflineCharacterDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineCharacterDBResponse::kRetcodeFieldNumber;
const int OfflineCharacterDBResponse::kOffsetFieldNumber;
const int OfflineCharacterDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

OfflineCharacterDBResponse::OfflineCharacterDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineCharacterDBResponse::InitAsDefaultInstance() {
}

OfflineCharacterDBResponse::OfflineCharacterDBResponse(const OfflineCharacterDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineCharacterDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineCharacterDBResponse::~OfflineCharacterDBResponse() {
  SharedDtor();
}

void OfflineCharacterDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineCharacterDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineCharacterDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineCharacterDBResponse_descriptor_;
}

const OfflineCharacterDBResponse& OfflineCharacterDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

OfflineCharacterDBResponse* OfflineCharacterDBResponse::default_instance_ = NULL;

OfflineCharacterDBResponse* OfflineCharacterDBResponse::New() const {
  return new OfflineCharacterDBResponse;
}

void OfflineCharacterDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineCharacterDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.OfflineCharacterDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineCharacterDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .ProtoBuf.OfflineCharacterDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineCharacterDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .ProtoBuf.OfflineCharacterDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineCharacterDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .ProtoBuf.OfflineCharacterDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineCharacterDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineCharacterDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineCharacterDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineCharacterDBResponse::MergeFrom(const OfflineCharacterDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineCharacterDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineCharacterDBResponse::CopyFrom(const OfflineCharacterDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineCharacterDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void OfflineCharacterDBResponse::Swap(OfflineCharacterDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineCharacterDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineCharacterDBResponse_descriptor_;
  metadata.reflection = OfflineCharacterDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllFriendDBRequest::kOffsetFieldNumber;
const int AllFriendDBRequest::kRetnumFieldNumber;
#endif  // !_MSC_VER

AllFriendDBRequest::AllFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllFriendDBRequest::InitAsDefaultInstance() {
}

AllFriendDBRequest::AllFriendDBRequest(const AllFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  retnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllFriendDBRequest::~AllFriendDBRequest() {
  SharedDtor();
}

void AllFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllFriendDBRequest_descriptor_;
}

const AllFriendDBRequest& AllFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllFriendDBRequest* AllFriendDBRequest::default_instance_ = NULL;

AllFriendDBRequest* AllFriendDBRequest::New() const {
  return new AllFriendDBRequest;
}

void AllFriendDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    retnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retnum;
        break;
      }

      // required int32 retnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retnum_)));
          set_has_retnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllFriendDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 retnum = 2;
    if (has_retnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllFriendDBRequest::MergeFrom(const AllFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_retnum()) {
      set_retnum(from.retnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFriendDBRequest::CopyFrom(const AllFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFriendDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllFriendDBRequest::Swap(AllFriendDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(retnum_, other->retnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllFriendDBRequest_descriptor_;
  metadata.reflection = AllFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDBInfo::kCharIDFieldNumber;
const int FriendDBInfo::kDataFieldNumber;
#endif  // !_MSC_VER

FriendDBInfo::FriendDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDBInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::ProtoBuf::RelationDBInfo*>(&::ProtoBuf::RelationDBInfo::default_instance());
}

FriendDBInfo::FriendDBInfo(const FriendDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDBInfo::~FriendDBInfo() {
  SharedDtor();
}

void FriendDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FriendDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDBInfo_descriptor_;
}

const FriendDBInfo& FriendDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

FriendDBInfo* FriendDBInfo::default_instance_ = NULL;

FriendDBInfo* FriendDBInfo::New() const {
  return new FriendDBInfo;
}

void FriendDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::ProtoBuf::RelationDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .ProtoBuf.RelationDBInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required .ProtoBuf.RelationDBInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required .ProtoBuf.RelationDBInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required .ProtoBuf.RelationDBInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDBInfo::MergeFrom(const FriendDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::ProtoBuf::RelationDBInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDBInfo::CopyFrom(const FriendDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FriendDBInfo::Swap(FriendDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDBInfo_descriptor_;
  metadata.reflection = FriendDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllFriendDBResponse::kRetcodeFieldNumber;
const int AllFriendDBResponse::kOffsetFieldNumber;
const int AllFriendDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

AllFriendDBResponse::AllFriendDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllFriendDBResponse::InitAsDefaultInstance() {
}

AllFriendDBResponse::AllFriendDBResponse(const AllFriendDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllFriendDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllFriendDBResponse::~AllFriendDBResponse() {
  SharedDtor();
}

void AllFriendDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllFriendDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllFriendDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllFriendDBResponse_descriptor_;
}

const AllFriendDBResponse& AllFriendDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllFriendDBResponse* AllFriendDBResponse::default_instance_ = NULL;

AllFriendDBResponse* AllFriendDBResponse::New() const {
  return new AllFriendDBResponse;
}

void AllFriendDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllFriendDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.FriendDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllFriendDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .ProtoBuf.FriendDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllFriendDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .ProtoBuf.FriendDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllFriendDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .ProtoBuf.FriendDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllFriendDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllFriendDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllFriendDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllFriendDBResponse::MergeFrom(const AllFriendDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllFriendDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFriendDBResponse::CopyFrom(const AllFriendDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFriendDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void AllFriendDBResponse::Swap(AllFriendDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllFriendDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllFriendDBResponse_descriptor_;
  metadata.reflection = AllFriendDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveFriendDBRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveFriendDBRequest::SaveFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveFriendDBRequest::InitAsDefaultInstance() {
}

SaveFriendDBRequest::SaveFriendDBRequest(const SaveFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveFriendDBRequest::~SaveFriendDBRequest() {
  SharedDtor();
}

void SaveFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveFriendDBRequest_descriptor_;
}

const SaveFriendDBRequest& SaveFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

SaveFriendDBRequest* SaveFriendDBRequest::default_instance_ = NULL;

SaveFriendDBRequest* SaveFriendDBRequest::New() const {
  return new SaveFriendDBRequest;
}

void SaveFriendDBRequest::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.FriendDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.FriendDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.FriendDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveFriendDBRequest::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.FriendDBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveFriendDBRequest::MergeFrom(const SaveFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFriendDBRequest::CopyFrom(const SaveFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFriendDBRequest::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void SaveFriendDBRequest::Swap(SaveFriendDBRequest* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveFriendDBRequest_descriptor_;
  metadata.reflection = SaveFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveCharacterDBRequest::kSrcCharIDFieldNumber;
const int ActiveCharacterDBRequest::kDstCharIDFieldNumber;
#endif  // !_MSC_VER

ActiveCharacterDBRequest::ActiveCharacterDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActiveCharacterDBRequest::InitAsDefaultInstance() {
}

ActiveCharacterDBRequest::ActiveCharacterDBRequest(const ActiveCharacterDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActiveCharacterDBRequest::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = 0u;
  dstcharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveCharacterDBRequest::~ActiveCharacterDBRequest() {
  SharedDtor();
}

void ActiveCharacterDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActiveCharacterDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveCharacterDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveCharacterDBRequest_descriptor_;
}

const ActiveCharacterDBRequest& ActiveCharacterDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

ActiveCharacterDBRequest* ActiveCharacterDBRequest::default_instance_ = NULL;

ActiveCharacterDBRequest* ActiveCharacterDBRequest::New() const {
  return new ActiveCharacterDBRequest;
}

void ActiveCharacterDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = 0u;
    dstcharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveCharacterDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 srcCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srccharid_)));
          set_has_srccharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstCharID;
        break;
      }

      // required uint32 dstCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActiveCharacterDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 srcCharID = 1;
  if (has_srccharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srccharid(), output);
  }

  // required uint32 dstCharID = 2;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dstcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActiveCharacterDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 srcCharID = 1;
  if (has_srccharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srccharid(), target);
  }

  // required uint32 dstCharID = 2;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dstcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActiveCharacterDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 srcCharID = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srccharid());
    }

    // required uint32 dstCharID = 2;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveCharacterDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveCharacterDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveCharacterDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveCharacterDBRequest::MergeFrom(const ActiveCharacterDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srccharid()) {
      set_srccharid(from.srccharid());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveCharacterDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveCharacterDBRequest::CopyFrom(const ActiveCharacterDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveCharacterDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActiveCharacterDBRequest::Swap(ActiveCharacterDBRequest* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveCharacterDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveCharacterDBRequest_descriptor_;
  metadata.reflection = ActiveCharacterDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveCharacterDBResponse::kRetcodeFieldNumber;
const int ActiveCharacterDBResponse::kSrcCharIDFieldNumber;
const int ActiveCharacterDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

ActiveCharacterDBResponse::ActiveCharacterDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActiveCharacterDBResponse::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::ActiveCharacterDBInfo*>(&::ProtoBuf::ActiveCharacterDBInfo::default_instance());
}

ActiveCharacterDBResponse::ActiveCharacterDBResponse(const ActiveCharacterDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActiveCharacterDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  srccharid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveCharacterDBResponse::~ActiveCharacterDBResponse() {
  SharedDtor();
}

void ActiveCharacterDBResponse::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ActiveCharacterDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveCharacterDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveCharacterDBResponse_descriptor_;
}

const ActiveCharacterDBResponse& ActiveCharacterDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

ActiveCharacterDBResponse* ActiveCharacterDBResponse::default_instance_ = NULL;

ActiveCharacterDBResponse* ActiveCharacterDBResponse::New() const {
  return new ActiveCharacterDBResponse;
}

void ActiveCharacterDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    srccharid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::ActiveCharacterDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveCharacterDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcCharID;
        break;
      }

      // required uint32 srcCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srccharid_)));
          set_has_srccharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.ActiveCharacterDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActiveCharacterDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 srcCharID = 2;
  if (has_srccharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srccharid(), output);
  }

  // optional .ProtoBuf.ActiveCharacterDBInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActiveCharacterDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 srcCharID = 2;
  if (has_srccharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srccharid(), target);
  }

  // optional .ProtoBuf.ActiveCharacterDBInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActiveCharacterDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 srcCharID = 2;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srccharid());
    }

    // optional .ProtoBuf.ActiveCharacterDBInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveCharacterDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveCharacterDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveCharacterDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveCharacterDBResponse::MergeFrom(const ActiveCharacterDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_srccharid()) {
      set_srccharid(from.srccharid());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::ActiveCharacterDBInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveCharacterDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveCharacterDBResponse::CopyFrom(const ActiveCharacterDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveCharacterDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ActiveCharacterDBResponse::Swap(ActiveCharacterDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(srccharid_, other->srccharid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveCharacterDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveCharacterDBResponse_descriptor_;
  metadata.reflection = ActiveCharacterDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveCharacterDBInfo::kCharIDFieldNumber;
const int ActiveCharacterDBInfo::kBaseDataFieldNumber;
const int ActiveCharacterDBInfo::kEquipDataFieldNumber;
const int ActiveCharacterDBInfo::kExtendDataFieldNumber;
#endif  // !_MSC_VER

ActiveCharacterDBInfo::ActiveCharacterDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActiveCharacterDBInfo::InitAsDefaultInstance() {
  basedata_ = const_cast< ::ProtoBuf::CharacterDBBaseInfo*>(&::ProtoBuf::CharacterDBBaseInfo::default_instance());
  equipdata_ = const_cast< ::ProtoBuf::CharacterDBEquipData*>(&::ProtoBuf::CharacterDBEquipData::default_instance());
  extenddata_ = const_cast< ::ProtoBuf::CharacterDBExtendData*>(&::ProtoBuf::CharacterDBExtendData::default_instance());
}

ActiveCharacterDBInfo::ActiveCharacterDBInfo(const ActiveCharacterDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActiveCharacterDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  basedata_ = NULL;
  equipdata_ = NULL;
  extenddata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveCharacterDBInfo::~ActiveCharacterDBInfo() {
  SharedDtor();
}

void ActiveCharacterDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete basedata_;
    delete equipdata_;
    delete extenddata_;
  }
}

void ActiveCharacterDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveCharacterDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveCharacterDBInfo_descriptor_;
}

const ActiveCharacterDBInfo& ActiveCharacterDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

ActiveCharacterDBInfo* ActiveCharacterDBInfo::default_instance_ = NULL;

ActiveCharacterDBInfo* ActiveCharacterDBInfo::New() const {
  return new ActiveCharacterDBInfo;
}

void ActiveCharacterDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_basedata()) {
      if (basedata_ != NULL) basedata_->::ProtoBuf::CharacterDBBaseInfo::Clear();
    }
    if (has_equipdata()) {
      if (equipdata_ != NULL) equipdata_->::ProtoBuf::CharacterDBEquipData::Clear();
    }
    if (has_extenddata()) {
      if (extenddata_ != NULL) extenddata_->::ProtoBuf::CharacterDBExtendData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveCharacterDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseData;
        break;
      }

      // optional .ProtoBuf.CharacterDBBaseInfo baseData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equipData;
        break;
      }

      // optional .ProtoBuf.CharacterDBEquipData equipData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extendData;
        break;
      }

      // optional .ProtoBuf.CharacterDBExtendData extendData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extendData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extenddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActiveCharacterDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional .ProtoBuf.CharacterDBBaseInfo baseData = 2;
  if (has_basedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basedata(), output);
  }

  // optional .ProtoBuf.CharacterDBEquipData equipData = 3;
  if (has_equipdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equipdata(), output);
  }

  // optional .ProtoBuf.CharacterDBExtendData extendData = 4;
  if (has_extenddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extenddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActiveCharacterDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional .ProtoBuf.CharacterDBBaseInfo baseData = 2;
  if (has_basedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->basedata(), target);
  }

  // optional .ProtoBuf.CharacterDBEquipData equipData = 3;
  if (has_equipdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equipdata(), target);
  }

  // optional .ProtoBuf.CharacterDBExtendData extendData = 4;
  if (has_extenddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extenddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActiveCharacterDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .ProtoBuf.CharacterDBBaseInfo baseData = 2;
    if (has_basedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedata());
    }

    // optional .ProtoBuf.CharacterDBEquipData equipData = 3;
    if (has_equipdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipdata());
    }

    // optional .ProtoBuf.CharacterDBExtendData extendData = 4;
    if (has_extenddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extenddata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveCharacterDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveCharacterDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveCharacterDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveCharacterDBInfo::MergeFrom(const ActiveCharacterDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_basedata()) {
      mutable_basedata()->::ProtoBuf::CharacterDBBaseInfo::MergeFrom(from.basedata());
    }
    if (from.has_equipdata()) {
      mutable_equipdata()->::ProtoBuf::CharacterDBEquipData::MergeFrom(from.equipdata());
    }
    if (from.has_extenddata()) {
      mutable_extenddata()->::ProtoBuf::CharacterDBExtendData::MergeFrom(from.extenddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveCharacterDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveCharacterDBInfo::CopyFrom(const ActiveCharacterDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveCharacterDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basedata()) {
    if (!this->basedata().IsInitialized()) return false;
  }
  if (has_equipdata()) {
    if (!this->equipdata().IsInitialized()) return false;
  }
  return true;
}

void ActiveCharacterDBInfo::Swap(ActiveCharacterDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(basedata_, other->basedata_);
    std::swap(equipdata_, other->equipdata_);
    std::swap(extenddata_, other->extenddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveCharacterDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveCharacterDBInfo_descriptor_;
  metadata.reflection = ActiveCharacterDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineMailList::kDataFieldNumber;
#endif  // !_MSC_VER

OfflineMailList::OfflineMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineMailList::InitAsDefaultInstance() {
}

OfflineMailList::OfflineMailList(const OfflineMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineMailList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineMailList::~OfflineMailList() {
  SharedDtor();
}

void OfflineMailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineMailList_descriptor_;
}

const OfflineMailList& OfflineMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

OfflineMailList* OfflineMailList::default_instance_ = NULL;

OfflineMailList* OfflineMailList::New() const {
  return new OfflineMailList;
}

void OfflineMailList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.MailInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.MailInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.MailInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineMailList::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.MailInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineMailList::MergeFrom(const OfflineMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineMailList::CopyFrom(const OfflineMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineMailList::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void OfflineMailList::Swap(OfflineMailList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineMailList_descriptor_;
  metadata.reflection = OfflineMailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBRequst::kTypeIdFieldNumber;
#endif  // !_MSC_VER

GlobalDBRequst::GlobalDBRequst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBRequst::InitAsDefaultInstance() {
}

GlobalDBRequst::GlobalDBRequst(const GlobalDBRequst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBRequst::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBRequst::~GlobalDBRequst() {
  SharedDtor();
}

void GlobalDBRequst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBRequst_descriptor_;
}

const GlobalDBRequst& GlobalDBRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

GlobalDBRequst* GlobalDBRequst::default_instance_ = NULL;

GlobalDBRequst* GlobalDBRequst::New() const {
  return new GlobalDBRequst;
}

void GlobalDBRequst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBRequst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBRequst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBRequst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBRequst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBRequst::MergeFrom(const GlobalDBRequst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBRequst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBRequst::CopyFrom(const GlobalDBRequst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBRequst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GlobalDBRequst::Swap(GlobalDBRequst* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBRequst_descriptor_;
  metadata.reflection = GlobalDBRequst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineMailDBInfo::kCharIDFieldNumber;
const int OfflineMailDBInfo::kDataFieldNumber;
#endif  // !_MSC_VER

OfflineMailDBInfo::OfflineMailDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineMailDBInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::ProtoBuf::OfflineMailList*>(&::ProtoBuf::OfflineMailList::default_instance());
}

OfflineMailDBInfo::OfflineMailDBInfo(const OfflineMailDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineMailDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineMailDBInfo::~OfflineMailDBInfo() {
  SharedDtor();
}

void OfflineMailDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void OfflineMailDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineMailDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineMailDBInfo_descriptor_;
}

const OfflineMailDBInfo& OfflineMailDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

OfflineMailDBInfo* OfflineMailDBInfo::default_instance_ = NULL;

OfflineMailDBInfo* OfflineMailDBInfo::New() const {
  return new OfflineMailDBInfo;
}

void OfflineMailDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::ProtoBuf::OfflineMailList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineMailDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .ProtoBuf.OfflineMailList data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineMailDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional .ProtoBuf.OfflineMailList data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineMailDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional .ProtoBuf.OfflineMailList data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineMailDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .ProtoBuf.OfflineMailList data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineMailDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineMailDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineMailDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineMailDBInfo::MergeFrom(const OfflineMailDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::ProtoBuf::OfflineMailList::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineMailDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineMailDBInfo::CopyFrom(const OfflineMailDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineMailDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void OfflineMailDBInfo::Swap(OfflineMailDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineMailDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineMailDBInfo_descriptor_;
  metadata.reflection = OfflineMailDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBResponse::kRetcodeFieldNumber;
const int GlobalDBResponse::kTypeIdFieldNumber;
const int GlobalDBResponse::kDataFieldNumber;
#endif  // !_MSC_VER

GlobalDBResponse::GlobalDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBResponse::InitAsDefaultInstance() {
}

GlobalDBResponse::GlobalDBResponse(const GlobalDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBResponse::~GlobalDBResponse() {
  SharedDtor();
}

void GlobalDBResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBResponse_descriptor_;
}

const GlobalDBResponse& GlobalDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

GlobalDBResponse* GlobalDBResponse::default_instance_ = NULL;

GlobalDBResponse* GlobalDBResponse::New() const {
  return new GlobalDBResponse;
}

void GlobalDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // required int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBResponse::MergeFrom(const GlobalDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBResponse::CopyFrom(const GlobalDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GlobalDBResponse::Swap(GlobalDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_id_, other->type_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBResponse_descriptor_;
  metadata.reflection = GlobalDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllOfflineMailDBRequest::kOffsetFieldNumber;
const int AllOfflineMailDBRequest::kRetnumFieldNumber;
#endif  // !_MSC_VER

AllOfflineMailDBRequest::AllOfflineMailDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllOfflineMailDBRequest::InitAsDefaultInstance() {
}

AllOfflineMailDBRequest::AllOfflineMailDBRequest(const AllOfflineMailDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllOfflineMailDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  retnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllOfflineMailDBRequest::~AllOfflineMailDBRequest() {
  SharedDtor();
}

void AllOfflineMailDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllOfflineMailDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllOfflineMailDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllOfflineMailDBRequest_descriptor_;
}

const AllOfflineMailDBRequest& AllOfflineMailDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllOfflineMailDBRequest* AllOfflineMailDBRequest::default_instance_ = NULL;

AllOfflineMailDBRequest* AllOfflineMailDBRequest::New() const {
  return new AllOfflineMailDBRequest;
}

void AllOfflineMailDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    retnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllOfflineMailDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retnum;
        break;
      }

      // required int32 retnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retnum_)));
          set_has_retnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllOfflineMailDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllOfflineMailDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllOfflineMailDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 retnum = 2;
    if (has_retnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllOfflineMailDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllOfflineMailDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllOfflineMailDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllOfflineMailDBRequest::MergeFrom(const AllOfflineMailDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_retnum()) {
      set_retnum(from.retnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllOfflineMailDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOfflineMailDBRequest::CopyFrom(const AllOfflineMailDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOfflineMailDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllOfflineMailDBRequest::Swap(AllOfflineMailDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(retnum_, other->retnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllOfflineMailDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllOfflineMailDBRequest_descriptor_;
  metadata.reflection = AllOfflineMailDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllOfflineMailDBResponse::kRetcodeFieldNumber;
const int AllOfflineMailDBResponse::kOffsetFieldNumber;
const int AllOfflineMailDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

AllOfflineMailDBResponse::AllOfflineMailDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllOfflineMailDBResponse::InitAsDefaultInstance() {
}

AllOfflineMailDBResponse::AllOfflineMailDBResponse(const AllOfflineMailDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllOfflineMailDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllOfflineMailDBResponse::~AllOfflineMailDBResponse() {
  SharedDtor();
}

void AllOfflineMailDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllOfflineMailDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllOfflineMailDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllOfflineMailDBResponse_descriptor_;
}

const AllOfflineMailDBResponse& AllOfflineMailDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllOfflineMailDBResponse* AllOfflineMailDBResponse::default_instance_ = NULL;

AllOfflineMailDBResponse* AllOfflineMailDBResponse::New() const {
  return new AllOfflineMailDBResponse;
}

void AllOfflineMailDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllOfflineMailDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.OfflineMailDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllOfflineMailDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .ProtoBuf.OfflineMailDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllOfflineMailDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .ProtoBuf.OfflineMailDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllOfflineMailDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .ProtoBuf.OfflineMailDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllOfflineMailDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllOfflineMailDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllOfflineMailDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllOfflineMailDBResponse::MergeFrom(const AllOfflineMailDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllOfflineMailDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllOfflineMailDBResponse::CopyFrom(const AllOfflineMailDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllOfflineMailDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void AllOfflineMailDBResponse::Swap(AllOfflineMailDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllOfflineMailDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllOfflineMailDBResponse_descriptor_;
  metadata.reflection = AllOfflineMailDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradingMailDBInfo::kCharIDFieldNumber;
const int TradingMailDBInfo::kDataFieldNumber;
#endif  // !_MSC_VER

TradingMailDBInfo::TradingMailDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradingMailDBInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::ProtoBuf::MailInfo*>(&::ProtoBuf::MailInfo::default_instance());
}

TradingMailDBInfo::TradingMailDBInfo(const TradingMailDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradingMailDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradingMailDBInfo::~TradingMailDBInfo() {
  SharedDtor();
}

void TradingMailDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void TradingMailDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradingMailDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingMailDBInfo_descriptor_;
}

const TradingMailDBInfo& TradingMailDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

TradingMailDBInfo* TradingMailDBInfo::default_instance_ = NULL;

TradingMailDBInfo* TradingMailDBInfo::New() const {
  return new TradingMailDBInfo;
}

void TradingMailDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::ProtoBuf::MailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradingMailDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .ProtoBuf.MailInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradingMailDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // required .ProtoBuf.MailInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradingMailDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // required .ProtoBuf.MailInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradingMailDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required .ProtoBuf.MailInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradingMailDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradingMailDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradingMailDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradingMailDBInfo::MergeFrom(const TradingMailDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::ProtoBuf::MailInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradingMailDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingMailDBInfo::CopyFrom(const TradingMailDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingMailDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void TradingMailDBInfo::Swap(TradingMailDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradingMailDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradingMailDBInfo_descriptor_;
  metadata.reflection = TradingMailDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllTradingMailDBRequest::kOffsetFieldNumber;
const int AllTradingMailDBRequest::kRetnumFieldNumber;
#endif  // !_MSC_VER

AllTradingMailDBRequest::AllTradingMailDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllTradingMailDBRequest::InitAsDefaultInstance() {
}

AllTradingMailDBRequest::AllTradingMailDBRequest(const AllTradingMailDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllTradingMailDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  retnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllTradingMailDBRequest::~AllTradingMailDBRequest() {
  SharedDtor();
}

void AllTradingMailDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllTradingMailDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTradingMailDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllTradingMailDBRequest_descriptor_;
}

const AllTradingMailDBRequest& AllTradingMailDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllTradingMailDBRequest* AllTradingMailDBRequest::default_instance_ = NULL;

AllTradingMailDBRequest* AllTradingMailDBRequest::New() const {
  return new AllTradingMailDBRequest;
}

void AllTradingMailDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    retnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllTradingMailDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retnum;
        break;
      }

      // required int32 retnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retnum_)));
          set_has_retnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllTradingMailDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllTradingMailDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllTradingMailDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 retnum = 2;
    if (has_retnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTradingMailDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllTradingMailDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllTradingMailDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllTradingMailDBRequest::MergeFrom(const AllTradingMailDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_retnum()) {
      set_retnum(from.retnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllTradingMailDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTradingMailDBRequest::CopyFrom(const AllTradingMailDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTradingMailDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllTradingMailDBRequest::Swap(AllTradingMailDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(retnum_, other->retnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllTradingMailDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllTradingMailDBRequest_descriptor_;
  metadata.reflection = AllTradingMailDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllTradingMailDBResponse::kRetcodeFieldNumber;
const int AllTradingMailDBResponse::kOffsetFieldNumber;
const int AllTradingMailDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

AllTradingMailDBResponse::AllTradingMailDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllTradingMailDBResponse::InitAsDefaultInstance() {
}

AllTradingMailDBResponse::AllTradingMailDBResponse(const AllTradingMailDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllTradingMailDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllTradingMailDBResponse::~AllTradingMailDBResponse() {
  SharedDtor();
}

void AllTradingMailDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllTradingMailDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTradingMailDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllTradingMailDBResponse_descriptor_;
}

const AllTradingMailDBResponse& AllTradingMailDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllTradingMailDBResponse* AllTradingMailDBResponse::default_instance_ = NULL;

AllTradingMailDBResponse* AllTradingMailDBResponse::New() const {
  return new AllTradingMailDBResponse;
}

void AllTradingMailDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllTradingMailDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.TradingMailDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllTradingMailDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .ProtoBuf.TradingMailDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllTradingMailDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .ProtoBuf.TradingMailDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllTradingMailDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .ProtoBuf.TradingMailDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTradingMailDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllTradingMailDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllTradingMailDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllTradingMailDBResponse::MergeFrom(const AllTradingMailDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllTradingMailDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTradingMailDBResponse::CopyFrom(const AllTradingMailDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTradingMailDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void AllTradingMailDBResponse::Swap(AllTradingMailDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllTradingMailDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllTradingMailDBResponse_descriptor_;
  metadata.reflection = AllTradingMailDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMailDBRequest::kCharIDFieldNumber;
#endif  // !_MSC_VER

CharacterMailDBRequest::CharacterMailDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMailDBRequest::InitAsDefaultInstance() {
}

CharacterMailDBRequest::CharacterMailDBRequest(const CharacterMailDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMailDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMailDBRequest::~CharacterMailDBRequest() {
  SharedDtor();
}

void CharacterMailDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMailDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMailDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMailDBRequest_descriptor_;
}

const CharacterMailDBRequest& CharacterMailDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterMailDBRequest* CharacterMailDBRequest::default_instance_ = NULL;

CharacterMailDBRequest* CharacterMailDBRequest::New() const {
  return new CharacterMailDBRequest;
}

void CharacterMailDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMailDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMailDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMailDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMailDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMailDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMailDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMailDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMailDBRequest::MergeFrom(const CharacterMailDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMailDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMailDBRequest::CopyFrom(const CharacterMailDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMailDBRequest::IsInitialized() const {

  return true;
}

void CharacterMailDBRequest::Swap(CharacterMailDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMailDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMailDBRequest_descriptor_;
  metadata.reflection = CharacterMailDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMailDBResponse::kCharIDFieldNumber;
const int CharacterMailDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

CharacterMailDBResponse::CharacterMailDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMailDBResponse::InitAsDefaultInstance() {
}

CharacterMailDBResponse::CharacterMailDBResponse(const CharacterMailDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMailDBResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMailDBResponse::~CharacterMailDBResponse() {
  SharedDtor();
}

void CharacterMailDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMailDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMailDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMailDBResponse_descriptor_;
}

const CharacterMailDBResponse& CharacterMailDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterMailDBResponse* CharacterMailDBResponse::default_instance_ = NULL;

CharacterMailDBResponse* CharacterMailDBResponse::New() const {
  return new CharacterMailDBResponse;
}

void CharacterMailDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMailDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.MailInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMailDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .ProtoBuf.MailInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMailDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .ProtoBuf.MailInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMailDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .ProtoBuf.MailInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMailDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMailDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMailDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMailDBResponse::MergeFrom(const CharacterMailDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMailDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMailDBResponse::CopyFrom(const CharacterMailDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMailDBResponse::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterMailDBResponse::Swap(CharacterMailDBResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMailDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMailDBResponse_descriptor_;
  metadata.reflection = CharacterMailDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailDBInfo::kCharIDFieldNumber;
const int MailDBInfo::kDataFieldNumber;
const int MailDBInfo::kDeleteMailIdsFieldNumber;
#endif  // !_MSC_VER

MailDBInfo::MailDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailDBInfo::InitAsDefaultInstance() {
}

MailDBInfo::MailDBInfo(const MailDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailDBInfo::~MailDBInfo() {
  SharedDtor();
}

void MailDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailDBInfo_descriptor_;
}

const MailDBInfo& MailDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

MailDBInfo* MailDBInfo::default_instance_ = NULL;

MailDBInfo* MailDBInfo::New() const {
  return new MailDBInfo;
}

void MailDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  data_.Clear();
  deletemailids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .ProtoBuf.MailInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_deleteMailIds;
        break;
      }

      // repeated uint32 deleteMailIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleteMailIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_deletemailids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_deletemailids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deleteMailIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .ProtoBuf.MailInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // repeated uint32 deleteMailIds = 3;
  for (int i = 0; i < this->deletemailids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->deletemailids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .ProtoBuf.MailInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // repeated uint32 deleteMailIds = 3;
  for (int i = 0; i < this->deletemailids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->deletemailids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .ProtoBuf.MailInfo data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated uint32 deleteMailIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletemailids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->deletemailids(i));
    }
    total_size += 1 * this->deletemailids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailDBInfo::MergeFrom(const MailDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  deletemailids_.MergeFrom(from.deletemailids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailDBInfo::CopyFrom(const MailDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void MailDBInfo::Swap(MailDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    data_.Swap(&other->data_);
    deletemailids_.Swap(&other->deletemailids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailDBInfo_descriptor_;
  metadata.reflection = MailDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveMailDBRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveMailDBRequest::SaveMailDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveMailDBRequest::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::MailDBInfo*>(&::ProtoBuf::MailDBInfo::default_instance());
}

SaveMailDBRequest::SaveMailDBRequest(const SaveMailDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveMailDBRequest::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveMailDBRequest::~SaveMailDBRequest() {
  SharedDtor();
}

void SaveMailDBRequest::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SaveMailDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveMailDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveMailDBRequest_descriptor_;
}

const SaveMailDBRequest& SaveMailDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

SaveMailDBRequest* SaveMailDBRequest::default_instance_ = NULL;

SaveMailDBRequest* SaveMailDBRequest::New() const {
  return new SaveMailDBRequest;
}

void SaveMailDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::MailDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveMailDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.MailDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveMailDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.MailDBInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveMailDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.MailDBInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveMailDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.MailDBInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveMailDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveMailDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveMailDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveMailDBRequest::MergeFrom(const SaveMailDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::MailDBInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveMailDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveMailDBRequest::CopyFrom(const SaveMailDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMailDBRequest::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SaveMailDBRequest::Swap(SaveMailDBRequest* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveMailDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveMailDBRequest_descriptor_;
  metadata.reflection = SaveMailDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveOfflineDBRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveOfflineDBRequest::SaveOfflineDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveOfflineDBRequest::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::OfflineMailDBInfo*>(&::ProtoBuf::OfflineMailDBInfo::default_instance());
}

SaveOfflineDBRequest::SaveOfflineDBRequest(const SaveOfflineDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveOfflineDBRequest::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveOfflineDBRequest::~SaveOfflineDBRequest() {
  SharedDtor();
}

void SaveOfflineDBRequest::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SaveOfflineDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveOfflineDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveOfflineDBRequest_descriptor_;
}

const SaveOfflineDBRequest& SaveOfflineDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

SaveOfflineDBRequest* SaveOfflineDBRequest::default_instance_ = NULL;

SaveOfflineDBRequest* SaveOfflineDBRequest::New() const {
  return new SaveOfflineDBRequest;
}

void SaveOfflineDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::OfflineMailDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveOfflineDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBuf.OfflineMailDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveOfflineDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBuf.OfflineMailDBInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveOfflineDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBuf.OfflineMailDBInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveOfflineDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBuf.OfflineMailDBInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveOfflineDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveOfflineDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveOfflineDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveOfflineDBRequest::MergeFrom(const SaveOfflineDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::OfflineMailDBInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveOfflineDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveOfflineDBRequest::CopyFrom(const SaveOfflineDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOfflineDBRequest::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SaveOfflineDBRequest::Swap(SaveOfflineDBRequest* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveOfflineDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveOfflineDBRequest_descriptor_;
  metadata.reflection = SaveOfflineDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MaxMailIDRequest::MaxMailIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxMailIDRequest::InitAsDefaultInstance() {
}

MaxMailIDRequest::MaxMailIDRequest(const MaxMailIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxMailIDRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxMailIDRequest::~MaxMailIDRequest() {
  SharedDtor();
}

void MaxMailIDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxMailIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxMailIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxMailIDRequest_descriptor_;
}

const MaxMailIDRequest& MaxMailIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

MaxMailIDRequest* MaxMailIDRequest::default_instance_ = NULL;

MaxMailIDRequest* MaxMailIDRequest::New() const {
  return new MaxMailIDRequest;
}

void MaxMailIDRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxMailIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MaxMailIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxMailIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxMailIDRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxMailIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxMailIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxMailIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxMailIDRequest::MergeFrom(const MaxMailIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxMailIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxMailIDRequest::CopyFrom(const MaxMailIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxMailIDRequest::IsInitialized() const {

  return true;
}

void MaxMailIDRequest::Swap(MaxMailIDRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxMailIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxMailIDRequest_descriptor_;
  metadata.reflection = MaxMailIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaxMailIDResponse::kMaxMailIdFieldNumber;
#endif  // !_MSC_VER

MaxMailIDResponse::MaxMailIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxMailIDResponse::InitAsDefaultInstance() {
}

MaxMailIDResponse::MaxMailIDResponse(const MaxMailIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxMailIDResponse::SharedCtor() {
  _cached_size_ = 0;
  maxmailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxMailIDResponse::~MaxMailIDResponse() {
  SharedDtor();
}

void MaxMailIDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxMailIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxMailIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxMailIDResponse_descriptor_;
}

const MaxMailIDResponse& MaxMailIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

MaxMailIDResponse* MaxMailIDResponse::default_instance_ = NULL;

MaxMailIDResponse* MaxMailIDResponse::New() const {
  return new MaxMailIDResponse;
}

void MaxMailIDResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxmailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxMailIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxMailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmailid_)));
          set_has_maxmailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaxMailIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 maxMailId = 1;
  if (has_maxmailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxmailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxMailIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 maxMailId = 1;
  if (has_maxmailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxmailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxMailIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 maxMailId = 1;
    if (has_maxmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxMailIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxMailIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxMailIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxMailIDResponse::MergeFrom(const MaxMailIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxmailid()) {
      set_maxmailid(from.maxmailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxMailIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxMailIDResponse::CopyFrom(const MaxMailIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxMailIDResponse::IsInitialized() const {

  return true;
}

void MaxMailIDResponse::Swap(MaxMailIDResponse* other) {
  if (other != this) {
    std::swap(maxmailid_, other->maxmailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxMailIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxMailIDResponse_descriptor_;
  metadata.reflection = MaxMailIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCharacterMail::kCharIDFieldNumber;
#endif  // !_MSC_VER

DeleteCharacterMail::DeleteCharacterMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteCharacterMail::InitAsDefaultInstance() {
}

DeleteCharacterMail::DeleteCharacterMail(const DeleteCharacterMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteCharacterMail::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCharacterMail::~DeleteCharacterMail() {
  SharedDtor();
}

void DeleteCharacterMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteCharacterMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCharacterMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCharacterMail_descriptor_;
}

const DeleteCharacterMail& DeleteCharacterMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

DeleteCharacterMail* DeleteCharacterMail::default_instance_ = NULL;

DeleteCharacterMail* DeleteCharacterMail::New() const {
  return new DeleteCharacterMail;
}

void DeleteCharacterMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteCharacterMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteCharacterMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteCharacterMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteCharacterMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCharacterMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteCharacterMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteCharacterMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteCharacterMail::MergeFrom(const DeleteCharacterMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteCharacterMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCharacterMail::CopyFrom(const DeleteCharacterMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCharacterMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteCharacterMail::Swap(DeleteCharacterMail* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteCharacterMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCharacterMail_descriptor_;
  metadata.reflection = DeleteCharacterMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMallDBRequest::kCharidFieldNumber;
#endif  // !_MSC_VER

CharacterMallDBRequest::CharacterMallDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMallDBRequest::InitAsDefaultInstance() {
}

CharacterMallDBRequest::CharacterMallDBRequest(const CharacterMallDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMallDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMallDBRequest::~CharacterMallDBRequest() {
  SharedDtor();
}

void CharacterMallDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMallDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMallDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMallDBRequest_descriptor_;
}

const CharacterMallDBRequest& CharacterMallDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterMallDBRequest* CharacterMallDBRequest::default_instance_ = NULL;

CharacterMallDBRequest* CharacterMallDBRequest::New() const {
  return new CharacterMallDBRequest;
}

void CharacterMallDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMallDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMallDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMallDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMallDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMallDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMallDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMallDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMallDBRequest::MergeFrom(const CharacterMallDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMallDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMallDBRequest::CopyFrom(const CharacterMallDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMallDBRequest::IsInitialized() const {

  return true;
}

void CharacterMallDBRequest::Swap(CharacterMallDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMallDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMallDBRequest_descriptor_;
  metadata.reflection = CharacterMallDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMallDBResponse::kRetcodeFieldNumber;
const int CharacterMallDBResponse::kCharidFieldNumber;
const int CharacterMallDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

CharacterMallDBResponse::CharacterMallDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMallDBResponse::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::AllMallDBData*>(&::ProtoBuf::AllMallDBData::default_instance());
}

CharacterMallDBResponse::CharacterMallDBResponse(const CharacterMallDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMallDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  charid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMallDBResponse::~CharacterMallDBResponse() {
  SharedDtor();
}

void CharacterMallDBResponse::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void CharacterMallDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMallDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMallDBResponse_descriptor_;
}

const CharacterMallDBResponse& CharacterMallDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterMallDBResponse* CharacterMallDBResponse::default_instance_ = NULL;

CharacterMallDBResponse* CharacterMallDBResponse::New() const {
  return new CharacterMallDBResponse;
}

void CharacterMallDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    charid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::AllMallDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMallDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.AllMallDBData info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMallDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional .ProtoBuf.AllMallDBData info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMallDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional .ProtoBuf.AllMallDBData info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMallDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .ProtoBuf.AllMallDBData info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMallDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMallDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMallDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMallDBResponse::MergeFrom(const CharacterMallDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::AllMallDBData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMallDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMallDBResponse::CopyFrom(const CharacterMallDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMallDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CharacterMallDBResponse::Swap(CharacterMallDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMallDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMallDBResponse_descriptor_;
  metadata.reflection = CharacterMallDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMallDBSaveReq::kDataFieldNumber;
#endif  // !_MSC_VER

CharacterMallDBSaveReq::CharacterMallDBSaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMallDBSaveReq::InitAsDefaultInstance() {
}

CharacterMallDBSaveReq::CharacterMallDBSaveReq(const CharacterMallDBSaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMallDBSaveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMallDBSaveReq::~CharacterMallDBSaveReq() {
  SharedDtor();
}

void CharacterMallDBSaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMallDBSaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMallDBSaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMallDBSaveReq_descriptor_;
}

const CharacterMallDBSaveReq& CharacterMallDBSaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterMallDBSaveReq* CharacterMallDBSaveReq::default_instance_ = NULL;

CharacterMallDBSaveReq* CharacterMallDBSaveReq::New() const {
  return new CharacterMallDBSaveReq;
}

void CharacterMallDBSaveReq::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMallDBSaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.SingleCharacterMallDB data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMallDBSaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.SingleCharacterMallDB data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMallDBSaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.SingleCharacterMallDB data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMallDBSaveReq::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.SingleCharacterMallDB data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMallDBSaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMallDBSaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMallDBSaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMallDBSaveReq::MergeFrom(const CharacterMallDBSaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMallDBSaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMallDBSaveReq::CopyFrom(const CharacterMallDBSaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMallDBSaveReq::IsInitialized() const {

  return true;
}

void CharacterMallDBSaveReq::Swap(CharacterMallDBSaveReq* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMallDBSaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMallDBSaveReq_descriptor_;
  metadata.reflection = CharacterMallDBSaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBSetRequest::kTypeIdFieldNumber;
const int GlobalDBSetRequest::kDataFieldNumber;
#endif  // !_MSC_VER

GlobalDBSetRequest::GlobalDBSetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBSetRequest::InitAsDefaultInstance() {
}

GlobalDBSetRequest::GlobalDBSetRequest(const GlobalDBSetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBSetRequest::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBSetRequest::~GlobalDBSetRequest() {
  SharedDtor();
}

void GlobalDBSetRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalDBSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBSetRequest_descriptor_;
}

const GlobalDBSetRequest& GlobalDBSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

GlobalDBSetRequest* GlobalDBSetRequest::default_instance_ = NULL;

GlobalDBSetRequest* GlobalDBSetRequest::New() const {
  return new GlobalDBSetRequest;
}

void GlobalDBSetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBSetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBSetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBSetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBSetRequest::MergeFrom(const GlobalDBSetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBSetRequest::CopyFrom(const GlobalDBSetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBSetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GlobalDBSetRequest::Swap(GlobalDBSetRequest* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBSetRequest_descriptor_;
  metadata.reflection = GlobalDBSetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBSetResponse::kRetcodeFieldNumber;
const int GlobalDBSetResponse::kTypeIdFieldNumber;
#endif  // !_MSC_VER

GlobalDBSetResponse::GlobalDBSetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBSetResponse::InitAsDefaultInstance() {
}

GlobalDBSetResponse::GlobalDBSetResponse(const GlobalDBSetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBSetResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBSetResponse::~GlobalDBSetResponse() {
  SharedDtor();
}

void GlobalDBSetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBSetResponse_descriptor_;
}

const GlobalDBSetResponse& GlobalDBSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

GlobalDBSetResponse* GlobalDBSetResponse::default_instance_ = NULL;

GlobalDBSetResponse* GlobalDBSetResponse::New() const {
  return new GlobalDBSetResponse;
}

void GlobalDBSetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // required int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBSetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBSetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBSetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBSetResponse::MergeFrom(const GlobalDBSetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBSetResponse::CopyFrom(const GlobalDBSetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBSetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GlobalDBSetResponse::Swap(GlobalDBSetResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBSetResponse_descriptor_;
  metadata.reflection = GlobalDBSetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllCharacterCampOfflineDBReq::kOffsetFieldNumber;
const int AllCharacterCampOfflineDBReq::kRetnumFieldNumber;
#endif  // !_MSC_VER

AllCharacterCampOfflineDBReq::AllCharacterCampOfflineDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllCharacterCampOfflineDBReq::InitAsDefaultInstance() {
}

AllCharacterCampOfflineDBReq::AllCharacterCampOfflineDBReq(const AllCharacterCampOfflineDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllCharacterCampOfflineDBReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  retnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllCharacterCampOfflineDBReq::~AllCharacterCampOfflineDBReq() {
  SharedDtor();
}

void AllCharacterCampOfflineDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllCharacterCampOfflineDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllCharacterCampOfflineDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllCharacterCampOfflineDBReq_descriptor_;
}

const AllCharacterCampOfflineDBReq& AllCharacterCampOfflineDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllCharacterCampOfflineDBReq* AllCharacterCampOfflineDBReq::default_instance_ = NULL;

AllCharacterCampOfflineDBReq* AllCharacterCampOfflineDBReq::New() const {
  return new AllCharacterCampOfflineDBReq;
}

void AllCharacterCampOfflineDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    retnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllCharacterCampOfflineDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retnum;
        break;
      }

      // required int32 retnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retnum_)));
          set_has_retnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllCharacterCampOfflineDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllCharacterCampOfflineDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllCharacterCampOfflineDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 retnum = 2;
    if (has_retnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllCharacterCampOfflineDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllCharacterCampOfflineDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllCharacterCampOfflineDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllCharacterCampOfflineDBReq::MergeFrom(const AllCharacterCampOfflineDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_retnum()) {
      set_retnum(from.retnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllCharacterCampOfflineDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllCharacterCampOfflineDBReq::CopyFrom(const AllCharacterCampOfflineDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllCharacterCampOfflineDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllCharacterCampOfflineDBReq::Swap(AllCharacterCampOfflineDBReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(retnum_, other->retnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllCharacterCampOfflineDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllCharacterCampOfflineDBReq_descriptor_;
  metadata.reflection = AllCharacterCampOfflineDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllCharacterCampOfflineDBRsp::kRetcodeFieldNumber;
const int AllCharacterCampOfflineDBRsp::kOffsetFieldNumber;
const int AllCharacterCampOfflineDBRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

AllCharacterCampOfflineDBRsp::AllCharacterCampOfflineDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllCharacterCampOfflineDBRsp::InitAsDefaultInstance() {
}

AllCharacterCampOfflineDBRsp::AllCharacterCampOfflineDBRsp(const AllCharacterCampOfflineDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllCharacterCampOfflineDBRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllCharacterCampOfflineDBRsp::~AllCharacterCampOfflineDBRsp() {
  SharedDtor();
}

void AllCharacterCampOfflineDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllCharacterCampOfflineDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllCharacterCampOfflineDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllCharacterCampOfflineDBRsp_descriptor_;
}

const AllCharacterCampOfflineDBRsp& AllCharacterCampOfflineDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

AllCharacterCampOfflineDBRsp* AllCharacterCampOfflineDBRsp::default_instance_ = NULL;

AllCharacterCampOfflineDBRsp* AllCharacterCampOfflineDBRsp::New() const {
  return new AllCharacterCampOfflineDBRsp;
}

void AllCharacterCampOfflineDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllCharacterCampOfflineDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ProtoBuf.CharacterCampDBData info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllCharacterCampOfflineDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .ProtoBuf.CharacterCampDBData info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllCharacterCampOfflineDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .ProtoBuf.CharacterCampDBData info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllCharacterCampOfflineDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .ProtoBuf.CharacterCampDBData info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllCharacterCampOfflineDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllCharacterCampOfflineDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllCharacterCampOfflineDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllCharacterCampOfflineDBRsp::MergeFrom(const AllCharacterCampOfflineDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllCharacterCampOfflineDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllCharacterCampOfflineDBRsp::CopyFrom(const AllCharacterCampOfflineDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllCharacterCampOfflineDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllCharacterCampOfflineDBRsp::Swap(AllCharacterCampOfflineDBRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllCharacterCampOfflineDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllCharacterCampOfflineDBRsp_descriptor_;
  metadata.reflection = AllCharacterCampOfflineDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterCampDBReq::kCharidFieldNumber;
#endif  // !_MSC_VER

CharacterCampDBReq::CharacterCampDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterCampDBReq::InitAsDefaultInstance() {
}

CharacterCampDBReq::CharacterCampDBReq(const CharacterCampDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterCampDBReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterCampDBReq::~CharacterCampDBReq() {
  SharedDtor();
}

void CharacterCampDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterCampDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterCampDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterCampDBReq_descriptor_;
}

const CharacterCampDBReq& CharacterCampDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterCampDBReq* CharacterCampDBReq::default_instance_ = NULL;

CharacterCampDBReq* CharacterCampDBReq::New() const {
  return new CharacterCampDBReq;
}

void CharacterCampDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterCampDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterCampDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterCampDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterCampDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterCampDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterCampDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterCampDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterCampDBReq::MergeFrom(const CharacterCampDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterCampDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterCampDBReq::CopyFrom(const CharacterCampDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterCampDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CharacterCampDBReq::Swap(CharacterCampDBReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterCampDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterCampDBReq_descriptor_;
  metadata.reflection = CharacterCampDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterCampDBRsp::kRetcodeFieldNumber;
const int CharacterCampDBRsp::kCharidFieldNumber;
const int CharacterCampDBRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

CharacterCampDBRsp::CharacterCampDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterCampDBRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBuf::CharacterCampDBData*>(&::ProtoBuf::CharacterCampDBData::default_instance());
}

CharacterCampDBRsp::CharacterCampDBRsp(const CharacterCampDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterCampDBRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  charid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterCampDBRsp::~CharacterCampDBRsp() {
  SharedDtor();
}

void CharacterCampDBRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void CharacterCampDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterCampDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterCampDBRsp_descriptor_;
}

const CharacterCampDBRsp& CharacterCampDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterCampDBRsp* CharacterCampDBRsp::default_instance_ = NULL;

CharacterCampDBRsp* CharacterCampDBRsp::New() const {
  return new CharacterCampDBRsp;
}

void CharacterCampDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    charid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBuf::CharacterCampDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterCampDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .ProtoBuf.CharacterCampDBData info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterCampDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional .ProtoBuf.CharacterCampDBData info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterCampDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional .ProtoBuf.CharacterCampDBData info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterCampDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .ProtoBuf.CharacterCampDBData info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterCampDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterCampDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterCampDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterCampDBRsp::MergeFrom(const CharacterCampDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBuf::CharacterCampDBData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterCampDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterCampDBRsp::CopyFrom(const CharacterCampDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterCampDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharacterCampDBRsp::Swap(CharacterCampDBRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterCampDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterCampDBRsp_descriptor_;
  metadata.reflection = CharacterCampDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterCampDBSetRequest::kDataFieldNumber;
#endif  // !_MSC_VER

CharacterCampDBSetRequest::CharacterCampDBSetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterCampDBSetRequest::InitAsDefaultInstance() {
}

CharacterCampDBSetRequest::CharacterCampDBSetRequest(const CharacterCampDBSetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterCampDBSetRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterCampDBSetRequest::~CharacterCampDBSetRequest() {
  SharedDtor();
}

void CharacterCampDBSetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterCampDBSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterCampDBSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterCampDBSetRequest_descriptor_;
}

const CharacterCampDBSetRequest& CharacterCampDBSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterCampDBSetRequest* CharacterCampDBSetRequest::default_instance_ = NULL;

CharacterCampDBSetRequest* CharacterCampDBSetRequest::New() const {
  return new CharacterCampDBSetRequest;
}

void CharacterCampDBSetRequest::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterCampDBSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterCampDBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterCampDBSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterCampDBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterCampDBSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterCampDBData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterCampDBSetRequest::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CharacterCampDBData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterCampDBSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterCampDBSetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterCampDBSetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterCampDBSetRequest::MergeFrom(const CharacterCampDBSetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterCampDBSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterCampDBSetRequest::CopyFrom(const CharacterCampDBSetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterCampDBSetRequest::IsInitialized() const {

  return true;
}

void CharacterCampDBSetRequest::Swap(CharacterCampDBSetRequest* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterCampDBSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterCampDBSetRequest_descriptor_;
  metadata.reflection = CharacterCampDBSetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterListRequest::kRequestidFieldNumber;
const int CharacterListRequest::kGroupidFieldNumber;
const int CharacterListRequest::kChannelidFieldNumber;
const int CharacterListRequest::kUseridFieldNumber;
const int CharacterListRequest::kChannelUserIdFieldNumber;
#endif  // !_MSC_VER

CharacterListRequest::CharacterListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterListRequest::InitAsDefaultInstance() {
}

CharacterListRequest::CharacterListRequest(const CharacterListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterListRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0u;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterListRequest::~CharacterListRequest() {
  SharedDtor();
}

void CharacterListRequest::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void CharacterListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterListRequest_descriptor_;
}

const CharacterListRequest& CharacterListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterListRequest* CharacterListRequest::default_instance_ = NULL;

CharacterListRequest* CharacterListRequest::New() const {
  return new CharacterListRequest;
}

void CharacterListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = GOOGLE_ULONGLONG(0);
    groupid_ = 0u;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 requestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->requestid(), output);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->requestid(), target);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelid(), target);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 requestid = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // required uint32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required string channelid = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string channel_user_id = 5;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterListRequest::MergeFrom(const CharacterListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterListRequest::CopyFrom(const CharacterListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CharacterListRequest::Swap(CharacterListRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(groupid_, other->groupid_);
    std::swap(channelid_, other->channelid_);
    std::swap(userid_, other->userid_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterListRequest_descriptor_;
  metadata.reflection = CharacterListRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CharacterListResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterListResponse_Result_descriptor_;
}
bool CharacterListResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterListResponse_Result CharacterListResponse::SUCCESS;
const CharacterListResponse_Result CharacterListResponse::FAILED;
const CharacterListResponse_Result CharacterListResponse::UNKNOW;
const CharacterListResponse_Result CharacterListResponse::Result_MIN;
const CharacterListResponse_Result CharacterListResponse::Result_MAX;
const int CharacterListResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CharacterListResponse::kResultFieldNumber;
const int CharacterListResponse::kRequestidFieldNumber;
const int CharacterListResponse::kCharInfoListFieldNumber;
#endif  // !_MSC_VER

CharacterListResponse::CharacterListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterListResponse::InitAsDefaultInstance() {
}

CharacterListResponse::CharacterListResponse(const CharacterListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterListResponse::~CharacterListResponse() {
  SharedDtor();
}

void CharacterListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterListResponse_descriptor_;
}

const CharacterListResponse& CharacterListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterListResponse* CharacterListResponse::default_instance_ = NULL;

CharacterListResponse* CharacterListResponse::New() const {
  return new CharacterListResponse;
}

void CharacterListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    requestid_ = GOOGLE_ULONGLONG(0);
  }
  charinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.CharacterListResponse.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::CharacterListResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::CharacterListResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requestid;
        break;
      }

      // required uint64 requestid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charInfoList;
        break;
      }

      // repeated .ProtoBuf.CharacterDBInfo charInfoList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.CharacterListResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->requestid(), output);
  }

  // repeated .ProtoBuf.CharacterDBInfo charInfoList = 3;
  for (int i = 0; i < this->charinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->charinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.CharacterListResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->requestid(), target);
  }

  // repeated .ProtoBuf.CharacterDBInfo charInfoList = 3;
  for (int i = 0; i < this->charinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->charinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.CharacterListResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint64 requestid = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

  }
  // repeated .ProtoBuf.CharacterDBInfo charInfoList = 3;
  total_size += 1 * this->charinfolist_size();
  for (int i = 0; i < this->charinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterListResponse::MergeFrom(const CharacterListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  charinfolist_.MergeFrom(from.charinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterListResponse::CopyFrom(const CharacterListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < charinfolist_size(); i++) {
    if (!this->charinfolist(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterListResponse::Swap(CharacterListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(requestid_, other->requestid_);
    charinfolist_.Swap(&other->charinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterListResponse_descriptor_;
  metadata.reflection = CharacterListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateCharacterRequest::kRequestidFieldNumber;
const int CreateCharacterRequest::kGroupidFieldNumber;
const int CreateCharacterRequest::kChannelidFieldNumber;
const int CreateCharacterRequest::kNameFieldNumber;
const int CreateCharacterRequest::kUseridFieldNumber;
const int CreateCharacterRequest::kChannelUserIdFieldNumber;
const int CreateCharacterRequest::kCharInfoFieldNumber;
#endif  // !_MSC_VER

CreateCharacterRequest::CreateCharacterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateCharacterRequest::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::ProtoBuf::CharacterDBInfo*>(&::ProtoBuf::CharacterDBInfo::default_instance());
}

CreateCharacterRequest::CreateCharacterRequest(const CreateCharacterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateCharacterRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0u;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCharacterRequest::~CreateCharacterRequest() {
  SharedDtor();
}

void CreateCharacterRequest::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void CreateCharacterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCharacterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCharacterRequest_descriptor_;
}

const CreateCharacterRequest& CreateCharacterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CreateCharacterRequest* CreateCharacterRequest::default_instance_ = NULL;

CreateCharacterRequest* CreateCharacterRequest::New() const {
  return new CreateCharacterRequest;
}

void CreateCharacterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = GOOGLE_ULONGLONG(0);
    groupid_ = 0u;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateCharacterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 requestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userid;
        break;
      }

      // required string userid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_charInfo;
        break;
      }

      // required .ProtoBuf.CharacterDBInfo charInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateCharacterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->requestid(), output);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelid(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required string userid = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // required string channel_user_id = 6;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel_user_id(), output);
  }

  // required .ProtoBuf.CharacterDBInfo charInfo = 7;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->charinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateCharacterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->requestid(), target);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelid(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string userid = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // required string channel_user_id = 6;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel_user_id(), target);
  }

  // required .ProtoBuf.CharacterDBInfo charInfo = 7;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->charinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateCharacterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 requestid = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // required uint32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required string channelid = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string userid = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string channel_user_id = 6;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required .ProtoBuf.CharacterDBInfo charInfo = 7;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCharacterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateCharacterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateCharacterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCharacterRequest::MergeFrom(const CreateCharacterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::ProtoBuf::CharacterDBInfo::MergeFrom(from.charinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateCharacterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCharacterRequest::CopyFrom(const CreateCharacterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCharacterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void CreateCharacterRequest::Swap(CreateCharacterRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(groupid_, other->groupid_);
    std::swap(channelid_, other->channelid_);
    std::swap(name_, other->name_);
    std::swap(userid_, other->userid_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateCharacterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCharacterRequest_descriptor_;
  metadata.reflection = CreateCharacterRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CreateCharacterResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCharacterResponse_Result_descriptor_;
}
bool CreateCharacterResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreateCharacterResponse_Result CreateCharacterResponse::SUCCESS;
const CreateCharacterResponse_Result CreateCharacterResponse::NAME_EXISTS;
const CreateCharacterResponse_Result CreateCharacterResponse::TOO_MANAY_CHARACTER;
const CreateCharacterResponse_Result CreateCharacterResponse::UNKNOW;
const CreateCharacterResponse_Result CreateCharacterResponse::Result_MIN;
const CreateCharacterResponse_Result CreateCharacterResponse::Result_MAX;
const int CreateCharacterResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreateCharacterResponse::kResultFieldNumber;
const int CreateCharacterResponse::kRequestidFieldNumber;
const int CreateCharacterResponse::kCharInfoFieldNumber;
#endif  // !_MSC_VER

CreateCharacterResponse::CreateCharacterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateCharacterResponse::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::ProtoBuf::CharacterDBInfo*>(&::ProtoBuf::CharacterDBInfo::default_instance());
}

CreateCharacterResponse::CreateCharacterResponse(const CreateCharacterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateCharacterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  charinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCharacterResponse::~CreateCharacterResponse() {
  SharedDtor();
}

void CreateCharacterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void CreateCharacterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCharacterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCharacterResponse_descriptor_;
}

const CreateCharacterResponse& CreateCharacterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CreateCharacterResponse* CreateCharacterResponse::default_instance_ = NULL;

CreateCharacterResponse* CreateCharacterResponse::New() const {
  return new CreateCharacterResponse;
}

void CreateCharacterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    requestid_ = GOOGLE_ULONGLONG(0);
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateCharacterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.CreateCharacterResponse.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::CreateCharacterResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::CreateCharacterResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requestid;
        break;
      }

      // required uint64 requestid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charInfo;
        break;
      }

      // optional .ProtoBuf.CharacterDBInfo charInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateCharacterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.CreateCharacterResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->requestid(), output);
  }

  // optional .ProtoBuf.CharacterDBInfo charInfo = 3;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->charinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateCharacterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.CreateCharacterResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->requestid(), target);
  }

  // optional .ProtoBuf.CharacterDBInfo charInfo = 3;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->charinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateCharacterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.CreateCharacterResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint64 requestid = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // optional .ProtoBuf.CharacterDBInfo charInfo = 3;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCharacterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateCharacterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateCharacterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCharacterResponse::MergeFrom(const CreateCharacterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::ProtoBuf::CharacterDBInfo::MergeFrom(from.charinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateCharacterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCharacterResponse::CopyFrom(const CreateCharacterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCharacterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void CreateCharacterResponse::Swap(CreateCharacterResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(requestid_, other->requestid_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateCharacterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCharacterResponse_descriptor_;
  metadata.reflection = CreateCharacterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterInfoRequest::kRequestidFieldNumber;
const int CharacterInfoRequest::kCharIDFieldNumber;
const int CharacterInfoRequest::kReqCharIDFieldNumber;
#endif  // !_MSC_VER

CharacterInfoRequest::CharacterInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterInfoRequest::InitAsDefaultInstance() {
}

CharacterInfoRequest::CharacterInfoRequest(const CharacterInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  charid_ = 0u;
  reqcharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInfoRequest::~CharacterInfoRequest() {
  SharedDtor();
}

void CharacterInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfoRequest_descriptor_;
}

const CharacterInfoRequest& CharacterInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterInfoRequest* CharacterInfoRequest::default_instance_ = NULL;

CharacterInfoRequest* CharacterInfoRequest::New() const {
  return new CharacterInfoRequest;
}

void CharacterInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = GOOGLE_ULONGLONG(0);
    charid_ = 0u;
    reqcharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 requestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // required uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reqCharID;
        break;
      }

      // required uint32 reqCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqcharid_)));
          set_has_reqcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->requestid(), output);
  }

  // required uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // required uint32 reqCharID = 3;
  if (has_reqcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reqcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->requestid(), target);
  }

  // required uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // required uint32 reqCharID = 3;
  if (has_reqcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reqcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 requestid = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // required uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // required uint32 reqCharID = 3;
    if (has_reqcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInfoRequest::MergeFrom(const CharacterInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_reqcharid()) {
      set_reqcharid(from.reqcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInfoRequest::CopyFrom(const CharacterInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CharacterInfoRequest::Swap(CharacterInfoRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(charid_, other->charid_);
    std::swap(reqcharid_, other->reqcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInfoRequest_descriptor_;
  metadata.reflection = CharacterInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CharacterInfoResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfoResponse_Result_descriptor_;
}
bool CharacterInfoResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterInfoResponse_Result CharacterInfoResponse::SUCCESS;
const CharacterInfoResponse_Result CharacterInfoResponse::NOT_EXIST;
const CharacterInfoResponse_Result CharacterInfoResponse::FAILED;
const CharacterInfoResponse_Result CharacterInfoResponse::UNKNOW;
const CharacterInfoResponse_Result CharacterInfoResponse::Result_MIN;
const CharacterInfoResponse_Result CharacterInfoResponse::Result_MAX;
const int CharacterInfoResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CharacterInfoResponse::kResultFieldNumber;
const int CharacterInfoResponse::kRequestidFieldNumber;
const int CharacterInfoResponse::kReqCharIDFieldNumber;
const int CharacterInfoResponse::kCharInfoFieldNumber;
#endif  // !_MSC_VER

CharacterInfoResponse::CharacterInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterInfoResponse::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::ProtoBuf::CharacterDBInfo*>(&::ProtoBuf::CharacterDBInfo::default_instance());
}

CharacterInfoResponse::CharacterInfoResponse(const CharacterInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  reqcharid_ = 0u;
  charinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInfoResponse::~CharacterInfoResponse() {
  SharedDtor();
}

void CharacterInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void CharacterInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfoResponse_descriptor_;
}

const CharacterInfoResponse& CharacterInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterInfoResponse* CharacterInfoResponse::default_instance_ = NULL;

CharacterInfoResponse* CharacterInfoResponse::New() const {
  return new CharacterInfoResponse;
}

void CharacterInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    requestid_ = GOOGLE_ULONGLONG(0);
    reqcharid_ = 0u;
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.CharacterInfoResponse.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::CharacterInfoResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::CharacterInfoResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requestid;
        break;
      }

      // required uint64 requestid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reqCharID;
        break;
      }

      // required uint32 reqCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqcharid_)));
          set_has_reqcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charInfo;
        break;
      }

      // optional .ProtoBuf.CharacterDBInfo charInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.CharacterInfoResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->requestid(), output);
  }

  // required uint32 reqCharID = 3;
  if (has_reqcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reqcharid(), output);
  }

  // optional .ProtoBuf.CharacterDBInfo charInfo = 4;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->charinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.CharacterInfoResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->requestid(), target);
  }

  // required uint32 reqCharID = 3;
  if (has_reqcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reqcharid(), target);
  }

  // optional .ProtoBuf.CharacterDBInfo charInfo = 4;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->charinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.CharacterInfoResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint64 requestid = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // required uint32 reqCharID = 3;
    if (has_reqcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqcharid());
    }

    // optional .ProtoBuf.CharacterDBInfo charInfo = 4;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInfoResponse::MergeFrom(const CharacterInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_reqcharid()) {
      set_reqcharid(from.reqcharid());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::ProtoBuf::CharacterDBInfo::MergeFrom(from.charinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInfoResponse::CopyFrom(const CharacterInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void CharacterInfoResponse::Swap(CharacterInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(requestid_, other->requestid_);
    std::swap(reqcharid_, other->reqcharid_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInfoResponse_descriptor_;
  metadata.reflection = CharacterInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterInfoUpdateRequest::kRequestidFieldNumber;
const int CharacterInfoUpdateRequest::kGroupidFieldNumber;
const int CharacterInfoUpdateRequest::kChannelidFieldNumber;
const int CharacterInfoUpdateRequest::kUseridFieldNumber;
const int CharacterInfoUpdateRequest::kChannelUserIdFieldNumber;
const int CharacterInfoUpdateRequest::kCharInfoFieldNumber;
#endif  // !_MSC_VER

CharacterInfoUpdateRequest::CharacterInfoUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterInfoUpdateRequest::InitAsDefaultInstance() {
  charinfo_ = const_cast< ::ProtoBuf::CharacterDBInfo*>(&::ProtoBuf::CharacterDBInfo::default_instance());
}

CharacterInfoUpdateRequest::CharacterInfoUpdateRequest(const CharacterInfoUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterInfoUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0u;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInfoUpdateRequest::~CharacterInfoUpdateRequest() {
  SharedDtor();
}

void CharacterInfoUpdateRequest::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
    delete charinfo_;
  }
}

void CharacterInfoUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInfoUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfoUpdateRequest_descriptor_;
}

const CharacterInfoUpdateRequest& CharacterInfoUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterInfoUpdateRequest* CharacterInfoUpdateRequest::default_instance_ = NULL;

CharacterInfoUpdateRequest* CharacterInfoUpdateRequest::New() const {
  return new CharacterInfoUpdateRequest;
}

void CharacterInfoUpdateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = GOOGLE_ULONGLONG(0);
    groupid_ = 0u;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    if (has_charinfo()) {
      if (charinfo_ != NULL) charinfo_->::ProtoBuf::CharacterDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInfoUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 requestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_charInfo;
        break;
      }

      // required .ProtoBuf.CharacterDBInfo charInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterInfoUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->requestid(), output);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_user_id(), output);
  }

  // required .ProtoBuf.CharacterDBInfo charInfo = 6;
  if (has_charinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->charinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterInfoUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->requestid(), target);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelid(), target);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_user_id(), target);
  }

  // required .ProtoBuf.CharacterDBInfo charInfo = 6;
  if (has_charinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->charinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterInfoUpdateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 requestid = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // required uint32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required string channelid = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string channel_user_id = 5;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required .ProtoBuf.CharacterDBInfo charInfo = 6;
    if (has_charinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInfoUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInfoUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInfoUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInfoUpdateRequest::MergeFrom(const CharacterInfoUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_charinfo()) {
      mutable_charinfo()->::ProtoBuf::CharacterDBInfo::MergeFrom(from.charinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInfoUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInfoUpdateRequest::CopyFrom(const CharacterInfoUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfoUpdateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_charinfo()) {
    if (!this->charinfo().IsInitialized()) return false;
  }
  return true;
}

void CharacterInfoUpdateRequest::Swap(CharacterInfoUpdateRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(groupid_, other->groupid_);
    std::swap(channelid_, other->channelid_);
    std::swap(userid_, other->userid_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(charinfo_, other->charinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInfoUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInfoUpdateRequest_descriptor_;
  metadata.reflection = CharacterInfoUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CharacterInfoUpdateResponse_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfoUpdateResponse_Result_descriptor_;
}
bool CharacterInfoUpdateResponse_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse::SUCCESS;
const CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse::FAILED;
const CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse::UNKNOW;
const CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse::Result_MIN;
const CharacterInfoUpdateResponse_Result CharacterInfoUpdateResponse::Result_MAX;
const int CharacterInfoUpdateResponse::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CharacterInfoUpdateResponse::kResultFieldNumber;
const int CharacterInfoUpdateResponse::kCharIdFieldNumber;
#endif  // !_MSC_VER

CharacterInfoUpdateResponse::CharacterInfoUpdateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterInfoUpdateResponse::InitAsDefaultInstance() {
}

CharacterInfoUpdateResponse::CharacterInfoUpdateResponse(const CharacterInfoUpdateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterInfoUpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInfoUpdateResponse::~CharacterInfoUpdateResponse() {
  SharedDtor();
}

void CharacterInfoUpdateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterInfoUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInfoUpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfoUpdateResponse_descriptor_;
}

const CharacterInfoUpdateResponse& CharacterInfoUpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterInfoUpdateResponse* CharacterInfoUpdateResponse::default_instance_ = NULL;

CharacterInfoUpdateResponse* CharacterInfoUpdateResponse::New() const {
  return new CharacterInfoUpdateResponse;
}

void CharacterInfoUpdateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInfoUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuf.CharacterInfoUpdateResponse.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoBuf::CharacterInfoUpdateResponse_Result_IsValid(value)) {
            set_result(static_cast< ::ProtoBuf::CharacterInfoUpdateResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterInfoUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBuf.CharacterInfoUpdateResponse.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterInfoUpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBuf.CharacterInfoUpdateResponse.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterInfoUpdateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuf.CharacterInfoUpdateResponse.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInfoUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInfoUpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInfoUpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInfoUpdateResponse::MergeFrom(const CharacterInfoUpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInfoUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInfoUpdateResponse::CopyFrom(const CharacterInfoUpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfoUpdateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharacterInfoUpdateResponse::Swap(CharacterInfoUpdateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInfoUpdateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInfoUpdateResponse_descriptor_;
  metadata.reflection = CharacterInfoUpdateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDelDBRequst::kRequestidFieldNumber;
const int CharacterDelDBRequst::kGroupidFieldNumber;
const int CharacterDelDBRequst::kChannelidFieldNumber;
const int CharacterDelDBRequst::kUserIdFieldNumber;
const int CharacterDelDBRequst::kChannelUserIdFieldNumber;
const int CharacterDelDBRequst::kCharIDFieldNumber;
#endif  // !_MSC_VER

CharacterDelDBRequst::CharacterDelDBRequst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDelDBRequst::InitAsDefaultInstance() {
}

CharacterDelDBRequst::CharacterDelDBRequst(const CharacterDelDBRequst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDelDBRequst::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0u;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDelDBRequst::~CharacterDelDBRequst() {
  SharedDtor();
}

void CharacterDelDBRequst::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void CharacterDelDBRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDelDBRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDelDBRequst_descriptor_;
}

const CharacterDelDBRequst& CharacterDelDBRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterDelDBRequst* CharacterDelDBRequst::default_instance_ = NULL;

CharacterDelDBRequst* CharacterDelDBRequst::New() const {
  return new CharacterDelDBRequst;
}

void CharacterDelDBRequst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = GOOGLE_ULONGLONG(0);
    groupid_ = 0u;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDelDBRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 requestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel_user_id;
        break;
      }

      // required string channel_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_charID;
        break;
      }

      // required uint32 charID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDelDBRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->requestid(), output);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelid(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_id(), output);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel_user_id(), output);
  }

  // required uint32 charID = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDelDBRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 requestid = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->requestid(), target);
  }

  // required uint32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelid(), target);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // required string channel_user_id = 5;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_user_id(), target);
  }

  // required uint32 charID = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDelDBRequst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 requestid = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // required uint32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // required string channelid = 3;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // required string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // required string channel_user_id = 5;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // required uint32 charID = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDelDBRequst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDelDBRequst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDelDBRequst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDelDBRequst::MergeFrom(const CharacterDelDBRequst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDelDBRequst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDelDBRequst::CopyFrom(const CharacterDelDBRequst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDelDBRequst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CharacterDelDBRequst::Swap(CharacterDelDBRequst* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(groupid_, other->groupid_);
    std::swap(channelid_, other->channelid_);
    std::swap(user_id_, other->user_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDelDBRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDelDBRequst_descriptor_;
  metadata.reflection = CharacterDelDBRequst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDelDBResponse::kRetcodeFieldNumber;
const int CharacterDelDBResponse::kRequestidFieldNumber;
const int CharacterDelDBResponse::kGroupidFieldNumber;
const int CharacterDelDBResponse::kChannelidFieldNumber;
const int CharacterDelDBResponse::kUserIdFieldNumber;
const int CharacterDelDBResponse::kChannelUserIdFieldNumber;
const int CharacterDelDBResponse::kCharIDFieldNumber;
#endif  // !_MSC_VER

CharacterDelDBResponse::CharacterDelDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDelDBResponse::InitAsDefaultInstance() {
}

CharacterDelDBResponse::CharacterDelDBResponse(const CharacterDelDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDelDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  requestid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0u;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDelDBResponse::~CharacterDelDBResponse() {
  SharedDtor();
}

void CharacterDelDBResponse::SharedDtor() {
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_user_id_;
  }
  if (this != default_instance_) {
  }
}

void CharacterDelDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDelDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDelDBResponse_descriptor_;
}

const CharacterDelDBResponse& CharacterDelDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fDBProxyProtocol_2eproto();
  return *default_instance_;
}

CharacterDelDBResponse* CharacterDelDBResponse::default_instance_ = NULL;

CharacterDelDBResponse* CharacterDelDBResponse::New() const {
  return new CharacterDelDBResponse;
}

void CharacterDelDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    requestid_ = GOOGLE_ULONGLONG(0);
    groupid_ = 0u;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_channel_user_id()) {
      if (channel_user_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_user_id_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDelDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requestid;
        break;
      }

      // required uint64 requestid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channelid;
        break;
      }

      // optional string channelid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_id;
        break;
      }

      // optional string user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel_user_id;
        break;
      }

      // optional string channel_user_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_user_id().data(), this->channel_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDelDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->requestid(), output);
  }

  // optional uint32 groupid = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  // optional string channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channelid(), output);
  }

  // optional string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_id(), output);
  }

  // optional string channel_user_id = 6;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel_user_id(), output);
  }

  // optional uint32 charID = 7;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDelDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required uint64 requestid = 2;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->requestid(), target);
  }

  // optional uint32 groupid = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupid(), target);
  }

  // optional string channelid = 4;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channelid(), target);
  }

  // optional string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_id(), target);
  }

  // optional string channel_user_id = 6;
  if (has_channel_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_user_id().data(), this->channel_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel_user_id(), target);
  }

  // optional uint32 charID = 7;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDelDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required uint64 requestid = 2;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requestid());
    }

    // optional uint32 groupid = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional string channelid = 4;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string channel_user_id = 6;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_user_id());
    }

    // optional uint32 charID = 7;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDelDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDelDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDelDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDelDBResponse::MergeFrom(const CharacterDelDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_channel_user_id()) {
      set_channel_user_id(from.channel_user_id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDelDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDelDBResponse::CopyFrom(const CharacterDelDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDelDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharacterDelDBResponse::Swap(CharacterDelDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(requestid_, other->requestid_);
    std::swap(groupid_, other->groupid_);
    std::swap(channelid_, other->channelid_);
    std::swap(user_id_, other->user_id_);
    std::swap(channel_user_id_, other->channel_user_id_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDelDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDelDBResponse_descriptor_;
  metadata.reflection = CharacterDelDBResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
