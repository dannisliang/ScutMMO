// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Relation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuffer/Relation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

namespace {

const ::google::protobuf::Descriptor* CWApplyRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWApplyRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCApplyRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCApplyRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCNotifyRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCNotifyRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAgreeRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAgreeRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCAgreeRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCAgreeRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWDeleteRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWDeleteRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWDeleteRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWDeleteRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWRecentChatListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWRecentChatListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCRecentChatListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCRecentChatListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWOneKeyFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWOneKeyFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCOneKeyFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCOneKeyFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWRelationInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWRelationInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupRelationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupRelationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCRelationInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCRelationInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWSearchUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWSearchUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCSearchUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCSearchUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWGivePhyscialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGivePhyscialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCGivePhyscialRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCGivePhyscialRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCPhysicalNotifyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCPhysicalNotifyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAllGivePhyscialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAllGivePhyscialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCAllGivePhyscialRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCAllGivePhyscialRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWGetPhyscialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGetPhyscialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCGetPhyscialRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCGetPhyscialRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WLGetPhyscialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WLGetPhyscialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWGetPhysicalGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGetPhysicalGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCGetPhysicalGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCGetPhysicalGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WLGetPhysicalGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WLGetPhysicalGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWApplyListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWApplyListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCApplyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCApplyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWClearApplyListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWClearApplyListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCClearApplyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCClearApplyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWOneKeyAgreeRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWOneKeyAgreeRelationReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuffer_2fRelation_2eproto() {
  protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuffer/Relation.proto");
  GOOGLE_CHECK(file != NULL);
  CWApplyRelationReq_descriptor_ = file->message_type(0);
  static const int CWApplyRelationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWApplyRelationReq, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWApplyRelationReq, playerid_),
  };
  CWApplyRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWApplyRelationReq_descriptor_,
      CWApplyRelationReq::default_instance_,
      CWApplyRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWApplyRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWApplyRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWApplyRelationReq));
  WCApplyRelationRsp_descriptor_ = file->message_type(1);
  static const int WCApplyRelationRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCApplyRelationRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCApplyRelationRsp, playerid_),
  };
  WCApplyRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCApplyRelationRsp_descriptor_,
      WCApplyRelationRsp::default_instance_,
      WCApplyRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCApplyRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCApplyRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCApplyRelationRsp));
  WCNotifyRelationRsp_descriptor_ = file->message_type(2);
  static const int WCNotifyRelationRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNotifyRelationRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNotifyRelationRsp, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNotifyRelationRsp, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNotifyRelationRsp, friendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNotifyRelationRsp, groupindex_),
  };
  WCNotifyRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCNotifyRelationRsp_descriptor_,
      WCNotifyRelationRsp::default_instance_,
      WCNotifyRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNotifyRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCNotifyRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCNotifyRelationRsp));
  CWAgreeRelationReq_descriptor_ = file->message_type(3);
  static const int CWAgreeRelationReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeRelationReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeRelationReq, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeRelationReq, agree_),
  };
  CWAgreeRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAgreeRelationReq_descriptor_,
      CWAgreeRelationReq::default_instance_,
      CWAgreeRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAgreeRelationReq));
  WCAgreeRelationRsp_descriptor_ = file->message_type(4);
  static const int WCAgreeRelationRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAgreeRelationRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAgreeRelationRsp, playerid_),
  };
  WCAgreeRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCAgreeRelationRsp_descriptor_,
      WCAgreeRelationRsp::default_instance_,
      WCAgreeRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAgreeRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAgreeRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCAgreeRelationRsp));
  CWDeleteRelationReq_descriptor_ = file->message_type(5);
  static const int CWDeleteRelationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, playeridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, groupindex_),
  };
  CWDeleteRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWDeleteRelationReq_descriptor_,
      CWDeleteRelationReq::default_instance_,
      CWDeleteRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWDeleteRelationReq));
  CWDeleteRelationRsp_descriptor_ = file->message_type(6);
  static const int CWDeleteRelationRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationRsp, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationRsp, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationRsp, isactive_),
  };
  CWDeleteRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWDeleteRelationRsp_descriptor_,
      CWDeleteRelationRsp::default_instance_,
      CWDeleteRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWDeleteRelationRsp));
  CWRecentChatListReq_descriptor_ = file->message_type(7);
  static const int CWRecentChatListReq_offsets_[1] = {
  };
  CWRecentChatListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWRecentChatListReq_descriptor_,
      CWRecentChatListReq::default_instance_,
      CWRecentChatListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRecentChatListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRecentChatListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWRecentChatListReq));
  WCRecentChatListRsp_descriptor_ = file->message_type(8);
  static const int WCRecentChatListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRecentChatListRsp, recentlist_),
  };
  WCRecentChatListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCRecentChatListRsp_descriptor_,
      WCRecentChatListRsp::default_instance_,
      WCRecentChatListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRecentChatListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRecentChatListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCRecentChatListRsp));
  CWOneKeyFriendReq_descriptor_ = file->message_type(9);
  static const int CWOneKeyFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWOneKeyFriendReq, again_),
  };
  CWOneKeyFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWOneKeyFriendReq_descriptor_,
      CWOneKeyFriendReq::default_instance_,
      CWOneKeyFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWOneKeyFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWOneKeyFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWOneKeyFriendReq));
  WCOneKeyFriendRsp_descriptor_ = file->message_type(10);
  static const int WCOneKeyFriendRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCOneKeyFriendRsp, recommend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCOneKeyFriendRsp, ret_),
  };
  WCOneKeyFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCOneKeyFriendRsp_descriptor_,
      WCOneKeyFriendRsp::default_instance_,
      WCOneKeyFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCOneKeyFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCOneKeyFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCOneKeyFriendRsp));
  CWRelationInfoReq_descriptor_ = file->message_type(11);
  static const int CWRelationInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRelationInfoReq, groupindex_),
  };
  CWRelationInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWRelationInfoReq_descriptor_,
      CWRelationInfoReq::default_instance_,
      CWRelationInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRelationInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRelationInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWRelationInfoReq));
  GroupRelationInfo_descriptor_ = file->message_type(12);
  static const int GroupRelationInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRelationInfo, relationinfolist_),
  };
  GroupRelationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupRelationInfo_descriptor_,
      GroupRelationInfo::default_instance_,
      GroupRelationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRelationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRelationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupRelationInfo));
  WCRelationInfoRsp_descriptor_ = file->message_type(13);
  static const int WCRelationInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationInfoRsp, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationInfoRsp, relationinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationInfoRsp, leftgivetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationInfoRsp, giftprogress_),
  };
  WCRelationInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCRelationInfoRsp_descriptor_,
      WCRelationInfoRsp::default_instance_,
      WCRelationInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCRelationInfoRsp));
  CWSearchUserReq_descriptor_ = file->message_type(14);
  static const int CWSearchUserReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSearchUserReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSearchUserReq, searchid_),
  };
  CWSearchUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWSearchUserReq_descriptor_,
      CWSearchUserReq::default_instance_,
      CWSearchUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSearchUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWSearchUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWSearchUserReq));
  WCSearchUserRsp_descriptor_ = file->message_type(15);
  static const int WCSearchUserRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCSearchUserRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCSearchUserRsp, playerinfo_),
  };
  WCSearchUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCSearchUserRsp_descriptor_,
      WCSearchUserRsp::default_instance_,
      WCSearchUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCSearchUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCSearchUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCSearchUserRsp));
  CWGivePhyscialReq_descriptor_ = file->message_type(16);
  static const int CWGivePhyscialReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGivePhyscialReq, playerid_),
  };
  CWGivePhyscialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGivePhyscialReq_descriptor_,
      CWGivePhyscialReq::default_instance_,
      CWGivePhyscialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGivePhyscialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGivePhyscialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGivePhyscialReq));
  WCGivePhyscialRsp_descriptor_ = file->message_type(17);
  static const int WCGivePhyscialRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivePhyscialRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivePhyscialRsp, playerid_),
  };
  WCGivePhyscialRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCGivePhyscialRsp_descriptor_,
      WCGivePhyscialRsp::default_instance_,
      WCGivePhyscialRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivePhyscialRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivePhyscialRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCGivePhyscialRsp));
  WCPhysicalNotifyRsp_descriptor_ = file->message_type(18);
  static const int WCPhysicalNotifyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCPhysicalNotifyRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCPhysicalNotifyRsp, playerid_),
  };
  WCPhysicalNotifyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCPhysicalNotifyRsp_descriptor_,
      WCPhysicalNotifyRsp::default_instance_,
      WCPhysicalNotifyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCPhysicalNotifyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCPhysicalNotifyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCPhysicalNotifyRsp));
  CWAllGivePhyscialReq_descriptor_ = file->message_type(19);
  static const int CWAllGivePhyscialReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAllGivePhyscialReq, playerids_),
  };
  CWAllGivePhyscialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAllGivePhyscialReq_descriptor_,
      CWAllGivePhyscialReq::default_instance_,
      CWAllGivePhyscialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAllGivePhyscialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAllGivePhyscialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAllGivePhyscialReq));
  WCAllGivePhyscialRsp_descriptor_ = file->message_type(20);
  static const int WCAllGivePhyscialRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAllGivePhyscialRsp, playerids_),
  };
  WCAllGivePhyscialRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCAllGivePhyscialRsp_descriptor_,
      WCAllGivePhyscialRsp::default_instance_,
      WCAllGivePhyscialRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAllGivePhyscialRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAllGivePhyscialRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCAllGivePhyscialRsp));
  CWGetPhyscialReq_descriptor_ = file->message_type(21);
  static const int CWGetPhyscialReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetPhyscialReq, playerid_),
  };
  CWGetPhyscialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGetPhyscialReq_descriptor_,
      CWGetPhyscialReq::default_instance_,
      CWGetPhyscialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetPhyscialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetPhyscialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGetPhyscialReq));
  WCGetPhyscialRsp_descriptor_ = file->message_type(22);
  static const int WCGetPhyscialRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetPhyscialRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetPhyscialRsp, playerid_),
  };
  WCGetPhyscialRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCGetPhyscialRsp_descriptor_,
      WCGetPhyscialRsp::default_instance_,
      WCGetPhyscialRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetPhyscialRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetPhyscialRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCGetPhyscialRsp));
  WLGetPhyscialReq_descriptor_ = file->message_type(23);
  static const int WLGetPhyscialReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLGetPhyscialReq, playerid_),
  };
  WLGetPhyscialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WLGetPhyscialReq_descriptor_,
      WLGetPhyscialReq::default_instance_,
      WLGetPhyscialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLGetPhyscialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLGetPhyscialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WLGetPhyscialReq));
  CWGetPhysicalGiftReq_descriptor_ = file->message_type(24);
  static const int CWGetPhysicalGiftReq_offsets_[1] = {
  };
  CWGetPhysicalGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGetPhysicalGiftReq_descriptor_,
      CWGetPhysicalGiftReq::default_instance_,
      CWGetPhysicalGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetPhysicalGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetPhysicalGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGetPhysicalGiftReq));
  WCGetPhysicalGiftRsp_descriptor_ = file->message_type(25);
  static const int WCGetPhysicalGiftRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetPhysicalGiftRsp, ret_),
  };
  WCGetPhysicalGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCGetPhysicalGiftRsp_descriptor_,
      WCGetPhysicalGiftRsp::default_instance_,
      WCGetPhysicalGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetPhysicalGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetPhysicalGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCGetPhysicalGiftRsp));
  WLGetPhysicalGiftReq_descriptor_ = file->message_type(26);
  static const int WLGetPhysicalGiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLGetPhysicalGiftReq, playerid_),
  };
  WLGetPhysicalGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WLGetPhysicalGiftReq_descriptor_,
      WLGetPhysicalGiftReq::default_instance_,
      WLGetPhysicalGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLGetPhysicalGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WLGetPhysicalGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WLGetPhysicalGiftReq));
  CWApplyListReq_descriptor_ = file->message_type(27);
  static const int CWApplyListReq_offsets_[1] = {
  };
  CWApplyListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWApplyListReq_descriptor_,
      CWApplyListReq::default_instance_,
      CWApplyListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWApplyListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWApplyListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWApplyListReq));
  WCApplyListRsp_descriptor_ = file->message_type(28);
  static const int WCApplyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCApplyListRsp, applyinfo_),
  };
  WCApplyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCApplyListRsp_descriptor_,
      WCApplyListRsp::default_instance_,
      WCApplyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCApplyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCApplyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCApplyListRsp));
  CWClearApplyListReq_descriptor_ = file->message_type(29);
  static const int CWClearApplyListReq_offsets_[1] = {
  };
  CWClearApplyListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWClearApplyListReq_descriptor_,
      CWClearApplyListReq::default_instance_,
      CWClearApplyListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWClearApplyListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWClearApplyListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWClearApplyListReq));
  WCClearApplyListRsp_descriptor_ = file->message_type(30);
  static const int WCClearApplyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCClearApplyListRsp, ret_),
  };
  WCClearApplyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCClearApplyListRsp_descriptor_,
      WCClearApplyListRsp::default_instance_,
      WCClearApplyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCClearApplyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCClearApplyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCClearApplyListRsp));
  CWOneKeyAgreeRelationReq_descriptor_ = file->message_type(31);
  static const int CWOneKeyAgreeRelationReq_offsets_[1] = {
  };
  CWOneKeyAgreeRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWOneKeyAgreeRelationReq_descriptor_,
      CWOneKeyAgreeRelationReq::default_instance_,
      CWOneKeyAgreeRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWOneKeyAgreeRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWOneKeyAgreeRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWOneKeyAgreeRelationReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuffer_2fRelation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWApplyRelationReq_descriptor_, &CWApplyRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCApplyRelationRsp_descriptor_, &WCApplyRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCNotifyRelationRsp_descriptor_, &WCNotifyRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAgreeRelationReq_descriptor_, &CWAgreeRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCAgreeRelationRsp_descriptor_, &WCAgreeRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWDeleteRelationReq_descriptor_, &CWDeleteRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWDeleteRelationRsp_descriptor_, &CWDeleteRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWRecentChatListReq_descriptor_, &CWRecentChatListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCRecentChatListRsp_descriptor_, &WCRecentChatListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWOneKeyFriendReq_descriptor_, &CWOneKeyFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCOneKeyFriendRsp_descriptor_, &WCOneKeyFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWRelationInfoReq_descriptor_, &CWRelationInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupRelationInfo_descriptor_, &GroupRelationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCRelationInfoRsp_descriptor_, &WCRelationInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWSearchUserReq_descriptor_, &CWSearchUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCSearchUserRsp_descriptor_, &WCSearchUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGivePhyscialReq_descriptor_, &CWGivePhyscialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCGivePhyscialRsp_descriptor_, &WCGivePhyscialRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCPhysicalNotifyRsp_descriptor_, &WCPhysicalNotifyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAllGivePhyscialReq_descriptor_, &CWAllGivePhyscialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCAllGivePhyscialRsp_descriptor_, &WCAllGivePhyscialRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGetPhyscialReq_descriptor_, &CWGetPhyscialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCGetPhyscialRsp_descriptor_, &WCGetPhyscialRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WLGetPhyscialReq_descriptor_, &WLGetPhyscialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGetPhysicalGiftReq_descriptor_, &CWGetPhysicalGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCGetPhysicalGiftRsp_descriptor_, &WCGetPhysicalGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WLGetPhysicalGiftReq_descriptor_, &WLGetPhysicalGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWApplyListReq_descriptor_, &CWApplyListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCApplyListRsp_descriptor_, &WCApplyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWClearApplyListReq_descriptor_, &CWClearApplyListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCClearApplyListRsp_descriptor_, &WCClearApplyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWOneKeyAgreeRelationReq_descriptor_, &CWOneKeyAgreeRelationReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuffer_2fRelation_2eproto() {
  delete CWApplyRelationReq::default_instance_;
  delete CWApplyRelationReq_reflection_;
  delete WCApplyRelationRsp::default_instance_;
  delete WCApplyRelationRsp_reflection_;
  delete WCNotifyRelationRsp::default_instance_;
  delete WCNotifyRelationRsp_reflection_;
  delete CWAgreeRelationReq::default_instance_;
  delete CWAgreeRelationReq_reflection_;
  delete WCAgreeRelationRsp::default_instance_;
  delete WCAgreeRelationRsp_reflection_;
  delete CWDeleteRelationReq::default_instance_;
  delete CWDeleteRelationReq_reflection_;
  delete CWDeleteRelationRsp::default_instance_;
  delete CWDeleteRelationRsp_reflection_;
  delete CWRecentChatListReq::default_instance_;
  delete CWRecentChatListReq_reflection_;
  delete WCRecentChatListRsp::default_instance_;
  delete WCRecentChatListRsp_reflection_;
  delete CWOneKeyFriendReq::default_instance_;
  delete CWOneKeyFriendReq_reflection_;
  delete WCOneKeyFriendRsp::default_instance_;
  delete WCOneKeyFriendRsp_reflection_;
  delete CWRelationInfoReq::default_instance_;
  delete CWRelationInfoReq_reflection_;
  delete GroupRelationInfo::default_instance_;
  delete GroupRelationInfo_reflection_;
  delete WCRelationInfoRsp::default_instance_;
  delete WCRelationInfoRsp_reflection_;
  delete CWSearchUserReq::default_instance_;
  delete CWSearchUserReq_reflection_;
  delete WCSearchUserRsp::default_instance_;
  delete WCSearchUserRsp_reflection_;
  delete CWGivePhyscialReq::default_instance_;
  delete CWGivePhyscialReq_reflection_;
  delete WCGivePhyscialRsp::default_instance_;
  delete WCGivePhyscialRsp_reflection_;
  delete WCPhysicalNotifyRsp::default_instance_;
  delete WCPhysicalNotifyRsp_reflection_;
  delete CWAllGivePhyscialReq::default_instance_;
  delete CWAllGivePhyscialReq_reflection_;
  delete WCAllGivePhyscialRsp::default_instance_;
  delete WCAllGivePhyscialRsp_reflection_;
  delete CWGetPhyscialReq::default_instance_;
  delete CWGetPhyscialReq_reflection_;
  delete WCGetPhyscialRsp::default_instance_;
  delete WCGetPhyscialRsp_reflection_;
  delete WLGetPhyscialReq::default_instance_;
  delete WLGetPhyscialReq_reflection_;
  delete CWGetPhysicalGiftReq::default_instance_;
  delete CWGetPhysicalGiftReq_reflection_;
  delete WCGetPhysicalGiftRsp::default_instance_;
  delete WCGetPhysicalGiftRsp_reflection_;
  delete WLGetPhysicalGiftReq::default_instance_;
  delete WLGetPhysicalGiftReq_reflection_;
  delete CWApplyListReq::default_instance_;
  delete CWApplyListReq_reflection_;
  delete WCApplyListRsp::default_instance_;
  delete WCApplyListRsp_reflection_;
  delete CWClearApplyListReq::default_instance_;
  delete CWClearApplyListReq_reflection_;
  delete WCClearApplyListRsp::default_instance_;
  delete WCClearApplyListRsp_reflection_;
  delete CWOneKeyAgreeRelationReq::default_instance_;
  delete CWOneKeyAgreeRelationReq_reflection_;
}

void protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fComProtocol_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fClientToServerCmd_2eproto();
  ::ProtoBuf::protobuf_AddDesc_ProtoBuffer_2fChat_2eproto();
  ::ProtoBuf::protobuf_AddDesc_Common_2fComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032ProtoBuffer/Relation.proto\022\010ProtoBuf\032\035"
    "ProtoBuffer/ComProtocol.proto\032#ProtoBuff"
    "er/ClientToServerCmd.proto\032\026ProtoBuffer/"
    "Chat.proto\032\026Common/ComDefine.proto\":\n\022CW"
    "ApplyRelationReq\022\022\n\ngroupIndex\030\001 \001(\r\022\020\n\010"
    "playerId\030\002 \001(\r\"3\n\022WCApplyRelationRsp\022\013\n\003"
    "ret\030\001 \001(\r\022\020\n\010playerId\030\002 \001(\r\"\212\001\n\023WCNotify"
    "RelationRsp\022\013\n\003ret\030\001 \001(\r\022\014\n\004flag\030\002 \001(\r\022\r"
    "\n\005agree\030\003 \001(\010\0225\n\nfriendInfo\030\004 \001(\0132!.Prot"
    "oBuf.CharacterPlayerMiniInfo\022\022\n\ngroupInd"
    "ex\030\005 \001(\r\"I\n\022CWAgreeRelationReq\022\020\n\010player"
    "Id\030\001 \001(\r\022\022\n\ngroupIndex\030\002 \001(\r\022\r\n\005agree\030\003 "
    "\001(\010\"3\n\022WCAgreeRelationRsp\022\013\n\003ret\030\001 \001(\r\022\020"
    "\n\010playerID\030\002 \001(\r\"\?\n\023CWDeleteRelationReq\022"
    "\024\n\014playerIdList\030\001 \003(\r\022\022\n\ngroupIndex\030\002 \001("
    "\r\"Z\n\023CWDeleteRelationRsp\022\013\n\003ret\030\001 \001(\r\022\020\n"
    "\010playerId\030\002 \003(\r\022\022\n\ngroupIndex\030\003 \001(\r\022\020\n\010i"
    "sActive\030\004 \001(\010\"\025\n\023CWRecentChatListReq\"L\n\023"
    "WCRecentChatListRsp\0225\n\nrecentList\030\001 \003(\0132"
    "!.ProtoBuf.CharacterPlayerMiniInfo\"\"\n\021CW"
    "OneKeyFriendReq\022\r\n\005again\030\001 \001(\010\"V\n\021WCOneK"
    "eyFriendRsp\0224\n\trecommend\030\001 \003(\0132!.ProtoBu"
    "f.CharacterPlayerMiniInfo\022\013\n\003ret\030\002 \001(\r\"\'"
    "\n\021CWRelationInfoReq\022\022\n\ngroupIndex\030\001 \001(\r\""
    "P\n\021GroupRelationInfo\022;\n\020relationInfoList"
    "\030\001 \003(\0132!.ProtoBuf.CharacterPlayerMiniInf"
    "o\"\207\001\n\021WCRelationInfoRsp\022\022\n\ngroupIndex\030\001 "
    "\001(\r\0221\n\014relationInfo\030\002 \003(\0132\033.ProtoBuf.Gro"
    "upRelationInfo\022\025\n\rleftGiveTimes\030\003 \001(\r\022\024\n"
    "\014giftProgress\030\004 \001(\r\"1\n\017CWSearchUserReq\022\014"
    "\n\004name\030\001 \001(\t\022\020\n\010searchID\030\002 \001(\r\"U\n\017WCSear"
    "chUserRsp\022\013\n\003ret\030\001 \001(\r\0225\n\nplayerInfo\030\002 \001"
    "(\0132!.ProtoBuf.CharacterPlayerMiniInfo\"%\n"
    "\021CWGivePhyscialReq\022\020\n\010playerID\030\001 \001(\r\"2\n\021"
    "WCGivePhyscialRsp\022\013\n\003ret\030\001 \001(\r\022\020\n\010player"
    "ID\030\002 \001(\r\"5\n\023WCPhysicalNotifyRsp\022\014\n\004type\030"
    "\001 \001(\r\022\020\n\010playerID\030\002 \001(\r\")\n\024CWAllGivePhys"
    "cialReq\022\021\n\tplayerIds\030\001 \003(\r\")\n\024WCAllGiveP"
    "hyscialRsp\022\021\n\tplayerIds\030\001 \003(\r\"$\n\020CWGetPh"
    "yscialReq\022\020\n\010playerID\030\001 \001(\r\"1\n\020WCGetPhys"
    "cialRsp\022\013\n\003ret\030\001 \001(\r\022\020\n\010playerID\030\002 \001(\r\"$"
    "\n\020WLGetPhyscialReq\022\020\n\010playerID\030\001 \001(\r\"\026\n\024"
    "CWGetPhysicalGiftReq\"#\n\024WCGetPhysicalGif"
    "tRsp\022\013\n\003ret\030\001 \001(\r\"(\n\024WLGetPhysicalGiftRe"
    "q\022\020\n\010playerId\030\001 \001(\r\"\020\n\016CWApplyListReq\"F\n"
    "\016WCApplyListRsp\0224\n\tapplyInfo\030\001 \003(\0132!.Pro"
    "toBuf.CharacterPlayerMiniInfo\"\025\n\023CWClear"
    "ApplyListReq\"\"\n\023WCClearApplyListRsp\022\013\n\003r"
    "et\030\001 \001(\r\"\032\n\030CWOneKeyAgreeRelationReq", 1956);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuffer/Relation.proto", &protobuf_RegisterTypes);
  CWApplyRelationReq::default_instance_ = new CWApplyRelationReq();
  WCApplyRelationRsp::default_instance_ = new WCApplyRelationRsp();
  WCNotifyRelationRsp::default_instance_ = new WCNotifyRelationRsp();
  CWAgreeRelationReq::default_instance_ = new CWAgreeRelationReq();
  WCAgreeRelationRsp::default_instance_ = new WCAgreeRelationRsp();
  CWDeleteRelationReq::default_instance_ = new CWDeleteRelationReq();
  CWDeleteRelationRsp::default_instance_ = new CWDeleteRelationRsp();
  CWRecentChatListReq::default_instance_ = new CWRecentChatListReq();
  WCRecentChatListRsp::default_instance_ = new WCRecentChatListRsp();
  CWOneKeyFriendReq::default_instance_ = new CWOneKeyFriendReq();
  WCOneKeyFriendRsp::default_instance_ = new WCOneKeyFriendRsp();
  CWRelationInfoReq::default_instance_ = new CWRelationInfoReq();
  GroupRelationInfo::default_instance_ = new GroupRelationInfo();
  WCRelationInfoRsp::default_instance_ = new WCRelationInfoRsp();
  CWSearchUserReq::default_instance_ = new CWSearchUserReq();
  WCSearchUserRsp::default_instance_ = new WCSearchUserRsp();
  CWGivePhyscialReq::default_instance_ = new CWGivePhyscialReq();
  WCGivePhyscialRsp::default_instance_ = new WCGivePhyscialRsp();
  WCPhysicalNotifyRsp::default_instance_ = new WCPhysicalNotifyRsp();
  CWAllGivePhyscialReq::default_instance_ = new CWAllGivePhyscialReq();
  WCAllGivePhyscialRsp::default_instance_ = new WCAllGivePhyscialRsp();
  CWGetPhyscialReq::default_instance_ = new CWGetPhyscialReq();
  WCGetPhyscialRsp::default_instance_ = new WCGetPhyscialRsp();
  WLGetPhyscialReq::default_instance_ = new WLGetPhyscialReq();
  CWGetPhysicalGiftReq::default_instance_ = new CWGetPhysicalGiftReq();
  WCGetPhysicalGiftRsp::default_instance_ = new WCGetPhysicalGiftRsp();
  WLGetPhysicalGiftReq::default_instance_ = new WLGetPhysicalGiftReq();
  CWApplyListReq::default_instance_ = new CWApplyListReq();
  WCApplyListRsp::default_instance_ = new WCApplyListRsp();
  CWClearApplyListReq::default_instance_ = new CWClearApplyListReq();
  WCClearApplyListRsp::default_instance_ = new WCClearApplyListRsp();
  CWOneKeyAgreeRelationReq::default_instance_ = new CWOneKeyAgreeRelationReq();
  CWApplyRelationReq::default_instance_->InitAsDefaultInstance();
  WCApplyRelationRsp::default_instance_->InitAsDefaultInstance();
  WCNotifyRelationRsp::default_instance_->InitAsDefaultInstance();
  CWAgreeRelationReq::default_instance_->InitAsDefaultInstance();
  WCAgreeRelationRsp::default_instance_->InitAsDefaultInstance();
  CWDeleteRelationReq::default_instance_->InitAsDefaultInstance();
  CWDeleteRelationRsp::default_instance_->InitAsDefaultInstance();
  CWRecentChatListReq::default_instance_->InitAsDefaultInstance();
  WCRecentChatListRsp::default_instance_->InitAsDefaultInstance();
  CWOneKeyFriendReq::default_instance_->InitAsDefaultInstance();
  WCOneKeyFriendRsp::default_instance_->InitAsDefaultInstance();
  CWRelationInfoReq::default_instance_->InitAsDefaultInstance();
  GroupRelationInfo::default_instance_->InitAsDefaultInstance();
  WCRelationInfoRsp::default_instance_->InitAsDefaultInstance();
  CWSearchUserReq::default_instance_->InitAsDefaultInstance();
  WCSearchUserRsp::default_instance_->InitAsDefaultInstance();
  CWGivePhyscialReq::default_instance_->InitAsDefaultInstance();
  WCGivePhyscialRsp::default_instance_->InitAsDefaultInstance();
  WCPhysicalNotifyRsp::default_instance_->InitAsDefaultInstance();
  CWAllGivePhyscialReq::default_instance_->InitAsDefaultInstance();
  WCAllGivePhyscialRsp::default_instance_->InitAsDefaultInstance();
  CWGetPhyscialReq::default_instance_->InitAsDefaultInstance();
  WCGetPhyscialRsp::default_instance_->InitAsDefaultInstance();
  WLGetPhyscialReq::default_instance_->InitAsDefaultInstance();
  CWGetPhysicalGiftReq::default_instance_->InitAsDefaultInstance();
  WCGetPhysicalGiftRsp::default_instance_->InitAsDefaultInstance();
  WLGetPhysicalGiftReq::default_instance_->InitAsDefaultInstance();
  CWApplyListReq::default_instance_->InitAsDefaultInstance();
  WCApplyListRsp::default_instance_->InitAsDefaultInstance();
  CWClearApplyListReq::default_instance_->InitAsDefaultInstance();
  WCClearApplyListRsp::default_instance_->InitAsDefaultInstance();
  CWOneKeyAgreeRelationReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuffer_2fRelation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuffer_2fRelation_2eproto {
  StaticDescriptorInitializer_ProtoBuffer_2fRelation_2eproto() {
    protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  }
} static_descriptor_initializer_ProtoBuffer_2fRelation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CWApplyRelationReq::kGroupIndexFieldNumber;
const int CWApplyRelationReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CWApplyRelationReq::CWApplyRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWApplyRelationReq::InitAsDefaultInstance() {
}

CWApplyRelationReq::CWApplyRelationReq(const CWApplyRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWApplyRelationReq::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWApplyRelationReq::~CWApplyRelationReq() {
  SharedDtor();
}

void CWApplyRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWApplyRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWApplyRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWApplyRelationReq_descriptor_;
}

const CWApplyRelationReq& CWApplyRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWApplyRelationReq* CWApplyRelationReq::default_instance_ = NULL;

CWApplyRelationReq* CWApplyRelationReq::New() const {
  return new CWApplyRelationReq;
}

void CWApplyRelationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWApplyRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWApplyRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  // optional uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWApplyRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  // optional uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWApplyRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWApplyRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWApplyRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWApplyRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWApplyRelationReq::MergeFrom(const CWApplyRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWApplyRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWApplyRelationReq::CopyFrom(const CWApplyRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWApplyRelationReq::IsInitialized() const {

  return true;
}

void CWApplyRelationReq::Swap(CWApplyRelationReq* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWApplyRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWApplyRelationReq_descriptor_;
  metadata.reflection = CWApplyRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCApplyRelationRsp::kRetFieldNumber;
const int WCApplyRelationRsp::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

WCApplyRelationRsp::WCApplyRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCApplyRelationRsp::InitAsDefaultInstance() {
}

WCApplyRelationRsp::WCApplyRelationRsp(const WCApplyRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCApplyRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCApplyRelationRsp::~WCApplyRelationRsp() {
  SharedDtor();
}

void WCApplyRelationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCApplyRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCApplyRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCApplyRelationRsp_descriptor_;
}

const WCApplyRelationRsp& WCApplyRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCApplyRelationRsp* WCApplyRelationRsp::default_instance_ = NULL;

WCApplyRelationRsp* WCApplyRelationRsp::New() const {
  return new WCApplyRelationRsp;
}

void WCApplyRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCApplyRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCApplyRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCApplyRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCApplyRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCApplyRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCApplyRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCApplyRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCApplyRelationRsp::MergeFrom(const WCApplyRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCApplyRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCApplyRelationRsp::CopyFrom(const WCApplyRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCApplyRelationRsp::IsInitialized() const {

  return true;
}

void WCApplyRelationRsp::Swap(WCApplyRelationRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCApplyRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCApplyRelationRsp_descriptor_;
  metadata.reflection = WCApplyRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCNotifyRelationRsp::kRetFieldNumber;
const int WCNotifyRelationRsp::kFlagFieldNumber;
const int WCNotifyRelationRsp::kAgreeFieldNumber;
const int WCNotifyRelationRsp::kFriendInfoFieldNumber;
const int WCNotifyRelationRsp::kGroupIndexFieldNumber;
#endif  // !_MSC_VER

WCNotifyRelationRsp::WCNotifyRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCNotifyRelationRsp::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::ProtoBuf::CharacterPlayerMiniInfo*>(&::ProtoBuf::CharacterPlayerMiniInfo::default_instance());
}

WCNotifyRelationRsp::WCNotifyRelationRsp(const WCNotifyRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCNotifyRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  flag_ = 0u;
  agree_ = false;
  friendinfo_ = NULL;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCNotifyRelationRsp::~WCNotifyRelationRsp() {
  SharedDtor();
}

void WCNotifyRelationRsp::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void WCNotifyRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCNotifyRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCNotifyRelationRsp_descriptor_;
}

const WCNotifyRelationRsp& WCNotifyRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCNotifyRelationRsp* WCNotifyRelationRsp::default_instance_ = NULL;

WCNotifyRelationRsp* WCNotifyRelationRsp::New() const {
  return new WCNotifyRelationRsp;
}

void WCNotifyRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    flag_ = 0u;
    agree_ = false;
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::ProtoBuf::CharacterPlayerMiniInfo::Clear();
    }
    groupindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCNotifyRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_agree;
        break;
      }

      // optional bool agree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friendInfo;
        break;
      }

      // optional .ProtoBuf.CharacterPlayerMiniInfo friendInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_groupIndex;
        break;
      }

      // optional uint32 groupIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCNotifyRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional bool agree = 3;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->agree(), output);
  }

  // optional .ProtoBuf.CharacterPlayerMiniInfo friendInfo = 4;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friendinfo(), output);
  }

  // optional uint32 groupIndex = 5;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCNotifyRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional bool agree = 3;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->agree(), target);
  }

  // optional .ProtoBuf.CharacterPlayerMiniInfo friendInfo = 4;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friendinfo(), target);
  }

  // optional uint32 groupIndex = 5;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCNotifyRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional bool agree = 3;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional .ProtoBuf.CharacterPlayerMiniInfo friendInfo = 4;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

    // optional uint32 groupIndex = 5;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCNotifyRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCNotifyRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCNotifyRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCNotifyRelationRsp::MergeFrom(const WCNotifyRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::ProtoBuf::CharacterPlayerMiniInfo::MergeFrom(from.friendinfo());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCNotifyRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCNotifyRelationRsp::CopyFrom(const WCNotifyRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCNotifyRelationRsp::IsInitialized() const {

  return true;
}

void WCNotifyRelationRsp::Swap(WCNotifyRelationRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(flag_, other->flag_);
    std::swap(agree_, other->agree_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCNotifyRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCNotifyRelationRsp_descriptor_;
  metadata.reflection = WCNotifyRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAgreeRelationReq::kPlayerIdFieldNumber;
const int CWAgreeRelationReq::kGroupIndexFieldNumber;
const int CWAgreeRelationReq::kAgreeFieldNumber;
#endif  // !_MSC_VER

CWAgreeRelationReq::CWAgreeRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAgreeRelationReq::InitAsDefaultInstance() {
}

CWAgreeRelationReq::CWAgreeRelationReq(const CWAgreeRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAgreeRelationReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  groupindex_ = 0u;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAgreeRelationReq::~CWAgreeRelationReq() {
  SharedDtor();
}

void CWAgreeRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAgreeRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAgreeRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAgreeRelationReq_descriptor_;
}

const CWAgreeRelationReq& CWAgreeRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWAgreeRelationReq* CWAgreeRelationReq::default_instance_ = NULL;

CWAgreeRelationReq* CWAgreeRelationReq::New() const {
  return new CWAgreeRelationReq;
}

void CWAgreeRelationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    groupindex_ = 0u;
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAgreeRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupIndex;
        break;
      }

      // optional uint32 groupIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_agree;
        break;
      }

      // optional bool agree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAgreeRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 groupIndex = 2;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupindex(), output);
  }

  // optional bool agree = 3;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAgreeRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 groupIndex = 2;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupindex(), target);
  }

  // optional bool agree = 3;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAgreeRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 groupIndex = 2;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

    // optional bool agree = 3;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAgreeRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAgreeRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAgreeRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAgreeRelationReq::MergeFrom(const CWAgreeRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAgreeRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAgreeRelationReq::CopyFrom(const CWAgreeRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAgreeRelationReq::IsInitialized() const {

  return true;
}

void CWAgreeRelationReq::Swap(CWAgreeRelationReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAgreeRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAgreeRelationReq_descriptor_;
  metadata.reflection = CWAgreeRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCAgreeRelationRsp::kRetFieldNumber;
const int WCAgreeRelationRsp::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

WCAgreeRelationRsp::WCAgreeRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCAgreeRelationRsp::InitAsDefaultInstance() {
}

WCAgreeRelationRsp::WCAgreeRelationRsp(const WCAgreeRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCAgreeRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCAgreeRelationRsp::~WCAgreeRelationRsp() {
  SharedDtor();
}

void WCAgreeRelationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCAgreeRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCAgreeRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCAgreeRelationRsp_descriptor_;
}

const WCAgreeRelationRsp& WCAgreeRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCAgreeRelationRsp* WCAgreeRelationRsp::default_instance_ = NULL;

WCAgreeRelationRsp* WCAgreeRelationRsp::New() const {
  return new WCAgreeRelationRsp;
}

void WCAgreeRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCAgreeRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCAgreeRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCAgreeRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCAgreeRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCAgreeRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCAgreeRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCAgreeRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCAgreeRelationRsp::MergeFrom(const WCAgreeRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCAgreeRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCAgreeRelationRsp::CopyFrom(const WCAgreeRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCAgreeRelationRsp::IsInitialized() const {

  return true;
}

void WCAgreeRelationRsp::Swap(WCAgreeRelationRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCAgreeRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCAgreeRelationRsp_descriptor_;
  metadata.reflection = WCAgreeRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWDeleteRelationReq::kPlayerIdListFieldNumber;
const int CWDeleteRelationReq::kGroupIndexFieldNumber;
#endif  // !_MSC_VER

CWDeleteRelationReq::CWDeleteRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWDeleteRelationReq::InitAsDefaultInstance() {
}

CWDeleteRelationReq::CWDeleteRelationReq(const CWDeleteRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWDeleteRelationReq::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWDeleteRelationReq::~CWDeleteRelationReq() {
  SharedDtor();
}

void CWDeleteRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWDeleteRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWDeleteRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWDeleteRelationReq_descriptor_;
}

const CWDeleteRelationReq& CWDeleteRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWDeleteRelationReq* CWDeleteRelationReq::default_instance_ = NULL;

CWDeleteRelationReq* CWDeleteRelationReq::New() const {
  return new CWDeleteRelationReq;
}

void CWDeleteRelationReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    groupindex_ = 0u;
  }
  playeridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWDeleteRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 playerIdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_playeridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playeridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerIdList;
        if (input->ExpectTag(16)) goto parse_groupIndex;
        break;
      }

      // optional uint32 groupIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWDeleteRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 playerIdList = 1;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->playeridlist(i), output);
  }

  // optional uint32 groupIndex = 2;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWDeleteRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 playerIdList = 1;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->playeridlist(i), target);
  }

  // optional uint32 groupIndex = 2;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWDeleteRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 groupIndex = 2;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  // repeated uint32 playerIdList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playeridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playeridlist(i));
    }
    total_size += 1 * this->playeridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWDeleteRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWDeleteRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWDeleteRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWDeleteRelationReq::MergeFrom(const CWDeleteRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeridlist_.MergeFrom(from.playeridlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWDeleteRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWDeleteRelationReq::CopyFrom(const CWDeleteRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWDeleteRelationReq::IsInitialized() const {

  return true;
}

void CWDeleteRelationReq::Swap(CWDeleteRelationReq* other) {
  if (other != this) {
    playeridlist_.Swap(&other->playeridlist_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWDeleteRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWDeleteRelationReq_descriptor_;
  metadata.reflection = CWDeleteRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWDeleteRelationRsp::kRetFieldNumber;
const int CWDeleteRelationRsp::kPlayerIdFieldNumber;
const int CWDeleteRelationRsp::kGroupIndexFieldNumber;
const int CWDeleteRelationRsp::kIsActiveFieldNumber;
#endif  // !_MSC_VER

CWDeleteRelationRsp::CWDeleteRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWDeleteRelationRsp::InitAsDefaultInstance() {
}

CWDeleteRelationRsp::CWDeleteRelationRsp(const CWDeleteRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWDeleteRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  groupindex_ = 0u;
  isactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWDeleteRelationRsp::~CWDeleteRelationRsp() {
  SharedDtor();
}

void CWDeleteRelationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWDeleteRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWDeleteRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWDeleteRelationRsp_descriptor_;
}

const CWDeleteRelationRsp& CWDeleteRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWDeleteRelationRsp* CWDeleteRelationRsp::default_instance_ = NULL;

CWDeleteRelationRsp* CWDeleteRelationRsp::New() const {
  return new CWDeleteRelationRsp;
}

void CWDeleteRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    groupindex_ = 0u;
    isactive_ = false;
  }
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWDeleteRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // repeated uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        if (input->ExpectTag(24)) goto parse_groupIndex;
        break;
      }

      // optional uint32 groupIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isActive;
        break;
      }

      // optional bool isActive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWDeleteRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated uint32 playerId = 2;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->playerid(i), output);
  }

  // optional uint32 groupIndex = 3;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupindex(), output);
  }

  // optional bool isActive = 4;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWDeleteRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated uint32 playerId = 2;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->playerid(i), target);
  }

  // optional uint32 groupIndex = 3;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupindex(), target);
  }

  // optional bool isActive = 4;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWDeleteRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 groupIndex = 3;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

    // optional bool isActive = 4;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 playerId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWDeleteRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWDeleteRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWDeleteRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWDeleteRelationRsp::MergeFrom(const CWDeleteRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWDeleteRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWDeleteRelationRsp::CopyFrom(const CWDeleteRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWDeleteRelationRsp::IsInitialized() const {

  return true;
}

void CWDeleteRelationRsp::Swap(CWDeleteRelationRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    playerid_.Swap(&other->playerid_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(isactive_, other->isactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWDeleteRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWDeleteRelationRsp_descriptor_;
  metadata.reflection = CWDeleteRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWRecentChatListReq::CWRecentChatListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWRecentChatListReq::InitAsDefaultInstance() {
}

CWRecentChatListReq::CWRecentChatListReq(const CWRecentChatListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWRecentChatListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWRecentChatListReq::~CWRecentChatListReq() {
  SharedDtor();
}

void CWRecentChatListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWRecentChatListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWRecentChatListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWRecentChatListReq_descriptor_;
}

const CWRecentChatListReq& CWRecentChatListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWRecentChatListReq* CWRecentChatListReq::default_instance_ = NULL;

CWRecentChatListReq* CWRecentChatListReq::New() const {
  return new CWRecentChatListReq;
}

void CWRecentChatListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWRecentChatListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWRecentChatListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWRecentChatListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWRecentChatListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWRecentChatListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWRecentChatListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWRecentChatListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWRecentChatListReq::MergeFrom(const CWRecentChatListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWRecentChatListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWRecentChatListReq::CopyFrom(const CWRecentChatListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWRecentChatListReq::IsInitialized() const {

  return true;
}

void CWRecentChatListReq::Swap(CWRecentChatListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWRecentChatListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWRecentChatListReq_descriptor_;
  metadata.reflection = CWRecentChatListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCRecentChatListRsp::kRecentListFieldNumber;
#endif  // !_MSC_VER

WCRecentChatListRsp::WCRecentChatListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCRecentChatListRsp::InitAsDefaultInstance() {
}

WCRecentChatListRsp::WCRecentChatListRsp(const WCRecentChatListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCRecentChatListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCRecentChatListRsp::~WCRecentChatListRsp() {
  SharedDtor();
}

void WCRecentChatListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCRecentChatListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCRecentChatListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCRecentChatListRsp_descriptor_;
}

const WCRecentChatListRsp& WCRecentChatListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCRecentChatListRsp* WCRecentChatListRsp::default_instance_ = NULL;

WCRecentChatListRsp* WCRecentChatListRsp::New() const {
  return new WCRecentChatListRsp;
}

void WCRecentChatListRsp::Clear() {
  recentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCRecentChatListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterPlayerMiniInfo recentList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recentList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCRecentChatListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo recentList = 1;
  for (int i = 0; i < this->recentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recentlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCRecentChatListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo recentList = 1;
  for (int i = 0; i < this->recentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recentlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCRecentChatListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CharacterPlayerMiniInfo recentList = 1;
  total_size += 1 * this->recentlist_size();
  for (int i = 0; i < this->recentlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recentlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCRecentChatListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCRecentChatListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCRecentChatListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCRecentChatListRsp::MergeFrom(const WCRecentChatListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recentlist_.MergeFrom(from.recentlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCRecentChatListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCRecentChatListRsp::CopyFrom(const WCRecentChatListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCRecentChatListRsp::IsInitialized() const {

  return true;
}

void WCRecentChatListRsp::Swap(WCRecentChatListRsp* other) {
  if (other != this) {
    recentlist_.Swap(&other->recentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCRecentChatListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCRecentChatListRsp_descriptor_;
  metadata.reflection = WCRecentChatListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWOneKeyFriendReq::kAgainFieldNumber;
#endif  // !_MSC_VER

CWOneKeyFriendReq::CWOneKeyFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWOneKeyFriendReq::InitAsDefaultInstance() {
}

CWOneKeyFriendReq::CWOneKeyFriendReq(const CWOneKeyFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWOneKeyFriendReq::SharedCtor() {
  _cached_size_ = 0;
  again_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWOneKeyFriendReq::~CWOneKeyFriendReq() {
  SharedDtor();
}

void CWOneKeyFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWOneKeyFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWOneKeyFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWOneKeyFriendReq_descriptor_;
}

const CWOneKeyFriendReq& CWOneKeyFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWOneKeyFriendReq* CWOneKeyFriendReq::default_instance_ = NULL;

CWOneKeyFriendReq* CWOneKeyFriendReq::New() const {
  return new CWOneKeyFriendReq;
}

void CWOneKeyFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    again_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWOneKeyFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool again = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &again_)));
          set_has_again();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWOneKeyFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool again = 1;
  if (has_again()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->again(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWOneKeyFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool again = 1;
  if (has_again()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->again(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWOneKeyFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool again = 1;
    if (has_again()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWOneKeyFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWOneKeyFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWOneKeyFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWOneKeyFriendReq::MergeFrom(const CWOneKeyFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_again()) {
      set_again(from.again());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWOneKeyFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWOneKeyFriendReq::CopyFrom(const CWOneKeyFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWOneKeyFriendReq::IsInitialized() const {

  return true;
}

void CWOneKeyFriendReq::Swap(CWOneKeyFriendReq* other) {
  if (other != this) {
    std::swap(again_, other->again_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWOneKeyFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWOneKeyFriendReq_descriptor_;
  metadata.reflection = CWOneKeyFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCOneKeyFriendRsp::kRecommendFieldNumber;
const int WCOneKeyFriendRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCOneKeyFriendRsp::WCOneKeyFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCOneKeyFriendRsp::InitAsDefaultInstance() {
}

WCOneKeyFriendRsp::WCOneKeyFriendRsp(const WCOneKeyFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCOneKeyFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCOneKeyFriendRsp::~WCOneKeyFriendRsp() {
  SharedDtor();
}

void WCOneKeyFriendRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCOneKeyFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCOneKeyFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCOneKeyFriendRsp_descriptor_;
}

const WCOneKeyFriendRsp& WCOneKeyFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCOneKeyFriendRsp* WCOneKeyFriendRsp::default_instance_ = NULL;

WCOneKeyFriendRsp* WCOneKeyFriendRsp::New() const {
  return new WCOneKeyFriendRsp;
}

void WCOneKeyFriendRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 0u;
  }
  recommend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCOneKeyFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterPlayerMiniInfo recommend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recommend;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCOneKeyFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo recommend = 1;
  for (int i = 0; i < this->recommend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommend(i), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCOneKeyFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo recommend = 1;
  for (int i = 0; i < this->recommend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommend(i), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCOneKeyFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .ProtoBuf.CharacterPlayerMiniInfo recommend = 1;
  total_size += 1 * this->recommend_size();
  for (int i = 0; i < this->recommend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommend(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCOneKeyFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCOneKeyFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCOneKeyFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCOneKeyFriendRsp::MergeFrom(const WCOneKeyFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommend_.MergeFrom(from.recommend_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCOneKeyFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCOneKeyFriendRsp::CopyFrom(const WCOneKeyFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCOneKeyFriendRsp::IsInitialized() const {

  return true;
}

void WCOneKeyFriendRsp::Swap(WCOneKeyFriendRsp* other) {
  if (other != this) {
    recommend_.Swap(&other->recommend_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCOneKeyFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCOneKeyFriendRsp_descriptor_;
  metadata.reflection = WCOneKeyFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWRelationInfoReq::kGroupIndexFieldNumber;
#endif  // !_MSC_VER

CWRelationInfoReq::CWRelationInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWRelationInfoReq::InitAsDefaultInstance() {
}

CWRelationInfoReq::CWRelationInfoReq(const CWRelationInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWRelationInfoReq::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWRelationInfoReq::~CWRelationInfoReq() {
  SharedDtor();
}

void CWRelationInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWRelationInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWRelationInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWRelationInfoReq_descriptor_;
}

const CWRelationInfoReq& CWRelationInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWRelationInfoReq* CWRelationInfoReq::default_instance_ = NULL;

CWRelationInfoReq* CWRelationInfoReq::New() const {
  return new CWRelationInfoReq;
}

void CWRelationInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWRelationInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWRelationInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWRelationInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWRelationInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWRelationInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWRelationInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWRelationInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWRelationInfoReq::MergeFrom(const CWRelationInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWRelationInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWRelationInfoReq::CopyFrom(const CWRelationInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWRelationInfoReq::IsInitialized() const {

  return true;
}

void CWRelationInfoReq::Swap(CWRelationInfoReq* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWRelationInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWRelationInfoReq_descriptor_;
  metadata.reflection = CWRelationInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupRelationInfo::kRelationInfoListFieldNumber;
#endif  // !_MSC_VER

GroupRelationInfo::GroupRelationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupRelationInfo::InitAsDefaultInstance() {
}

GroupRelationInfo::GroupRelationInfo(const GroupRelationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupRelationInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupRelationInfo::~GroupRelationInfo() {
  SharedDtor();
}

void GroupRelationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupRelationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupRelationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupRelationInfo_descriptor_;
}

const GroupRelationInfo& GroupRelationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

GroupRelationInfo* GroupRelationInfo::default_instance_ = NULL;

GroupRelationInfo* GroupRelationInfo::New() const {
  return new GroupRelationInfo;
}

void GroupRelationInfo::Clear() {
  relationinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupRelationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterPlayerMiniInfo relationInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relationInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relationinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_relationInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupRelationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo relationInfoList = 1;
  for (int i = 0; i < this->relationinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relationinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupRelationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo relationInfoList = 1;
  for (int i = 0; i < this->relationinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->relationinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupRelationInfo::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CharacterPlayerMiniInfo relationInfoList = 1;
  total_size += 1 * this->relationinfolist_size();
  for (int i = 0; i < this->relationinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relationinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRelationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupRelationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupRelationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupRelationInfo::MergeFrom(const GroupRelationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  relationinfolist_.MergeFrom(from.relationinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupRelationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRelationInfo::CopyFrom(const GroupRelationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRelationInfo::IsInitialized() const {

  return true;
}

void GroupRelationInfo::Swap(GroupRelationInfo* other) {
  if (other != this) {
    relationinfolist_.Swap(&other->relationinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupRelationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupRelationInfo_descriptor_;
  metadata.reflection = GroupRelationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCRelationInfoRsp::kGroupIndexFieldNumber;
const int WCRelationInfoRsp::kRelationInfoFieldNumber;
const int WCRelationInfoRsp::kLeftGiveTimesFieldNumber;
const int WCRelationInfoRsp::kGiftProgressFieldNumber;
#endif  // !_MSC_VER

WCRelationInfoRsp::WCRelationInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCRelationInfoRsp::InitAsDefaultInstance() {
}

WCRelationInfoRsp::WCRelationInfoRsp(const WCRelationInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCRelationInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  leftgivetimes_ = 0u;
  giftprogress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCRelationInfoRsp::~WCRelationInfoRsp() {
  SharedDtor();
}

void WCRelationInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCRelationInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCRelationInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCRelationInfoRsp_descriptor_;
}

const WCRelationInfoRsp& WCRelationInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCRelationInfoRsp* WCRelationInfoRsp::default_instance_ = NULL;

WCRelationInfoRsp* WCRelationInfoRsp::New() const {
  return new WCRelationInfoRsp;
}

void WCRelationInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
    leftgivetimes_ = 0u;
    giftprogress_ = 0u;
  }
  relationinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCRelationInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relationInfo;
        break;
      }

      // repeated .ProtoBuf.GroupRelationInfo relationInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relationInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relationinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relationInfo;
        if (input->ExpectTag(24)) goto parse_leftGiveTimes;
        break;
      }

      // optional uint32 leftGiveTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftGiveTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftgivetimes_)));
          set_has_leftgivetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_giftProgress;
        break;
      }

      // optional uint32 giftProgress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftprogress_)));
          set_has_giftprogress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCRelationInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  // repeated .ProtoBuf.GroupRelationInfo relationInfo = 2;
  for (int i = 0; i < this->relationinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relationinfo(i), output);
  }

  // optional uint32 leftGiveTimes = 3;
  if (has_leftgivetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leftgivetimes(), output);
  }

  // optional uint32 giftProgress = 4;
  if (has_giftprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->giftprogress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCRelationInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  // repeated .ProtoBuf.GroupRelationInfo relationInfo = 2;
  for (int i = 0; i < this->relationinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relationinfo(i), target);
  }

  // optional uint32 leftGiveTimes = 3;
  if (has_leftgivetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leftgivetimes(), target);
  }

  // optional uint32 giftProgress = 4;
  if (has_giftprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->giftprogress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCRelationInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

    // optional uint32 leftGiveTimes = 3;
    if (has_leftgivetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftgivetimes());
    }

    // optional uint32 giftProgress = 4;
    if (has_giftprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftprogress());
    }

  }
  // repeated .ProtoBuf.GroupRelationInfo relationInfo = 2;
  total_size += 1 * this->relationinfo_size();
  for (int i = 0; i < this->relationinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relationinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCRelationInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCRelationInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCRelationInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCRelationInfoRsp::MergeFrom(const WCRelationInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  relationinfo_.MergeFrom(from.relationinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_leftgivetimes()) {
      set_leftgivetimes(from.leftgivetimes());
    }
    if (from.has_giftprogress()) {
      set_giftprogress(from.giftprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCRelationInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCRelationInfoRsp::CopyFrom(const WCRelationInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCRelationInfoRsp::IsInitialized() const {

  return true;
}

void WCRelationInfoRsp::Swap(WCRelationInfoRsp* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    relationinfo_.Swap(&other->relationinfo_);
    std::swap(leftgivetimes_, other->leftgivetimes_);
    std::swap(giftprogress_, other->giftprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCRelationInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCRelationInfoRsp_descriptor_;
  metadata.reflection = WCRelationInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWSearchUserReq::kNameFieldNumber;
const int CWSearchUserReq::kSearchIDFieldNumber;
#endif  // !_MSC_VER

CWSearchUserReq::CWSearchUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWSearchUserReq::InitAsDefaultInstance() {
}

CWSearchUserReq::CWSearchUserReq(const CWSearchUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWSearchUserReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  searchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWSearchUserReq::~CWSearchUserReq() {
  SharedDtor();
}

void CWSearchUserReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CWSearchUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWSearchUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWSearchUserReq_descriptor_;
}

const CWSearchUserReq& CWSearchUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWSearchUserReq* CWSearchUserReq::default_instance_ = NULL;

CWSearchUserReq* CWSearchUserReq::New() const {
  return new CWSearchUserReq;
}

void CWSearchUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    searchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWSearchUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_searchID;
        break;
      }

      // optional uint32 searchID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &searchid_)));
          set_has_searchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWSearchUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 searchID = 2;
  if (has_searchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->searchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWSearchUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 searchID = 2;
  if (has_searchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->searchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWSearchUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 searchID = 2;
    if (has_searchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->searchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWSearchUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWSearchUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWSearchUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWSearchUserReq::MergeFrom(const CWSearchUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_searchid()) {
      set_searchid(from.searchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWSearchUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWSearchUserReq::CopyFrom(const CWSearchUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWSearchUserReq::IsInitialized() const {

  return true;
}

void CWSearchUserReq::Swap(CWSearchUserReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(searchid_, other->searchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWSearchUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWSearchUserReq_descriptor_;
  metadata.reflection = CWSearchUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCSearchUserRsp::kRetFieldNumber;
const int WCSearchUserRsp::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

WCSearchUserRsp::WCSearchUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCSearchUserRsp::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::ProtoBuf::CharacterPlayerMiniInfo*>(&::ProtoBuf::CharacterPlayerMiniInfo::default_instance());
}

WCSearchUserRsp::WCSearchUserRsp(const WCSearchUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCSearchUserRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  playerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCSearchUserRsp::~WCSearchUserRsp() {
  SharedDtor();
}

void WCSearchUserRsp::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void WCSearchUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCSearchUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCSearchUserRsp_descriptor_;
}

const WCSearchUserRsp& WCSearchUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCSearchUserRsp* WCSearchUserRsp::default_instance_ = NULL;

WCSearchUserRsp* WCSearchUserRsp::New() const {
  return new WCSearchUserRsp;
}

void WCSearchUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::ProtoBuf::CharacterPlayerMiniInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCSearchUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        break;
      }

      // optional .ProtoBuf.CharacterPlayerMiniInfo playerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCSearchUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional .ProtoBuf.CharacterPlayerMiniInfo playerInfo = 2;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCSearchUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional .ProtoBuf.CharacterPlayerMiniInfo playerInfo = 2;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCSearchUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .ProtoBuf.CharacterPlayerMiniInfo playerInfo = 2;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCSearchUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCSearchUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCSearchUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCSearchUserRsp::MergeFrom(const WCSearchUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::ProtoBuf::CharacterPlayerMiniInfo::MergeFrom(from.playerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCSearchUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCSearchUserRsp::CopyFrom(const WCSearchUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCSearchUserRsp::IsInitialized() const {

  return true;
}

void WCSearchUserRsp::Swap(WCSearchUserRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCSearchUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCSearchUserRsp_descriptor_;
  metadata.reflection = WCSearchUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWGivePhyscialReq::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CWGivePhyscialReq::CWGivePhyscialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGivePhyscialReq::InitAsDefaultInstance() {
}

CWGivePhyscialReq::CWGivePhyscialReq(const CWGivePhyscialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGivePhyscialReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGivePhyscialReq::~CWGivePhyscialReq() {
  SharedDtor();
}

void CWGivePhyscialReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGivePhyscialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGivePhyscialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGivePhyscialReq_descriptor_;
}

const CWGivePhyscialReq& CWGivePhyscialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWGivePhyscialReq* CWGivePhyscialReq::default_instance_ = NULL;

CWGivePhyscialReq* CWGivePhyscialReq::New() const {
  return new CWGivePhyscialReq;
}

void CWGivePhyscialReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGivePhyscialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWGivePhyscialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGivePhyscialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGivePhyscialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGivePhyscialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGivePhyscialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGivePhyscialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGivePhyscialReq::MergeFrom(const CWGivePhyscialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGivePhyscialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGivePhyscialReq::CopyFrom(const CWGivePhyscialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGivePhyscialReq::IsInitialized() const {

  return true;
}

void CWGivePhyscialReq::Swap(CWGivePhyscialReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGivePhyscialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGivePhyscialReq_descriptor_;
  metadata.reflection = CWGivePhyscialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCGivePhyscialRsp::kRetFieldNumber;
const int WCGivePhyscialRsp::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

WCGivePhyscialRsp::WCGivePhyscialRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCGivePhyscialRsp::InitAsDefaultInstance() {
}

WCGivePhyscialRsp::WCGivePhyscialRsp(const WCGivePhyscialRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCGivePhyscialRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCGivePhyscialRsp::~WCGivePhyscialRsp() {
  SharedDtor();
}

void WCGivePhyscialRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCGivePhyscialRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCGivePhyscialRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCGivePhyscialRsp_descriptor_;
}

const WCGivePhyscialRsp& WCGivePhyscialRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCGivePhyscialRsp* WCGivePhyscialRsp::default_instance_ = NULL;

WCGivePhyscialRsp* WCGivePhyscialRsp::New() const {
  return new WCGivePhyscialRsp;
}

void WCGivePhyscialRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCGivePhyscialRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCGivePhyscialRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCGivePhyscialRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCGivePhyscialRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCGivePhyscialRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCGivePhyscialRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCGivePhyscialRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCGivePhyscialRsp::MergeFrom(const WCGivePhyscialRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCGivePhyscialRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCGivePhyscialRsp::CopyFrom(const WCGivePhyscialRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCGivePhyscialRsp::IsInitialized() const {

  return true;
}

void WCGivePhyscialRsp::Swap(WCGivePhyscialRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCGivePhyscialRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCGivePhyscialRsp_descriptor_;
  metadata.reflection = WCGivePhyscialRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCPhysicalNotifyRsp::kTypeFieldNumber;
const int WCPhysicalNotifyRsp::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

WCPhysicalNotifyRsp::WCPhysicalNotifyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCPhysicalNotifyRsp::InitAsDefaultInstance() {
}

WCPhysicalNotifyRsp::WCPhysicalNotifyRsp(const WCPhysicalNotifyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCPhysicalNotifyRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCPhysicalNotifyRsp::~WCPhysicalNotifyRsp() {
  SharedDtor();
}

void WCPhysicalNotifyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCPhysicalNotifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCPhysicalNotifyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCPhysicalNotifyRsp_descriptor_;
}

const WCPhysicalNotifyRsp& WCPhysicalNotifyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCPhysicalNotifyRsp* WCPhysicalNotifyRsp::default_instance_ = NULL;

WCPhysicalNotifyRsp* WCPhysicalNotifyRsp::New() const {
  return new WCPhysicalNotifyRsp;
}

void WCPhysicalNotifyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCPhysicalNotifyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCPhysicalNotifyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCPhysicalNotifyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCPhysicalNotifyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCPhysicalNotifyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCPhysicalNotifyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCPhysicalNotifyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCPhysicalNotifyRsp::MergeFrom(const WCPhysicalNotifyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCPhysicalNotifyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCPhysicalNotifyRsp::CopyFrom(const WCPhysicalNotifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCPhysicalNotifyRsp::IsInitialized() const {

  return true;
}

void WCPhysicalNotifyRsp::Swap(WCPhysicalNotifyRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCPhysicalNotifyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCPhysicalNotifyRsp_descriptor_;
  metadata.reflection = WCPhysicalNotifyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAllGivePhyscialReq::kPlayerIdsFieldNumber;
#endif  // !_MSC_VER

CWAllGivePhyscialReq::CWAllGivePhyscialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAllGivePhyscialReq::InitAsDefaultInstance() {
}

CWAllGivePhyscialReq::CWAllGivePhyscialReq(const CWAllGivePhyscialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAllGivePhyscialReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAllGivePhyscialReq::~CWAllGivePhyscialReq() {
  SharedDtor();
}

void CWAllGivePhyscialReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAllGivePhyscialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAllGivePhyscialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAllGivePhyscialReq_descriptor_;
}

const CWAllGivePhyscialReq& CWAllGivePhyscialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWAllGivePhyscialReq* CWAllGivePhyscialReq::default_instance_ = NULL;

CWAllGivePhyscialReq* CWAllGivePhyscialReq::New() const {
  return new CWAllGivePhyscialReq;
}

void CWAllGivePhyscialReq::Clear() {
  playerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAllGivePhyscialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 playerIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_playerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAllGivePhyscialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->playerids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAllGivePhyscialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->playerids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAllGivePhyscialReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 playerIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerids(i));
    }
    total_size += 1 * this->playerids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAllGivePhyscialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAllGivePhyscialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAllGivePhyscialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAllGivePhyscialReq::MergeFrom(const CWAllGivePhyscialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerids_.MergeFrom(from.playerids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAllGivePhyscialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAllGivePhyscialReq::CopyFrom(const CWAllGivePhyscialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAllGivePhyscialReq::IsInitialized() const {

  return true;
}

void CWAllGivePhyscialReq::Swap(CWAllGivePhyscialReq* other) {
  if (other != this) {
    playerids_.Swap(&other->playerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAllGivePhyscialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAllGivePhyscialReq_descriptor_;
  metadata.reflection = CWAllGivePhyscialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCAllGivePhyscialRsp::kPlayerIdsFieldNumber;
#endif  // !_MSC_VER

WCAllGivePhyscialRsp::WCAllGivePhyscialRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCAllGivePhyscialRsp::InitAsDefaultInstance() {
}

WCAllGivePhyscialRsp::WCAllGivePhyscialRsp(const WCAllGivePhyscialRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCAllGivePhyscialRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCAllGivePhyscialRsp::~WCAllGivePhyscialRsp() {
  SharedDtor();
}

void WCAllGivePhyscialRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCAllGivePhyscialRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCAllGivePhyscialRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCAllGivePhyscialRsp_descriptor_;
}

const WCAllGivePhyscialRsp& WCAllGivePhyscialRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCAllGivePhyscialRsp* WCAllGivePhyscialRsp::default_instance_ = NULL;

WCAllGivePhyscialRsp* WCAllGivePhyscialRsp::New() const {
  return new WCAllGivePhyscialRsp;
}

void WCAllGivePhyscialRsp::Clear() {
  playerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCAllGivePhyscialRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 playerIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_playerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCAllGivePhyscialRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->playerids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCAllGivePhyscialRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 playerIds = 1;
  for (int i = 0; i < this->playerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->playerids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCAllGivePhyscialRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 playerIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerids(i));
    }
    total_size += 1 * this->playerids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCAllGivePhyscialRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCAllGivePhyscialRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCAllGivePhyscialRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCAllGivePhyscialRsp::MergeFrom(const WCAllGivePhyscialRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerids_.MergeFrom(from.playerids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCAllGivePhyscialRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCAllGivePhyscialRsp::CopyFrom(const WCAllGivePhyscialRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCAllGivePhyscialRsp::IsInitialized() const {

  return true;
}

void WCAllGivePhyscialRsp::Swap(WCAllGivePhyscialRsp* other) {
  if (other != this) {
    playerids_.Swap(&other->playerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCAllGivePhyscialRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCAllGivePhyscialRsp_descriptor_;
  metadata.reflection = WCAllGivePhyscialRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWGetPhyscialReq::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CWGetPhyscialReq::CWGetPhyscialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGetPhyscialReq::InitAsDefaultInstance() {
}

CWGetPhyscialReq::CWGetPhyscialReq(const CWGetPhyscialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGetPhyscialReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGetPhyscialReq::~CWGetPhyscialReq() {
  SharedDtor();
}

void CWGetPhyscialReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGetPhyscialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGetPhyscialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGetPhyscialReq_descriptor_;
}

const CWGetPhyscialReq& CWGetPhyscialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWGetPhyscialReq* CWGetPhyscialReq::default_instance_ = NULL;

CWGetPhyscialReq* CWGetPhyscialReq::New() const {
  return new CWGetPhyscialReq;
}

void CWGetPhyscialReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGetPhyscialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWGetPhyscialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGetPhyscialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGetPhyscialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGetPhyscialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGetPhyscialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGetPhyscialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGetPhyscialReq::MergeFrom(const CWGetPhyscialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGetPhyscialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGetPhyscialReq::CopyFrom(const CWGetPhyscialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGetPhyscialReq::IsInitialized() const {

  return true;
}

void CWGetPhyscialReq::Swap(CWGetPhyscialReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGetPhyscialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGetPhyscialReq_descriptor_;
  metadata.reflection = CWGetPhyscialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCGetPhyscialRsp::kRetFieldNumber;
const int WCGetPhyscialRsp::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

WCGetPhyscialRsp::WCGetPhyscialRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCGetPhyscialRsp::InitAsDefaultInstance() {
}

WCGetPhyscialRsp::WCGetPhyscialRsp(const WCGetPhyscialRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCGetPhyscialRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCGetPhyscialRsp::~WCGetPhyscialRsp() {
  SharedDtor();
}

void WCGetPhyscialRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCGetPhyscialRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCGetPhyscialRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCGetPhyscialRsp_descriptor_;
}

const WCGetPhyscialRsp& WCGetPhyscialRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCGetPhyscialRsp* WCGetPhyscialRsp::default_instance_ = NULL;

WCGetPhyscialRsp* WCGetPhyscialRsp::New() const {
  return new WCGetPhyscialRsp;
}

void WCGetPhyscialRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCGetPhyscialRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCGetPhyscialRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCGetPhyscialRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCGetPhyscialRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCGetPhyscialRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCGetPhyscialRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCGetPhyscialRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCGetPhyscialRsp::MergeFrom(const WCGetPhyscialRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCGetPhyscialRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCGetPhyscialRsp::CopyFrom(const WCGetPhyscialRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCGetPhyscialRsp::IsInitialized() const {

  return true;
}

void WCGetPhyscialRsp::Swap(WCGetPhyscialRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCGetPhyscialRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCGetPhyscialRsp_descriptor_;
  metadata.reflection = WCGetPhyscialRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WLGetPhyscialReq::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

WLGetPhyscialReq::WLGetPhyscialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WLGetPhyscialReq::InitAsDefaultInstance() {
}

WLGetPhyscialReq::WLGetPhyscialReq(const WLGetPhyscialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WLGetPhyscialReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WLGetPhyscialReq::~WLGetPhyscialReq() {
  SharedDtor();
}

void WLGetPhyscialReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WLGetPhyscialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WLGetPhyscialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WLGetPhyscialReq_descriptor_;
}

const WLGetPhyscialReq& WLGetPhyscialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WLGetPhyscialReq* WLGetPhyscialReq::default_instance_ = NULL;

WLGetPhyscialReq* WLGetPhyscialReq::New() const {
  return new WLGetPhyscialReq;
}

void WLGetPhyscialReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WLGetPhyscialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WLGetPhyscialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WLGetPhyscialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WLGetPhyscialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WLGetPhyscialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WLGetPhyscialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WLGetPhyscialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WLGetPhyscialReq::MergeFrom(const WLGetPhyscialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WLGetPhyscialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLGetPhyscialReq::CopyFrom(const WLGetPhyscialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLGetPhyscialReq::IsInitialized() const {

  return true;
}

void WLGetPhyscialReq::Swap(WLGetPhyscialReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WLGetPhyscialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WLGetPhyscialReq_descriptor_;
  metadata.reflection = WLGetPhyscialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWGetPhysicalGiftReq::CWGetPhysicalGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGetPhysicalGiftReq::InitAsDefaultInstance() {
}

CWGetPhysicalGiftReq::CWGetPhysicalGiftReq(const CWGetPhysicalGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGetPhysicalGiftReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGetPhysicalGiftReq::~CWGetPhysicalGiftReq() {
  SharedDtor();
}

void CWGetPhysicalGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGetPhysicalGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGetPhysicalGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGetPhysicalGiftReq_descriptor_;
}

const CWGetPhysicalGiftReq& CWGetPhysicalGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWGetPhysicalGiftReq* CWGetPhysicalGiftReq::default_instance_ = NULL;

CWGetPhysicalGiftReq* CWGetPhysicalGiftReq::New() const {
  return new CWGetPhysicalGiftReq;
}

void CWGetPhysicalGiftReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGetPhysicalGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWGetPhysicalGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGetPhysicalGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGetPhysicalGiftReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGetPhysicalGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGetPhysicalGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGetPhysicalGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGetPhysicalGiftReq::MergeFrom(const CWGetPhysicalGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGetPhysicalGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGetPhysicalGiftReq::CopyFrom(const CWGetPhysicalGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGetPhysicalGiftReq::IsInitialized() const {

  return true;
}

void CWGetPhysicalGiftReq::Swap(CWGetPhysicalGiftReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGetPhysicalGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGetPhysicalGiftReq_descriptor_;
  metadata.reflection = CWGetPhysicalGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCGetPhysicalGiftRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCGetPhysicalGiftRsp::WCGetPhysicalGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCGetPhysicalGiftRsp::InitAsDefaultInstance() {
}

WCGetPhysicalGiftRsp::WCGetPhysicalGiftRsp(const WCGetPhysicalGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCGetPhysicalGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCGetPhysicalGiftRsp::~WCGetPhysicalGiftRsp() {
  SharedDtor();
}

void WCGetPhysicalGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCGetPhysicalGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCGetPhysicalGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCGetPhysicalGiftRsp_descriptor_;
}

const WCGetPhysicalGiftRsp& WCGetPhysicalGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCGetPhysicalGiftRsp* WCGetPhysicalGiftRsp::default_instance_ = NULL;

WCGetPhysicalGiftRsp* WCGetPhysicalGiftRsp::New() const {
  return new WCGetPhysicalGiftRsp;
}

void WCGetPhysicalGiftRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCGetPhysicalGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCGetPhysicalGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCGetPhysicalGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCGetPhysicalGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCGetPhysicalGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCGetPhysicalGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCGetPhysicalGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCGetPhysicalGiftRsp::MergeFrom(const WCGetPhysicalGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCGetPhysicalGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCGetPhysicalGiftRsp::CopyFrom(const WCGetPhysicalGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCGetPhysicalGiftRsp::IsInitialized() const {

  return true;
}

void WCGetPhysicalGiftRsp::Swap(WCGetPhysicalGiftRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCGetPhysicalGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCGetPhysicalGiftRsp_descriptor_;
  metadata.reflection = WCGetPhysicalGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WLGetPhysicalGiftReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

WLGetPhysicalGiftReq::WLGetPhysicalGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WLGetPhysicalGiftReq::InitAsDefaultInstance() {
}

WLGetPhysicalGiftReq::WLGetPhysicalGiftReq(const WLGetPhysicalGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WLGetPhysicalGiftReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WLGetPhysicalGiftReq::~WLGetPhysicalGiftReq() {
  SharedDtor();
}

void WLGetPhysicalGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WLGetPhysicalGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WLGetPhysicalGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WLGetPhysicalGiftReq_descriptor_;
}

const WLGetPhysicalGiftReq& WLGetPhysicalGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WLGetPhysicalGiftReq* WLGetPhysicalGiftReq::default_instance_ = NULL;

WLGetPhysicalGiftReq* WLGetPhysicalGiftReq::New() const {
  return new WLGetPhysicalGiftReq;
}

void WLGetPhysicalGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WLGetPhysicalGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WLGetPhysicalGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WLGetPhysicalGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WLGetPhysicalGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WLGetPhysicalGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WLGetPhysicalGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WLGetPhysicalGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WLGetPhysicalGiftReq::MergeFrom(const WLGetPhysicalGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WLGetPhysicalGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLGetPhysicalGiftReq::CopyFrom(const WLGetPhysicalGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLGetPhysicalGiftReq::IsInitialized() const {

  return true;
}

void WLGetPhysicalGiftReq::Swap(WLGetPhysicalGiftReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WLGetPhysicalGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WLGetPhysicalGiftReq_descriptor_;
  metadata.reflection = WLGetPhysicalGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWApplyListReq::CWApplyListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWApplyListReq::InitAsDefaultInstance() {
}

CWApplyListReq::CWApplyListReq(const CWApplyListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWApplyListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWApplyListReq::~CWApplyListReq() {
  SharedDtor();
}

void CWApplyListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWApplyListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWApplyListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWApplyListReq_descriptor_;
}

const CWApplyListReq& CWApplyListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWApplyListReq* CWApplyListReq::default_instance_ = NULL;

CWApplyListReq* CWApplyListReq::New() const {
  return new CWApplyListReq;
}

void CWApplyListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWApplyListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWApplyListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWApplyListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWApplyListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWApplyListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWApplyListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWApplyListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWApplyListReq::MergeFrom(const CWApplyListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWApplyListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWApplyListReq::CopyFrom(const CWApplyListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWApplyListReq::IsInitialized() const {

  return true;
}

void CWApplyListReq::Swap(CWApplyListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWApplyListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWApplyListReq_descriptor_;
  metadata.reflection = CWApplyListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCApplyListRsp::kApplyInfoFieldNumber;
#endif  // !_MSC_VER

WCApplyListRsp::WCApplyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCApplyListRsp::InitAsDefaultInstance() {
}

WCApplyListRsp::WCApplyListRsp(const WCApplyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCApplyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCApplyListRsp::~WCApplyListRsp() {
  SharedDtor();
}

void WCApplyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCApplyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCApplyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCApplyListRsp_descriptor_;
}

const WCApplyListRsp& WCApplyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCApplyListRsp* WCApplyListRsp::default_instance_ = NULL;

WCApplyListRsp* WCApplyListRsp::New() const {
  return new WCApplyListRsp;
}

void WCApplyListRsp::Clear() {
  applyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCApplyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuf.CharacterPlayerMiniInfo applyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCApplyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo applyInfo = 1;
  for (int i = 0; i < this->applyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCApplyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBuf.CharacterPlayerMiniInfo applyInfo = 1;
  for (int i = 0; i < this->applyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCApplyListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoBuf.CharacterPlayerMiniInfo applyInfo = 1;
  total_size += 1 * this->applyinfo_size();
  for (int i = 0; i < this->applyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCApplyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCApplyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCApplyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCApplyListRsp::MergeFrom(const WCApplyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyinfo_.MergeFrom(from.applyinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCApplyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCApplyListRsp::CopyFrom(const WCApplyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCApplyListRsp::IsInitialized() const {

  return true;
}

void WCApplyListRsp::Swap(WCApplyListRsp* other) {
  if (other != this) {
    applyinfo_.Swap(&other->applyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCApplyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCApplyListRsp_descriptor_;
  metadata.reflection = WCApplyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWClearApplyListReq::CWClearApplyListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWClearApplyListReq::InitAsDefaultInstance() {
}

CWClearApplyListReq::CWClearApplyListReq(const CWClearApplyListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWClearApplyListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWClearApplyListReq::~CWClearApplyListReq() {
  SharedDtor();
}

void CWClearApplyListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWClearApplyListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWClearApplyListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWClearApplyListReq_descriptor_;
}

const CWClearApplyListReq& CWClearApplyListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWClearApplyListReq* CWClearApplyListReq::default_instance_ = NULL;

CWClearApplyListReq* CWClearApplyListReq::New() const {
  return new CWClearApplyListReq;
}

void CWClearApplyListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWClearApplyListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWClearApplyListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWClearApplyListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWClearApplyListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWClearApplyListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWClearApplyListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWClearApplyListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWClearApplyListReq::MergeFrom(const CWClearApplyListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWClearApplyListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWClearApplyListReq::CopyFrom(const CWClearApplyListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWClearApplyListReq::IsInitialized() const {

  return true;
}

void CWClearApplyListReq::Swap(CWClearApplyListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWClearApplyListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWClearApplyListReq_descriptor_;
  metadata.reflection = CWClearApplyListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCClearApplyListRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCClearApplyListRsp::WCClearApplyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCClearApplyListRsp::InitAsDefaultInstance() {
}

WCClearApplyListRsp::WCClearApplyListRsp(const WCClearApplyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCClearApplyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCClearApplyListRsp::~WCClearApplyListRsp() {
  SharedDtor();
}

void WCClearApplyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCClearApplyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCClearApplyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCClearApplyListRsp_descriptor_;
}

const WCClearApplyListRsp& WCClearApplyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

WCClearApplyListRsp* WCClearApplyListRsp::default_instance_ = NULL;

WCClearApplyListRsp* WCClearApplyListRsp::New() const {
  return new WCClearApplyListRsp;
}

void WCClearApplyListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCClearApplyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCClearApplyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCClearApplyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCClearApplyListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCClearApplyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCClearApplyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCClearApplyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCClearApplyListRsp::MergeFrom(const WCClearApplyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCClearApplyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCClearApplyListRsp::CopyFrom(const WCClearApplyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCClearApplyListRsp::IsInitialized() const {

  return true;
}

void WCClearApplyListRsp::Swap(WCClearApplyListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCClearApplyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCClearApplyListRsp_descriptor_;
  metadata.reflection = WCClearApplyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWOneKeyAgreeRelationReq::CWOneKeyAgreeRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWOneKeyAgreeRelationReq::InitAsDefaultInstance() {
}

CWOneKeyAgreeRelationReq::CWOneKeyAgreeRelationReq(const CWOneKeyAgreeRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWOneKeyAgreeRelationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWOneKeyAgreeRelationReq::~CWOneKeyAgreeRelationReq() {
  SharedDtor();
}

void CWOneKeyAgreeRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWOneKeyAgreeRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWOneKeyAgreeRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWOneKeyAgreeRelationReq_descriptor_;
}

const CWOneKeyAgreeRelationReq& CWOneKeyAgreeRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuffer_2fRelation_2eproto();
  return *default_instance_;
}

CWOneKeyAgreeRelationReq* CWOneKeyAgreeRelationReq::default_instance_ = NULL;

CWOneKeyAgreeRelationReq* CWOneKeyAgreeRelationReq::New() const {
  return new CWOneKeyAgreeRelationReq;
}

void CWOneKeyAgreeRelationReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWOneKeyAgreeRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWOneKeyAgreeRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWOneKeyAgreeRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWOneKeyAgreeRelationReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWOneKeyAgreeRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWOneKeyAgreeRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWOneKeyAgreeRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWOneKeyAgreeRelationReq::MergeFrom(const CWOneKeyAgreeRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWOneKeyAgreeRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWOneKeyAgreeRelationReq::CopyFrom(const CWOneKeyAgreeRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWOneKeyAgreeRelationReq::IsInitialized() const {

  return true;
}

void CWOneKeyAgreeRelationReq::Swap(CWOneKeyAgreeRelationReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWOneKeyAgreeRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWOneKeyAgreeRelationReq_descriptor_;
  metadata.reflection = CWOneKeyAgreeRelationReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

// @@protoc_insertion_point(global_scope)
