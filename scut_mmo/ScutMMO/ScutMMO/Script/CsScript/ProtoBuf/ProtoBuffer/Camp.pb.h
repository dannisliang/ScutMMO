// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffer/Camp.proto

#ifndef PROTOBUF_ProtoBuffer_2fCamp_2eproto__INCLUDED
#define PROTOBUF_ProtoBuffer_2fCamp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBuffer/ComProtocol.pb.h"
#include "ProtoBuffer/ClientToServerCmd.pb.h"
#include "Common/ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

class CampProtoInfo;
class CampProtoRankInfo;
class CampProtoHonorInfo;
class Camp_JoinReq;
class Camp_JoinRsp;
class Camp_ChangeReq;
class Camp_ChangeRsp;
class Camp_CampInfoReq;
class Camp_CampInfoRsp;
class Camp_RankInfoReq;
class Camp_RankInfoRsp;
class Camp_HonorInfoReq;
class Camp_HonorInfoRsp;
class Camp_PublishNoticeReq;
class Camp_PublishNoticeRsp;
class Camp_BroadNoticeRsp;
class CenterToLogic_CampCharInfo;
class CenterToLogic_CheckNoticeCostReq;
class LogicToCenter_CheckNoticeCostRsp;

// ===================================================================

class CampProtoInfo : public ::google::protobuf::Message {
 public:
  CampProtoInfo();
  virtual ~CampProtoInfo();

  CampProtoInfo(const CampProtoInfo& from);

  inline CampProtoInfo& operator=(const CampProtoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampProtoInfo& default_instance();

  void Swap(CampProtoInfo* other);

  // implements Message ----------------------------------------------

  CampProtoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampProtoInfo& from);
  void MergeFrom(const CampProtoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 camp_id = 1;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 1;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // optional string leader_name = 2;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 2;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const char* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional string notice = 3;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 3;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint64 notice_cd = 4;
  inline bool has_notice_cd() const;
  inline void clear_notice_cd();
  static const int kNoticeCdFieldNumber = 4;
  inline ::google::protobuf::uint64 notice_cd() const;
  inline void set_notice_cd(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CampProtoInfo)
 private:
  inline void set_has_camp_id();
  inline void clear_has_camp_id();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_notice_cd();
  inline void clear_has_notice_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* leader_name_;
  ::std::string* notice_;
  ::google::protobuf::uint64 notice_cd_;
  ::google::protobuf::int32 camp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static CampProtoInfo* default_instance_;
};
// -------------------------------------------------------------------

class CampProtoRankInfo : public ::google::protobuf::Message {
 public:
  CampProtoRankInfo();
  virtual ~CampProtoRankInfo();

  CampProtoRankInfo(const CampProtoRankInfo& from);

  inline CampProtoRankInfo& operator=(const CampProtoRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampProtoRankInfo& default_instance();

  void Swap(CampProtoRankInfo* other);

  // implements Message ----------------------------------------------

  CampProtoRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampProtoRankInfo& from);
  void MergeFrom(const CampProtoRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::uint32 fight() const;
  inline void set_fight(::google::protobuf::uint32 value);

  // optional int32 official = 4;
  inline bool has_official() const;
  inline void clear_official();
  static const int kOfficialFieldNumber = 4;
  inline ::google::protobuf::int32 official() const;
  inline void set_official(::google::protobuf::int32 value);

  // optional int32 knight = 5;
  inline bool has_knight() const;
  inline void clear_knight();
  static const int kKnightFieldNumber = 5;
  inline ::google::protobuf::int32 knight() const;
  inline void set_knight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CampProtoRankInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_official();
  inline void clear_has_official();
  inline void set_has_knight();
  inline void clear_has_knight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 fight_;
  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 knight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static CampProtoRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class CampProtoHonorInfo : public ::google::protobuf::Message {
 public:
  CampProtoHonorInfo();
  virtual ~CampProtoHonorInfo();

  CampProtoHonorInfo(const CampProtoHonorInfo& from);

  inline CampProtoHonorInfo& operator=(const CampProtoHonorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CampProtoHonorInfo& default_instance();

  void Swap(CampProtoHonorInfo* other);

  // implements Message ----------------------------------------------

  CampProtoHonorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CampProtoHonorInfo& from);
  void MergeFrom(const CampProtoHonorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 official = 1;
  inline bool has_official() const;
  inline void clear_official();
  static const int kOfficialFieldNumber = 1;
  inline ::google::protobuf::int32 official() const;
  inline void set_official(::google::protobuf::int32 value);

  // optional int32 knight = 2;
  inline bool has_knight() const;
  inline void clear_knight();
  static const int kKnightFieldNumber = 2;
  inline ::google::protobuf::int32 knight() const;
  inline void set_knight(::google::protobuf::int32 value);

  // optional uint32 contribute = 3;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 3;
  inline ::google::protobuf::uint32 contribute() const;
  inline void set_contribute(::google::protobuf::uint32 value);

  // optional uint32 total_contribute = 4;
  inline bool has_total_contribute() const;
  inline void clear_total_contribute();
  static const int kTotalContributeFieldNumber = 4;
  inline ::google::protobuf::uint32 total_contribute() const;
  inline void set_total_contribute(::google::protobuf::uint32 value);

  // optional uint32 prestige = 5;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 5;
  inline ::google::protobuf::uint32 prestige() const;
  inline void set_prestige(::google::protobuf::uint32 value);

  // optional uint32 kill_enemy_camp = 6;
  inline bool has_kill_enemy_camp() const;
  inline void clear_kill_enemy_camp();
  static const int kKillEnemyCampFieldNumber = 6;
  inline ::google::protobuf::uint32 kill_enemy_camp() const;
  inline void set_kill_enemy_camp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CampProtoHonorInfo)
 private:
  inline void set_has_official();
  inline void clear_has_official();
  inline void set_has_knight();
  inline void clear_has_knight();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_total_contribute();
  inline void clear_has_total_contribute();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_kill_enemy_camp();
  inline void clear_has_kill_enemy_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 knight_;
  ::google::protobuf::uint32 contribute_;
  ::google::protobuf::uint32 total_contribute_;
  ::google::protobuf::uint32 prestige_;
  ::google::protobuf::uint32 kill_enemy_camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static CampProtoHonorInfo* default_instance_;
};
// -------------------------------------------------------------------

class Camp_JoinReq : public ::google::protobuf::Message {
 public:
  Camp_JoinReq();
  virtual ~Camp_JoinReq();

  Camp_JoinReq(const Camp_JoinReq& from);

  inline Camp_JoinReq& operator=(const Camp_JoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_JoinReq& default_instance();

  void Swap(Camp_JoinReq* other);

  // implements Message ----------------------------------------------

  Camp_JoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_JoinReq& from);
  void MergeFrom(const Camp_JoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_JoinReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_JoinReq* default_instance_;
};
// -------------------------------------------------------------------

class Camp_JoinRsp : public ::google::protobuf::Message {
 public:
  Camp_JoinRsp();
  virtual ~Camp_JoinRsp();

  Camp_JoinRsp(const Camp_JoinRsp& from);

  inline Camp_JoinRsp& operator=(const Camp_JoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_JoinRsp& default_instance();

  void Swap(Camp_JoinRsp* other);

  // implements Message ----------------------------------------------

  Camp_JoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_JoinRsp& from);
  void MergeFrom(const Camp_JoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional .ProtoBuf.CampProtoInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ProtoBuf::CampProtoInfo& info() const;
  inline ::ProtoBuf::CampProtoInfo* mutable_info();
  inline ::ProtoBuf::CampProtoInfo* release_info();
  inline void set_allocated_info(::ProtoBuf::CampProtoInfo* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_JoinRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CampProtoInfo* info_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_JoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class Camp_ChangeReq : public ::google::protobuf::Message {
 public:
  Camp_ChangeReq();
  virtual ~Camp_ChangeReq();

  Camp_ChangeReq(const Camp_ChangeReq& from);

  inline Camp_ChangeReq& operator=(const Camp_ChangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_ChangeReq& default_instance();

  void Swap(Camp_ChangeReq* other);

  // implements Message ----------------------------------------------

  Camp_ChangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_ChangeReq& from);
  void MergeFrom(const Camp_ChangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 camp_id = 1;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 1;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_ChangeReq)
 private:
  inline void set_has_camp_id();
  inline void clear_has_camp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 camp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_ChangeReq* default_instance_;
};
// -------------------------------------------------------------------

class Camp_ChangeRsp : public ::google::protobuf::Message {
 public:
  Camp_ChangeRsp();
  virtual ~Camp_ChangeRsp();

  Camp_ChangeRsp(const Camp_ChangeRsp& from);

  inline Camp_ChangeRsp& operator=(const Camp_ChangeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_ChangeRsp& default_instance();

  void Swap(Camp_ChangeRsp* other);

  // implements Message ----------------------------------------------

  Camp_ChangeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_ChangeRsp& from);
  void MergeFrom(const Camp_ChangeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional .ProtoBuf.CampProtoInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ProtoBuf::CampProtoInfo& info() const;
  inline ::ProtoBuf::CampProtoInfo* mutable_info();
  inline ::ProtoBuf::CampProtoInfo* release_info();
  inline void set_allocated_info(::ProtoBuf::CampProtoInfo* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_ChangeRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CampProtoInfo* info_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_ChangeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Camp_CampInfoReq : public ::google::protobuf::Message {
 public:
  Camp_CampInfoReq();
  virtual ~Camp_CampInfoReq();

  Camp_CampInfoReq(const Camp_CampInfoReq& from);

  inline Camp_CampInfoReq& operator=(const Camp_CampInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_CampInfoReq& default_instance();

  void Swap(Camp_CampInfoReq* other);

  // implements Message ----------------------------------------------

  Camp_CampInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_CampInfoReq& from);
  void MergeFrom(const Camp_CampInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_CampInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_CampInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Camp_CampInfoRsp : public ::google::protobuf::Message {
 public:
  Camp_CampInfoRsp();
  virtual ~Camp_CampInfoRsp();

  Camp_CampInfoRsp(const Camp_CampInfoRsp& from);

  inline Camp_CampInfoRsp& operator=(const Camp_CampInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_CampInfoRsp& default_instance();

  void Swap(Camp_CampInfoRsp* other);

  // implements Message ----------------------------------------------

  Camp_CampInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_CampInfoRsp& from);
  void MergeFrom(const Camp_CampInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional .ProtoBuf.CampProtoInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ProtoBuf::CampProtoInfo& info() const;
  inline ::ProtoBuf::CampProtoInfo* mutable_info();
  inline ::ProtoBuf::CampProtoInfo* release_info();
  inline void set_allocated_info(::ProtoBuf::CampProtoInfo* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_CampInfoRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CampProtoInfo* info_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_CampInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Camp_RankInfoReq : public ::google::protobuf::Message {
 public:
  Camp_RankInfoReq();
  virtual ~Camp_RankInfoReq();

  Camp_RankInfoReq(const Camp_RankInfoReq& from);

  inline Camp_RankInfoReq& operator=(const Camp_RankInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_RankInfoReq& default_instance();

  void Swap(Camp_RankInfoReq* other);

  // implements Message ----------------------------------------------

  Camp_RankInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_RankInfoReq& from);
  void MergeFrom(const Camp_RankInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_RankInfoReq)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_RankInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Camp_RankInfoRsp : public ::google::protobuf::Message {
 public:
  Camp_RankInfoRsp();
  virtual ~Camp_RankInfoRsp();

  Camp_RankInfoRsp(const Camp_RankInfoRsp& from);

  inline Camp_RankInfoRsp& operator=(const Camp_RankInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_RankInfoRsp& default_instance();

  void Swap(Camp_RankInfoRsp* other);

  // implements Message ----------------------------------------------

  Camp_RankInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_RankInfoRsp& from);
  void MergeFrom(const Camp_RankInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional int32 rank_type = 2;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);

  // repeated .ProtoBuf.CampProtoRankInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ProtoBuf::CampProtoRankInfo& info(int index) const;
  inline ::ProtoBuf::CampProtoRankInfo* mutable_info(int index);
  inline ::ProtoBuf::CampProtoRankInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CampProtoRankInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CampProtoRankInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_RankInfoRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 rank_type_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CampProtoRankInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_RankInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Camp_HonorInfoReq : public ::google::protobuf::Message {
 public:
  Camp_HonorInfoReq();
  virtual ~Camp_HonorInfoReq();

  Camp_HonorInfoReq(const Camp_HonorInfoReq& from);

  inline Camp_HonorInfoReq& operator=(const Camp_HonorInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_HonorInfoReq& default_instance();

  void Swap(Camp_HonorInfoReq* other);

  // implements Message ----------------------------------------------

  Camp_HonorInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_HonorInfoReq& from);
  void MergeFrom(const Camp_HonorInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_HonorInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_HonorInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Camp_HonorInfoRsp : public ::google::protobuf::Message {
 public:
  Camp_HonorInfoRsp();
  virtual ~Camp_HonorInfoRsp();

  Camp_HonorInfoRsp(const Camp_HonorInfoRsp& from);

  inline Camp_HonorInfoRsp& operator=(const Camp_HonorInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_HonorInfoRsp& default_instance();

  void Swap(Camp_HonorInfoRsp* other);

  // implements Message ----------------------------------------------

  Camp_HonorInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_HonorInfoRsp& from);
  void MergeFrom(const Camp_HonorInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional .ProtoBuf.CampProtoHonorInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ProtoBuf::CampProtoHonorInfo& info() const;
  inline ::ProtoBuf::CampProtoHonorInfo* mutable_info();
  inline ::ProtoBuf::CampProtoHonorInfo* release_info();
  inline void set_allocated_info(::ProtoBuf::CampProtoHonorInfo* info);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_HonorInfoRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoBuf::CampProtoHonorInfo* info_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_HonorInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Camp_PublishNoticeReq : public ::google::protobuf::Message {
 public:
  Camp_PublishNoticeReq();
  virtual ~Camp_PublishNoticeReq();

  Camp_PublishNoticeReq(const Camp_PublishNoticeReq& from);

  inline Camp_PublishNoticeReq& operator=(const Camp_PublishNoticeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_PublishNoticeReq& default_instance();

  void Swap(Camp_PublishNoticeReq* other);

  // implements Message ----------------------------------------------

  Camp_PublishNoticeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_PublishNoticeReq& from);
  void MergeFrom(const Camp_PublishNoticeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string notice = 1;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_PublishNoticeReq)
 private:
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_PublishNoticeReq* default_instance_;
};
// -------------------------------------------------------------------

class Camp_PublishNoticeRsp : public ::google::protobuf::Message {
 public:
  Camp_PublishNoticeRsp();
  virtual ~Camp_PublishNoticeRsp();

  Camp_PublishNoticeRsp(const Camp_PublishNoticeRsp& from);

  inline Camp_PublishNoticeRsp& operator=(const Camp_PublishNoticeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_PublishNoticeRsp& default_instance();

  void Swap(Camp_PublishNoticeRsp* other);

  // implements Message ----------------------------------------------

  Camp_PublishNoticeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_PublishNoticeRsp& from);
  void MergeFrom(const Camp_PublishNoticeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_PublishNoticeRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_PublishNoticeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Camp_BroadNoticeRsp : public ::google::protobuf::Message {
 public:
  Camp_BroadNoticeRsp();
  virtual ~Camp_BroadNoticeRsp();

  Camp_BroadNoticeRsp(const Camp_BroadNoticeRsp& from);

  inline Camp_BroadNoticeRsp& operator=(const Camp_BroadNoticeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camp_BroadNoticeRsp& default_instance();

  void Swap(Camp_BroadNoticeRsp* other);

  // implements Message ----------------------------------------------

  Camp_BroadNoticeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camp_BroadNoticeRsp& from);
  void MergeFrom(const Camp_BroadNoticeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string notice = 1;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:ProtoBuf.Camp_BroadNoticeRsp)
 private:
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static Camp_BroadNoticeRsp* default_instance_;
};
// -------------------------------------------------------------------

class CenterToLogic_CampCharInfo : public ::google::protobuf::Message {
 public:
  CenterToLogic_CampCharInfo();
  virtual ~CenterToLogic_CampCharInfo();

  CenterToLogic_CampCharInfo(const CenterToLogic_CampCharInfo& from);

  inline CenterToLogic_CampCharInfo& operator=(const CenterToLogic_CampCharInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterToLogic_CampCharInfo& default_instance();

  void Swap(CenterToLogic_CampCharInfo* other);

  // implements Message ----------------------------------------------

  CenterToLogic_CampCharInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterToLogic_CampCharInfo& from);
  void MergeFrom(const CenterToLogic_CampCharInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // required int32 camp_id = 2;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 2;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // required int32 official = 3;
  inline bool has_official() const;
  inline void clear_official();
  static const int kOfficialFieldNumber = 3;
  inline ::google::protobuf::int32 official() const;
  inline void set_official(::google::protobuf::int32 value);

  // required int32 knight = 4;
  inline bool has_knight() const;
  inline void clear_knight();
  static const int kKnightFieldNumber = 4;
  inline ::google::protobuf::int32 knight() const;
  inline void set_knight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CenterToLogic_CampCharInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_camp_id();
  inline void clear_has_camp_id();
  inline void set_has_official();
  inline void clear_has_official();
  inline void set_has_knight();
  inline void clear_has_knight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::int32 camp_id_;
  ::google::protobuf::int32 official_;
  ::google::protobuf::int32 knight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static CenterToLogic_CampCharInfo* default_instance_;
};
// -------------------------------------------------------------------

class CenterToLogic_CheckNoticeCostReq : public ::google::protobuf::Message {
 public:
  CenterToLogic_CheckNoticeCostReq();
  virtual ~CenterToLogic_CheckNoticeCostReq();

  CenterToLogic_CheckNoticeCostReq(const CenterToLogic_CheckNoticeCostReq& from);

  inline CenterToLogic_CheckNoticeCostReq& operator=(const CenterToLogic_CheckNoticeCostReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterToLogic_CheckNoticeCostReq& default_instance();

  void Swap(CenterToLogic_CheckNoticeCostReq* other);

  // implements Message ----------------------------------------------

  CenterToLogic_CheckNoticeCostReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterToLogic_CheckNoticeCostReq& from);
  void MergeFrom(const CenterToLogic_CheckNoticeCostReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 char_id = 1;
  inline bool has_char_id() const;
  inline void clear_char_id();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 char_id() const;
  inline void set_char_id(::google::protobuf::uint32 value);

  // required int32 camp_id = 2;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 2;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // required uint32 diamond = 3;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 3;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.CenterToLogic_CheckNoticeCostReq)
 private:
  inline void set_has_char_id();
  inline void clear_has_char_id();
  inline void set_has_camp_id();
  inline void clear_has_camp_id();
  inline void set_has_diamond();
  inline void clear_has_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 char_id_;
  ::google::protobuf::int32 camp_id_;
  ::google::protobuf::uint32 diamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static CenterToLogic_CheckNoticeCostReq* default_instance_;
};
// -------------------------------------------------------------------

class LogicToCenter_CheckNoticeCostRsp : public ::google::protobuf::Message {
 public:
  LogicToCenter_CheckNoticeCostRsp();
  virtual ~LogicToCenter_CheckNoticeCostRsp();

  LogicToCenter_CheckNoticeCostRsp(const LogicToCenter_CheckNoticeCostRsp& from);

  inline LogicToCenter_CheckNoticeCostRsp& operator=(const LogicToCenter_CheckNoticeCostRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicToCenter_CheckNoticeCostRsp& default_instance();

  void Swap(LogicToCenter_CheckNoticeCostRsp* other);

  // implements Message ----------------------------------------------

  LogicToCenter_CheckNoticeCostRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicToCenter_CheckNoticeCostRsp& from);
  void MergeFrom(const LogicToCenter_CheckNoticeCostRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // required uint32 char_id = 2;
  inline bool has_char_id() const;
  inline void clear_char_id();
  static const int kCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 char_id() const;
  inline void set_char_id(::google::protobuf::uint32 value);

  // required int32 camp_id = 3;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 3;
  inline ::google::protobuf::int32 camp_id() const;
  inline void set_camp_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoBuf.LogicToCenter_CheckNoticeCostRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_char_id();
  inline void clear_has_char_id();
  inline void set_has_camp_id();
  inline void clear_has_camp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 char_id_;
  ::google::protobuf::int32 camp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_AssignDesc_ProtoBuffer_2fCamp_2eproto();
  friend void protobuf_ShutdownFile_ProtoBuffer_2fCamp_2eproto();

  void InitAsDefaultInstance();
  static LogicToCenter_CheckNoticeCostRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// CampProtoInfo

// optional int32 camp_id = 1;
inline bool CampProtoInfo::has_camp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampProtoInfo::set_has_camp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampProtoInfo::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampProtoInfo::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 CampProtoInfo::camp_id() const {
  return camp_id_;
}
inline void CampProtoInfo::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// optional string leader_name = 2;
inline bool CampProtoInfo::has_leader_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampProtoInfo::set_has_leader_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampProtoInfo::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampProtoInfo::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& CampProtoInfo::leader_name() const {
  return *leader_name_;
}
inline void CampProtoInfo::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void CampProtoInfo::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void CampProtoInfo::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampProtoInfo::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* CampProtoInfo::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampProtoInfo::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string notice = 3;
inline bool CampProtoInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampProtoInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampProtoInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampProtoInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& CampProtoInfo::notice() const {
  return *notice_;
}
inline void CampProtoInfo::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CampProtoInfo::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CampProtoInfo::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampProtoInfo::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* CampProtoInfo::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampProtoInfo::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 notice_cd = 4;
inline bool CampProtoInfo::has_notice_cd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CampProtoInfo::set_has_notice_cd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CampProtoInfo::clear_has_notice_cd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CampProtoInfo::clear_notice_cd() {
  notice_cd_ = GOOGLE_ULONGLONG(0);
  clear_has_notice_cd();
}
inline ::google::protobuf::uint64 CampProtoInfo::notice_cd() const {
  return notice_cd_;
}
inline void CampProtoInfo::set_notice_cd(::google::protobuf::uint64 value) {
  set_has_notice_cd();
  notice_cd_ = value;
}

// -------------------------------------------------------------------

// CampProtoRankInfo

// optional string name = 1;
inline bool CampProtoRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampProtoRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampProtoRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampProtoRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CampProtoRankInfo::name() const {
  return *name_;
}
inline void CampProtoRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CampProtoRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CampProtoRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CampProtoRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CampProtoRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CampProtoRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 2;
inline bool CampProtoRankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampProtoRankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampProtoRankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampProtoRankInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CampProtoRankInfo::level() const {
  return level_;
}
inline void CampProtoRankInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 fight = 3;
inline bool CampProtoRankInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampProtoRankInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampProtoRankInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampProtoRankInfo::clear_fight() {
  fight_ = 0u;
  clear_has_fight();
}
inline ::google::protobuf::uint32 CampProtoRankInfo::fight() const {
  return fight_;
}
inline void CampProtoRankInfo::set_fight(::google::protobuf::uint32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 official = 4;
inline bool CampProtoRankInfo::has_official() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CampProtoRankInfo::set_has_official() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CampProtoRankInfo::clear_has_official() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CampProtoRankInfo::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 CampProtoRankInfo::official() const {
  return official_;
}
inline void CampProtoRankInfo::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
}

// optional int32 knight = 5;
inline bool CampProtoRankInfo::has_knight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CampProtoRankInfo::set_has_knight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CampProtoRankInfo::clear_has_knight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CampProtoRankInfo::clear_knight() {
  knight_ = 0;
  clear_has_knight();
}
inline ::google::protobuf::int32 CampProtoRankInfo::knight() const {
  return knight_;
}
inline void CampProtoRankInfo::set_knight(::google::protobuf::int32 value) {
  set_has_knight();
  knight_ = value;
}

// -------------------------------------------------------------------

// CampProtoHonorInfo

// optional int32 official = 1;
inline bool CampProtoHonorInfo::has_official() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CampProtoHonorInfo::set_has_official() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CampProtoHonorInfo::clear_has_official() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CampProtoHonorInfo::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 CampProtoHonorInfo::official() const {
  return official_;
}
inline void CampProtoHonorInfo::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
}

// optional int32 knight = 2;
inline bool CampProtoHonorInfo::has_knight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CampProtoHonorInfo::set_has_knight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CampProtoHonorInfo::clear_has_knight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CampProtoHonorInfo::clear_knight() {
  knight_ = 0;
  clear_has_knight();
}
inline ::google::protobuf::int32 CampProtoHonorInfo::knight() const {
  return knight_;
}
inline void CampProtoHonorInfo::set_knight(::google::protobuf::int32 value) {
  set_has_knight();
  knight_ = value;
}

// optional uint32 contribute = 3;
inline bool CampProtoHonorInfo::has_contribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CampProtoHonorInfo::set_has_contribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CampProtoHonorInfo::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CampProtoHonorInfo::clear_contribute() {
  contribute_ = 0u;
  clear_has_contribute();
}
inline ::google::protobuf::uint32 CampProtoHonorInfo::contribute() const {
  return contribute_;
}
inline void CampProtoHonorInfo::set_contribute(::google::protobuf::uint32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional uint32 total_contribute = 4;
inline bool CampProtoHonorInfo::has_total_contribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CampProtoHonorInfo::set_has_total_contribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CampProtoHonorInfo::clear_has_total_contribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CampProtoHonorInfo::clear_total_contribute() {
  total_contribute_ = 0u;
  clear_has_total_contribute();
}
inline ::google::protobuf::uint32 CampProtoHonorInfo::total_contribute() const {
  return total_contribute_;
}
inline void CampProtoHonorInfo::set_total_contribute(::google::protobuf::uint32 value) {
  set_has_total_contribute();
  total_contribute_ = value;
}

// optional uint32 prestige = 5;
inline bool CampProtoHonorInfo::has_prestige() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CampProtoHonorInfo::set_has_prestige() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CampProtoHonorInfo::clear_has_prestige() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CampProtoHonorInfo::clear_prestige() {
  prestige_ = 0u;
  clear_has_prestige();
}
inline ::google::protobuf::uint32 CampProtoHonorInfo::prestige() const {
  return prestige_;
}
inline void CampProtoHonorInfo::set_prestige(::google::protobuf::uint32 value) {
  set_has_prestige();
  prestige_ = value;
}

// optional uint32 kill_enemy_camp = 6;
inline bool CampProtoHonorInfo::has_kill_enemy_camp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CampProtoHonorInfo::set_has_kill_enemy_camp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CampProtoHonorInfo::clear_has_kill_enemy_camp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CampProtoHonorInfo::clear_kill_enemy_camp() {
  kill_enemy_camp_ = 0u;
  clear_has_kill_enemy_camp();
}
inline ::google::protobuf::uint32 CampProtoHonorInfo::kill_enemy_camp() const {
  return kill_enemy_camp_;
}
inline void CampProtoHonorInfo::set_kill_enemy_camp(::google::protobuf::uint32 value) {
  set_has_kill_enemy_camp();
  kill_enemy_camp_ = value;
}

// -------------------------------------------------------------------

// Camp_JoinReq

// required int32 type = 1;
inline bool Camp_JoinReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_JoinReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_JoinReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_JoinReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Camp_JoinReq::type() const {
  return type_;
}
inline void Camp_JoinReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Camp_JoinRsp

// required int32 retcode = 1;
inline bool Camp_JoinRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_JoinRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_JoinRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_JoinRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Camp_JoinRsp::retcode() const {
  return retcode_;
}
inline void Camp_JoinRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional .ProtoBuf.CampProtoInfo info = 2;
inline bool Camp_JoinRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camp_JoinRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camp_JoinRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camp_JoinRsp::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::CampProtoInfo::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::CampProtoInfo& Camp_JoinRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::CampProtoInfo* Camp_JoinRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::CampProtoInfo;
  return info_;
}
inline ::ProtoBuf::CampProtoInfo* Camp_JoinRsp::release_info() {
  clear_has_info();
  ::ProtoBuf::CampProtoInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Camp_JoinRsp::set_allocated_info(::ProtoBuf::CampProtoInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Camp_ChangeReq

// required int32 camp_id = 1;
inline bool Camp_ChangeReq::has_camp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_ChangeReq::set_has_camp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_ChangeReq::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_ChangeReq::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 Camp_ChangeReq::camp_id() const {
  return camp_id_;
}
inline void Camp_ChangeReq::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// -------------------------------------------------------------------

// Camp_ChangeRsp

// required int32 retcode = 1;
inline bool Camp_ChangeRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_ChangeRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_ChangeRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_ChangeRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Camp_ChangeRsp::retcode() const {
  return retcode_;
}
inline void Camp_ChangeRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional .ProtoBuf.CampProtoInfo info = 2;
inline bool Camp_ChangeRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camp_ChangeRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camp_ChangeRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camp_ChangeRsp::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::CampProtoInfo::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::CampProtoInfo& Camp_ChangeRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::CampProtoInfo* Camp_ChangeRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::CampProtoInfo;
  return info_;
}
inline ::ProtoBuf::CampProtoInfo* Camp_ChangeRsp::release_info() {
  clear_has_info();
  ::ProtoBuf::CampProtoInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Camp_ChangeRsp::set_allocated_info(::ProtoBuf::CampProtoInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Camp_CampInfoReq

// -------------------------------------------------------------------

// Camp_CampInfoRsp

// required int32 retcode = 1;
inline bool Camp_CampInfoRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_CampInfoRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_CampInfoRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_CampInfoRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Camp_CampInfoRsp::retcode() const {
  return retcode_;
}
inline void Camp_CampInfoRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional .ProtoBuf.CampProtoInfo info = 2;
inline bool Camp_CampInfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camp_CampInfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camp_CampInfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camp_CampInfoRsp::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::CampProtoInfo::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::CampProtoInfo& Camp_CampInfoRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::CampProtoInfo* Camp_CampInfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::CampProtoInfo;
  return info_;
}
inline ::ProtoBuf::CampProtoInfo* Camp_CampInfoRsp::release_info() {
  clear_has_info();
  ::ProtoBuf::CampProtoInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Camp_CampInfoRsp::set_allocated_info(::ProtoBuf::CampProtoInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Camp_RankInfoReq

// required int32 rank_type = 1;
inline bool Camp_RankInfoReq::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_RankInfoReq::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_RankInfoReq::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_RankInfoReq::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 Camp_RankInfoReq::rank_type() const {
  return rank_type_;
}
inline void Camp_RankInfoReq::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// -------------------------------------------------------------------

// Camp_RankInfoRsp

// required int32 retcode = 1;
inline bool Camp_RankInfoRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_RankInfoRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_RankInfoRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_RankInfoRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Camp_RankInfoRsp::retcode() const {
  return retcode_;
}
inline void Camp_RankInfoRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional int32 rank_type = 2;
inline bool Camp_RankInfoRsp::has_rank_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camp_RankInfoRsp::set_has_rank_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camp_RankInfoRsp::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camp_RankInfoRsp::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 Camp_RankInfoRsp::rank_type() const {
  return rank_type_;
}
inline void Camp_RankInfoRsp::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// repeated .ProtoBuf.CampProtoRankInfo info = 3;
inline int Camp_RankInfoRsp::info_size() const {
  return info_.size();
}
inline void Camp_RankInfoRsp::clear_info() {
  info_.Clear();
}
inline const ::ProtoBuf::CampProtoRankInfo& Camp_RankInfoRsp::info(int index) const {
  return info_.Get(index);
}
inline ::ProtoBuf::CampProtoRankInfo* Camp_RankInfoRsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ProtoBuf::CampProtoRankInfo* Camp_RankInfoRsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CampProtoRankInfo >&
Camp_RankInfoRsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBuf::CampProtoRankInfo >*
Camp_RankInfoRsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// Camp_HonorInfoReq

// -------------------------------------------------------------------

// Camp_HonorInfoRsp

// required int32 retcode = 1;
inline bool Camp_HonorInfoRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_HonorInfoRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_HonorInfoRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_HonorInfoRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Camp_HonorInfoRsp::retcode() const {
  return retcode_;
}
inline void Camp_HonorInfoRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional .ProtoBuf.CampProtoHonorInfo info = 2;
inline bool Camp_HonorInfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camp_HonorInfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camp_HonorInfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camp_HonorInfoRsp::clear_info() {
  if (info_ != NULL) info_->::ProtoBuf::CampProtoHonorInfo::Clear();
  clear_has_info();
}
inline const ::ProtoBuf::CampProtoHonorInfo& Camp_HonorInfoRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBuf::CampProtoHonorInfo* Camp_HonorInfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBuf::CampProtoHonorInfo;
  return info_;
}
inline ::ProtoBuf::CampProtoHonorInfo* Camp_HonorInfoRsp::release_info() {
  clear_has_info();
  ::ProtoBuf::CampProtoHonorInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Camp_HonorInfoRsp::set_allocated_info(::ProtoBuf::CampProtoHonorInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Camp_PublishNoticeReq

// required string notice = 1;
inline bool Camp_PublishNoticeReq::has_notice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_PublishNoticeReq::set_has_notice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_PublishNoticeReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_PublishNoticeReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Camp_PublishNoticeReq::notice() const {
  return *notice_;
}
inline void Camp_PublishNoticeReq::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Camp_PublishNoticeReq::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Camp_PublishNoticeReq::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Camp_PublishNoticeReq::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Camp_PublishNoticeReq::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Camp_PublishNoticeReq::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Camp_PublishNoticeRsp

// required int32 retcode = 1;
inline bool Camp_PublishNoticeRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_PublishNoticeRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_PublishNoticeRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_PublishNoticeRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Camp_PublishNoticeRsp::retcode() const {
  return retcode_;
}
inline void Camp_PublishNoticeRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// -------------------------------------------------------------------

// Camp_BroadNoticeRsp

// required string notice = 1;
inline bool Camp_BroadNoticeRsp::has_notice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camp_BroadNoticeRsp::set_has_notice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camp_BroadNoticeRsp::clear_has_notice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camp_BroadNoticeRsp::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Camp_BroadNoticeRsp::notice() const {
  return *notice_;
}
inline void Camp_BroadNoticeRsp::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Camp_BroadNoticeRsp::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Camp_BroadNoticeRsp::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Camp_BroadNoticeRsp::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Camp_BroadNoticeRsp::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Camp_BroadNoticeRsp::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CenterToLogic_CampCharInfo

// required uint32 charid = 1;
inline bool CenterToLogic_CampCharInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CenterToLogic_CampCharInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CenterToLogic_CampCharInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CenterToLogic_CampCharInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CenterToLogic_CampCharInfo::charid() const {
  return charid_;
}
inline void CenterToLogic_CampCharInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 camp_id = 2;
inline bool CenterToLogic_CampCharInfo::has_camp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CenterToLogic_CampCharInfo::set_has_camp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CenterToLogic_CampCharInfo::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CenterToLogic_CampCharInfo::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 CenterToLogic_CampCharInfo::camp_id() const {
  return camp_id_;
}
inline void CenterToLogic_CampCharInfo::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// required int32 official = 3;
inline bool CenterToLogic_CampCharInfo::has_official() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CenterToLogic_CampCharInfo::set_has_official() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CenterToLogic_CampCharInfo::clear_has_official() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CenterToLogic_CampCharInfo::clear_official() {
  official_ = 0;
  clear_has_official();
}
inline ::google::protobuf::int32 CenterToLogic_CampCharInfo::official() const {
  return official_;
}
inline void CenterToLogic_CampCharInfo::set_official(::google::protobuf::int32 value) {
  set_has_official();
  official_ = value;
}

// required int32 knight = 4;
inline bool CenterToLogic_CampCharInfo::has_knight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CenterToLogic_CampCharInfo::set_has_knight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CenterToLogic_CampCharInfo::clear_has_knight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CenterToLogic_CampCharInfo::clear_knight() {
  knight_ = 0;
  clear_has_knight();
}
inline ::google::protobuf::int32 CenterToLogic_CampCharInfo::knight() const {
  return knight_;
}
inline void CenterToLogic_CampCharInfo::set_knight(::google::protobuf::int32 value) {
  set_has_knight();
  knight_ = value;
}

// -------------------------------------------------------------------

// CenterToLogic_CheckNoticeCostReq

// required uint32 char_id = 1;
inline bool CenterToLogic_CheckNoticeCostReq::has_char_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CenterToLogic_CheckNoticeCostReq::set_has_char_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CenterToLogic_CheckNoticeCostReq::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CenterToLogic_CheckNoticeCostReq::clear_char_id() {
  char_id_ = 0u;
  clear_has_char_id();
}
inline ::google::protobuf::uint32 CenterToLogic_CheckNoticeCostReq::char_id() const {
  return char_id_;
}
inline void CenterToLogic_CheckNoticeCostReq::set_char_id(::google::protobuf::uint32 value) {
  set_has_char_id();
  char_id_ = value;
}

// required int32 camp_id = 2;
inline bool CenterToLogic_CheckNoticeCostReq::has_camp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CenterToLogic_CheckNoticeCostReq::set_has_camp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CenterToLogic_CheckNoticeCostReq::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CenterToLogic_CheckNoticeCostReq::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 CenterToLogic_CheckNoticeCostReq::camp_id() const {
  return camp_id_;
}
inline void CenterToLogic_CheckNoticeCostReq::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// required uint32 diamond = 3;
inline bool CenterToLogic_CheckNoticeCostReq::has_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CenterToLogic_CheckNoticeCostReq::set_has_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CenterToLogic_CheckNoticeCostReq::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CenterToLogic_CheckNoticeCostReq::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 CenterToLogic_CheckNoticeCostReq::diamond() const {
  return diamond_;
}
inline void CenterToLogic_CheckNoticeCostReq::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// -------------------------------------------------------------------

// LogicToCenter_CheckNoticeCostRsp

// required int32 retcode = 1;
inline bool LogicToCenter_CheckNoticeCostRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogicToCenter_CheckNoticeCostRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogicToCenter_CheckNoticeCostRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogicToCenter_CheckNoticeCostRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 LogicToCenter_CheckNoticeCostRsp::retcode() const {
  return retcode_;
}
inline void LogicToCenter_CheckNoticeCostRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// required uint32 char_id = 2;
inline bool LogicToCenter_CheckNoticeCostRsp::has_char_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogicToCenter_CheckNoticeCostRsp::set_has_char_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogicToCenter_CheckNoticeCostRsp::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogicToCenter_CheckNoticeCostRsp::clear_char_id() {
  char_id_ = 0u;
  clear_has_char_id();
}
inline ::google::protobuf::uint32 LogicToCenter_CheckNoticeCostRsp::char_id() const {
  return char_id_;
}
inline void LogicToCenter_CheckNoticeCostRsp::set_char_id(::google::protobuf::uint32 value) {
  set_has_char_id();
  char_id_ = value;
}

// required int32 camp_id = 3;
inline bool LogicToCenter_CheckNoticeCostRsp::has_camp_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogicToCenter_CheckNoticeCostRsp::set_has_camp_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogicToCenter_CheckNoticeCostRsp::clear_has_camp_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogicToCenter_CheckNoticeCostRsp::clear_camp_id() {
  camp_id_ = 0;
  clear_has_camp_id();
}
inline ::google::protobuf::int32 LogicToCenter_CheckNoticeCostRsp::camp_id() const {
  return camp_id_;
}
inline void LogicToCenter_CheckNoticeCostRsp::set_camp_id(::google::protobuf::int32 value) {
  set_has_camp_id();
  camp_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBuffer_2fCamp_2eproto__INCLUDED
